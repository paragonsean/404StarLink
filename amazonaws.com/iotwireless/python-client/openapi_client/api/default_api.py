# coding: utf-8

"""
    AWS IoT Wireless

    <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>

    The version of the OpenAPI document: 2020-11-22
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.associate_aws_account_with_partner_account_request import AssociateAwsAccountWithPartnerAccountRequest
from openapi_client.models.associate_aws_account_with_partner_account_response import AssociateAwsAccountWithPartnerAccountResponse
from openapi_client.models.associate_multicast_group_with_fuota_task_request import AssociateMulticastGroupWithFuotaTaskRequest
from openapi_client.models.associate_wireless_device_with_fuota_task_request import AssociateWirelessDeviceWithFuotaTaskRequest
from openapi_client.models.associate_wireless_device_with_thing_request import AssociateWirelessDeviceWithThingRequest
from openapi_client.models.associate_wireless_gateway_with_certificate_request import AssociateWirelessGatewayWithCertificateRequest
from openapi_client.models.associate_wireless_gateway_with_certificate_response import AssociateWirelessGatewayWithCertificateResponse
from openapi_client.models.associate_wireless_gateway_with_thing_request import AssociateWirelessGatewayWithThingRequest
from openapi_client.models.create_destination_request import CreateDestinationRequest
from openapi_client.models.create_destination_response import CreateDestinationResponse
from openapi_client.models.create_device_profile_request import CreateDeviceProfileRequest
from openapi_client.models.create_device_profile_response import CreateDeviceProfileResponse
from openapi_client.models.create_fuota_task_request import CreateFuotaTaskRequest
from openapi_client.models.create_fuota_task_response import CreateFuotaTaskResponse
from openapi_client.models.create_multicast_group_request import CreateMulticastGroupRequest
from openapi_client.models.create_multicast_group_response import CreateMulticastGroupResponse
from openapi_client.models.create_network_analyzer_configuration_request import CreateNetworkAnalyzerConfigurationRequest
from openapi_client.models.create_network_analyzer_configuration_response import CreateNetworkAnalyzerConfigurationResponse
from openapi_client.models.create_service_profile_request import CreateServiceProfileRequest
from openapi_client.models.create_service_profile_response import CreateServiceProfileResponse
from openapi_client.models.create_wireless_device_request import CreateWirelessDeviceRequest
from openapi_client.models.create_wireless_device_response import CreateWirelessDeviceResponse
from openapi_client.models.create_wireless_gateway_request import CreateWirelessGatewayRequest
from openapi_client.models.create_wireless_gateway_response import CreateWirelessGatewayResponse
from openapi_client.models.create_wireless_gateway_task_definition_request import CreateWirelessGatewayTaskDefinitionRequest
from openapi_client.models.create_wireless_gateway_task_definition_response import CreateWirelessGatewayTaskDefinitionResponse
from openapi_client.models.create_wireless_gateway_task_request import CreateWirelessGatewayTaskRequest
from openapi_client.models.create_wireless_gateway_task_response import CreateWirelessGatewayTaskResponse
from openapi_client.models.get_destination_response import GetDestinationResponse
from openapi_client.models.get_device_profile_response import GetDeviceProfileResponse
from openapi_client.models.get_event_configuration_by_resource_types_response import GetEventConfigurationByResourceTypesResponse
from openapi_client.models.get_fuota_task_response import GetFuotaTaskResponse
from openapi_client.models.get_log_levels_by_resource_types_response import GetLogLevelsByResourceTypesResponse
from openapi_client.models.get_multicast_group_response import GetMulticastGroupResponse
from openapi_client.models.get_multicast_group_session_response import GetMulticastGroupSessionResponse
from openapi_client.models.get_network_analyzer_configuration_response import GetNetworkAnalyzerConfigurationResponse
from openapi_client.models.get_partner_account_response import GetPartnerAccountResponse
from openapi_client.models.get_position_configuration_response import GetPositionConfigurationResponse
from openapi_client.models.get_position_estimate_request import GetPositionEstimateRequest
from openapi_client.models.get_position_estimate_response import GetPositionEstimateResponse
from openapi_client.models.get_position_response import GetPositionResponse
from openapi_client.models.get_resource_event_configuration_response import GetResourceEventConfigurationResponse
from openapi_client.models.get_resource_log_level_response import GetResourceLogLevelResponse
from openapi_client.models.get_resource_position_response import GetResourcePositionResponse
from openapi_client.models.get_service_endpoint_response import GetServiceEndpointResponse
from openapi_client.models.get_service_profile_response import GetServiceProfileResponse
from openapi_client.models.get_wireless_device_import_task_response import GetWirelessDeviceImportTaskResponse
from openapi_client.models.get_wireless_device_response import GetWirelessDeviceResponse
from openapi_client.models.get_wireless_device_statistics_response import GetWirelessDeviceStatisticsResponse
from openapi_client.models.get_wireless_gateway_certificate_response import GetWirelessGatewayCertificateResponse
from openapi_client.models.get_wireless_gateway_firmware_information_response import GetWirelessGatewayFirmwareInformationResponse
from openapi_client.models.get_wireless_gateway_response import GetWirelessGatewayResponse
from openapi_client.models.get_wireless_gateway_statistics_response import GetWirelessGatewayStatisticsResponse
from openapi_client.models.get_wireless_gateway_task_definition_response import GetWirelessGatewayTaskDefinitionResponse
from openapi_client.models.get_wireless_gateway_task_response import GetWirelessGatewayTaskResponse
from openapi_client.models.list_destinations_response import ListDestinationsResponse
from openapi_client.models.list_device_profiles_response import ListDeviceProfilesResponse
from openapi_client.models.list_devices_for_wireless_device_import_task_response import ListDevicesForWirelessDeviceImportTaskResponse
from openapi_client.models.list_event_configurations_response import ListEventConfigurationsResponse
from openapi_client.models.list_fuota_tasks_response import ListFuotaTasksResponse
from openapi_client.models.list_multicast_groups_by_fuota_task_response import ListMulticastGroupsByFuotaTaskResponse
from openapi_client.models.list_multicast_groups_response import ListMulticastGroupsResponse
from openapi_client.models.list_network_analyzer_configurations_response import ListNetworkAnalyzerConfigurationsResponse
from openapi_client.models.list_partner_accounts_response import ListPartnerAccountsResponse
from openapi_client.models.list_position_configurations_response import ListPositionConfigurationsResponse
from openapi_client.models.list_queued_messages_response import ListQueuedMessagesResponse
from openapi_client.models.list_service_profiles_response import ListServiceProfilesResponse
from openapi_client.models.list_tags_for_resource_response import ListTagsForResourceResponse
from openapi_client.models.list_wireless_device_import_tasks_response import ListWirelessDeviceImportTasksResponse
from openapi_client.models.list_wireless_devices_response import ListWirelessDevicesResponse
from openapi_client.models.list_wireless_gateway_task_definitions_response import ListWirelessGatewayTaskDefinitionsResponse
from openapi_client.models.list_wireless_gateways_response import ListWirelessGatewaysResponse
from openapi_client.models.put_position_configuration_request import PutPositionConfigurationRequest
from openapi_client.models.put_resource_log_level_request import PutResourceLogLevelRequest
from openapi_client.models.send_data_to_multicast_group_request import SendDataToMulticastGroupRequest
from openapi_client.models.send_data_to_multicast_group_response import SendDataToMulticastGroupResponse
from openapi_client.models.send_data_to_wireless_device_request import SendDataToWirelessDeviceRequest
from openapi_client.models.send_data_to_wireless_device_response import SendDataToWirelessDeviceResponse
from openapi_client.models.start_bulk_disassociate_wireless_device_from_multicast_group_request import StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest
from openapi_client.models.start_fuota_task_request import StartFuotaTaskRequest
from openapi_client.models.start_multicast_group_session_request import StartMulticastGroupSessionRequest
from openapi_client.models.start_single_wireless_device_import_task_request import StartSingleWirelessDeviceImportTaskRequest
from openapi_client.models.start_single_wireless_device_import_task_response import StartSingleWirelessDeviceImportTaskResponse
from openapi_client.models.start_wireless_device_import_task_request import StartWirelessDeviceImportTaskRequest
from openapi_client.models.start_wireless_device_import_task_response import StartWirelessDeviceImportTaskResponse
from openapi_client.models.tag_resource_request import TagResourceRequest
from openapi_client.models.test_wireless_device_response import TestWirelessDeviceResponse
from openapi_client.models.update_destination_request import UpdateDestinationRequest
from openapi_client.models.update_event_configuration_by_resource_types_request import UpdateEventConfigurationByResourceTypesRequest
from openapi_client.models.update_fuota_task_request import UpdateFuotaTaskRequest
from openapi_client.models.update_log_levels_by_resource_types_request import UpdateLogLevelsByResourceTypesRequest
from openapi_client.models.update_multicast_group_request import UpdateMulticastGroupRequest
from openapi_client.models.update_network_analyzer_configuration_request import UpdateNetworkAnalyzerConfigurationRequest
from openapi_client.models.update_partner_account_request import UpdatePartnerAccountRequest
from openapi_client.models.update_position_request import UpdatePositionRequest
from openapi_client.models.update_resource_event_configuration_request import UpdateResourceEventConfigurationRequest
from openapi_client.models.update_resource_position_request import UpdateResourcePositionRequest
from openapi_client.models.update_wireless_device_import_task_request import UpdateWirelessDeviceImportTaskRequest
from openapi_client.models.update_wireless_device_request import UpdateWirelessDeviceRequest
from openapi_client.models.update_wireless_gateway_request import UpdateWirelessGatewayRequest

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def associate_aws_account_with_partner_account(
        self,
        associate_aws_account_with_partner_account_request: AssociateAwsAccountWithPartnerAccountRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AssociateAwsAccountWithPartnerAccountResponse:
        """associate_aws_account_with_partner_account

        Associates a partner account with your AWS account.

        :param associate_aws_account_with_partner_account_request: (required)
        :type associate_aws_account_with_partner_account_request: AssociateAwsAccountWithPartnerAccountRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_aws_account_with_partner_account_serialize(
            associate_aws_account_with_partner_account_request=associate_aws_account_with_partner_account_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AssociateAwsAccountWithPartnerAccountResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def associate_aws_account_with_partner_account_with_http_info(
        self,
        associate_aws_account_with_partner_account_request: AssociateAwsAccountWithPartnerAccountRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AssociateAwsAccountWithPartnerAccountResponse]:
        """associate_aws_account_with_partner_account

        Associates a partner account with your AWS account.

        :param associate_aws_account_with_partner_account_request: (required)
        :type associate_aws_account_with_partner_account_request: AssociateAwsAccountWithPartnerAccountRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_aws_account_with_partner_account_serialize(
            associate_aws_account_with_partner_account_request=associate_aws_account_with_partner_account_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AssociateAwsAccountWithPartnerAccountResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def associate_aws_account_with_partner_account_without_preload_content(
        self,
        associate_aws_account_with_partner_account_request: AssociateAwsAccountWithPartnerAccountRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """associate_aws_account_with_partner_account

        Associates a partner account with your AWS account.

        :param associate_aws_account_with_partner_account_request: (required)
        :type associate_aws_account_with_partner_account_request: AssociateAwsAccountWithPartnerAccountRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_aws_account_with_partner_account_serialize(
            associate_aws_account_with_partner_account_request=associate_aws_account_with_partner_account_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AssociateAwsAccountWithPartnerAccountResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _associate_aws_account_with_partner_account_serialize(
        self,
        associate_aws_account_with_partner_account_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if associate_aws_account_with_partner_account_request is not None:
            _body_params = associate_aws_account_with_partner_account_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/partner-accounts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def associate_multicast_group_with_fuota_task(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        associate_multicast_group_with_fuota_task_request: AssociateMulticastGroupWithFuotaTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """associate_multicast_group_with_fuota_task

        Associate a multicast group with a FUOTA task.

        :param id:  (required)
        :type id: str
        :param associate_multicast_group_with_fuota_task_request: (required)
        :type associate_multicast_group_with_fuota_task_request: AssociateMulticastGroupWithFuotaTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_multicast_group_with_fuota_task_serialize(
            id=id,
            associate_multicast_group_with_fuota_task_request=associate_multicast_group_with_fuota_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def associate_multicast_group_with_fuota_task_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        associate_multicast_group_with_fuota_task_request: AssociateMulticastGroupWithFuotaTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """associate_multicast_group_with_fuota_task

        Associate a multicast group with a FUOTA task.

        :param id:  (required)
        :type id: str
        :param associate_multicast_group_with_fuota_task_request: (required)
        :type associate_multicast_group_with_fuota_task_request: AssociateMulticastGroupWithFuotaTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_multicast_group_with_fuota_task_serialize(
            id=id,
            associate_multicast_group_with_fuota_task_request=associate_multicast_group_with_fuota_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def associate_multicast_group_with_fuota_task_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        associate_multicast_group_with_fuota_task_request: AssociateMulticastGroupWithFuotaTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """associate_multicast_group_with_fuota_task

        Associate a multicast group with a FUOTA task.

        :param id:  (required)
        :type id: str
        :param associate_multicast_group_with_fuota_task_request: (required)
        :type associate_multicast_group_with_fuota_task_request: AssociateMulticastGroupWithFuotaTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_multicast_group_with_fuota_task_serialize(
            id=id,
            associate_multicast_group_with_fuota_task_request=associate_multicast_group_with_fuota_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _associate_multicast_group_with_fuota_task_serialize(
        self,
        id,
        associate_multicast_group_with_fuota_task_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if associate_multicast_group_with_fuota_task_request is not None:
            _body_params = associate_multicast_group_with_fuota_task_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/fuota-tasks/{Id}/multicast-group',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def associate_wireless_device_with_fuota_task(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        associate_wireless_device_with_fuota_task_request: AssociateWirelessDeviceWithFuotaTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """associate_wireless_device_with_fuota_task

        Associate a wireless device with a FUOTA task.

        :param id:  (required)
        :type id: str
        :param associate_wireless_device_with_fuota_task_request: (required)
        :type associate_wireless_device_with_fuota_task_request: AssociateWirelessDeviceWithFuotaTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_wireless_device_with_fuota_task_serialize(
            id=id,
            associate_wireless_device_with_fuota_task_request=associate_wireless_device_with_fuota_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def associate_wireless_device_with_fuota_task_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        associate_wireless_device_with_fuota_task_request: AssociateWirelessDeviceWithFuotaTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """associate_wireless_device_with_fuota_task

        Associate a wireless device with a FUOTA task.

        :param id:  (required)
        :type id: str
        :param associate_wireless_device_with_fuota_task_request: (required)
        :type associate_wireless_device_with_fuota_task_request: AssociateWirelessDeviceWithFuotaTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_wireless_device_with_fuota_task_serialize(
            id=id,
            associate_wireless_device_with_fuota_task_request=associate_wireless_device_with_fuota_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def associate_wireless_device_with_fuota_task_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        associate_wireless_device_with_fuota_task_request: AssociateWirelessDeviceWithFuotaTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """associate_wireless_device_with_fuota_task

        Associate a wireless device with a FUOTA task.

        :param id:  (required)
        :type id: str
        :param associate_wireless_device_with_fuota_task_request: (required)
        :type associate_wireless_device_with_fuota_task_request: AssociateWirelessDeviceWithFuotaTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_wireless_device_with_fuota_task_serialize(
            id=id,
            associate_wireless_device_with_fuota_task_request=associate_wireless_device_with_fuota_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _associate_wireless_device_with_fuota_task_serialize(
        self,
        id,
        associate_wireless_device_with_fuota_task_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if associate_wireless_device_with_fuota_task_request is not None:
            _body_params = associate_wireless_device_with_fuota_task_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/fuota-tasks/{Id}/wireless-device',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def associate_wireless_device_with_multicast_group(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        associate_wireless_device_with_fuota_task_request: AssociateWirelessDeviceWithFuotaTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """associate_wireless_device_with_multicast_group

        Associates a wireless device with a multicast group.

        :param id:  (required)
        :type id: str
        :param associate_wireless_device_with_fuota_task_request: (required)
        :type associate_wireless_device_with_fuota_task_request: AssociateWirelessDeviceWithFuotaTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_wireless_device_with_multicast_group_serialize(
            id=id,
            associate_wireless_device_with_fuota_task_request=associate_wireless_device_with_fuota_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def associate_wireless_device_with_multicast_group_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        associate_wireless_device_with_fuota_task_request: AssociateWirelessDeviceWithFuotaTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """associate_wireless_device_with_multicast_group

        Associates a wireless device with a multicast group.

        :param id:  (required)
        :type id: str
        :param associate_wireless_device_with_fuota_task_request: (required)
        :type associate_wireless_device_with_fuota_task_request: AssociateWirelessDeviceWithFuotaTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_wireless_device_with_multicast_group_serialize(
            id=id,
            associate_wireless_device_with_fuota_task_request=associate_wireless_device_with_fuota_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def associate_wireless_device_with_multicast_group_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        associate_wireless_device_with_fuota_task_request: AssociateWirelessDeviceWithFuotaTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """associate_wireless_device_with_multicast_group

        Associates a wireless device with a multicast group.

        :param id:  (required)
        :type id: str
        :param associate_wireless_device_with_fuota_task_request: (required)
        :type associate_wireless_device_with_fuota_task_request: AssociateWirelessDeviceWithFuotaTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_wireless_device_with_multicast_group_serialize(
            id=id,
            associate_wireless_device_with_fuota_task_request=associate_wireless_device_with_fuota_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _associate_wireless_device_with_multicast_group_serialize(
        self,
        id,
        associate_wireless_device_with_fuota_task_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if associate_wireless_device_with_fuota_task_request is not None:
            _body_params = associate_wireless_device_with_fuota_task_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/multicast-groups/{Id}/wireless-device',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def associate_wireless_device_with_thing(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        associate_wireless_device_with_thing_request: AssociateWirelessDeviceWithThingRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """associate_wireless_device_with_thing

        Associates a wireless device with a thing.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param associate_wireless_device_with_thing_request: (required)
        :type associate_wireless_device_with_thing_request: AssociateWirelessDeviceWithThingRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_wireless_device_with_thing_serialize(
            id=id,
            associate_wireless_device_with_thing_request=associate_wireless_device_with_thing_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def associate_wireless_device_with_thing_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        associate_wireless_device_with_thing_request: AssociateWirelessDeviceWithThingRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """associate_wireless_device_with_thing

        Associates a wireless device with a thing.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param associate_wireless_device_with_thing_request: (required)
        :type associate_wireless_device_with_thing_request: AssociateWirelessDeviceWithThingRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_wireless_device_with_thing_serialize(
            id=id,
            associate_wireless_device_with_thing_request=associate_wireless_device_with_thing_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def associate_wireless_device_with_thing_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        associate_wireless_device_with_thing_request: AssociateWirelessDeviceWithThingRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """associate_wireless_device_with_thing

        Associates a wireless device with a thing.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param associate_wireless_device_with_thing_request: (required)
        :type associate_wireless_device_with_thing_request: AssociateWirelessDeviceWithThingRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_wireless_device_with_thing_serialize(
            id=id,
            associate_wireless_device_with_thing_request=associate_wireless_device_with_thing_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _associate_wireless_device_with_thing_serialize(
        self,
        id,
        associate_wireless_device_with_thing_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if associate_wireless_device_with_thing_request is not None:
            _body_params = associate_wireless_device_with_thing_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/wireless-devices/{Id}/thing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def associate_wireless_gateway_with_certificate(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        associate_wireless_gateway_with_certificate_request: AssociateWirelessGatewayWithCertificateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AssociateWirelessGatewayWithCertificateResponse:
        """associate_wireless_gateway_with_certificate

        Associates a wireless gateway with a certificate.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param associate_wireless_gateway_with_certificate_request: (required)
        :type associate_wireless_gateway_with_certificate_request: AssociateWirelessGatewayWithCertificateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_wireless_gateway_with_certificate_serialize(
            id=id,
            associate_wireless_gateway_with_certificate_request=associate_wireless_gateway_with_certificate_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AssociateWirelessGatewayWithCertificateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def associate_wireless_gateway_with_certificate_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        associate_wireless_gateway_with_certificate_request: AssociateWirelessGatewayWithCertificateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AssociateWirelessGatewayWithCertificateResponse]:
        """associate_wireless_gateway_with_certificate

        Associates a wireless gateway with a certificate.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param associate_wireless_gateway_with_certificate_request: (required)
        :type associate_wireless_gateway_with_certificate_request: AssociateWirelessGatewayWithCertificateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_wireless_gateway_with_certificate_serialize(
            id=id,
            associate_wireless_gateway_with_certificate_request=associate_wireless_gateway_with_certificate_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AssociateWirelessGatewayWithCertificateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def associate_wireless_gateway_with_certificate_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        associate_wireless_gateway_with_certificate_request: AssociateWirelessGatewayWithCertificateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """associate_wireless_gateway_with_certificate

        Associates a wireless gateway with a certificate.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param associate_wireless_gateway_with_certificate_request: (required)
        :type associate_wireless_gateway_with_certificate_request: AssociateWirelessGatewayWithCertificateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_wireless_gateway_with_certificate_serialize(
            id=id,
            associate_wireless_gateway_with_certificate_request=associate_wireless_gateway_with_certificate_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AssociateWirelessGatewayWithCertificateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _associate_wireless_gateway_with_certificate_serialize(
        self,
        id,
        associate_wireless_gateway_with_certificate_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if associate_wireless_gateway_with_certificate_request is not None:
            _body_params = associate_wireless_gateway_with_certificate_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/wireless-gateways/{Id}/certificate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def associate_wireless_gateway_with_thing(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        associate_wireless_gateway_with_thing_request: AssociateWirelessGatewayWithThingRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """associate_wireless_gateway_with_thing

        Associates a wireless gateway with a thing.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param associate_wireless_gateway_with_thing_request: (required)
        :type associate_wireless_gateway_with_thing_request: AssociateWirelessGatewayWithThingRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_wireless_gateway_with_thing_serialize(
            id=id,
            associate_wireless_gateway_with_thing_request=associate_wireless_gateway_with_thing_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def associate_wireless_gateway_with_thing_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        associate_wireless_gateway_with_thing_request: AssociateWirelessGatewayWithThingRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """associate_wireless_gateway_with_thing

        Associates a wireless gateway with a thing.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param associate_wireless_gateway_with_thing_request: (required)
        :type associate_wireless_gateway_with_thing_request: AssociateWirelessGatewayWithThingRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_wireless_gateway_with_thing_serialize(
            id=id,
            associate_wireless_gateway_with_thing_request=associate_wireless_gateway_with_thing_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def associate_wireless_gateway_with_thing_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        associate_wireless_gateway_with_thing_request: AssociateWirelessGatewayWithThingRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """associate_wireless_gateway_with_thing

        Associates a wireless gateway with a thing.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param associate_wireless_gateway_with_thing_request: (required)
        :type associate_wireless_gateway_with_thing_request: AssociateWirelessGatewayWithThingRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_wireless_gateway_with_thing_serialize(
            id=id,
            associate_wireless_gateway_with_thing_request=associate_wireless_gateway_with_thing_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _associate_wireless_gateway_with_thing_serialize(
        self,
        id,
        associate_wireless_gateway_with_thing_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if associate_wireless_gateway_with_thing_request is not None:
            _body_params = associate_wireless_gateway_with_thing_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/wireless-gateways/{Id}/thing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def cancel_multicast_group_session(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """cancel_multicast_group_session

        Cancels an existing multicast group session.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_multicast_group_session_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def cancel_multicast_group_session_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """cancel_multicast_group_session

        Cancels an existing multicast group session.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_multicast_group_session_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def cancel_multicast_group_session_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """cancel_multicast_group_session

        Cancels an existing multicast group session.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._cancel_multicast_group_session_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _cancel_multicast_group_session_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/multicast-groups/{Id}/session',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_destination(
        self,
        create_destination_request: CreateDestinationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateDestinationResponse:
        """create_destination

        Creates a new destination that maps a device message to an AWS IoT rule.

        :param create_destination_request: (required)
        :type create_destination_request: CreateDestinationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_destination_serialize(
            create_destination_request=create_destination_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateDestinationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_destination_with_http_info(
        self,
        create_destination_request: CreateDestinationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateDestinationResponse]:
        """create_destination

        Creates a new destination that maps a device message to an AWS IoT rule.

        :param create_destination_request: (required)
        :type create_destination_request: CreateDestinationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_destination_serialize(
            create_destination_request=create_destination_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateDestinationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_destination_without_preload_content(
        self,
        create_destination_request: CreateDestinationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_destination

        Creates a new destination that maps a device message to an AWS IoT rule.

        :param create_destination_request: (required)
        :type create_destination_request: CreateDestinationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_destination_serialize(
            create_destination_request=create_destination_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateDestinationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_destination_serialize(
        self,
        create_destination_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_destination_request is not None:
            _body_params = create_destination_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/destinations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_device_profile(
        self,
        create_device_profile_request: CreateDeviceProfileRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateDeviceProfileResponse:
        """create_device_profile

        Creates a new device profile.

        :param create_device_profile_request: (required)
        :type create_device_profile_request: CreateDeviceProfileRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_device_profile_serialize(
            create_device_profile_request=create_device_profile_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateDeviceProfileResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_device_profile_with_http_info(
        self,
        create_device_profile_request: CreateDeviceProfileRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateDeviceProfileResponse]:
        """create_device_profile

        Creates a new device profile.

        :param create_device_profile_request: (required)
        :type create_device_profile_request: CreateDeviceProfileRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_device_profile_serialize(
            create_device_profile_request=create_device_profile_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateDeviceProfileResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_device_profile_without_preload_content(
        self,
        create_device_profile_request: CreateDeviceProfileRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_device_profile

        Creates a new device profile.

        :param create_device_profile_request: (required)
        :type create_device_profile_request: CreateDeviceProfileRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_device_profile_serialize(
            create_device_profile_request=create_device_profile_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateDeviceProfileResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_device_profile_serialize(
        self,
        create_device_profile_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_device_profile_request is not None:
            _body_params = create_device_profile_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/device-profiles',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_fuota_task(
        self,
        create_fuota_task_request: CreateFuotaTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateFuotaTaskResponse:
        """create_fuota_task

        Creates a FUOTA task.

        :param create_fuota_task_request: (required)
        :type create_fuota_task_request: CreateFuotaTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_fuota_task_serialize(
            create_fuota_task_request=create_fuota_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateFuotaTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_fuota_task_with_http_info(
        self,
        create_fuota_task_request: CreateFuotaTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateFuotaTaskResponse]:
        """create_fuota_task

        Creates a FUOTA task.

        :param create_fuota_task_request: (required)
        :type create_fuota_task_request: CreateFuotaTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_fuota_task_serialize(
            create_fuota_task_request=create_fuota_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateFuotaTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_fuota_task_without_preload_content(
        self,
        create_fuota_task_request: CreateFuotaTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_fuota_task

        Creates a FUOTA task.

        :param create_fuota_task_request: (required)
        :type create_fuota_task_request: CreateFuotaTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_fuota_task_serialize(
            create_fuota_task_request=create_fuota_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateFuotaTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_fuota_task_serialize(
        self,
        create_fuota_task_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_fuota_task_request is not None:
            _body_params = create_fuota_task_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/fuota-tasks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_multicast_group(
        self,
        create_multicast_group_request: CreateMulticastGroupRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateMulticastGroupResponse:
        """create_multicast_group

        Creates a multicast group.

        :param create_multicast_group_request: (required)
        :type create_multicast_group_request: CreateMulticastGroupRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_multicast_group_serialize(
            create_multicast_group_request=create_multicast_group_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateMulticastGroupResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_multicast_group_with_http_info(
        self,
        create_multicast_group_request: CreateMulticastGroupRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateMulticastGroupResponse]:
        """create_multicast_group

        Creates a multicast group.

        :param create_multicast_group_request: (required)
        :type create_multicast_group_request: CreateMulticastGroupRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_multicast_group_serialize(
            create_multicast_group_request=create_multicast_group_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateMulticastGroupResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_multicast_group_without_preload_content(
        self,
        create_multicast_group_request: CreateMulticastGroupRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_multicast_group

        Creates a multicast group.

        :param create_multicast_group_request: (required)
        :type create_multicast_group_request: CreateMulticastGroupRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_multicast_group_serialize(
            create_multicast_group_request=create_multicast_group_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateMulticastGroupResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_multicast_group_serialize(
        self,
        create_multicast_group_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_multicast_group_request is not None:
            _body_params = create_multicast_group_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/multicast-groups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_network_analyzer_configuration(
        self,
        create_network_analyzer_configuration_request: CreateNetworkAnalyzerConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateNetworkAnalyzerConfigurationResponse:
        """create_network_analyzer_configuration

        Creates a new network analyzer configuration.

        :param create_network_analyzer_configuration_request: (required)
        :type create_network_analyzer_configuration_request: CreateNetworkAnalyzerConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_network_analyzer_configuration_serialize(
            create_network_analyzer_configuration_request=create_network_analyzer_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateNetworkAnalyzerConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_network_analyzer_configuration_with_http_info(
        self,
        create_network_analyzer_configuration_request: CreateNetworkAnalyzerConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateNetworkAnalyzerConfigurationResponse]:
        """create_network_analyzer_configuration

        Creates a new network analyzer configuration.

        :param create_network_analyzer_configuration_request: (required)
        :type create_network_analyzer_configuration_request: CreateNetworkAnalyzerConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_network_analyzer_configuration_serialize(
            create_network_analyzer_configuration_request=create_network_analyzer_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateNetworkAnalyzerConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_network_analyzer_configuration_without_preload_content(
        self,
        create_network_analyzer_configuration_request: CreateNetworkAnalyzerConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_network_analyzer_configuration

        Creates a new network analyzer configuration.

        :param create_network_analyzer_configuration_request: (required)
        :type create_network_analyzer_configuration_request: CreateNetworkAnalyzerConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_network_analyzer_configuration_serialize(
            create_network_analyzer_configuration_request=create_network_analyzer_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateNetworkAnalyzerConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_network_analyzer_configuration_serialize(
        self,
        create_network_analyzer_configuration_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_network_analyzer_configuration_request is not None:
            _body_params = create_network_analyzer_configuration_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/network-analyzer-configurations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_service_profile(
        self,
        create_service_profile_request: CreateServiceProfileRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateServiceProfileResponse:
        """create_service_profile

        Creates a new service profile.

        :param create_service_profile_request: (required)
        :type create_service_profile_request: CreateServiceProfileRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_service_profile_serialize(
            create_service_profile_request=create_service_profile_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateServiceProfileResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_service_profile_with_http_info(
        self,
        create_service_profile_request: CreateServiceProfileRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateServiceProfileResponse]:
        """create_service_profile

        Creates a new service profile.

        :param create_service_profile_request: (required)
        :type create_service_profile_request: CreateServiceProfileRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_service_profile_serialize(
            create_service_profile_request=create_service_profile_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateServiceProfileResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_service_profile_without_preload_content(
        self,
        create_service_profile_request: CreateServiceProfileRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_service_profile

        Creates a new service profile.

        :param create_service_profile_request: (required)
        :type create_service_profile_request: CreateServiceProfileRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_service_profile_serialize(
            create_service_profile_request=create_service_profile_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateServiceProfileResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_service_profile_serialize(
        self,
        create_service_profile_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_service_profile_request is not None:
            _body_params = create_service_profile_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/service-profiles',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_wireless_device(
        self,
        create_wireless_device_request: CreateWirelessDeviceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateWirelessDeviceResponse:
        """create_wireless_device

        Provisions a wireless device.

        :param create_wireless_device_request: (required)
        :type create_wireless_device_request: CreateWirelessDeviceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_wireless_device_serialize(
            create_wireless_device_request=create_wireless_device_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateWirelessDeviceResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_wireless_device_with_http_info(
        self,
        create_wireless_device_request: CreateWirelessDeviceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateWirelessDeviceResponse]:
        """create_wireless_device

        Provisions a wireless device.

        :param create_wireless_device_request: (required)
        :type create_wireless_device_request: CreateWirelessDeviceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_wireless_device_serialize(
            create_wireless_device_request=create_wireless_device_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateWirelessDeviceResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_wireless_device_without_preload_content(
        self,
        create_wireless_device_request: CreateWirelessDeviceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_wireless_device

        Provisions a wireless device.

        :param create_wireless_device_request: (required)
        :type create_wireless_device_request: CreateWirelessDeviceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_wireless_device_serialize(
            create_wireless_device_request=create_wireless_device_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateWirelessDeviceResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_wireless_device_serialize(
        self,
        create_wireless_device_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_wireless_device_request is not None:
            _body_params = create_wireless_device_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/wireless-devices',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_wireless_gateway(
        self,
        create_wireless_gateway_request: CreateWirelessGatewayRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateWirelessGatewayResponse:
        """create_wireless_gateway

        Provisions a wireless gateway.

        :param create_wireless_gateway_request: (required)
        :type create_wireless_gateway_request: CreateWirelessGatewayRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_wireless_gateway_serialize(
            create_wireless_gateway_request=create_wireless_gateway_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateWirelessGatewayResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_wireless_gateway_with_http_info(
        self,
        create_wireless_gateway_request: CreateWirelessGatewayRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateWirelessGatewayResponse]:
        """create_wireless_gateway

        Provisions a wireless gateway.

        :param create_wireless_gateway_request: (required)
        :type create_wireless_gateway_request: CreateWirelessGatewayRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_wireless_gateway_serialize(
            create_wireless_gateway_request=create_wireless_gateway_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateWirelessGatewayResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_wireless_gateway_without_preload_content(
        self,
        create_wireless_gateway_request: CreateWirelessGatewayRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_wireless_gateway

        Provisions a wireless gateway.

        :param create_wireless_gateway_request: (required)
        :type create_wireless_gateway_request: CreateWirelessGatewayRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_wireless_gateway_serialize(
            create_wireless_gateway_request=create_wireless_gateway_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateWirelessGatewayResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_wireless_gateway_serialize(
        self,
        create_wireless_gateway_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_wireless_gateway_request is not None:
            _body_params = create_wireless_gateway_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/wireless-gateways',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_wireless_gateway_task(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        create_wireless_gateway_task_request: CreateWirelessGatewayTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateWirelessGatewayTaskResponse:
        """create_wireless_gateway_task

        Creates a task for a wireless gateway.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param create_wireless_gateway_task_request: (required)
        :type create_wireless_gateway_task_request: CreateWirelessGatewayTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_wireless_gateway_task_serialize(
            id=id,
            create_wireless_gateway_task_request=create_wireless_gateway_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateWirelessGatewayTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_wireless_gateway_task_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        create_wireless_gateway_task_request: CreateWirelessGatewayTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateWirelessGatewayTaskResponse]:
        """create_wireless_gateway_task

        Creates a task for a wireless gateway.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param create_wireless_gateway_task_request: (required)
        :type create_wireless_gateway_task_request: CreateWirelessGatewayTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_wireless_gateway_task_serialize(
            id=id,
            create_wireless_gateway_task_request=create_wireless_gateway_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateWirelessGatewayTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_wireless_gateway_task_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        create_wireless_gateway_task_request: CreateWirelessGatewayTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_wireless_gateway_task

        Creates a task for a wireless gateway.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param create_wireless_gateway_task_request: (required)
        :type create_wireless_gateway_task_request: CreateWirelessGatewayTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_wireless_gateway_task_serialize(
            id=id,
            create_wireless_gateway_task_request=create_wireless_gateway_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateWirelessGatewayTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_wireless_gateway_task_serialize(
        self,
        id,
        create_wireless_gateway_task_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_wireless_gateway_task_request is not None:
            _body_params = create_wireless_gateway_task_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/wireless-gateways/{Id}/tasks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_wireless_gateway_task_definition(
        self,
        create_wireless_gateway_task_definition_request: CreateWirelessGatewayTaskDefinitionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateWirelessGatewayTaskDefinitionResponse:
        """create_wireless_gateway_task_definition

        Creates a gateway task definition.

        :param create_wireless_gateway_task_definition_request: (required)
        :type create_wireless_gateway_task_definition_request: CreateWirelessGatewayTaskDefinitionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_wireless_gateway_task_definition_serialize(
            create_wireless_gateway_task_definition_request=create_wireless_gateway_task_definition_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateWirelessGatewayTaskDefinitionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_wireless_gateway_task_definition_with_http_info(
        self,
        create_wireless_gateway_task_definition_request: CreateWirelessGatewayTaskDefinitionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateWirelessGatewayTaskDefinitionResponse]:
        """create_wireless_gateway_task_definition

        Creates a gateway task definition.

        :param create_wireless_gateway_task_definition_request: (required)
        :type create_wireless_gateway_task_definition_request: CreateWirelessGatewayTaskDefinitionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_wireless_gateway_task_definition_serialize(
            create_wireless_gateway_task_definition_request=create_wireless_gateway_task_definition_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateWirelessGatewayTaskDefinitionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_wireless_gateway_task_definition_without_preload_content(
        self,
        create_wireless_gateway_task_definition_request: CreateWirelessGatewayTaskDefinitionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_wireless_gateway_task_definition

        Creates a gateway task definition.

        :param create_wireless_gateway_task_definition_request: (required)
        :type create_wireless_gateway_task_definition_request: CreateWirelessGatewayTaskDefinitionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_wireless_gateway_task_definition_serialize(
            create_wireless_gateway_task_definition_request=create_wireless_gateway_task_definition_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateWirelessGatewayTaskDefinitionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_wireless_gateway_task_definition_serialize(
        self,
        create_wireless_gateway_task_definition_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_wireless_gateway_task_definition_request is not None:
            _body_params = create_wireless_gateway_task_definition_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/wireless-gateway-task-definitions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_destination(
        self,
        name: Annotated[str, Field(strict=True, max_length=128, description="The name of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """delete_destination

        Deletes a destination.

        :param name: The name of the resource to delete. (required)
        :type name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_destination_serialize(
            name=name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_destination_with_http_info(
        self,
        name: Annotated[str, Field(strict=True, max_length=128, description="The name of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """delete_destination

        Deletes a destination.

        :param name: The name of the resource to delete. (required)
        :type name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_destination_serialize(
            name=name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_destination_without_preload_content(
        self,
        name: Annotated[str, Field(strict=True, max_length=128, description="The name of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_destination

        Deletes a destination.

        :param name: The name of the resource to delete. (required)
        :type name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_destination_serialize(
            name=name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_destination_serialize(
        self,
        name,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/destinations/{Name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_device_profile(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """delete_device_profile

        Deletes a device profile.

        :param id: The ID of the resource to delete. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_device_profile_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_device_profile_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """delete_device_profile

        Deletes a device profile.

        :param id: The ID of the resource to delete. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_device_profile_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_device_profile_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_device_profile

        Deletes a device profile.

        :param id: The ID of the resource to delete. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_device_profile_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_device_profile_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/device-profiles/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_fuota_task(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """delete_fuota_task

        Deletes a FUOTA task.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_fuota_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_fuota_task_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """delete_fuota_task

        Deletes a FUOTA task.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_fuota_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_fuota_task_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_fuota_task

        Deletes a FUOTA task.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_fuota_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_fuota_task_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/fuota-tasks/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_multicast_group(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """delete_multicast_group

        Deletes a multicast group if it is not in use by a fuota task.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_multicast_group_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_multicast_group_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """delete_multicast_group

        Deletes a multicast group if it is not in use by a fuota task.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_multicast_group_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_multicast_group_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_multicast_group

        Deletes a multicast group if it is not in use by a fuota task.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_multicast_group_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_multicast_group_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/multicast-groups/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_network_analyzer_configuration(
        self,
        configuration_name: Annotated[str, Field(min_length=1, strict=True, max_length=1024)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """delete_network_analyzer_configuration

        Deletes a network analyzer configuration.

        :param configuration_name:  (required)
        :type configuration_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_network_analyzer_configuration_serialize(
            configuration_name=configuration_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_network_analyzer_configuration_with_http_info(
        self,
        configuration_name: Annotated[str, Field(min_length=1, strict=True, max_length=1024)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """delete_network_analyzer_configuration

        Deletes a network analyzer configuration.

        :param configuration_name:  (required)
        :type configuration_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_network_analyzer_configuration_serialize(
            configuration_name=configuration_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_network_analyzer_configuration_without_preload_content(
        self,
        configuration_name: Annotated[str, Field(min_length=1, strict=True, max_length=1024)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_network_analyzer_configuration

        Deletes a network analyzer configuration.

        :param configuration_name:  (required)
        :type configuration_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_network_analyzer_configuration_serialize(
            configuration_name=configuration_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_network_analyzer_configuration_serialize(
        self,
        configuration_name,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if configuration_name is not None:
            _path_params['ConfigurationName'] = configuration_name
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/network-analyzer-configurations/{ConfigurationName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_queued_messages(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of a given wireless device for which downlink messages will be deleted.")],
        message_id: Annotated[StrictStr, Field(description="If message ID is <code>\"*\"</code>, it cleares the entire downlink queue for a given device, specified by the wireless device ID. Otherwise, the downlink message with the specified message ID will be deleted.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        wireless_device_type: Annotated[Optional[StrictStr], Field(description="The wireless device type, which can be either Sidewalk or LoRaWAN.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """delete_queued_messages

        Remove queued messages from the downlink queue.

        :param id: The ID of a given wireless device for which downlink messages will be deleted. (required)
        :type id: str
        :param message_id: If message ID is <code>\"*\"</code>, it cleares the entire downlink queue for a given device, specified by the wireless device ID. Otherwise, the downlink message with the specified message ID will be deleted. (required)
        :type message_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param wireless_device_type: The wireless device type, which can be either Sidewalk or LoRaWAN.
        :type wireless_device_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_queued_messages_serialize(
            id=id,
            message_id=message_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            wireless_device_type=wireless_device_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_queued_messages_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of a given wireless device for which downlink messages will be deleted.")],
        message_id: Annotated[StrictStr, Field(description="If message ID is <code>\"*\"</code>, it cleares the entire downlink queue for a given device, specified by the wireless device ID. Otherwise, the downlink message with the specified message ID will be deleted.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        wireless_device_type: Annotated[Optional[StrictStr], Field(description="The wireless device type, which can be either Sidewalk or LoRaWAN.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """delete_queued_messages

        Remove queued messages from the downlink queue.

        :param id: The ID of a given wireless device for which downlink messages will be deleted. (required)
        :type id: str
        :param message_id: If message ID is <code>\"*\"</code>, it cleares the entire downlink queue for a given device, specified by the wireless device ID. Otherwise, the downlink message with the specified message ID will be deleted. (required)
        :type message_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param wireless_device_type: The wireless device type, which can be either Sidewalk or LoRaWAN.
        :type wireless_device_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_queued_messages_serialize(
            id=id,
            message_id=message_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            wireless_device_type=wireless_device_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_queued_messages_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of a given wireless device for which downlink messages will be deleted.")],
        message_id: Annotated[StrictStr, Field(description="If message ID is <code>\"*\"</code>, it cleares the entire downlink queue for a given device, specified by the wireless device ID. Otherwise, the downlink message with the specified message ID will be deleted.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        wireless_device_type: Annotated[Optional[StrictStr], Field(description="The wireless device type, which can be either Sidewalk or LoRaWAN.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_queued_messages

        Remove queued messages from the downlink queue.

        :param id: The ID of a given wireless device for which downlink messages will be deleted. (required)
        :type id: str
        :param message_id: If message ID is <code>\"*\"</code>, it cleares the entire downlink queue for a given device, specified by the wireless device ID. Otherwise, the downlink message with the specified message ID will be deleted. (required)
        :type message_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param wireless_device_type: The wireless device type, which can be either Sidewalk or LoRaWAN.
        :type wireless_device_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_queued_messages_serialize(
            id=id,
            message_id=message_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            wireless_device_type=wireless_device_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_queued_messages_serialize(
        self,
        id,
        message_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        wireless_device_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        if message_id is not None:
            
            _query_params.append(('messageId', message_id))
            
        if wireless_device_type is not None:
            
            _query_params.append(('WirelessDeviceType', wireless_device_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/wireless-devices/{Id}/data#messageId',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_service_profile(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """delete_service_profile

        Deletes a service profile.

        :param id: The ID of the resource to delete. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_service_profile_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_service_profile_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """delete_service_profile

        Deletes a service profile.

        :param id: The ID of the resource to delete. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_service_profile_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_service_profile_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_service_profile

        Deletes a service profile.

        :param id: The ID of the resource to delete. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_service_profile_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_service_profile_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/service-profiles/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_wireless_device(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """delete_wireless_device

        Deletes a wireless device.

        :param id: The ID of the resource to delete. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_wireless_device_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_wireless_device_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """delete_wireless_device

        Deletes a wireless device.

        :param id: The ID of the resource to delete. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_wireless_device_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_wireless_device_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_wireless_device

        Deletes a wireless device.

        :param id: The ID of the resource to delete. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_wireless_device_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_wireless_device_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/wireless-devices/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_wireless_device_import_task(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The unique identifier of the import task to be deleted.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """delete_wireless_device_import_task

        Delete an import task.

        :param id: The unique identifier of the import task to be deleted. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_wireless_device_import_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_wireless_device_import_task_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The unique identifier of the import task to be deleted.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """delete_wireless_device_import_task

        Delete an import task.

        :param id: The unique identifier of the import task to be deleted. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_wireless_device_import_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_wireless_device_import_task_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The unique identifier of the import task to be deleted.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_wireless_device_import_task

        Delete an import task.

        :param id: The unique identifier of the import task to be deleted. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_wireless_device_import_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_wireless_device_import_task_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/wireless_device_import_task/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_wireless_gateway(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """delete_wireless_gateway

        Deletes a wireless gateway.

        :param id: The ID of the resource to delete. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_wireless_gateway_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_wireless_gateway_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """delete_wireless_gateway

        Deletes a wireless gateway.

        :param id: The ID of the resource to delete. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_wireless_gateway_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_wireless_gateway_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_wireless_gateway

        Deletes a wireless gateway.

        :param id: The ID of the resource to delete. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_wireless_gateway_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_wireless_gateway_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/wireless-gateways/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_wireless_gateway_task(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """delete_wireless_gateway_task

        Deletes a wireless gateway task.

        :param id: The ID of the resource to delete. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_wireless_gateway_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_wireless_gateway_task_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """delete_wireless_gateway_task

        Deletes a wireless gateway task.

        :param id: The ID of the resource to delete. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_wireless_gateway_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_wireless_gateway_task_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_wireless_gateway_task

        Deletes a wireless gateway task.

        :param id: The ID of the resource to delete. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_wireless_gateway_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_wireless_gateway_task_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/wireless-gateways/{Id}/tasks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_wireless_gateway_task_definition(
        self,
        id: Annotated[str, Field(strict=True, max_length=36, description="The ID of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """delete_wireless_gateway_task_definition

        Deletes a wireless gateway task definition. Deleting this task definition does not affect tasks that are currently in progress.

        :param id: The ID of the resource to delete. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_wireless_gateway_task_definition_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_wireless_gateway_task_definition_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=36, description="The ID of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """delete_wireless_gateway_task_definition

        Deletes a wireless gateway task definition. Deleting this task definition does not affect tasks that are currently in progress.

        :param id: The ID of the resource to delete. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_wireless_gateway_task_definition_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_wireless_gateway_task_definition_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=36, description="The ID of the resource to delete.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_wireless_gateway_task_definition

        Deletes a wireless gateway task definition. Deleting this task definition does not affect tasks that are currently in progress.

        :param id: The ID of the resource to delete. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_wireless_gateway_task_definition_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_wireless_gateway_task_definition_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/wireless-gateway-task-definitions/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def deregister_wireless_device(
        self,
        identifier: Annotated[str, Field(strict=True, max_length=256, description="The identifier of the wireless device to deregister from AWS IoT Wireless.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        wireless_device_type: Annotated[Optional[StrictStr], Field(description="The type of wireless device to deregister from AWS IoT Wireless, which can be <code>LoRaWAN</code> or <code>Sidewalk</code>.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """deregister_wireless_device

        Deregister a wireless device from AWS IoT Wireless.

        :param identifier: The identifier of the wireless device to deregister from AWS IoT Wireless. (required)
        :type identifier: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param wireless_device_type: The type of wireless device to deregister from AWS IoT Wireless, which can be <code>LoRaWAN</code> or <code>Sidewalk</code>.
        :type wireless_device_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deregister_wireless_device_serialize(
            identifier=identifier,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            wireless_device_type=wireless_device_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def deregister_wireless_device_with_http_info(
        self,
        identifier: Annotated[str, Field(strict=True, max_length=256, description="The identifier of the wireless device to deregister from AWS IoT Wireless.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        wireless_device_type: Annotated[Optional[StrictStr], Field(description="The type of wireless device to deregister from AWS IoT Wireless, which can be <code>LoRaWAN</code> or <code>Sidewalk</code>.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """deregister_wireless_device

        Deregister a wireless device from AWS IoT Wireless.

        :param identifier: The identifier of the wireless device to deregister from AWS IoT Wireless. (required)
        :type identifier: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param wireless_device_type: The type of wireless device to deregister from AWS IoT Wireless, which can be <code>LoRaWAN</code> or <code>Sidewalk</code>.
        :type wireless_device_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deregister_wireless_device_serialize(
            identifier=identifier,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            wireless_device_type=wireless_device_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def deregister_wireless_device_without_preload_content(
        self,
        identifier: Annotated[str, Field(strict=True, max_length=256, description="The identifier of the wireless device to deregister from AWS IoT Wireless.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        wireless_device_type: Annotated[Optional[StrictStr], Field(description="The type of wireless device to deregister from AWS IoT Wireless, which can be <code>LoRaWAN</code> or <code>Sidewalk</code>.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """deregister_wireless_device

        Deregister a wireless device from AWS IoT Wireless.

        :param identifier: The identifier of the wireless device to deregister from AWS IoT Wireless. (required)
        :type identifier: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param wireless_device_type: The type of wireless device to deregister from AWS IoT Wireless, which can be <code>LoRaWAN</code> or <code>Sidewalk</code>.
        :type wireless_device_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deregister_wireless_device_serialize(
            identifier=identifier,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            wireless_device_type=wireless_device_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _deregister_wireless_device_serialize(
        self,
        identifier,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        wireless_device_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if identifier is not None:
            _path_params['Identifier'] = identifier
        # process the query parameters
        if wireless_device_type is not None:
            
            _query_params.append(('WirelessDeviceType', wireless_device_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/wireless-devices/{Identifier}/deregister',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def disassociate_aws_account_from_partner_account(
        self,
        partner_account_id: Annotated[str, Field(strict=True, max_length=256, description="The partner account ID to disassociate from the AWS account.")],
        partner_type: Annotated[StrictStr, Field(description="The partner type.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """disassociate_aws_account_from_partner_account

        Disassociates your AWS account from a partner account. If <code>PartnerAccountId</code> and <code>PartnerType</code> are <code>null</code>, disassociates your AWS account from all partner accounts.

        :param partner_account_id: The partner account ID to disassociate from the AWS account. (required)
        :type partner_account_id: str
        :param partner_type: The partner type. (required)
        :type partner_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_aws_account_from_partner_account_serialize(
            partner_account_id=partner_account_id,
            partner_type=partner_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def disassociate_aws_account_from_partner_account_with_http_info(
        self,
        partner_account_id: Annotated[str, Field(strict=True, max_length=256, description="The partner account ID to disassociate from the AWS account.")],
        partner_type: Annotated[StrictStr, Field(description="The partner type.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """disassociate_aws_account_from_partner_account

        Disassociates your AWS account from a partner account. If <code>PartnerAccountId</code> and <code>PartnerType</code> are <code>null</code>, disassociates your AWS account from all partner accounts.

        :param partner_account_id: The partner account ID to disassociate from the AWS account. (required)
        :type partner_account_id: str
        :param partner_type: The partner type. (required)
        :type partner_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_aws_account_from_partner_account_serialize(
            partner_account_id=partner_account_id,
            partner_type=partner_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def disassociate_aws_account_from_partner_account_without_preload_content(
        self,
        partner_account_id: Annotated[str, Field(strict=True, max_length=256, description="The partner account ID to disassociate from the AWS account.")],
        partner_type: Annotated[StrictStr, Field(description="The partner type.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """disassociate_aws_account_from_partner_account

        Disassociates your AWS account from a partner account. If <code>PartnerAccountId</code> and <code>PartnerType</code> are <code>null</code>, disassociates your AWS account from all partner accounts.

        :param partner_account_id: The partner account ID to disassociate from the AWS account. (required)
        :type partner_account_id: str
        :param partner_type: The partner type. (required)
        :type partner_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_aws_account_from_partner_account_serialize(
            partner_account_id=partner_account_id,
            partner_type=partner_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _disassociate_aws_account_from_partner_account_serialize(
        self,
        partner_account_id,
        partner_type,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if partner_account_id is not None:
            _path_params['PartnerAccountId'] = partner_account_id
        # process the query parameters
        if partner_type is not None:
            
            _query_params.append(('partnerType', partner_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/partner-accounts/{PartnerAccountId}#partnerType',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def disassociate_multicast_group_from_fuota_task(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        multicast_group_id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """disassociate_multicast_group_from_fuota_task

        Disassociates a multicast group from a fuota task.

        :param id:  (required)
        :type id: str
        :param multicast_group_id:  (required)
        :type multicast_group_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_multicast_group_from_fuota_task_serialize(
            id=id,
            multicast_group_id=multicast_group_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def disassociate_multicast_group_from_fuota_task_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        multicast_group_id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """disassociate_multicast_group_from_fuota_task

        Disassociates a multicast group from a fuota task.

        :param id:  (required)
        :type id: str
        :param multicast_group_id:  (required)
        :type multicast_group_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_multicast_group_from_fuota_task_serialize(
            id=id,
            multicast_group_id=multicast_group_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def disassociate_multicast_group_from_fuota_task_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        multicast_group_id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """disassociate_multicast_group_from_fuota_task

        Disassociates a multicast group from a fuota task.

        :param id:  (required)
        :type id: str
        :param multicast_group_id:  (required)
        :type multicast_group_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_multicast_group_from_fuota_task_serialize(
            id=id,
            multicast_group_id=multicast_group_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _disassociate_multicast_group_from_fuota_task_serialize(
        self,
        id,
        multicast_group_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if multicast_group_id is not None:
            _path_params['MulticastGroupId'] = multicast_group_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/fuota-tasks/{Id}/multicast-groups/{MulticastGroupId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def disassociate_wireless_device_from_fuota_task(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        wireless_device_id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """disassociate_wireless_device_from_fuota_task

        Disassociates a wireless device from a FUOTA task.

        :param id:  (required)
        :type id: str
        :param wireless_device_id:  (required)
        :type wireless_device_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_wireless_device_from_fuota_task_serialize(
            id=id,
            wireless_device_id=wireless_device_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def disassociate_wireless_device_from_fuota_task_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        wireless_device_id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """disassociate_wireless_device_from_fuota_task

        Disassociates a wireless device from a FUOTA task.

        :param id:  (required)
        :type id: str
        :param wireless_device_id:  (required)
        :type wireless_device_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_wireless_device_from_fuota_task_serialize(
            id=id,
            wireless_device_id=wireless_device_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def disassociate_wireless_device_from_fuota_task_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        wireless_device_id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """disassociate_wireless_device_from_fuota_task

        Disassociates a wireless device from a FUOTA task.

        :param id:  (required)
        :type id: str
        :param wireless_device_id:  (required)
        :type wireless_device_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_wireless_device_from_fuota_task_serialize(
            id=id,
            wireless_device_id=wireless_device_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _disassociate_wireless_device_from_fuota_task_serialize(
        self,
        id,
        wireless_device_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if wireless_device_id is not None:
            _path_params['WirelessDeviceId'] = wireless_device_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/fuota-tasks/{Id}/wireless-devices/{WirelessDeviceId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def disassociate_wireless_device_from_multicast_group(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        wireless_device_id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """disassociate_wireless_device_from_multicast_group

        Disassociates a wireless device from a multicast group.

        :param id:  (required)
        :type id: str
        :param wireless_device_id:  (required)
        :type wireless_device_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_wireless_device_from_multicast_group_serialize(
            id=id,
            wireless_device_id=wireless_device_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def disassociate_wireless_device_from_multicast_group_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        wireless_device_id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """disassociate_wireless_device_from_multicast_group

        Disassociates a wireless device from a multicast group.

        :param id:  (required)
        :type id: str
        :param wireless_device_id:  (required)
        :type wireless_device_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_wireless_device_from_multicast_group_serialize(
            id=id,
            wireless_device_id=wireless_device_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def disassociate_wireless_device_from_multicast_group_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        wireless_device_id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """disassociate_wireless_device_from_multicast_group

        Disassociates a wireless device from a multicast group.

        :param id:  (required)
        :type id: str
        :param wireless_device_id:  (required)
        :type wireless_device_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_wireless_device_from_multicast_group_serialize(
            id=id,
            wireless_device_id=wireless_device_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _disassociate_wireless_device_from_multicast_group_serialize(
        self,
        id,
        wireless_device_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if wireless_device_id is not None:
            _path_params['WirelessDeviceId'] = wireless_device_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/multicast-groups/{Id}/wireless-devices/{WirelessDeviceId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def disassociate_wireless_device_from_thing(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """disassociate_wireless_device_from_thing

        Disassociates a wireless device from its currently associated thing.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_wireless_device_from_thing_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def disassociate_wireless_device_from_thing_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """disassociate_wireless_device_from_thing

        Disassociates a wireless device from its currently associated thing.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_wireless_device_from_thing_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def disassociate_wireless_device_from_thing_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """disassociate_wireless_device_from_thing

        Disassociates a wireless device from its currently associated thing.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_wireless_device_from_thing_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _disassociate_wireless_device_from_thing_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/wireless-devices/{Id}/thing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def disassociate_wireless_gateway_from_certificate(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """disassociate_wireless_gateway_from_certificate

        Disassociates a wireless gateway from its currently associated certificate.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_wireless_gateway_from_certificate_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def disassociate_wireless_gateway_from_certificate_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """disassociate_wireless_gateway_from_certificate

        Disassociates a wireless gateway from its currently associated certificate.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_wireless_gateway_from_certificate_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def disassociate_wireless_gateway_from_certificate_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """disassociate_wireless_gateway_from_certificate

        Disassociates a wireless gateway from its currently associated certificate.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_wireless_gateway_from_certificate_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _disassociate_wireless_gateway_from_certificate_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/wireless-gateways/{Id}/certificate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def disassociate_wireless_gateway_from_thing(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """disassociate_wireless_gateway_from_thing

        Disassociates a wireless gateway from its currently associated thing.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_wireless_gateway_from_thing_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def disassociate_wireless_gateway_from_thing_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """disassociate_wireless_gateway_from_thing

        Disassociates a wireless gateway from its currently associated thing.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_wireless_gateway_from_thing_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def disassociate_wireless_gateway_from_thing_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """disassociate_wireless_gateway_from_thing

        Disassociates a wireless gateway from its currently associated thing.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_wireless_gateway_from_thing_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _disassociate_wireless_gateway_from_thing_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/wireless-gateways/{Id}/thing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_destination(
        self,
        name: Annotated[str, Field(strict=True, max_length=128, description="The name of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetDestinationResponse:
        """get_destination

        Gets information about a destination.

        :param name: The name of the resource to get. (required)
        :type name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_destination_serialize(
            name=name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDestinationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_destination_with_http_info(
        self,
        name: Annotated[str, Field(strict=True, max_length=128, description="The name of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetDestinationResponse]:
        """get_destination

        Gets information about a destination.

        :param name: The name of the resource to get. (required)
        :type name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_destination_serialize(
            name=name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDestinationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_destination_without_preload_content(
        self,
        name: Annotated[str, Field(strict=True, max_length=128, description="The name of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_destination

        Gets information about a destination.

        :param name: The name of the resource to get. (required)
        :type name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_destination_serialize(
            name=name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDestinationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_destination_serialize(
        self,
        name,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/destinations/{Name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_device_profile(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetDeviceProfileResponse:
        """get_device_profile

        Gets information about a device profile.

        :param id: The ID of the resource to get. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_profile_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDeviceProfileResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_device_profile_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetDeviceProfileResponse]:
        """get_device_profile

        Gets information about a device profile.

        :param id: The ID of the resource to get. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_profile_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDeviceProfileResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_device_profile_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_device_profile

        Gets information about a device profile.

        :param id: The ID of the resource to get. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_device_profile_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDeviceProfileResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_device_profile_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/device-profiles/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_event_configuration_by_resource_types(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetEventConfigurationByResourceTypesResponse:
        """get_event_configuration_by_resource_types

        Get the event configuration based on resource types.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_event_configuration_by_resource_types_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEventConfigurationByResourceTypesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_event_configuration_by_resource_types_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetEventConfigurationByResourceTypesResponse]:
        """get_event_configuration_by_resource_types

        Get the event configuration based on resource types.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_event_configuration_by_resource_types_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEventConfigurationByResourceTypesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_event_configuration_by_resource_types_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_event_configuration_by_resource_types

        Get the event configuration based on resource types.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_event_configuration_by_resource_types_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEventConfigurationByResourceTypesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_event_configuration_by_resource_types_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/event-configurations-resource-types',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_fuota_task(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetFuotaTaskResponse:
        """get_fuota_task

        Gets information about a FUOTA task.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_fuota_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetFuotaTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_fuota_task_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetFuotaTaskResponse]:
        """get_fuota_task

        Gets information about a FUOTA task.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_fuota_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetFuotaTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_fuota_task_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_fuota_task

        Gets information about a FUOTA task.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_fuota_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetFuotaTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_fuota_task_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/fuota-tasks/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_log_levels_by_resource_types(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetLogLevelsByResourceTypesResponse:
        """get_log_levels_by_resource_types

        Returns current default log levels or log levels by resource types. Based on resource types, log levels can be for wireless device log options or wireless gateway log options.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_log_levels_by_resource_types_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetLogLevelsByResourceTypesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_log_levels_by_resource_types_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetLogLevelsByResourceTypesResponse]:
        """get_log_levels_by_resource_types

        Returns current default log levels or log levels by resource types. Based on resource types, log levels can be for wireless device log options or wireless gateway log options.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_log_levels_by_resource_types_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetLogLevelsByResourceTypesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_log_levels_by_resource_types_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_log_levels_by_resource_types

        Returns current default log levels or log levels by resource types. Based on resource types, log levels can be for wireless device log options or wireless gateway log options.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_log_levels_by_resource_types_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetLogLevelsByResourceTypesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_log_levels_by_resource_types_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/log-levels',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_multicast_group(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetMulticastGroupResponse:
        """get_multicast_group

        Gets information about a multicast group.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_multicast_group_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetMulticastGroupResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_multicast_group_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetMulticastGroupResponse]:
        """get_multicast_group

        Gets information about a multicast group.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_multicast_group_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetMulticastGroupResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_multicast_group_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_multicast_group

        Gets information about a multicast group.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_multicast_group_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetMulticastGroupResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_multicast_group_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/multicast-groups/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_multicast_group_session(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetMulticastGroupSessionResponse:
        """get_multicast_group_session

        Gets information about a multicast group session.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_multicast_group_session_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetMulticastGroupSessionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_multicast_group_session_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetMulticastGroupSessionResponse]:
        """get_multicast_group_session

        Gets information about a multicast group session.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_multicast_group_session_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetMulticastGroupSessionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_multicast_group_session_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_multicast_group_session

        Gets information about a multicast group session.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_multicast_group_session_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetMulticastGroupSessionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_multicast_group_session_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/multicast-groups/{Id}/session',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_network_analyzer_configuration(
        self,
        configuration_name: Annotated[str, Field(min_length=1, strict=True, max_length=1024)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetNetworkAnalyzerConfigurationResponse:
        """get_network_analyzer_configuration

        Get network analyzer configuration.

        :param configuration_name:  (required)
        :type configuration_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_network_analyzer_configuration_serialize(
            configuration_name=configuration_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetNetworkAnalyzerConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_network_analyzer_configuration_with_http_info(
        self,
        configuration_name: Annotated[str, Field(min_length=1, strict=True, max_length=1024)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetNetworkAnalyzerConfigurationResponse]:
        """get_network_analyzer_configuration

        Get network analyzer configuration.

        :param configuration_name:  (required)
        :type configuration_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_network_analyzer_configuration_serialize(
            configuration_name=configuration_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetNetworkAnalyzerConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_network_analyzer_configuration_without_preload_content(
        self,
        configuration_name: Annotated[str, Field(min_length=1, strict=True, max_length=1024)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_network_analyzer_configuration

        Get network analyzer configuration.

        :param configuration_name:  (required)
        :type configuration_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_network_analyzer_configuration_serialize(
            configuration_name=configuration_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetNetworkAnalyzerConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_network_analyzer_configuration_serialize(
        self,
        configuration_name,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if configuration_name is not None:
            _path_params['ConfigurationName'] = configuration_name
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/network-analyzer-configurations/{ConfigurationName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_partner_account(
        self,
        partner_account_id: Annotated[str, Field(strict=True, max_length=256, description="The partner account ID to disassociate from the AWS account.")],
        partner_type: Annotated[StrictStr, Field(description="The partner type.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPartnerAccountResponse:
        """get_partner_account

        Gets information about a partner account. If <code>PartnerAccountId</code> and <code>PartnerType</code> are <code>null</code>, returns all partner accounts.

        :param partner_account_id: The partner account ID to disassociate from the AWS account. (required)
        :type partner_account_id: str
        :param partner_type: The partner type. (required)
        :type partner_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_partner_account_serialize(
            partner_account_id=partner_account_id,
            partner_type=partner_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPartnerAccountResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_partner_account_with_http_info(
        self,
        partner_account_id: Annotated[str, Field(strict=True, max_length=256, description="The partner account ID to disassociate from the AWS account.")],
        partner_type: Annotated[StrictStr, Field(description="The partner type.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPartnerAccountResponse]:
        """get_partner_account

        Gets information about a partner account. If <code>PartnerAccountId</code> and <code>PartnerType</code> are <code>null</code>, returns all partner accounts.

        :param partner_account_id: The partner account ID to disassociate from the AWS account. (required)
        :type partner_account_id: str
        :param partner_type: The partner type. (required)
        :type partner_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_partner_account_serialize(
            partner_account_id=partner_account_id,
            partner_type=partner_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPartnerAccountResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_partner_account_without_preload_content(
        self,
        partner_account_id: Annotated[str, Field(strict=True, max_length=256, description="The partner account ID to disassociate from the AWS account.")],
        partner_type: Annotated[StrictStr, Field(description="The partner type.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_partner_account

        Gets information about a partner account. If <code>PartnerAccountId</code> and <code>PartnerType</code> are <code>null</code>, returns all partner accounts.

        :param partner_account_id: The partner account ID to disassociate from the AWS account. (required)
        :type partner_account_id: str
        :param partner_type: The partner type. (required)
        :type partner_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_partner_account_serialize(
            partner_account_id=partner_account_id,
            partner_type=partner_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPartnerAccountResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_partner_account_serialize(
        self,
        partner_account_id,
        partner_type,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if partner_account_id is not None:
            _path_params['PartnerAccountId'] = partner_account_id
        # process the query parameters
        if partner_type is not None:
            
            _query_params.append(('partnerType', partner_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/partner-accounts/{PartnerAccountId}#partnerType',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_position(
        self,
        resource_identifier: Annotated[str, Field(strict=True, description="Resource identifier used to retrieve the position information.")],
        resource_type: Annotated[StrictStr, Field(description="Resource type of the resource for which position information is retrieved.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPositionResponse:
        """(Deprecated) get_position

        <p>Get the position information for a given resource.</p> <important> <p>This action is no longer supported. Calls to retrieve the position information should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_GetResourcePosition.html\">GetResourcePosition</a> API operation instead.</p> </important>

        :param resource_identifier: Resource identifier used to retrieve the position information. (required)
        :type resource_identifier: str
        :param resource_type: Resource type of the resource for which position information is retrieved. (required)
        :type resource_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /positions/{ResourceIdentifier}#resourceType is deprecated.", DeprecationWarning)

        _param = self._get_position_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPositionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_position_with_http_info(
        self,
        resource_identifier: Annotated[str, Field(strict=True, description="Resource identifier used to retrieve the position information.")],
        resource_type: Annotated[StrictStr, Field(description="Resource type of the resource for which position information is retrieved.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPositionResponse]:
        """(Deprecated) get_position

        <p>Get the position information for a given resource.</p> <important> <p>This action is no longer supported. Calls to retrieve the position information should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_GetResourcePosition.html\">GetResourcePosition</a> API operation instead.</p> </important>

        :param resource_identifier: Resource identifier used to retrieve the position information. (required)
        :type resource_identifier: str
        :param resource_type: Resource type of the resource for which position information is retrieved. (required)
        :type resource_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /positions/{ResourceIdentifier}#resourceType is deprecated.", DeprecationWarning)

        _param = self._get_position_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPositionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_position_without_preload_content(
        self,
        resource_identifier: Annotated[str, Field(strict=True, description="Resource identifier used to retrieve the position information.")],
        resource_type: Annotated[StrictStr, Field(description="Resource type of the resource for which position information is retrieved.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) get_position

        <p>Get the position information for a given resource.</p> <important> <p>This action is no longer supported. Calls to retrieve the position information should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_GetResourcePosition.html\">GetResourcePosition</a> API operation instead.</p> </important>

        :param resource_identifier: Resource identifier used to retrieve the position information. (required)
        :type resource_identifier: str
        :param resource_type: Resource type of the resource for which position information is retrieved. (required)
        :type resource_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /positions/{ResourceIdentifier}#resourceType is deprecated.", DeprecationWarning)

        _param = self._get_position_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPositionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_position_serialize(
        self,
        resource_identifier,
        resource_type,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_identifier is not None:
            _path_params['ResourceIdentifier'] = resource_identifier
        # process the query parameters
        if resource_type is not None:
            
            _query_params.append(('resourceType', resource_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/positions/{ResourceIdentifier}#resourceType',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_position_configuration(
        self,
        resource_identifier: Annotated[str, Field(strict=True, description="Resource identifier used in a position configuration.")],
        resource_type: Annotated[StrictStr, Field(description="Resource type of the resource for which position configuration is retrieved.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPositionConfigurationResponse:
        """(Deprecated) get_position_configuration

        <p>Get position configuration for a given resource.</p> <important> <p>This action is no longer supported. Calls to retrieve the position configuration should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_GetResourcePosition.html\">GetResourcePosition</a> API operation instead.</p> </important>

        :param resource_identifier: Resource identifier used in a position configuration. (required)
        :type resource_identifier: str
        :param resource_type: Resource type of the resource for which position configuration is retrieved. (required)
        :type resource_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /position-configurations/{ResourceIdentifier}#resourceType is deprecated.", DeprecationWarning)

        _param = self._get_position_configuration_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPositionConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_position_configuration_with_http_info(
        self,
        resource_identifier: Annotated[str, Field(strict=True, description="Resource identifier used in a position configuration.")],
        resource_type: Annotated[StrictStr, Field(description="Resource type of the resource for which position configuration is retrieved.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPositionConfigurationResponse]:
        """(Deprecated) get_position_configuration

        <p>Get position configuration for a given resource.</p> <important> <p>This action is no longer supported. Calls to retrieve the position configuration should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_GetResourcePosition.html\">GetResourcePosition</a> API operation instead.</p> </important>

        :param resource_identifier: Resource identifier used in a position configuration. (required)
        :type resource_identifier: str
        :param resource_type: Resource type of the resource for which position configuration is retrieved. (required)
        :type resource_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /position-configurations/{ResourceIdentifier}#resourceType is deprecated.", DeprecationWarning)

        _param = self._get_position_configuration_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPositionConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_position_configuration_without_preload_content(
        self,
        resource_identifier: Annotated[str, Field(strict=True, description="Resource identifier used in a position configuration.")],
        resource_type: Annotated[StrictStr, Field(description="Resource type of the resource for which position configuration is retrieved.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) get_position_configuration

        <p>Get position configuration for a given resource.</p> <important> <p>This action is no longer supported. Calls to retrieve the position configuration should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_GetResourcePosition.html\">GetResourcePosition</a> API operation instead.</p> </important>

        :param resource_identifier: Resource identifier used in a position configuration. (required)
        :type resource_identifier: str
        :param resource_type: Resource type of the resource for which position configuration is retrieved. (required)
        :type resource_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /position-configurations/{ResourceIdentifier}#resourceType is deprecated.", DeprecationWarning)

        _param = self._get_position_configuration_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPositionConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_position_configuration_serialize(
        self,
        resource_identifier,
        resource_type,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_identifier is not None:
            _path_params['ResourceIdentifier'] = resource_identifier
        # process the query parameters
        if resource_type is not None:
            
            _query_params.append(('resourceType', resource_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/position-configurations/{ResourceIdentifier}#resourceType',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_position_estimate(
        self,
        get_position_estimate_request: GetPositionEstimateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPositionEstimateResponse:
        """get_position_estimate

        Get estimated position information as a payload in GeoJSON format. The payload measurement data is resolved using solvers that are provided by third-party vendors.

        :param get_position_estimate_request: (required)
        :type get_position_estimate_request: GetPositionEstimateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_position_estimate_serialize(
            get_position_estimate_request=get_position_estimate_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPositionEstimateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_position_estimate_with_http_info(
        self,
        get_position_estimate_request: GetPositionEstimateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPositionEstimateResponse]:
        """get_position_estimate

        Get estimated position information as a payload in GeoJSON format. The payload measurement data is resolved using solvers that are provided by third-party vendors.

        :param get_position_estimate_request: (required)
        :type get_position_estimate_request: GetPositionEstimateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_position_estimate_serialize(
            get_position_estimate_request=get_position_estimate_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPositionEstimateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_position_estimate_without_preload_content(
        self,
        get_position_estimate_request: GetPositionEstimateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_position_estimate

        Get estimated position information as a payload in GeoJSON format. The payload measurement data is resolved using solvers that are provided by third-party vendors.

        :param get_position_estimate_request: (required)
        :type get_position_estimate_request: GetPositionEstimateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_position_estimate_serialize(
            get_position_estimate_request=get_position_estimate_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPositionEstimateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_position_estimate_serialize(
        self,
        get_position_estimate_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if get_position_estimate_request is not None:
            _body_params = get_position_estimate_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/position-estimate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_resource_event_configuration(
        self,
        identifier: Annotated[str, Field(strict=True, max_length=256, description="Resource identifier to opt in for event messaging.")],
        identifier_type: Annotated[StrictStr, Field(description="Identifier type of the particular resource identifier for event configuration.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        partner_type: Annotated[Optional[StrictStr], Field(description="Partner type of the resource if the identifier type is <code>PartnerAccountId</code>.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetResourceEventConfigurationResponse:
        """get_resource_event_configuration

        Get the event configuration for a particular resource identifier.

        :param identifier: Resource identifier to opt in for event messaging. (required)
        :type identifier: str
        :param identifier_type: Identifier type of the particular resource identifier for event configuration. (required)
        :type identifier_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param partner_type: Partner type of the resource if the identifier type is <code>PartnerAccountId</code>.
        :type partner_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resource_event_configuration_serialize(
            identifier=identifier,
            identifier_type=identifier_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            partner_type=partner_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetResourceEventConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_resource_event_configuration_with_http_info(
        self,
        identifier: Annotated[str, Field(strict=True, max_length=256, description="Resource identifier to opt in for event messaging.")],
        identifier_type: Annotated[StrictStr, Field(description="Identifier type of the particular resource identifier for event configuration.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        partner_type: Annotated[Optional[StrictStr], Field(description="Partner type of the resource if the identifier type is <code>PartnerAccountId</code>.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetResourceEventConfigurationResponse]:
        """get_resource_event_configuration

        Get the event configuration for a particular resource identifier.

        :param identifier: Resource identifier to opt in for event messaging. (required)
        :type identifier: str
        :param identifier_type: Identifier type of the particular resource identifier for event configuration. (required)
        :type identifier_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param partner_type: Partner type of the resource if the identifier type is <code>PartnerAccountId</code>.
        :type partner_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resource_event_configuration_serialize(
            identifier=identifier,
            identifier_type=identifier_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            partner_type=partner_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetResourceEventConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_resource_event_configuration_without_preload_content(
        self,
        identifier: Annotated[str, Field(strict=True, max_length=256, description="Resource identifier to opt in for event messaging.")],
        identifier_type: Annotated[StrictStr, Field(description="Identifier type of the particular resource identifier for event configuration.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        partner_type: Annotated[Optional[StrictStr], Field(description="Partner type of the resource if the identifier type is <code>PartnerAccountId</code>.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_resource_event_configuration

        Get the event configuration for a particular resource identifier.

        :param identifier: Resource identifier to opt in for event messaging. (required)
        :type identifier: str
        :param identifier_type: Identifier type of the particular resource identifier for event configuration. (required)
        :type identifier_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param partner_type: Partner type of the resource if the identifier type is <code>PartnerAccountId</code>.
        :type partner_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resource_event_configuration_serialize(
            identifier=identifier,
            identifier_type=identifier_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            partner_type=partner_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetResourceEventConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_resource_event_configuration_serialize(
        self,
        identifier,
        identifier_type,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        partner_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if identifier is not None:
            _path_params['Identifier'] = identifier
        # process the query parameters
        if identifier_type is not None:
            
            _query_params.append(('identifierType', identifier_type))
            
        if partner_type is not None:
            
            _query_params.append(('partnerType', partner_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/event-configurations/{Identifier}#identifierType',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_resource_log_level(
        self,
        resource_identifier: Annotated[str, Field(strict=True, max_length=256)],
        resource_type: Annotated[StrictStr, Field(description="The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetResourceLogLevelResponse:
        """get_resource_log_level

        Fetches the log-level override, if any, for a given resource-ID and resource-type. It can be used for a wireless device or a wireless gateway.

        :param resource_identifier:  (required)
        :type resource_identifier: str
        :param resource_type: The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>. (required)
        :type resource_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resource_log_level_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetResourceLogLevelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_resource_log_level_with_http_info(
        self,
        resource_identifier: Annotated[str, Field(strict=True, max_length=256)],
        resource_type: Annotated[StrictStr, Field(description="The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetResourceLogLevelResponse]:
        """get_resource_log_level

        Fetches the log-level override, if any, for a given resource-ID and resource-type. It can be used for a wireless device or a wireless gateway.

        :param resource_identifier:  (required)
        :type resource_identifier: str
        :param resource_type: The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>. (required)
        :type resource_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resource_log_level_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetResourceLogLevelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_resource_log_level_without_preload_content(
        self,
        resource_identifier: Annotated[str, Field(strict=True, max_length=256)],
        resource_type: Annotated[StrictStr, Field(description="The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_resource_log_level

        Fetches the log-level override, if any, for a given resource-ID and resource-type. It can be used for a wireless device or a wireless gateway.

        :param resource_identifier:  (required)
        :type resource_identifier: str
        :param resource_type: The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>. (required)
        :type resource_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resource_log_level_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetResourceLogLevelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_resource_log_level_serialize(
        self,
        resource_identifier,
        resource_type,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_identifier is not None:
            _path_params['ResourceIdentifier'] = resource_identifier
        # process the query parameters
        if resource_type is not None:
            
            _query_params.append(('resourceType', resource_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/log-levels/{ResourceIdentifier}#resourceType',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_resource_position(
        self,
        resource_identifier: Annotated[str, Field(strict=True, description="The identifier of the resource for which position information is retrieved. It can be the wireless device ID or the wireless gateway ID, depending on the resource type.")],
        resource_type: Annotated[StrictStr, Field(description="The type of resource for which position information is retrieved, which can be a wireless device or a wireless gateway.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetResourcePositionResponse:
        """get_resource_position

        Get the position information for a given wireless device or a wireless gateway resource. The position information uses the <a href=\"https://gisgeography.com/wgs84-world-geodetic-system/\"> World Geodetic System (WGS84)</a>.

        :param resource_identifier: The identifier of the resource for which position information is retrieved. It can be the wireless device ID or the wireless gateway ID, depending on the resource type. (required)
        :type resource_identifier: str
        :param resource_type: The type of resource for which position information is retrieved, which can be a wireless device or a wireless gateway. (required)
        :type resource_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resource_position_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetResourcePositionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_resource_position_with_http_info(
        self,
        resource_identifier: Annotated[str, Field(strict=True, description="The identifier of the resource for which position information is retrieved. It can be the wireless device ID or the wireless gateway ID, depending on the resource type.")],
        resource_type: Annotated[StrictStr, Field(description="The type of resource for which position information is retrieved, which can be a wireless device or a wireless gateway.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetResourcePositionResponse]:
        """get_resource_position

        Get the position information for a given wireless device or a wireless gateway resource. The position information uses the <a href=\"https://gisgeography.com/wgs84-world-geodetic-system/\"> World Geodetic System (WGS84)</a>.

        :param resource_identifier: The identifier of the resource for which position information is retrieved. It can be the wireless device ID or the wireless gateway ID, depending on the resource type. (required)
        :type resource_identifier: str
        :param resource_type: The type of resource for which position information is retrieved, which can be a wireless device or a wireless gateway. (required)
        :type resource_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resource_position_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetResourcePositionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_resource_position_without_preload_content(
        self,
        resource_identifier: Annotated[str, Field(strict=True, description="The identifier of the resource for which position information is retrieved. It can be the wireless device ID or the wireless gateway ID, depending on the resource type.")],
        resource_type: Annotated[StrictStr, Field(description="The type of resource for which position information is retrieved, which can be a wireless device or a wireless gateway.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_resource_position

        Get the position information for a given wireless device or a wireless gateway resource. The position information uses the <a href=\"https://gisgeography.com/wgs84-world-geodetic-system/\"> World Geodetic System (WGS84)</a>.

        :param resource_identifier: The identifier of the resource for which position information is retrieved. It can be the wireless device ID or the wireless gateway ID, depending on the resource type. (required)
        :type resource_identifier: str
        :param resource_type: The type of resource for which position information is retrieved, which can be a wireless device or a wireless gateway. (required)
        :type resource_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resource_position_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetResourcePositionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_resource_position_serialize(
        self,
        resource_identifier,
        resource_type,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_identifier is not None:
            _path_params['ResourceIdentifier'] = resource_identifier
        # process the query parameters
        if resource_type is not None:
            
            _query_params.append(('resourceType', resource_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/resource-positions/{ResourceIdentifier}#resourceType',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_service_endpoint(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        service_type: Annotated[Optional[StrictStr], Field(description="The service type for which to get endpoint information about. Can be <code>CUPS</code> for the Configuration and Update Server endpoint, or <code>LNS</code> for the LoRaWAN Network Server endpoint or <code>CLAIM</code> for the global endpoint.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetServiceEndpointResponse:
        """get_service_endpoint

        Gets the account-specific endpoint for Configuration and Update Server (CUPS) protocol or LoRaWAN Network Server (LNS) connections.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param service_type: The service type for which to get endpoint information about. Can be <code>CUPS</code> for the Configuration and Update Server endpoint, or <code>LNS</code> for the LoRaWAN Network Server endpoint or <code>CLAIM</code> for the global endpoint.
        :type service_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_service_endpoint_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            service_type=service_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetServiceEndpointResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_service_endpoint_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        service_type: Annotated[Optional[StrictStr], Field(description="The service type for which to get endpoint information about. Can be <code>CUPS</code> for the Configuration and Update Server endpoint, or <code>LNS</code> for the LoRaWAN Network Server endpoint or <code>CLAIM</code> for the global endpoint.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetServiceEndpointResponse]:
        """get_service_endpoint

        Gets the account-specific endpoint for Configuration and Update Server (CUPS) protocol or LoRaWAN Network Server (LNS) connections.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param service_type: The service type for which to get endpoint information about. Can be <code>CUPS</code> for the Configuration and Update Server endpoint, or <code>LNS</code> for the LoRaWAN Network Server endpoint or <code>CLAIM</code> for the global endpoint.
        :type service_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_service_endpoint_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            service_type=service_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetServiceEndpointResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_service_endpoint_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        service_type: Annotated[Optional[StrictStr], Field(description="The service type for which to get endpoint information about. Can be <code>CUPS</code> for the Configuration and Update Server endpoint, or <code>LNS</code> for the LoRaWAN Network Server endpoint or <code>CLAIM</code> for the global endpoint.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_service_endpoint

        Gets the account-specific endpoint for Configuration and Update Server (CUPS) protocol or LoRaWAN Network Server (LNS) connections.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param service_type: The service type for which to get endpoint information about. Can be <code>CUPS</code> for the Configuration and Update Server endpoint, or <code>LNS</code> for the LoRaWAN Network Server endpoint or <code>CLAIM</code> for the global endpoint.
        :type service_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_service_endpoint_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            service_type=service_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetServiceEndpointResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_service_endpoint_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        service_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if service_type is not None:
            
            _query_params.append(('serviceType', service_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/service-endpoint',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_service_profile(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetServiceProfileResponse:
        """get_service_profile

        Gets information about a service profile.

        :param id: The ID of the resource to get. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_service_profile_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetServiceProfileResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_service_profile_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetServiceProfileResponse]:
        """get_service_profile

        Gets information about a service profile.

        :param id: The ID of the resource to get. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_service_profile_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetServiceProfileResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_service_profile_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_service_profile

        Gets information about a service profile.

        :param id: The ID of the resource to get. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_service_profile_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetServiceProfileResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_service_profile_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/service-profiles/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_wireless_device(
        self,
        identifier: Annotated[str, Field(strict=True, max_length=256, description="The identifier of the wireless device to get.")],
        identifier_type: Annotated[StrictStr, Field(description="The type of identifier used in <code>identifier</code>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetWirelessDeviceResponse:
        """get_wireless_device

        Gets information about a wireless device.

        :param identifier: The identifier of the wireless device to get. (required)
        :type identifier: str
        :param identifier_type: The type of identifier used in <code>identifier</code>. (required)
        :type identifier_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_device_serialize(
            identifier=identifier,
            identifier_type=identifier_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessDeviceResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_wireless_device_with_http_info(
        self,
        identifier: Annotated[str, Field(strict=True, max_length=256, description="The identifier of the wireless device to get.")],
        identifier_type: Annotated[StrictStr, Field(description="The type of identifier used in <code>identifier</code>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetWirelessDeviceResponse]:
        """get_wireless_device

        Gets information about a wireless device.

        :param identifier: The identifier of the wireless device to get. (required)
        :type identifier: str
        :param identifier_type: The type of identifier used in <code>identifier</code>. (required)
        :type identifier_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_device_serialize(
            identifier=identifier,
            identifier_type=identifier_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessDeviceResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_wireless_device_without_preload_content(
        self,
        identifier: Annotated[str, Field(strict=True, max_length=256, description="The identifier of the wireless device to get.")],
        identifier_type: Annotated[StrictStr, Field(description="The type of identifier used in <code>identifier</code>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_wireless_device

        Gets information about a wireless device.

        :param identifier: The identifier of the wireless device to get. (required)
        :type identifier: str
        :param identifier_type: The type of identifier used in <code>identifier</code>. (required)
        :type identifier_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_device_serialize(
            identifier=identifier,
            identifier_type=identifier_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessDeviceResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_wireless_device_serialize(
        self,
        identifier,
        identifier_type,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if identifier is not None:
            _path_params['Identifier'] = identifier
        # process the query parameters
        if identifier_type is not None:
            
            _query_params.append(('identifierType', identifier_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless-devices/{Identifier}#identifierType',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_wireless_device_import_task(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The identifier of the import task for which information is requested.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetWirelessDeviceImportTaskResponse:
        """get_wireless_device_import_task

        Get information about an import task and count of device onboarding summary information for the import task.

        :param id: The identifier of the import task for which information is requested. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_device_import_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessDeviceImportTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_wireless_device_import_task_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The identifier of the import task for which information is requested.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetWirelessDeviceImportTaskResponse]:
        """get_wireless_device_import_task

        Get information about an import task and count of device onboarding summary information for the import task.

        :param id: The identifier of the import task for which information is requested. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_device_import_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessDeviceImportTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_wireless_device_import_task_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The identifier of the import task for which information is requested.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_wireless_device_import_task

        Get information about an import task and count of device onboarding summary information for the import task.

        :param id: The identifier of the import task for which information is requested. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_device_import_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessDeviceImportTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_wireless_device_import_task_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless_device_import_task/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_wireless_device_statistics(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the wireless device for which to get the data.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetWirelessDeviceStatisticsResponse:
        """get_wireless_device_statistics

        Gets operating information about a wireless device.

        :param id: The ID of the wireless device for which to get the data. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_device_statistics_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessDeviceStatisticsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_wireless_device_statistics_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the wireless device for which to get the data.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetWirelessDeviceStatisticsResponse]:
        """get_wireless_device_statistics

        Gets operating information about a wireless device.

        :param id: The ID of the wireless device for which to get the data. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_device_statistics_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessDeviceStatisticsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_wireless_device_statistics_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the wireless device for which to get the data.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_wireless_device_statistics

        Gets operating information about a wireless device.

        :param id: The ID of the wireless device for which to get the data. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_device_statistics_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessDeviceStatisticsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_wireless_device_statistics_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless-devices/{Id}/statistics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_wireless_gateway(
        self,
        identifier: Annotated[str, Field(strict=True, max_length=256, description="The identifier of the wireless gateway to get.")],
        identifier_type: Annotated[StrictStr, Field(description="The type of identifier used in <code>identifier</code>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetWirelessGatewayResponse:
        """get_wireless_gateway

        Gets information about a wireless gateway.

        :param identifier: The identifier of the wireless gateway to get. (required)
        :type identifier: str
        :param identifier_type: The type of identifier used in <code>identifier</code>. (required)
        :type identifier_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_gateway_serialize(
            identifier=identifier,
            identifier_type=identifier_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessGatewayResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_wireless_gateway_with_http_info(
        self,
        identifier: Annotated[str, Field(strict=True, max_length=256, description="The identifier of the wireless gateway to get.")],
        identifier_type: Annotated[StrictStr, Field(description="The type of identifier used in <code>identifier</code>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetWirelessGatewayResponse]:
        """get_wireless_gateway

        Gets information about a wireless gateway.

        :param identifier: The identifier of the wireless gateway to get. (required)
        :type identifier: str
        :param identifier_type: The type of identifier used in <code>identifier</code>. (required)
        :type identifier_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_gateway_serialize(
            identifier=identifier,
            identifier_type=identifier_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessGatewayResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_wireless_gateway_without_preload_content(
        self,
        identifier: Annotated[str, Field(strict=True, max_length=256, description="The identifier of the wireless gateway to get.")],
        identifier_type: Annotated[StrictStr, Field(description="The type of identifier used in <code>identifier</code>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_wireless_gateway

        Gets information about a wireless gateway.

        :param identifier: The identifier of the wireless gateway to get. (required)
        :type identifier: str
        :param identifier_type: The type of identifier used in <code>identifier</code>. (required)
        :type identifier_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_gateway_serialize(
            identifier=identifier,
            identifier_type=identifier_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessGatewayResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_wireless_gateway_serialize(
        self,
        identifier,
        identifier_type,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if identifier is not None:
            _path_params['Identifier'] = identifier
        # process the query parameters
        if identifier_type is not None:
            
            _query_params.append(('identifierType', identifier_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless-gateways/{Identifier}#identifierType',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_wireless_gateway_certificate(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetWirelessGatewayCertificateResponse:
        """get_wireless_gateway_certificate

        Gets the ID of the certificate that is currently associated with a wireless gateway.

        :param id: The ID of the resource to get. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_gateway_certificate_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessGatewayCertificateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_wireless_gateway_certificate_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetWirelessGatewayCertificateResponse]:
        """get_wireless_gateway_certificate

        Gets the ID of the certificate that is currently associated with a wireless gateway.

        :param id: The ID of the resource to get. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_gateway_certificate_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessGatewayCertificateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_wireless_gateway_certificate_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_wireless_gateway_certificate

        Gets the ID of the certificate that is currently associated with a wireless gateway.

        :param id: The ID of the resource to get. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_gateway_certificate_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessGatewayCertificateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_wireless_gateway_certificate_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless-gateways/{Id}/certificate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_wireless_gateway_firmware_information(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetWirelessGatewayFirmwareInformationResponse:
        """get_wireless_gateway_firmware_information

        Gets the firmware version and other information about a wireless gateway.

        :param id: The ID of the resource to get. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_gateway_firmware_information_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessGatewayFirmwareInformationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_wireless_gateway_firmware_information_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetWirelessGatewayFirmwareInformationResponse]:
        """get_wireless_gateway_firmware_information

        Gets the firmware version and other information about a wireless gateway.

        :param id: The ID of the resource to get. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_gateway_firmware_information_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessGatewayFirmwareInformationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_wireless_gateway_firmware_information_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_wireless_gateway_firmware_information

        Gets the firmware version and other information about a wireless gateway.

        :param id: The ID of the resource to get. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_gateway_firmware_information_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessGatewayFirmwareInformationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_wireless_gateway_firmware_information_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless-gateways/{Id}/firmware-information',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_wireless_gateway_statistics(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the wireless gateway for which to get the data.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetWirelessGatewayStatisticsResponse:
        """get_wireless_gateway_statistics

        Gets operating information about a wireless gateway.

        :param id: The ID of the wireless gateway for which to get the data. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_gateway_statistics_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessGatewayStatisticsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_wireless_gateway_statistics_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the wireless gateway for which to get the data.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetWirelessGatewayStatisticsResponse]:
        """get_wireless_gateway_statistics

        Gets operating information about a wireless gateway.

        :param id: The ID of the wireless gateway for which to get the data. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_gateway_statistics_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessGatewayStatisticsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_wireless_gateway_statistics_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the wireless gateway for which to get the data.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_wireless_gateway_statistics

        Gets operating information about a wireless gateway.

        :param id: The ID of the wireless gateway for which to get the data. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_gateway_statistics_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessGatewayStatisticsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_wireless_gateway_statistics_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless-gateways/{Id}/statistics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_wireless_gateway_task(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetWirelessGatewayTaskResponse:
        """get_wireless_gateway_task

        Gets information about a wireless gateway task.

        :param id: The ID of the resource to get. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_gateway_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessGatewayTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_wireless_gateway_task_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetWirelessGatewayTaskResponse]:
        """get_wireless_gateway_task

        Gets information about a wireless gateway task.

        :param id: The ID of the resource to get. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_gateway_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessGatewayTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_wireless_gateway_task_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_wireless_gateway_task

        Gets information about a wireless gateway task.

        :param id: The ID of the resource to get. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_gateway_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessGatewayTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_wireless_gateway_task_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless-gateways/{Id}/tasks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_wireless_gateway_task_definition(
        self,
        id: Annotated[str, Field(strict=True, max_length=36, description="The ID of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetWirelessGatewayTaskDefinitionResponse:
        """get_wireless_gateway_task_definition

        Gets information about a wireless gateway task definition.

        :param id: The ID of the resource to get. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_gateway_task_definition_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessGatewayTaskDefinitionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_wireless_gateway_task_definition_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=36, description="The ID of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetWirelessGatewayTaskDefinitionResponse]:
        """get_wireless_gateway_task_definition

        Gets information about a wireless gateway task definition.

        :param id: The ID of the resource to get. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_gateway_task_definition_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessGatewayTaskDefinitionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_wireless_gateway_task_definition_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=36, description="The ID of the resource to get.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_wireless_gateway_task_definition

        Gets information about a wireless gateway task definition.

        :param id: The ID of the resource to get. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_wireless_gateway_task_definition_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetWirelessGatewayTaskDefinitionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_wireless_gateway_task_definition_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless-gateway-task-definitions/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_destinations(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListDestinationsResponse:
        """list_destinations

        Lists the destinations registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_destinations_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListDestinationsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_destinations_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListDestinationsResponse]:
        """list_destinations

        Lists the destinations registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_destinations_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListDestinationsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_destinations_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_destinations

        Lists the destinations registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_destinations_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListDestinationsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_destinations_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        max_results2,
        next_token2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        if max_results2 is not None:
            
            _query_params.append(('MaxResults', max_results2))
            
        if next_token2 is not None:
            
            _query_params.append(('NextToken', next_token2))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/destinations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_device_profiles(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        device_profile_type: Annotated[Optional[StrictStr], Field(description="A filter to list only device profiles that use this type, which can be <code>LoRaWAN</code> or <code>Sidewalk</code>.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListDeviceProfilesResponse:
        """list_device_profiles

        Lists the device profiles registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param device_profile_type: A filter to list only device profiles that use this type, which can be <code>LoRaWAN</code> or <code>Sidewalk</code>.
        :type device_profile_type: str
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_device_profiles_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            device_profile_type=device_profile_type,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListDeviceProfilesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_device_profiles_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        device_profile_type: Annotated[Optional[StrictStr], Field(description="A filter to list only device profiles that use this type, which can be <code>LoRaWAN</code> or <code>Sidewalk</code>.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListDeviceProfilesResponse]:
        """list_device_profiles

        Lists the device profiles registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param device_profile_type: A filter to list only device profiles that use this type, which can be <code>LoRaWAN</code> or <code>Sidewalk</code>.
        :type device_profile_type: str
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_device_profiles_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            device_profile_type=device_profile_type,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListDeviceProfilesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_device_profiles_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        device_profile_type: Annotated[Optional[StrictStr], Field(description="A filter to list only device profiles that use this type, which can be <code>LoRaWAN</code> or <code>Sidewalk</code>.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_device_profiles

        Lists the device profiles registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param device_profile_type: A filter to list only device profiles that use this type, which can be <code>LoRaWAN</code> or <code>Sidewalk</code>.
        :type device_profile_type: str
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_device_profiles_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            device_profile_type=device_profile_type,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListDeviceProfilesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_device_profiles_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        next_token,
        max_results,
        device_profile_type,
        max_results2,
        next_token2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if device_profile_type is not None:
            
            _query_params.append(('deviceProfileType', device_profile_type))
            
        if max_results2 is not None:
            
            _query_params.append(('MaxResults', max_results2))
            
        if next_token2 is not None:
            
            _query_params.append(('NextToken', next_token2))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/device-profiles',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_devices_for_wireless_device_import_task(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The identifier of the import task for which wireless devices are listed.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="The status of the devices in the import task.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListDevicesForWirelessDeviceImportTaskResponse:
        """list_devices_for_wireless_device_import_task

        List the Sidewalk devices in an import task and their onboarding status.

        :param id: The identifier of the import task for which wireless devices are listed. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: 
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.
        :type next_token: str
        :param status: The status of the devices in the import task.
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_devices_for_wireless_device_import_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListDevicesForWirelessDeviceImportTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_devices_for_wireless_device_import_task_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The identifier of the import task for which wireless devices are listed.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="The status of the devices in the import task.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListDevicesForWirelessDeviceImportTaskResponse]:
        """list_devices_for_wireless_device_import_task

        List the Sidewalk devices in an import task and their onboarding status.

        :param id: The identifier of the import task for which wireless devices are listed. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: 
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.
        :type next_token: str
        :param status: The status of the devices in the import task.
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_devices_for_wireless_device_import_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListDevicesForWirelessDeviceImportTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_devices_for_wireless_device_import_task_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The identifier of the import task for which wireless devices are listed.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="The status of the devices in the import task.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_devices_for_wireless_device_import_task

        List the Sidewalk devices in an import task and their onboarding status.

        :param id: The identifier of the import task for which wireless devices are listed. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: 
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.
        :type next_token: str
        :param status: The status of the devices in the import task.
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_devices_for_wireless_device_import_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListDevicesForWirelessDeviceImportTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_devices_for_wireless_device_import_task_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        status,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless_device_import_task#id',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_event_configurations(
        self,
        resource_type: Annotated[StrictStr, Field(description="Resource type to filter event configurations.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListEventConfigurationsResponse:
        """list_event_configurations

        List event configurations where at least one event topic has been enabled.

        :param resource_type: Resource type to filter event configurations. (required)
        :type resource_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: 
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_event_configurations_serialize(
            resource_type=resource_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListEventConfigurationsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_event_configurations_with_http_info(
        self,
        resource_type: Annotated[StrictStr, Field(description="Resource type to filter event configurations.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListEventConfigurationsResponse]:
        """list_event_configurations

        List event configurations where at least one event topic has been enabled.

        :param resource_type: Resource type to filter event configurations. (required)
        :type resource_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: 
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_event_configurations_serialize(
            resource_type=resource_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListEventConfigurationsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_event_configurations_without_preload_content(
        self,
        resource_type: Annotated[StrictStr, Field(description="Resource type to filter event configurations.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_event_configurations

        List event configurations where at least one event topic has been enabled.

        :param resource_type: Resource type to filter event configurations. (required)
        :type resource_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: 
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_event_configurations_serialize(
            resource_type=resource_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListEventConfigurationsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_event_configurations_serialize(
        self,
        resource_type,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if resource_type is not None:
            
            _query_params.append(('resourceType', resource_type))
            
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/event-configurations#resourceType',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_fuota_tasks(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListFuotaTasksResponse:
        """list_fuota_tasks

        Lists the FUOTA tasks registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: 
        :type max_results: int
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_fuota_tasks_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListFuotaTasksResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_fuota_tasks_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListFuotaTasksResponse]:
        """list_fuota_tasks

        Lists the FUOTA tasks registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: 
        :type max_results: int
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_fuota_tasks_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListFuotaTasksResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_fuota_tasks_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_fuota_tasks

        Lists the FUOTA tasks registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: 
        :type max_results: int
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_fuota_tasks_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListFuotaTasksResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_fuota_tasks_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        next_token,
        max_results,
        max_results2,
        next_token2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if max_results2 is not None:
            
            _query_params.append(('MaxResults', max_results2))
            
        if next_token2 is not None:
            
            _query_params.append(('NextToken', next_token2))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/fuota-tasks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_multicast_groups(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListMulticastGroupsResponse:
        """list_multicast_groups

        Lists the multicast groups registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: 
        :type max_results: int
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_multicast_groups_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListMulticastGroupsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_multicast_groups_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListMulticastGroupsResponse]:
        """list_multicast_groups

        Lists the multicast groups registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: 
        :type max_results: int
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_multicast_groups_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListMulticastGroupsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_multicast_groups_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_multicast_groups

        Lists the multicast groups registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: 
        :type max_results: int
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_multicast_groups_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListMulticastGroupsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_multicast_groups_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        next_token,
        max_results,
        max_results2,
        next_token2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if max_results2 is not None:
            
            _query_params.append(('MaxResults', max_results2))
            
        if next_token2 is not None:
            
            _query_params.append(('NextToken', next_token2))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/multicast-groups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_multicast_groups_by_fuota_task(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListMulticastGroupsByFuotaTaskResponse:
        """list_multicast_groups_by_fuota_task

        List all multicast groups associated with a fuota task.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: 
        :type max_results: int
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_multicast_groups_by_fuota_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListMulticastGroupsByFuotaTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_multicast_groups_by_fuota_task_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListMulticastGroupsByFuotaTaskResponse]:
        """list_multicast_groups_by_fuota_task

        List all multicast groups associated with a fuota task.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: 
        :type max_results: int
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_multicast_groups_by_fuota_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListMulticastGroupsByFuotaTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_multicast_groups_by_fuota_task_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_multicast_groups_by_fuota_task

        List all multicast groups associated with a fuota task.

        :param id:  (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: 
        :type max_results: int
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_multicast_groups_by_fuota_task_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListMulticastGroupsByFuotaTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_multicast_groups_by_fuota_task_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        next_token,
        max_results,
        max_results2,
        next_token2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if max_results2 is not None:
            
            _query_params.append(('MaxResults', max_results2))
            
        if next_token2 is not None:
            
            _query_params.append(('NextToken', next_token2))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/fuota-tasks/{Id}/multicast-groups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_network_analyzer_configurations(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListNetworkAnalyzerConfigurationsResponse:
        """list_network_analyzer_configurations

        Lists the network analyzer configurations.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: 
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_network_analyzer_configurations_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListNetworkAnalyzerConfigurationsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_network_analyzer_configurations_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListNetworkAnalyzerConfigurationsResponse]:
        """list_network_analyzer_configurations

        Lists the network analyzer configurations.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: 
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_network_analyzer_configurations_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListNetworkAnalyzerConfigurationsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_network_analyzer_configurations_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_network_analyzer_configurations

        Lists the network analyzer configurations.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: 
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_network_analyzer_configurations_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListNetworkAnalyzerConfigurationsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_network_analyzer_configurations_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        max_results2,
        next_token2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        if max_results2 is not None:
            
            _query_params.append(('MaxResults', max_results2))
            
        if next_token2 is not None:
            
            _query_params.append(('NextToken', next_token2))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/network-analyzer-configurations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_partner_accounts(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListPartnerAccountsResponse:
        """list_partner_accounts

        Lists the partner accounts associated with your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_partner_accounts_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListPartnerAccountsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_partner_accounts_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListPartnerAccountsResponse]:
        """list_partner_accounts

        Lists the partner accounts associated with your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_partner_accounts_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListPartnerAccountsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_partner_accounts_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_partner_accounts

        Lists the partner accounts associated with your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_partner_accounts_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListPartnerAccountsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_partner_accounts_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        next_token,
        max_results,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/partner-accounts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_position_configurations(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        resource_type: Annotated[Optional[StrictStr], Field(description="Resource type for which position configurations are listed.")] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListPositionConfigurationsResponse:
        """(Deprecated) list_position_configurations

        <p>List position configurations for a given resource, such as positioning solvers.</p> <important> <p>This action is no longer supported. Calls to retrieve position information should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_GetResourcePosition.html\">GetResourcePosition</a> API operation instead.</p> </important>

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param resource_type: Resource type for which position configurations are listed.
        :type resource_type: str
        :param max_results: 
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /position-configurations is deprecated.", DeprecationWarning)

        _param = self._list_position_configurations_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            resource_type=resource_type,
            max_results=max_results,
            next_token=next_token,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListPositionConfigurationsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_position_configurations_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        resource_type: Annotated[Optional[StrictStr], Field(description="Resource type for which position configurations are listed.")] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListPositionConfigurationsResponse]:
        """(Deprecated) list_position_configurations

        <p>List position configurations for a given resource, such as positioning solvers.</p> <important> <p>This action is no longer supported. Calls to retrieve position information should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_GetResourcePosition.html\">GetResourcePosition</a> API operation instead.</p> </important>

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param resource_type: Resource type for which position configurations are listed.
        :type resource_type: str
        :param max_results: 
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /position-configurations is deprecated.", DeprecationWarning)

        _param = self._list_position_configurations_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            resource_type=resource_type,
            max_results=max_results,
            next_token=next_token,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListPositionConfigurationsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_position_configurations_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        resource_type: Annotated[Optional[StrictStr], Field(description="Resource type for which position configurations are listed.")] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) list_position_configurations

        <p>List position configurations for a given resource, such as positioning solvers.</p> <important> <p>This action is no longer supported. Calls to retrieve position information should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_GetResourcePosition.html\">GetResourcePosition</a> API operation instead.</p> </important>

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param resource_type: Resource type for which position configurations are listed.
        :type resource_type: str
        :param max_results: 
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("GET /position-configurations is deprecated.", DeprecationWarning)

        _param = self._list_position_configurations_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            resource_type=resource_type,
            max_results=max_results,
            next_token=next_token,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListPositionConfigurationsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_position_configurations_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        resource_type,
        max_results,
        next_token,
        max_results2,
        next_token2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if resource_type is not None:
            
            _query_params.append(('resourceType', resource_type))
            
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        if max_results2 is not None:
            
            _query_params.append(('MaxResults', max_results2))
            
        if next_token2 is not None:
            
            _query_params.append(('NextToken', next_token2))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/position-configurations',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_queued_messages(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of a given wireless device which the downlink message packets are being sent.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        wireless_device_type: Annotated[Optional[StrictStr], Field(description="The wireless device type, whic can be either Sidewalk or LoRaWAN.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListQueuedMessagesResponse:
        """list_queued_messages

        List queued messages in the downlink queue.

        :param id: The ID of a given wireless device which the downlink message packets are being sent. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param wireless_device_type: The wireless device type, whic can be either Sidewalk or LoRaWAN.
        :type wireless_device_type: str
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_queued_messages_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            wireless_device_type=wireless_device_type,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListQueuedMessagesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_queued_messages_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of a given wireless device which the downlink message packets are being sent.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        wireless_device_type: Annotated[Optional[StrictStr], Field(description="The wireless device type, whic can be either Sidewalk or LoRaWAN.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListQueuedMessagesResponse]:
        """list_queued_messages

        List queued messages in the downlink queue.

        :param id: The ID of a given wireless device which the downlink message packets are being sent. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param wireless_device_type: The wireless device type, whic can be either Sidewalk or LoRaWAN.
        :type wireless_device_type: str
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_queued_messages_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            wireless_device_type=wireless_device_type,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListQueuedMessagesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_queued_messages_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of a given wireless device which the downlink message packets are being sent.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        wireless_device_type: Annotated[Optional[StrictStr], Field(description="The wireless device type, whic can be either Sidewalk or LoRaWAN.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_queued_messages

        List queued messages in the downlink queue.

        :param id: The ID of a given wireless device which the downlink message packets are being sent. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param wireless_device_type: The wireless device type, whic can be either Sidewalk or LoRaWAN.
        :type wireless_device_type: str
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_queued_messages_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            wireless_device_type=wireless_device_type,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListQueuedMessagesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_queued_messages_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        next_token,
        max_results,
        wireless_device_type,
        max_results2,
        next_token2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if wireless_device_type is not None:
            
            _query_params.append(('WirelessDeviceType', wireless_device_type))
            
        if max_results2 is not None:
            
            _query_params.append(('MaxResults', max_results2))
            
        if next_token2 is not None:
            
            _query_params.append(('NextToken', next_token2))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless-devices/{Id}/data',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_service_profiles(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListServiceProfilesResponse:
        """list_service_profiles

        Lists the service profiles registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_service_profiles_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListServiceProfilesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_service_profiles_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListServiceProfilesResponse]:
        """list_service_profiles

        Lists the service profiles registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_service_profiles_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListServiceProfilesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_service_profiles_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_service_profiles

        Lists the service profiles registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_service_profiles_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListServiceProfilesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_service_profiles_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        next_token,
        max_results,
        max_results2,
        next_token2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if max_results2 is not None:
            
            _query_params.append(('MaxResults', max_results2))
            
        if next_token2 is not None:
            
            _query_params.append(('NextToken', next_token2))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/service-profiles',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_tags_for_resource(
        self,
        resource_arn: Annotated[str, Field(min_length=1, strict=True, max_length=1011, description="The ARN of the resource for which you want to list tags.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListTagsForResourceResponse:
        """list_tags_for_resource

        Lists the tags (metadata) you have assigned to the resource.

        :param resource_arn: The ARN of the resource for which you want to list tags. (required)
        :type resource_arn: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_tags_for_resource_serialize(
            resource_arn=resource_arn,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTagsForResourceResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_tags_for_resource_with_http_info(
        self,
        resource_arn: Annotated[str, Field(min_length=1, strict=True, max_length=1011, description="The ARN of the resource for which you want to list tags.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListTagsForResourceResponse]:
        """list_tags_for_resource

        Lists the tags (metadata) you have assigned to the resource.

        :param resource_arn: The ARN of the resource for which you want to list tags. (required)
        :type resource_arn: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_tags_for_resource_serialize(
            resource_arn=resource_arn,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTagsForResourceResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_tags_for_resource_without_preload_content(
        self,
        resource_arn: Annotated[str, Field(min_length=1, strict=True, max_length=1011, description="The ARN of the resource for which you want to list tags.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_tags_for_resource

        Lists the tags (metadata) you have assigned to the resource.

        :param resource_arn: The ARN of the resource for which you want to list tags. (required)
        :type resource_arn: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_tags_for_resource_serialize(
            resource_arn=resource_arn,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTagsForResourceResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_tags_for_resource_serialize(
        self,
        resource_arn,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if resource_arn is not None:
            
            _query_params.append(('resourceArn', resource_arn))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tags#resourceArn',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_wireless_device_import_tasks(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListWirelessDeviceImportTasksResponse:
        """list_wireless_device_import_tasks

        List wireless devices that have been added to an import task.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: 
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_wireless_device_import_tasks_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWirelessDeviceImportTasksResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_wireless_device_import_tasks_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListWirelessDeviceImportTasksResponse]:
        """list_wireless_device_import_tasks

        List wireless devices that have been added to an import task.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: 
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_wireless_device_import_tasks_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWirelessDeviceImportTasksResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_wireless_device_import_tasks_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Optional[Annotated[int, Field(le=250, strict=True, ge=0)]] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_wireless_device_import_tasks

        List wireless devices that have been added to an import task.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: 
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <code>null</code> to receive the first set of results.
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_wireless_device_import_tasks_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWirelessDeviceImportTasksResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_wireless_device_import_tasks_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless_device_import_tasks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_wireless_devices(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        destination_name: Annotated[Optional[Annotated[str, Field(strict=True, max_length=128)]], Field(description="A filter to list only the wireless devices that use this destination.")] = None,
        device_profile_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=256)]], Field(description="A filter to list only the wireless devices that use this device profile.")] = None,
        service_profile_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=256)]], Field(description="A filter to list only the wireless devices that use this service profile.")] = None,
        wireless_device_type: Annotated[Optional[StrictStr], Field(description="A filter to list only the wireless devices that use this wireless device type.")] = None,
        fuota_task_id: Optional[Annotated[str, Field(strict=True, max_length=256)]] = None,
        multicast_group_id: Optional[Annotated[str, Field(strict=True, max_length=256)]] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListWirelessDevicesResponse:
        """list_wireless_devices

        Lists the wireless devices registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param destination_name: A filter to list only the wireless devices that use this destination.
        :type destination_name: str
        :param device_profile_id: A filter to list only the wireless devices that use this device profile.
        :type device_profile_id: str
        :param service_profile_id: A filter to list only the wireless devices that use this service profile.
        :type service_profile_id: str
        :param wireless_device_type: A filter to list only the wireless devices that use this wireless device type.
        :type wireless_device_type: str
        :param fuota_task_id: 
        :type fuota_task_id: str
        :param multicast_group_id: 
        :type multicast_group_id: str
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_wireless_devices_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            destination_name=destination_name,
            device_profile_id=device_profile_id,
            service_profile_id=service_profile_id,
            wireless_device_type=wireless_device_type,
            fuota_task_id=fuota_task_id,
            multicast_group_id=multicast_group_id,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWirelessDevicesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_wireless_devices_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        destination_name: Annotated[Optional[Annotated[str, Field(strict=True, max_length=128)]], Field(description="A filter to list only the wireless devices that use this destination.")] = None,
        device_profile_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=256)]], Field(description="A filter to list only the wireless devices that use this device profile.")] = None,
        service_profile_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=256)]], Field(description="A filter to list only the wireless devices that use this service profile.")] = None,
        wireless_device_type: Annotated[Optional[StrictStr], Field(description="A filter to list only the wireless devices that use this wireless device type.")] = None,
        fuota_task_id: Optional[Annotated[str, Field(strict=True, max_length=256)]] = None,
        multicast_group_id: Optional[Annotated[str, Field(strict=True, max_length=256)]] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListWirelessDevicesResponse]:
        """list_wireless_devices

        Lists the wireless devices registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param destination_name: A filter to list only the wireless devices that use this destination.
        :type destination_name: str
        :param device_profile_id: A filter to list only the wireless devices that use this device profile.
        :type device_profile_id: str
        :param service_profile_id: A filter to list only the wireless devices that use this service profile.
        :type service_profile_id: str
        :param wireless_device_type: A filter to list only the wireless devices that use this wireless device type.
        :type wireless_device_type: str
        :param fuota_task_id: 
        :type fuota_task_id: str
        :param multicast_group_id: 
        :type multicast_group_id: str
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_wireless_devices_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            destination_name=destination_name,
            device_profile_id=device_profile_id,
            service_profile_id=service_profile_id,
            wireless_device_type=wireless_device_type,
            fuota_task_id=fuota_task_id,
            multicast_group_id=multicast_group_id,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWirelessDevicesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_wireless_devices_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        destination_name: Annotated[Optional[Annotated[str, Field(strict=True, max_length=128)]], Field(description="A filter to list only the wireless devices that use this destination.")] = None,
        device_profile_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=256)]], Field(description="A filter to list only the wireless devices that use this device profile.")] = None,
        service_profile_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=256)]], Field(description="A filter to list only the wireless devices that use this service profile.")] = None,
        wireless_device_type: Annotated[Optional[StrictStr], Field(description="A filter to list only the wireless devices that use this wireless device type.")] = None,
        fuota_task_id: Optional[Annotated[str, Field(strict=True, max_length=256)]] = None,
        multicast_group_id: Optional[Annotated[str, Field(strict=True, max_length=256)]] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_wireless_devices

        Lists the wireless devices registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param destination_name: A filter to list only the wireless devices that use this destination.
        :type destination_name: str
        :param device_profile_id: A filter to list only the wireless devices that use this device profile.
        :type device_profile_id: str
        :param service_profile_id: A filter to list only the wireless devices that use this service profile.
        :type service_profile_id: str
        :param wireless_device_type: A filter to list only the wireless devices that use this wireless device type.
        :type wireless_device_type: str
        :param fuota_task_id: 
        :type fuota_task_id: str
        :param multicast_group_id: 
        :type multicast_group_id: str
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_wireless_devices_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            destination_name=destination_name,
            device_profile_id=device_profile_id,
            service_profile_id=service_profile_id,
            wireless_device_type=wireless_device_type,
            fuota_task_id=fuota_task_id,
            multicast_group_id=multicast_group_id,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWirelessDevicesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_wireless_devices_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        destination_name,
        device_profile_id,
        service_profile_id,
        wireless_device_type,
        fuota_task_id,
        multicast_group_id,
        max_results2,
        next_token2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        if destination_name is not None:
            
            _query_params.append(('destinationName', destination_name))
            
        if device_profile_id is not None:
            
            _query_params.append(('deviceProfileId', device_profile_id))
            
        if service_profile_id is not None:
            
            _query_params.append(('serviceProfileId', service_profile_id))
            
        if wireless_device_type is not None:
            
            _query_params.append(('wirelessDeviceType', wireless_device_type))
            
        if fuota_task_id is not None:
            
            _query_params.append(('fuotaTaskId', fuota_task_id))
            
        if multicast_group_id is not None:
            
            _query_params.append(('multicastGroupId', multicast_group_id))
            
        if max_results2 is not None:
            
            _query_params.append(('MaxResults', max_results2))
            
        if next_token2 is not None:
            
            _query_params.append(('NextToken', next_token2))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless-devices',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_wireless_gateway_task_definitions(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        task_definition_type: Annotated[Optional[StrictStr], Field(description="A filter to list only the wireless gateway task definitions that use this task definition type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListWirelessGatewayTaskDefinitionsResponse:
        """list_wireless_gateway_task_definitions

        List the wireless gateway tasks definitions registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param task_definition_type: A filter to list only the wireless gateway task definitions that use this task definition type.
        :type task_definition_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_wireless_gateway_task_definitions_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            task_definition_type=task_definition_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWirelessGatewayTaskDefinitionsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_wireless_gateway_task_definitions_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        task_definition_type: Annotated[Optional[StrictStr], Field(description="A filter to list only the wireless gateway task definitions that use this task definition type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListWirelessGatewayTaskDefinitionsResponse]:
        """list_wireless_gateway_task_definitions

        List the wireless gateway tasks definitions registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param task_definition_type: A filter to list only the wireless gateway task definitions that use this task definition type.
        :type task_definition_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_wireless_gateway_task_definitions_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            task_definition_type=task_definition_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWirelessGatewayTaskDefinitionsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_wireless_gateway_task_definitions_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        task_definition_type: Annotated[Optional[StrictStr], Field(description="A filter to list only the wireless gateway task definitions that use this task definition type.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_wireless_gateway_task_definitions

        List the wireless gateway tasks definitions registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param task_definition_type: A filter to list only the wireless gateway task definitions that use this task definition type.
        :type task_definition_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_wireless_gateway_task_definitions_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            task_definition_type=task_definition_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWirelessGatewayTaskDefinitionsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_wireless_gateway_task_definitions_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        task_definition_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        if task_definition_type is not None:
            
            _query_params.append(('taskDefinitionType', task_definition_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless-gateway-task-definitions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_wireless_gateways(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListWirelessGatewaysResponse:
        """list_wireless_gateways

        Lists the wireless gateways registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_wireless_gateways_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWirelessGatewaysResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_wireless_gateways_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListWirelessGatewaysResponse]:
        """list_wireless_gateways

        Lists the wireless gateways registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_wireless_gateways_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWirelessGatewaysResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_wireless_gateways_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4096)]], Field(description="To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=250, strict=True, ge=0)]], Field(description="The maximum number of results to return in this operation.")] = None,
        max_results2: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token2: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_wireless_gateways

        Lists the wireless gateways registered to your AWS account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: To retrieve the next set of results, the <code>nextToken</code> value from a previous response; otherwise <b>null</b> to receive the first set of results.
        :type next_token: str
        :param max_results: The maximum number of results to return in this operation.
        :type max_results: int
        :param max_results2: Pagination limit
        :type max_results2: str
        :param next_token2: Pagination token
        :type next_token2: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_wireless_gateways_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            max_results=max_results,
            max_results2=max_results2,
            next_token2=next_token2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWirelessGatewaysResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_wireless_gateways_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        next_token,
        max_results,
        max_results2,
        next_token2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if max_results2 is not None:
            
            _query_params.append(('MaxResults', max_results2))
            
        if next_token2 is not None:
            
            _query_params.append(('NextToken', next_token2))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/wireless-gateways',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_position_configuration(
        self,
        resource_identifier: Annotated[str, Field(strict=True, description="Resource identifier used to update the position configuration.")],
        resource_type: Annotated[StrictStr, Field(description="Resource type of the resource for which you want to update the position configuration.")],
        put_position_configuration_request: PutPositionConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """(Deprecated) put_position_configuration

        <p>Put position configuration for a given resource.</p> <important> <p>This action is no longer supported. Calls to update the position configuration should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_UpdateResourcePosition.html\">UpdateResourcePosition</a> API operation instead.</p> </important>

        :param resource_identifier: Resource identifier used to update the position configuration. (required)
        :type resource_identifier: str
        :param resource_type: Resource type of the resource for which you want to update the position configuration. (required)
        :type resource_type: str
        :param put_position_configuration_request: (required)
        :type put_position_configuration_request: PutPositionConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PUT /position-configurations/{ResourceIdentifier}#resourceType is deprecated.", DeprecationWarning)

        _param = self._put_position_configuration_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            put_position_configuration_request=put_position_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_position_configuration_with_http_info(
        self,
        resource_identifier: Annotated[str, Field(strict=True, description="Resource identifier used to update the position configuration.")],
        resource_type: Annotated[StrictStr, Field(description="Resource type of the resource for which you want to update the position configuration.")],
        put_position_configuration_request: PutPositionConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """(Deprecated) put_position_configuration

        <p>Put position configuration for a given resource.</p> <important> <p>This action is no longer supported. Calls to update the position configuration should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_UpdateResourcePosition.html\">UpdateResourcePosition</a> API operation instead.</p> </important>

        :param resource_identifier: Resource identifier used to update the position configuration. (required)
        :type resource_identifier: str
        :param resource_type: Resource type of the resource for which you want to update the position configuration. (required)
        :type resource_type: str
        :param put_position_configuration_request: (required)
        :type put_position_configuration_request: PutPositionConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PUT /position-configurations/{ResourceIdentifier}#resourceType is deprecated.", DeprecationWarning)

        _param = self._put_position_configuration_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            put_position_configuration_request=put_position_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_position_configuration_without_preload_content(
        self,
        resource_identifier: Annotated[str, Field(strict=True, description="Resource identifier used to update the position configuration.")],
        resource_type: Annotated[StrictStr, Field(description="Resource type of the resource for which you want to update the position configuration.")],
        put_position_configuration_request: PutPositionConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) put_position_configuration

        <p>Put position configuration for a given resource.</p> <important> <p>This action is no longer supported. Calls to update the position configuration should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_UpdateResourcePosition.html\">UpdateResourcePosition</a> API operation instead.</p> </important>

        :param resource_identifier: Resource identifier used to update the position configuration. (required)
        :type resource_identifier: str
        :param resource_type: Resource type of the resource for which you want to update the position configuration. (required)
        :type resource_type: str
        :param put_position_configuration_request: (required)
        :type put_position_configuration_request: PutPositionConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PUT /position-configurations/{ResourceIdentifier}#resourceType is deprecated.", DeprecationWarning)

        _param = self._put_position_configuration_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            put_position_configuration_request=put_position_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_position_configuration_serialize(
        self,
        resource_identifier,
        resource_type,
        put_position_configuration_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_identifier is not None:
            _path_params['ResourceIdentifier'] = resource_identifier
        # process the query parameters
        if resource_type is not None:
            
            _query_params.append(('resourceType', resource_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if put_position_configuration_request is not None:
            _body_params = put_position_configuration_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/position-configurations/{ResourceIdentifier}#resourceType',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_resource_log_level(
        self,
        resource_identifier: Annotated[str, Field(strict=True, max_length=256)],
        resource_type: Annotated[StrictStr, Field(description="The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>.")],
        put_resource_log_level_request: PutResourceLogLevelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """put_resource_log_level

        Sets the log-level override for a resource-ID and resource-type. This option can be specified for a wireless gateway or a wireless device. A limit of 200 log level override can be set per account.

        :param resource_identifier:  (required)
        :type resource_identifier: str
        :param resource_type: The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>. (required)
        :type resource_type: str
        :param put_resource_log_level_request: (required)
        :type put_resource_log_level_request: PutResourceLogLevelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_resource_log_level_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            put_resource_log_level_request=put_resource_log_level_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_resource_log_level_with_http_info(
        self,
        resource_identifier: Annotated[str, Field(strict=True, max_length=256)],
        resource_type: Annotated[StrictStr, Field(description="The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>.")],
        put_resource_log_level_request: PutResourceLogLevelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """put_resource_log_level

        Sets the log-level override for a resource-ID and resource-type. This option can be specified for a wireless gateway or a wireless device. A limit of 200 log level override can be set per account.

        :param resource_identifier:  (required)
        :type resource_identifier: str
        :param resource_type: The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>. (required)
        :type resource_type: str
        :param put_resource_log_level_request: (required)
        :type put_resource_log_level_request: PutResourceLogLevelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_resource_log_level_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            put_resource_log_level_request=put_resource_log_level_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_resource_log_level_without_preload_content(
        self,
        resource_identifier: Annotated[str, Field(strict=True, max_length=256)],
        resource_type: Annotated[StrictStr, Field(description="The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>.")],
        put_resource_log_level_request: PutResourceLogLevelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """put_resource_log_level

        Sets the log-level override for a resource-ID and resource-type. This option can be specified for a wireless gateway or a wireless device. A limit of 200 log level override can be set per account.

        :param resource_identifier:  (required)
        :type resource_identifier: str
        :param resource_type: The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>. (required)
        :type resource_type: str
        :param put_resource_log_level_request: (required)
        :type put_resource_log_level_request: PutResourceLogLevelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_resource_log_level_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            put_resource_log_level_request=put_resource_log_level_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_resource_log_level_serialize(
        self,
        resource_identifier,
        resource_type,
        put_resource_log_level_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_identifier is not None:
            _path_params['ResourceIdentifier'] = resource_identifier
        # process the query parameters
        if resource_type is not None:
            
            _query_params.append(('resourceType', resource_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if put_resource_log_level_request is not None:
            _body_params = put_resource_log_level_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/log-levels/{ResourceIdentifier}#resourceType',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def reset_all_resource_log_levels(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """reset_all_resource_log_levels

        Removes the log-level overrides for all resources; both wireless devices and wireless gateways.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reset_all_resource_log_levels_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def reset_all_resource_log_levels_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """reset_all_resource_log_levels

        Removes the log-level overrides for all resources; both wireless devices and wireless gateways.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reset_all_resource_log_levels_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def reset_all_resource_log_levels_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """reset_all_resource_log_levels

        Removes the log-level overrides for all resources; both wireless devices and wireless gateways.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reset_all_resource_log_levels_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _reset_all_resource_log_levels_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/log-levels',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def reset_resource_log_level(
        self,
        resource_identifier: Annotated[str, Field(strict=True, max_length=256)],
        resource_type: Annotated[StrictStr, Field(description="The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """reset_resource_log_level

        Removes the log-level override, if any, for a specific resource-ID and resource-type. It can be used for a wireless device or a wireless gateway.

        :param resource_identifier:  (required)
        :type resource_identifier: str
        :param resource_type: The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>. (required)
        :type resource_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reset_resource_log_level_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def reset_resource_log_level_with_http_info(
        self,
        resource_identifier: Annotated[str, Field(strict=True, max_length=256)],
        resource_type: Annotated[StrictStr, Field(description="The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """reset_resource_log_level

        Removes the log-level override, if any, for a specific resource-ID and resource-type. It can be used for a wireless device or a wireless gateway.

        :param resource_identifier:  (required)
        :type resource_identifier: str
        :param resource_type: The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>. (required)
        :type resource_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reset_resource_log_level_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def reset_resource_log_level_without_preload_content(
        self,
        resource_identifier: Annotated[str, Field(strict=True, max_length=256)],
        resource_type: Annotated[StrictStr, Field(description="The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """reset_resource_log_level

        Removes the log-level override, if any, for a specific resource-ID and resource-type. It can be used for a wireless device or a wireless gateway.

        :param resource_identifier:  (required)
        :type resource_identifier: str
        :param resource_type: The type of the resource, which can be <code>WirelessDevice</code> or <code>WirelessGateway</code>. (required)
        :type resource_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reset_resource_log_level_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _reset_resource_log_level_serialize(
        self,
        resource_identifier,
        resource_type,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_identifier is not None:
            _path_params['ResourceIdentifier'] = resource_identifier
        # process the query parameters
        if resource_type is not None:
            
            _query_params.append(('resourceType', resource_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/log-levels/{ResourceIdentifier}#resourceType',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def send_data_to_multicast_group(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        send_data_to_multicast_group_request: SendDataToMulticastGroupRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SendDataToMulticastGroupResponse:
        """send_data_to_multicast_group

        Sends the specified data to a multicast group.

        :param id:  (required)
        :type id: str
        :param send_data_to_multicast_group_request: (required)
        :type send_data_to_multicast_group_request: SendDataToMulticastGroupRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_data_to_multicast_group_serialize(
            id=id,
            send_data_to_multicast_group_request=send_data_to_multicast_group_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SendDataToMulticastGroupResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def send_data_to_multicast_group_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        send_data_to_multicast_group_request: SendDataToMulticastGroupRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SendDataToMulticastGroupResponse]:
        """send_data_to_multicast_group

        Sends the specified data to a multicast group.

        :param id:  (required)
        :type id: str
        :param send_data_to_multicast_group_request: (required)
        :type send_data_to_multicast_group_request: SendDataToMulticastGroupRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_data_to_multicast_group_serialize(
            id=id,
            send_data_to_multicast_group_request=send_data_to_multicast_group_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SendDataToMulticastGroupResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def send_data_to_multicast_group_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        send_data_to_multicast_group_request: SendDataToMulticastGroupRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """send_data_to_multicast_group

        Sends the specified data to a multicast group.

        :param id:  (required)
        :type id: str
        :param send_data_to_multicast_group_request: (required)
        :type send_data_to_multicast_group_request: SendDataToMulticastGroupRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_data_to_multicast_group_serialize(
            id=id,
            send_data_to_multicast_group_request=send_data_to_multicast_group_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SendDataToMulticastGroupResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _send_data_to_multicast_group_serialize(
        self,
        id,
        send_data_to_multicast_group_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if send_data_to_multicast_group_request is not None:
            _body_params = send_data_to_multicast_group_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/multicast-groups/{Id}/data',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def send_data_to_wireless_device(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the wireless device to receive the data.")],
        send_data_to_wireless_device_request: SendDataToWirelessDeviceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SendDataToWirelessDeviceResponse:
        """send_data_to_wireless_device

        Sends a decrypted application data frame to a device.

        :param id: The ID of the wireless device to receive the data. (required)
        :type id: str
        :param send_data_to_wireless_device_request: (required)
        :type send_data_to_wireless_device_request: SendDataToWirelessDeviceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_data_to_wireless_device_serialize(
            id=id,
            send_data_to_wireless_device_request=send_data_to_wireless_device_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "SendDataToWirelessDeviceResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def send_data_to_wireless_device_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the wireless device to receive the data.")],
        send_data_to_wireless_device_request: SendDataToWirelessDeviceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SendDataToWirelessDeviceResponse]:
        """send_data_to_wireless_device

        Sends a decrypted application data frame to a device.

        :param id: The ID of the wireless device to receive the data. (required)
        :type id: str
        :param send_data_to_wireless_device_request: (required)
        :type send_data_to_wireless_device_request: SendDataToWirelessDeviceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_data_to_wireless_device_serialize(
            id=id,
            send_data_to_wireless_device_request=send_data_to_wireless_device_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "SendDataToWirelessDeviceResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def send_data_to_wireless_device_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the wireless device to receive the data.")],
        send_data_to_wireless_device_request: SendDataToWirelessDeviceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """send_data_to_wireless_device

        Sends a decrypted application data frame to a device.

        :param id: The ID of the wireless device to receive the data. (required)
        :type id: str
        :param send_data_to_wireless_device_request: (required)
        :type send_data_to_wireless_device_request: SendDataToWirelessDeviceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_data_to_wireless_device_serialize(
            id=id,
            send_data_to_wireless_device_request=send_data_to_wireless_device_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "SendDataToWirelessDeviceResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _send_data_to_wireless_device_serialize(
        self,
        id,
        send_data_to_wireless_device_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if send_data_to_wireless_device_request is not None:
            _body_params = send_data_to_wireless_device_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/wireless-devices/{Id}/data',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def start_bulk_associate_wireless_device_with_multicast_group(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        start_bulk_disassociate_wireless_device_from_multicast_group_request: StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """start_bulk_associate_wireless_device_with_multicast_group

        Starts a bulk association of all qualifying wireless devices with a multicast group.

        :param id:  (required)
        :type id: str
        :param start_bulk_disassociate_wireless_device_from_multicast_group_request: (required)
        :type start_bulk_disassociate_wireless_device_from_multicast_group_request: StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_bulk_associate_wireless_device_with_multicast_group_serialize(
            id=id,
            start_bulk_disassociate_wireless_device_from_multicast_group_request=start_bulk_disassociate_wireless_device_from_multicast_group_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def start_bulk_associate_wireless_device_with_multicast_group_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        start_bulk_disassociate_wireless_device_from_multicast_group_request: StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """start_bulk_associate_wireless_device_with_multicast_group

        Starts a bulk association of all qualifying wireless devices with a multicast group.

        :param id:  (required)
        :type id: str
        :param start_bulk_disassociate_wireless_device_from_multicast_group_request: (required)
        :type start_bulk_disassociate_wireless_device_from_multicast_group_request: StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_bulk_associate_wireless_device_with_multicast_group_serialize(
            id=id,
            start_bulk_disassociate_wireless_device_from_multicast_group_request=start_bulk_disassociate_wireless_device_from_multicast_group_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def start_bulk_associate_wireless_device_with_multicast_group_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        start_bulk_disassociate_wireless_device_from_multicast_group_request: StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """start_bulk_associate_wireless_device_with_multicast_group

        Starts a bulk association of all qualifying wireless devices with a multicast group.

        :param id:  (required)
        :type id: str
        :param start_bulk_disassociate_wireless_device_from_multicast_group_request: (required)
        :type start_bulk_disassociate_wireless_device_from_multicast_group_request: StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_bulk_associate_wireless_device_with_multicast_group_serialize(
            id=id,
            start_bulk_disassociate_wireless_device_from_multicast_group_request=start_bulk_disassociate_wireless_device_from_multicast_group_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _start_bulk_associate_wireless_device_with_multicast_group_serialize(
        self,
        id,
        start_bulk_disassociate_wireless_device_from_multicast_group_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if start_bulk_disassociate_wireless_device_from_multicast_group_request is not None:
            _body_params = start_bulk_disassociate_wireless_device_from_multicast_group_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/multicast-groups/{Id}/bulk',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def start_bulk_disassociate_wireless_device_from_multicast_group(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        start_bulk_disassociate_wireless_device_from_multicast_group_request: StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """start_bulk_disassociate_wireless_device_from_multicast_group

        Starts a bulk disassociatin of all qualifying wireless devices from a multicast group.

        :param id:  (required)
        :type id: str
        :param start_bulk_disassociate_wireless_device_from_multicast_group_request: (required)
        :type start_bulk_disassociate_wireless_device_from_multicast_group_request: StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_bulk_disassociate_wireless_device_from_multicast_group_serialize(
            id=id,
            start_bulk_disassociate_wireless_device_from_multicast_group_request=start_bulk_disassociate_wireless_device_from_multicast_group_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def start_bulk_disassociate_wireless_device_from_multicast_group_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        start_bulk_disassociate_wireless_device_from_multicast_group_request: StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """start_bulk_disassociate_wireless_device_from_multicast_group

        Starts a bulk disassociatin of all qualifying wireless devices from a multicast group.

        :param id:  (required)
        :type id: str
        :param start_bulk_disassociate_wireless_device_from_multicast_group_request: (required)
        :type start_bulk_disassociate_wireless_device_from_multicast_group_request: StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_bulk_disassociate_wireless_device_from_multicast_group_serialize(
            id=id,
            start_bulk_disassociate_wireless_device_from_multicast_group_request=start_bulk_disassociate_wireless_device_from_multicast_group_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def start_bulk_disassociate_wireless_device_from_multicast_group_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        start_bulk_disassociate_wireless_device_from_multicast_group_request: StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """start_bulk_disassociate_wireless_device_from_multicast_group

        Starts a bulk disassociatin of all qualifying wireless devices from a multicast group.

        :param id:  (required)
        :type id: str
        :param start_bulk_disassociate_wireless_device_from_multicast_group_request: (required)
        :type start_bulk_disassociate_wireless_device_from_multicast_group_request: StartBulkDisassociateWirelessDeviceFromMulticastGroupRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_bulk_disassociate_wireless_device_from_multicast_group_serialize(
            id=id,
            start_bulk_disassociate_wireless_device_from_multicast_group_request=start_bulk_disassociate_wireless_device_from_multicast_group_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _start_bulk_disassociate_wireless_device_from_multicast_group_serialize(
        self,
        id,
        start_bulk_disassociate_wireless_device_from_multicast_group_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if start_bulk_disassociate_wireless_device_from_multicast_group_request is not None:
            _body_params = start_bulk_disassociate_wireless_device_from_multicast_group_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/multicast-groups/{Id}/bulk',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def start_fuota_task(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        start_fuota_task_request: StartFuotaTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """start_fuota_task

        Starts a FUOTA task.

        :param id:  (required)
        :type id: str
        :param start_fuota_task_request: (required)
        :type start_fuota_task_request: StartFuotaTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_fuota_task_serialize(
            id=id,
            start_fuota_task_request=start_fuota_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def start_fuota_task_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        start_fuota_task_request: StartFuotaTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """start_fuota_task

        Starts a FUOTA task.

        :param id:  (required)
        :type id: str
        :param start_fuota_task_request: (required)
        :type start_fuota_task_request: StartFuotaTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_fuota_task_serialize(
            id=id,
            start_fuota_task_request=start_fuota_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def start_fuota_task_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        start_fuota_task_request: StartFuotaTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """start_fuota_task

        Starts a FUOTA task.

        :param id:  (required)
        :type id: str
        :param start_fuota_task_request: (required)
        :type start_fuota_task_request: StartFuotaTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_fuota_task_serialize(
            id=id,
            start_fuota_task_request=start_fuota_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _start_fuota_task_serialize(
        self,
        id,
        start_fuota_task_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if start_fuota_task_request is not None:
            _body_params = start_fuota_task_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/fuota-tasks/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def start_multicast_group_session(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        start_multicast_group_session_request: StartMulticastGroupSessionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """start_multicast_group_session

        Starts a multicast group session.

        :param id:  (required)
        :type id: str
        :param start_multicast_group_session_request: (required)
        :type start_multicast_group_session_request: StartMulticastGroupSessionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_multicast_group_session_serialize(
            id=id,
            start_multicast_group_session_request=start_multicast_group_session_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def start_multicast_group_session_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        start_multicast_group_session_request: StartMulticastGroupSessionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """start_multicast_group_session

        Starts a multicast group session.

        :param id:  (required)
        :type id: str
        :param start_multicast_group_session_request: (required)
        :type start_multicast_group_session_request: StartMulticastGroupSessionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_multicast_group_session_serialize(
            id=id,
            start_multicast_group_session_request=start_multicast_group_session_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def start_multicast_group_session_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        start_multicast_group_session_request: StartMulticastGroupSessionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """start_multicast_group_session

        Starts a multicast group session.

        :param id:  (required)
        :type id: str
        :param start_multicast_group_session_request: (required)
        :type start_multicast_group_session_request: StartMulticastGroupSessionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_multicast_group_session_serialize(
            id=id,
            start_multicast_group_session_request=start_multicast_group_session_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _start_multicast_group_session_serialize(
        self,
        id,
        start_multicast_group_session_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if start_multicast_group_session_request is not None:
            _body_params = start_multicast_group_session_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/multicast-groups/{Id}/session',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def start_single_wireless_device_import_task(
        self,
        start_single_wireless_device_import_task_request: StartSingleWirelessDeviceImportTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StartSingleWirelessDeviceImportTaskResponse:
        """start_single_wireless_device_import_task

        Start import task for a single wireless device.

        :param start_single_wireless_device_import_task_request: (required)
        :type start_single_wireless_device_import_task_request: StartSingleWirelessDeviceImportTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_single_wireless_device_import_task_serialize(
            start_single_wireless_device_import_task_request=start_single_wireless_device_import_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "StartSingleWirelessDeviceImportTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def start_single_wireless_device_import_task_with_http_info(
        self,
        start_single_wireless_device_import_task_request: StartSingleWirelessDeviceImportTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StartSingleWirelessDeviceImportTaskResponse]:
        """start_single_wireless_device_import_task

        Start import task for a single wireless device.

        :param start_single_wireless_device_import_task_request: (required)
        :type start_single_wireless_device_import_task_request: StartSingleWirelessDeviceImportTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_single_wireless_device_import_task_serialize(
            start_single_wireless_device_import_task_request=start_single_wireless_device_import_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "StartSingleWirelessDeviceImportTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def start_single_wireless_device_import_task_without_preload_content(
        self,
        start_single_wireless_device_import_task_request: StartSingleWirelessDeviceImportTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """start_single_wireless_device_import_task

        Start import task for a single wireless device.

        :param start_single_wireless_device_import_task_request: (required)
        :type start_single_wireless_device_import_task_request: StartSingleWirelessDeviceImportTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_single_wireless_device_import_task_serialize(
            start_single_wireless_device_import_task_request=start_single_wireless_device_import_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "StartSingleWirelessDeviceImportTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _start_single_wireless_device_import_task_serialize(
        self,
        start_single_wireless_device_import_task_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if start_single_wireless_device_import_task_request is not None:
            _body_params = start_single_wireless_device_import_task_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/wireless_single_device_import_task',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def start_wireless_device_import_task(
        self,
        start_wireless_device_import_task_request: StartWirelessDeviceImportTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StartWirelessDeviceImportTaskResponse:
        """start_wireless_device_import_task

        Start import task for provisioning Sidewalk devices in bulk using an S3 CSV file.

        :param start_wireless_device_import_task_request: (required)
        :type start_wireless_device_import_task_request: StartWirelessDeviceImportTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_wireless_device_import_task_serialize(
            start_wireless_device_import_task_request=start_wireless_device_import_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "StartWirelessDeviceImportTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def start_wireless_device_import_task_with_http_info(
        self,
        start_wireless_device_import_task_request: StartWirelessDeviceImportTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StartWirelessDeviceImportTaskResponse]:
        """start_wireless_device_import_task

        Start import task for provisioning Sidewalk devices in bulk using an S3 CSV file.

        :param start_wireless_device_import_task_request: (required)
        :type start_wireless_device_import_task_request: StartWirelessDeviceImportTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_wireless_device_import_task_serialize(
            start_wireless_device_import_task_request=start_wireless_device_import_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "StartWirelessDeviceImportTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def start_wireless_device_import_task_without_preload_content(
        self,
        start_wireless_device_import_task_request: StartWirelessDeviceImportTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """start_wireless_device_import_task

        Start import task for provisioning Sidewalk devices in bulk using an S3 CSV file.

        :param start_wireless_device_import_task_request: (required)
        :type start_wireless_device_import_task_request: StartWirelessDeviceImportTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_wireless_device_import_task_serialize(
            start_wireless_device_import_task_request=start_wireless_device_import_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "StartWirelessDeviceImportTaskResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _start_wireless_device_import_task_serialize(
        self,
        start_wireless_device_import_task_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if start_wireless_device_import_task_request is not None:
            _body_params = start_wireless_device_import_task_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/wireless_device_import_task',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tag_resource(
        self,
        resource_arn: Annotated[str, Field(min_length=1, strict=True, max_length=1011, description="The ARN of the resource to add tags to.")],
        tag_resource_request: TagResourceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """tag_resource

        Adds a tag to a resource.

        :param resource_arn: The ARN of the resource to add tags to. (required)
        :type resource_arn: str
        :param tag_resource_request: (required)
        :type tag_resource_request: TagResourceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tag_resource_serialize(
            resource_arn=resource_arn,
            tag_resource_request=tag_resource_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tag_resource_with_http_info(
        self,
        resource_arn: Annotated[str, Field(min_length=1, strict=True, max_length=1011, description="The ARN of the resource to add tags to.")],
        tag_resource_request: TagResourceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """tag_resource

        Adds a tag to a resource.

        :param resource_arn: The ARN of the resource to add tags to. (required)
        :type resource_arn: str
        :param tag_resource_request: (required)
        :type tag_resource_request: TagResourceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tag_resource_serialize(
            resource_arn=resource_arn,
            tag_resource_request=tag_resource_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tag_resource_without_preload_content(
        self,
        resource_arn: Annotated[str, Field(min_length=1, strict=True, max_length=1011, description="The ARN of the resource to add tags to.")],
        tag_resource_request: TagResourceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tag_resource

        Adds a tag to a resource.

        :param resource_arn: The ARN of the resource to add tags to. (required)
        :type resource_arn: str
        :param tag_resource_request: (required)
        :type tag_resource_request: TagResourceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tag_resource_serialize(
            resource_arn=resource_arn,
            tag_resource_request=tag_resource_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tag_resource_serialize(
        self,
        resource_arn,
        tag_resource_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if resource_arn is not None:
            
            _query_params.append(('resourceArn', resource_arn))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if tag_resource_request is not None:
            _body_params = tag_resource_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/tags#resourceArn',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def test_wireless_device(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the wireless device to test.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TestWirelessDeviceResponse:
        """test_wireless_device

        Simulates a provisioned device by sending an uplink data payload of <code>Hello</code>.

        :param id: The ID of the wireless device to test. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._test_wireless_device_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestWirelessDeviceResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def test_wireless_device_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the wireless device to test.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TestWirelessDeviceResponse]:
        """test_wireless_device

        Simulates a provisioned device by sending an uplink data payload of <code>Hello</code>.

        :param id: The ID of the wireless device to test. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._test_wireless_device_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestWirelessDeviceResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def test_wireless_device_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the wireless device to test.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """test_wireless_device

        Simulates a provisioned device by sending an uplink data payload of <code>Hello</code>.

        :param id: The ID of the wireless device to test. (required)
        :type id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._test_wireless_device_serialize(
            id=id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestWirelessDeviceResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _test_wireless_device_serialize(
        self,
        id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/wireless-devices/{Id}/test',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def untag_resource(
        self,
        resource_arn: Annotated[str, Field(min_length=1, strict=True, max_length=1011, description="The ARN of the resource to remove tags from.")],
        tag_keys: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=128)]], Field(min_length=0, max_length=200, description="A list of the keys of the tags to remove from the resource.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """untag_resource

        Removes one or more tags from a resource.

        :param resource_arn: The ARN of the resource to remove tags from. (required)
        :type resource_arn: str
        :param tag_keys: A list of the keys of the tags to remove from the resource. (required)
        :type tag_keys: List[str]
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._untag_resource_serialize(
            resource_arn=resource_arn,
            tag_keys=tag_keys,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def untag_resource_with_http_info(
        self,
        resource_arn: Annotated[str, Field(min_length=1, strict=True, max_length=1011, description="The ARN of the resource to remove tags from.")],
        tag_keys: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=128)]], Field(min_length=0, max_length=200, description="A list of the keys of the tags to remove from the resource.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """untag_resource

        Removes one or more tags from a resource.

        :param resource_arn: The ARN of the resource to remove tags from. (required)
        :type resource_arn: str
        :param tag_keys: A list of the keys of the tags to remove from the resource. (required)
        :type tag_keys: List[str]
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._untag_resource_serialize(
            resource_arn=resource_arn,
            tag_keys=tag_keys,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def untag_resource_without_preload_content(
        self,
        resource_arn: Annotated[str, Field(min_length=1, strict=True, max_length=1011, description="The ARN of the resource to remove tags from.")],
        tag_keys: Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=128)]], Field(min_length=0, max_length=200, description="A list of the keys of the tags to remove from the resource.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """untag_resource

        Removes one or more tags from a resource.

        :param resource_arn: The ARN of the resource to remove tags from. (required)
        :type resource_arn: str
        :param tag_keys: A list of the keys of the tags to remove from the resource. (required)
        :type tag_keys: List[str]
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._untag_resource_serialize(
            resource_arn=resource_arn,
            tag_keys=tag_keys,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _untag_resource_serialize(
        self,
        resource_arn,
        tag_keys,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tagKeys': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if resource_arn is not None:
            
            _query_params.append(('resourceArn', resource_arn))
            
        if tag_keys is not None:
            
            _query_params.append(('tagKeys', tag_keys))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/tags#resourceArn&tagKeys',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_destination(
        self,
        name: Annotated[str, Field(strict=True, max_length=128, description="The new name of the resource.")],
        update_destination_request: UpdateDestinationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """update_destination

        Updates properties of a destination.

        :param name: The new name of the resource. (required)
        :type name: str
        :param update_destination_request: (required)
        :type update_destination_request: UpdateDestinationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_destination_serialize(
            name=name,
            update_destination_request=update_destination_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_destination_with_http_info(
        self,
        name: Annotated[str, Field(strict=True, max_length=128, description="The new name of the resource.")],
        update_destination_request: UpdateDestinationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """update_destination

        Updates properties of a destination.

        :param name: The new name of the resource. (required)
        :type name: str
        :param update_destination_request: (required)
        :type update_destination_request: UpdateDestinationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_destination_serialize(
            name=name,
            update_destination_request=update_destination_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_destination_without_preload_content(
        self,
        name: Annotated[str, Field(strict=True, max_length=128, description="The new name of the resource.")],
        update_destination_request: UpdateDestinationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_destination

        Updates properties of a destination.

        :param name: The new name of the resource. (required)
        :type name: str
        :param update_destination_request: (required)
        :type update_destination_request: UpdateDestinationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_destination_serialize(
            name=name,
            update_destination_request=update_destination_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_destination_serialize(
        self,
        name,
        update_destination_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_destination_request is not None:
            _body_params = update_destination_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/destinations/{Name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_event_configuration_by_resource_types(
        self,
        update_event_configuration_by_resource_types_request: UpdateEventConfigurationByResourceTypesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """update_event_configuration_by_resource_types

        Update the event configuration based on resource types.

        :param update_event_configuration_by_resource_types_request: (required)
        :type update_event_configuration_by_resource_types_request: UpdateEventConfigurationByResourceTypesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_event_configuration_by_resource_types_serialize(
            update_event_configuration_by_resource_types_request=update_event_configuration_by_resource_types_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_event_configuration_by_resource_types_with_http_info(
        self,
        update_event_configuration_by_resource_types_request: UpdateEventConfigurationByResourceTypesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """update_event_configuration_by_resource_types

        Update the event configuration based on resource types.

        :param update_event_configuration_by_resource_types_request: (required)
        :type update_event_configuration_by_resource_types_request: UpdateEventConfigurationByResourceTypesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_event_configuration_by_resource_types_serialize(
            update_event_configuration_by_resource_types_request=update_event_configuration_by_resource_types_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_event_configuration_by_resource_types_without_preload_content(
        self,
        update_event_configuration_by_resource_types_request: UpdateEventConfigurationByResourceTypesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_event_configuration_by_resource_types

        Update the event configuration based on resource types.

        :param update_event_configuration_by_resource_types_request: (required)
        :type update_event_configuration_by_resource_types_request: UpdateEventConfigurationByResourceTypesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_event_configuration_by_resource_types_serialize(
            update_event_configuration_by_resource_types_request=update_event_configuration_by_resource_types_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_event_configuration_by_resource_types_serialize(
        self,
        update_event_configuration_by_resource_types_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_event_configuration_by_resource_types_request is not None:
            _body_params = update_event_configuration_by_resource_types_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/event-configurations-resource-types',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_fuota_task(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        update_fuota_task_request: UpdateFuotaTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """update_fuota_task

        Updates properties of a FUOTA task.

        :param id:  (required)
        :type id: str
        :param update_fuota_task_request: (required)
        :type update_fuota_task_request: UpdateFuotaTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_fuota_task_serialize(
            id=id,
            update_fuota_task_request=update_fuota_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_fuota_task_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        update_fuota_task_request: UpdateFuotaTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """update_fuota_task

        Updates properties of a FUOTA task.

        :param id:  (required)
        :type id: str
        :param update_fuota_task_request: (required)
        :type update_fuota_task_request: UpdateFuotaTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_fuota_task_serialize(
            id=id,
            update_fuota_task_request=update_fuota_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_fuota_task_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        update_fuota_task_request: UpdateFuotaTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_fuota_task

        Updates properties of a FUOTA task.

        :param id:  (required)
        :type id: str
        :param update_fuota_task_request: (required)
        :type update_fuota_task_request: UpdateFuotaTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_fuota_task_serialize(
            id=id,
            update_fuota_task_request=update_fuota_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_fuota_task_serialize(
        self,
        id,
        update_fuota_task_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_fuota_task_request is not None:
            _body_params = update_fuota_task_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/fuota-tasks/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_log_levels_by_resource_types(
        self,
        update_log_levels_by_resource_types_request: UpdateLogLevelsByResourceTypesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """update_log_levels_by_resource_types

        Set default log level, or log levels by resource types. This can be for wireless device log options or wireless gateways log options and is used to control the log messages that'll be displayed in CloudWatch.

        :param update_log_levels_by_resource_types_request: (required)
        :type update_log_levels_by_resource_types_request: UpdateLogLevelsByResourceTypesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_log_levels_by_resource_types_serialize(
            update_log_levels_by_resource_types_request=update_log_levels_by_resource_types_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_log_levels_by_resource_types_with_http_info(
        self,
        update_log_levels_by_resource_types_request: UpdateLogLevelsByResourceTypesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """update_log_levels_by_resource_types

        Set default log level, or log levels by resource types. This can be for wireless device log options or wireless gateways log options and is used to control the log messages that'll be displayed in CloudWatch.

        :param update_log_levels_by_resource_types_request: (required)
        :type update_log_levels_by_resource_types_request: UpdateLogLevelsByResourceTypesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_log_levels_by_resource_types_serialize(
            update_log_levels_by_resource_types_request=update_log_levels_by_resource_types_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_log_levels_by_resource_types_without_preload_content(
        self,
        update_log_levels_by_resource_types_request: UpdateLogLevelsByResourceTypesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_log_levels_by_resource_types

        Set default log level, or log levels by resource types. This can be for wireless device log options or wireless gateways log options and is used to control the log messages that'll be displayed in CloudWatch.

        :param update_log_levels_by_resource_types_request: (required)
        :type update_log_levels_by_resource_types_request: UpdateLogLevelsByResourceTypesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_log_levels_by_resource_types_serialize(
            update_log_levels_by_resource_types_request=update_log_levels_by_resource_types_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_log_levels_by_resource_types_serialize(
        self,
        update_log_levels_by_resource_types_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_log_levels_by_resource_types_request is not None:
            _body_params = update_log_levels_by_resource_types_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/log-levels',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_multicast_group(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        update_multicast_group_request: UpdateMulticastGroupRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """update_multicast_group

        Updates properties of a multicast group session.

        :param id:  (required)
        :type id: str
        :param update_multicast_group_request: (required)
        :type update_multicast_group_request: UpdateMulticastGroupRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_multicast_group_serialize(
            id=id,
            update_multicast_group_request=update_multicast_group_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_multicast_group_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        update_multicast_group_request: UpdateMulticastGroupRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """update_multicast_group

        Updates properties of a multicast group session.

        :param id:  (required)
        :type id: str
        :param update_multicast_group_request: (required)
        :type update_multicast_group_request: UpdateMulticastGroupRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_multicast_group_serialize(
            id=id,
            update_multicast_group_request=update_multicast_group_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_multicast_group_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256)],
        update_multicast_group_request: UpdateMulticastGroupRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_multicast_group

        Updates properties of a multicast group session.

        :param id:  (required)
        :type id: str
        :param update_multicast_group_request: (required)
        :type update_multicast_group_request: UpdateMulticastGroupRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_multicast_group_serialize(
            id=id,
            update_multicast_group_request=update_multicast_group_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_multicast_group_serialize(
        self,
        id,
        update_multicast_group_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_multicast_group_request is not None:
            _body_params = update_multicast_group_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/multicast-groups/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_network_analyzer_configuration(
        self,
        configuration_name: Annotated[str, Field(min_length=1, strict=True, max_length=1024)],
        update_network_analyzer_configuration_request: UpdateNetworkAnalyzerConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """update_network_analyzer_configuration

        Update network analyzer configuration.

        :param configuration_name:  (required)
        :type configuration_name: str
        :param update_network_analyzer_configuration_request: (required)
        :type update_network_analyzer_configuration_request: UpdateNetworkAnalyzerConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_network_analyzer_configuration_serialize(
            configuration_name=configuration_name,
            update_network_analyzer_configuration_request=update_network_analyzer_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_network_analyzer_configuration_with_http_info(
        self,
        configuration_name: Annotated[str, Field(min_length=1, strict=True, max_length=1024)],
        update_network_analyzer_configuration_request: UpdateNetworkAnalyzerConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """update_network_analyzer_configuration

        Update network analyzer configuration.

        :param configuration_name:  (required)
        :type configuration_name: str
        :param update_network_analyzer_configuration_request: (required)
        :type update_network_analyzer_configuration_request: UpdateNetworkAnalyzerConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_network_analyzer_configuration_serialize(
            configuration_name=configuration_name,
            update_network_analyzer_configuration_request=update_network_analyzer_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_network_analyzer_configuration_without_preload_content(
        self,
        configuration_name: Annotated[str, Field(min_length=1, strict=True, max_length=1024)],
        update_network_analyzer_configuration_request: UpdateNetworkAnalyzerConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_network_analyzer_configuration

        Update network analyzer configuration.

        :param configuration_name:  (required)
        :type configuration_name: str
        :param update_network_analyzer_configuration_request: (required)
        :type update_network_analyzer_configuration_request: UpdateNetworkAnalyzerConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_network_analyzer_configuration_serialize(
            configuration_name=configuration_name,
            update_network_analyzer_configuration_request=update_network_analyzer_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_network_analyzer_configuration_serialize(
        self,
        configuration_name,
        update_network_analyzer_configuration_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if configuration_name is not None:
            _path_params['ConfigurationName'] = configuration_name
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_network_analyzer_configuration_request is not None:
            _body_params = update_network_analyzer_configuration_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/network-analyzer-configurations/{ConfigurationName}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_partner_account(
        self,
        partner_account_id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the partner account to update.")],
        partner_type: Annotated[StrictStr, Field(description="The partner type.")],
        update_partner_account_request: UpdatePartnerAccountRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """update_partner_account

        Updates properties of a partner account.

        :param partner_account_id: The ID of the partner account to update. (required)
        :type partner_account_id: str
        :param partner_type: The partner type. (required)
        :type partner_type: str
        :param update_partner_account_request: (required)
        :type update_partner_account_request: UpdatePartnerAccountRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_partner_account_serialize(
            partner_account_id=partner_account_id,
            partner_type=partner_type,
            update_partner_account_request=update_partner_account_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_partner_account_with_http_info(
        self,
        partner_account_id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the partner account to update.")],
        partner_type: Annotated[StrictStr, Field(description="The partner type.")],
        update_partner_account_request: UpdatePartnerAccountRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """update_partner_account

        Updates properties of a partner account.

        :param partner_account_id: The ID of the partner account to update. (required)
        :type partner_account_id: str
        :param partner_type: The partner type. (required)
        :type partner_type: str
        :param update_partner_account_request: (required)
        :type update_partner_account_request: UpdatePartnerAccountRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_partner_account_serialize(
            partner_account_id=partner_account_id,
            partner_type=partner_type,
            update_partner_account_request=update_partner_account_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_partner_account_without_preload_content(
        self,
        partner_account_id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the partner account to update.")],
        partner_type: Annotated[StrictStr, Field(description="The partner type.")],
        update_partner_account_request: UpdatePartnerAccountRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_partner_account

        Updates properties of a partner account.

        :param partner_account_id: The ID of the partner account to update. (required)
        :type partner_account_id: str
        :param partner_type: The partner type. (required)
        :type partner_type: str
        :param update_partner_account_request: (required)
        :type update_partner_account_request: UpdatePartnerAccountRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_partner_account_serialize(
            partner_account_id=partner_account_id,
            partner_type=partner_type,
            update_partner_account_request=update_partner_account_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_partner_account_serialize(
        self,
        partner_account_id,
        partner_type,
        update_partner_account_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if partner_account_id is not None:
            _path_params['PartnerAccountId'] = partner_account_id
        # process the query parameters
        if partner_type is not None:
            
            _query_params.append(('partnerType', partner_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_partner_account_request is not None:
            _body_params = update_partner_account_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/partner-accounts/{PartnerAccountId}#partnerType',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_position(
        self,
        resource_identifier: Annotated[str, Field(strict=True, description="Resource identifier of the resource for which position is updated.")],
        resource_type: Annotated[StrictStr, Field(description="Resource type of the resource for which position is updated.")],
        update_position_request: UpdatePositionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """(Deprecated) update_position

        <p>Update the position information of a resource.</p> <important> <p>This action is no longer supported. Calls to update the position information should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_UpdateResourcePosition.html\">UpdateResourcePosition</a> API operation instead.</p> </important>

        :param resource_identifier: Resource identifier of the resource for which position is updated. (required)
        :type resource_identifier: str
        :param resource_type: Resource type of the resource for which position is updated. (required)
        :type resource_type: str
        :param update_position_request: (required)
        :type update_position_request: UpdatePositionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PATCH /positions/{ResourceIdentifier}#resourceType is deprecated.", DeprecationWarning)

        _param = self._update_position_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            update_position_request=update_position_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_position_with_http_info(
        self,
        resource_identifier: Annotated[str, Field(strict=True, description="Resource identifier of the resource for which position is updated.")],
        resource_type: Annotated[StrictStr, Field(description="Resource type of the resource for which position is updated.")],
        update_position_request: UpdatePositionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """(Deprecated) update_position

        <p>Update the position information of a resource.</p> <important> <p>This action is no longer supported. Calls to update the position information should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_UpdateResourcePosition.html\">UpdateResourcePosition</a> API operation instead.</p> </important>

        :param resource_identifier: Resource identifier of the resource for which position is updated. (required)
        :type resource_identifier: str
        :param resource_type: Resource type of the resource for which position is updated. (required)
        :type resource_type: str
        :param update_position_request: (required)
        :type update_position_request: UpdatePositionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PATCH /positions/{ResourceIdentifier}#resourceType is deprecated.", DeprecationWarning)

        _param = self._update_position_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            update_position_request=update_position_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_position_without_preload_content(
        self,
        resource_identifier: Annotated[str, Field(strict=True, description="Resource identifier of the resource for which position is updated.")],
        resource_type: Annotated[StrictStr, Field(description="Resource type of the resource for which position is updated.")],
        update_position_request: UpdatePositionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) update_position

        <p>Update the position information of a resource.</p> <important> <p>This action is no longer supported. Calls to update the position information should use the <a href=\"https://docs.aws.amazon.com/iot-wireless/2020-11-22/apireference/API_UpdateResourcePosition.html\">UpdateResourcePosition</a> API operation instead.</p> </important>

        :param resource_identifier: Resource identifier of the resource for which position is updated. (required)
        :type resource_identifier: str
        :param resource_type: Resource type of the resource for which position is updated. (required)
        :type resource_type: str
        :param update_position_request: (required)
        :type update_position_request: UpdatePositionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PATCH /positions/{ResourceIdentifier}#resourceType is deprecated.", DeprecationWarning)

        _param = self._update_position_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            update_position_request=update_position_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_position_serialize(
        self,
        resource_identifier,
        resource_type,
        update_position_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_identifier is not None:
            _path_params['ResourceIdentifier'] = resource_identifier
        # process the query parameters
        if resource_type is not None:
            
            _query_params.append(('resourceType', resource_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_position_request is not None:
            _body_params = update_position_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/positions/{ResourceIdentifier}#resourceType',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_resource_event_configuration(
        self,
        identifier: Annotated[str, Field(strict=True, max_length=256, description="Resource identifier to opt in for event messaging.")],
        identifier_type: Annotated[StrictStr, Field(description="Identifier type of the particular resource identifier for event configuration.")],
        update_resource_event_configuration_request: UpdateResourceEventConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        partner_type: Annotated[Optional[StrictStr], Field(description="Partner type of the resource if the identifier type is <code>PartnerAccountId</code> ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """update_resource_event_configuration

        Update the event configuration for a particular resource identifier.

        :param identifier: Resource identifier to opt in for event messaging. (required)
        :type identifier: str
        :param identifier_type: Identifier type of the particular resource identifier for event configuration. (required)
        :type identifier_type: str
        :param update_resource_event_configuration_request: (required)
        :type update_resource_event_configuration_request: UpdateResourceEventConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param partner_type: Partner type of the resource if the identifier type is <code>PartnerAccountId</code> 
        :type partner_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_resource_event_configuration_serialize(
            identifier=identifier,
            identifier_type=identifier_type,
            update_resource_event_configuration_request=update_resource_event_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            partner_type=partner_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_resource_event_configuration_with_http_info(
        self,
        identifier: Annotated[str, Field(strict=True, max_length=256, description="Resource identifier to opt in for event messaging.")],
        identifier_type: Annotated[StrictStr, Field(description="Identifier type of the particular resource identifier for event configuration.")],
        update_resource_event_configuration_request: UpdateResourceEventConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        partner_type: Annotated[Optional[StrictStr], Field(description="Partner type of the resource if the identifier type is <code>PartnerAccountId</code> ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """update_resource_event_configuration

        Update the event configuration for a particular resource identifier.

        :param identifier: Resource identifier to opt in for event messaging. (required)
        :type identifier: str
        :param identifier_type: Identifier type of the particular resource identifier for event configuration. (required)
        :type identifier_type: str
        :param update_resource_event_configuration_request: (required)
        :type update_resource_event_configuration_request: UpdateResourceEventConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param partner_type: Partner type of the resource if the identifier type is <code>PartnerAccountId</code> 
        :type partner_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_resource_event_configuration_serialize(
            identifier=identifier,
            identifier_type=identifier_type,
            update_resource_event_configuration_request=update_resource_event_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            partner_type=partner_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_resource_event_configuration_without_preload_content(
        self,
        identifier: Annotated[str, Field(strict=True, max_length=256, description="Resource identifier to opt in for event messaging.")],
        identifier_type: Annotated[StrictStr, Field(description="Identifier type of the particular resource identifier for event configuration.")],
        update_resource_event_configuration_request: UpdateResourceEventConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        partner_type: Annotated[Optional[StrictStr], Field(description="Partner type of the resource if the identifier type is <code>PartnerAccountId</code> ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_resource_event_configuration

        Update the event configuration for a particular resource identifier.

        :param identifier: Resource identifier to opt in for event messaging. (required)
        :type identifier: str
        :param identifier_type: Identifier type of the particular resource identifier for event configuration. (required)
        :type identifier_type: str
        :param update_resource_event_configuration_request: (required)
        :type update_resource_event_configuration_request: UpdateResourceEventConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param partner_type: Partner type of the resource if the identifier type is <code>PartnerAccountId</code> 
        :type partner_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_resource_event_configuration_serialize(
            identifier=identifier,
            identifier_type=identifier_type,
            update_resource_event_configuration_request=update_resource_event_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            partner_type=partner_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_resource_event_configuration_serialize(
        self,
        identifier,
        identifier_type,
        update_resource_event_configuration_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        partner_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if identifier is not None:
            _path_params['Identifier'] = identifier
        # process the query parameters
        if identifier_type is not None:
            
            _query_params.append(('identifierType', identifier_type))
            
        if partner_type is not None:
            
            _query_params.append(('partnerType', partner_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_resource_event_configuration_request is not None:
            _body_params = update_resource_event_configuration_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/event-configurations/{Identifier}#identifierType',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_resource_position(
        self,
        resource_identifier: Annotated[str, Field(strict=True, description="The identifier of the resource for which position information is updated. It can be the wireless device ID or the wireless gateway ID, depending on the resource type.")],
        resource_type: Annotated[StrictStr, Field(description="The type of resource for which position information is updated, which can be a wireless device or a wireless gateway.")],
        update_resource_position_request: UpdateResourcePositionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """update_resource_position

        Update the position information of a given wireless device or a wireless gateway resource. The position coordinates are based on the <a href=\"https://gisgeography.com/wgs84-world-geodetic-system/\"> World Geodetic System (WGS84)</a>.

        :param resource_identifier: The identifier of the resource for which position information is updated. It can be the wireless device ID or the wireless gateway ID, depending on the resource type. (required)
        :type resource_identifier: str
        :param resource_type: The type of resource for which position information is updated, which can be a wireless device or a wireless gateway. (required)
        :type resource_type: str
        :param update_resource_position_request: (required)
        :type update_resource_position_request: UpdateResourcePositionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_resource_position_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            update_resource_position_request=update_resource_position_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_resource_position_with_http_info(
        self,
        resource_identifier: Annotated[str, Field(strict=True, description="The identifier of the resource for which position information is updated. It can be the wireless device ID or the wireless gateway ID, depending on the resource type.")],
        resource_type: Annotated[StrictStr, Field(description="The type of resource for which position information is updated, which can be a wireless device or a wireless gateway.")],
        update_resource_position_request: UpdateResourcePositionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """update_resource_position

        Update the position information of a given wireless device or a wireless gateway resource. The position coordinates are based on the <a href=\"https://gisgeography.com/wgs84-world-geodetic-system/\"> World Geodetic System (WGS84)</a>.

        :param resource_identifier: The identifier of the resource for which position information is updated. It can be the wireless device ID or the wireless gateway ID, depending on the resource type. (required)
        :type resource_identifier: str
        :param resource_type: The type of resource for which position information is updated, which can be a wireless device or a wireless gateway. (required)
        :type resource_type: str
        :param update_resource_position_request: (required)
        :type update_resource_position_request: UpdateResourcePositionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_resource_position_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            update_resource_position_request=update_resource_position_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_resource_position_without_preload_content(
        self,
        resource_identifier: Annotated[str, Field(strict=True, description="The identifier of the resource for which position information is updated. It can be the wireless device ID or the wireless gateway ID, depending on the resource type.")],
        resource_type: Annotated[StrictStr, Field(description="The type of resource for which position information is updated, which can be a wireless device or a wireless gateway.")],
        update_resource_position_request: UpdateResourcePositionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_resource_position

        Update the position information of a given wireless device or a wireless gateway resource. The position coordinates are based on the <a href=\"https://gisgeography.com/wgs84-world-geodetic-system/\"> World Geodetic System (WGS84)</a>.

        :param resource_identifier: The identifier of the resource for which position information is updated. It can be the wireless device ID or the wireless gateway ID, depending on the resource type. (required)
        :type resource_identifier: str
        :param resource_type: The type of resource for which position information is updated, which can be a wireless device or a wireless gateway. (required)
        :type resource_type: str
        :param update_resource_position_request: (required)
        :type update_resource_position_request: UpdateResourcePositionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_resource_position_serialize(
            resource_identifier=resource_identifier,
            resource_type=resource_type,
            update_resource_position_request=update_resource_position_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_resource_position_serialize(
        self,
        resource_identifier,
        resource_type,
        update_resource_position_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_identifier is not None:
            _path_params['ResourceIdentifier'] = resource_identifier
        # process the query parameters
        if resource_type is not None:
            
            _query_params.append(('resourceType', resource_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_resource_position_request is not None:
            _body_params = update_resource_position_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/resource-positions/{ResourceIdentifier}#resourceType',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_wireless_device(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        update_wireless_device_request: UpdateWirelessDeviceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """update_wireless_device

        Updates properties of a wireless device.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param update_wireless_device_request: (required)
        :type update_wireless_device_request: UpdateWirelessDeviceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_wireless_device_serialize(
            id=id,
            update_wireless_device_request=update_wireless_device_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_wireless_device_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        update_wireless_device_request: UpdateWirelessDeviceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """update_wireless_device

        Updates properties of a wireless device.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param update_wireless_device_request: (required)
        :type update_wireless_device_request: UpdateWirelessDeviceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_wireless_device_serialize(
            id=id,
            update_wireless_device_request=update_wireless_device_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_wireless_device_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        update_wireless_device_request: UpdateWirelessDeviceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_wireless_device

        Updates properties of a wireless device.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param update_wireless_device_request: (required)
        :type update_wireless_device_request: UpdateWirelessDeviceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_wireless_device_serialize(
            id=id,
            update_wireless_device_request=update_wireless_device_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_wireless_device_serialize(
        self,
        id,
        update_wireless_device_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_wireless_device_request is not None:
            _body_params = update_wireless_device_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/wireless-devices/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_wireless_device_import_task(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The identifier of the import task to be updated.")],
        update_wireless_device_import_task_request: UpdateWirelessDeviceImportTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """update_wireless_device_import_task

        Update an import task to add more devices to the task.

        :param id: The identifier of the import task to be updated. (required)
        :type id: str
        :param update_wireless_device_import_task_request: (required)
        :type update_wireless_device_import_task_request: UpdateWirelessDeviceImportTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_wireless_device_import_task_serialize(
            id=id,
            update_wireless_device_import_task_request=update_wireless_device_import_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_wireless_device_import_task_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The identifier of the import task to be updated.")],
        update_wireless_device_import_task_request: UpdateWirelessDeviceImportTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """update_wireless_device_import_task

        Update an import task to add more devices to the task.

        :param id: The identifier of the import task to be updated. (required)
        :type id: str
        :param update_wireless_device_import_task_request: (required)
        :type update_wireless_device_import_task_request: UpdateWirelessDeviceImportTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_wireless_device_import_task_serialize(
            id=id,
            update_wireless_device_import_task_request=update_wireless_device_import_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_wireless_device_import_task_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The identifier of the import task to be updated.")],
        update_wireless_device_import_task_request: UpdateWirelessDeviceImportTaskRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_wireless_device_import_task

        Update an import task to add more devices to the task.

        :param id: The identifier of the import task to be updated. (required)
        :type id: str
        :param update_wireless_device_import_task_request: (required)
        :type update_wireless_device_import_task_request: UpdateWirelessDeviceImportTaskRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_wireless_device_import_task_serialize(
            id=id,
            update_wireless_device_import_task_request=update_wireless_device_import_task_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_wireless_device_import_task_serialize(
        self,
        id,
        update_wireless_device_import_task_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_wireless_device_import_task_request is not None:
            _body_params = update_wireless_device_import_task_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/wireless_device_import_task/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_wireless_gateway(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        update_wireless_gateway_request: UpdateWirelessGatewayRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """update_wireless_gateway

        Updates properties of a wireless gateway.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param update_wireless_gateway_request: (required)
        :type update_wireless_gateway_request: UpdateWirelessGatewayRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_wireless_gateway_serialize(
            id=id,
            update_wireless_gateway_request=update_wireless_gateway_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_wireless_gateway_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        update_wireless_gateway_request: UpdateWirelessGatewayRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """update_wireless_gateway

        Updates properties of a wireless gateway.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param update_wireless_gateway_request: (required)
        :type update_wireless_gateway_request: UpdateWirelessGatewayRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_wireless_gateway_serialize(
            id=id,
            update_wireless_gateway_request=update_wireless_gateway_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_wireless_gateway_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, max_length=256, description="The ID of the resource to update.")],
        update_wireless_gateway_request: UpdateWirelessGatewayRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_wireless_gateway

        Updates properties of a wireless gateway.

        :param id: The ID of the resource to update. (required)
        :type id: str
        :param update_wireless_gateway_request: (required)
        :type update_wireless_gateway_request: UpdateWirelessGatewayRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_wireless_gateway_serialize(
            id=id,
            update_wireless_gateway_request=update_wireless_gateway_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_wireless_gateway_serialize(
        self,
        id,
        update_wireless_gateway_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_wireless_gateway_request is not None:
            _body_params = update_wireless_gateway_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/wireless-gateways/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


