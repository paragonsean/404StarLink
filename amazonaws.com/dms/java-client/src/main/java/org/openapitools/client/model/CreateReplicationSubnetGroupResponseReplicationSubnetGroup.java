/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateReplicationSubnetGroupResponseReplicationSubnetGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:34.502814-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateReplicationSubnetGroupResponseReplicationSubnetGroup {
  public static final String SERIALIZED_NAME_REPLICATION_SUBNET_GROUP_IDENTIFIER = "ReplicationSubnetGroupIdentifier";
  @SerializedName(SERIALIZED_NAME_REPLICATION_SUBNET_GROUP_IDENTIFIER)
  private String replicationSubnetGroupIdentifier;

  public static final String SERIALIZED_NAME_REPLICATION_SUBNET_GROUP_DESCRIPTION = "ReplicationSubnetGroupDescription";
  @SerializedName(SERIALIZED_NAME_REPLICATION_SUBNET_GROUP_DESCRIPTION)
  private String replicationSubnetGroupDescription;

  public static final String SERIALIZED_NAME_VPC_ID = "VpcId";
  @SerializedName(SERIALIZED_NAME_VPC_ID)
  private String vpcId;

  public static final String SERIALIZED_NAME_SUBNET_GROUP_STATUS = "SubnetGroupStatus";
  @SerializedName(SERIALIZED_NAME_SUBNET_GROUP_STATUS)
  private String subnetGroupStatus;

  public static final String SERIALIZED_NAME_SUBNETS = "Subnets";
  @SerializedName(SERIALIZED_NAME_SUBNETS)
  private List subnets;

  public static final String SERIALIZED_NAME_SUPPORTED_NETWORK_TYPES = "SupportedNetworkTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_NETWORK_TYPES)
  private List supportedNetworkTypes;

  public CreateReplicationSubnetGroupResponseReplicationSubnetGroup() {
  }

  public CreateReplicationSubnetGroupResponseReplicationSubnetGroup replicationSubnetGroupIdentifier(String replicationSubnetGroupIdentifier) {
    this.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier;
    return this;
  }

  /**
   * Get replicationSubnetGroupIdentifier
   * @return replicationSubnetGroupIdentifier
   */
  @javax.annotation.Nullable
  public String getReplicationSubnetGroupIdentifier() {
    return replicationSubnetGroupIdentifier;
  }

  public void setReplicationSubnetGroupIdentifier(String replicationSubnetGroupIdentifier) {
    this.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier;
  }


  public CreateReplicationSubnetGroupResponseReplicationSubnetGroup replicationSubnetGroupDescription(String replicationSubnetGroupDescription) {
    this.replicationSubnetGroupDescription = replicationSubnetGroupDescription;
    return this;
  }

  /**
   * Get replicationSubnetGroupDescription
   * @return replicationSubnetGroupDescription
   */
  @javax.annotation.Nullable
  public String getReplicationSubnetGroupDescription() {
    return replicationSubnetGroupDescription;
  }

  public void setReplicationSubnetGroupDescription(String replicationSubnetGroupDescription) {
    this.replicationSubnetGroupDescription = replicationSubnetGroupDescription;
  }


  public CreateReplicationSubnetGroupResponseReplicationSubnetGroup vpcId(String vpcId) {
    this.vpcId = vpcId;
    return this;
  }

  /**
   * Get vpcId
   * @return vpcId
   */
  @javax.annotation.Nullable
  public String getVpcId() {
    return vpcId;
  }

  public void setVpcId(String vpcId) {
    this.vpcId = vpcId;
  }


  public CreateReplicationSubnetGroupResponseReplicationSubnetGroup subnetGroupStatus(String subnetGroupStatus) {
    this.subnetGroupStatus = subnetGroupStatus;
    return this;
  }

  /**
   * Get subnetGroupStatus
   * @return subnetGroupStatus
   */
  @javax.annotation.Nullable
  public String getSubnetGroupStatus() {
    return subnetGroupStatus;
  }

  public void setSubnetGroupStatus(String subnetGroupStatus) {
    this.subnetGroupStatus = subnetGroupStatus;
  }


  public CreateReplicationSubnetGroupResponseReplicationSubnetGroup subnets(List subnets) {
    this.subnets = subnets;
    return this;
  }

  /**
   * Get subnets
   * @return subnets
   */
  @javax.annotation.Nullable
  public List getSubnets() {
    return subnets;
  }

  public void setSubnets(List subnets) {
    this.subnets = subnets;
  }


  public CreateReplicationSubnetGroupResponseReplicationSubnetGroup supportedNetworkTypes(List supportedNetworkTypes) {
    this.supportedNetworkTypes = supportedNetworkTypes;
    return this;
  }

  /**
   * Get supportedNetworkTypes
   * @return supportedNetworkTypes
   */
  @javax.annotation.Nullable
  public List getSupportedNetworkTypes() {
    return supportedNetworkTypes;
  }

  public void setSupportedNetworkTypes(List supportedNetworkTypes) {
    this.supportedNetworkTypes = supportedNetworkTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateReplicationSubnetGroupResponseReplicationSubnetGroup createReplicationSubnetGroupResponseReplicationSubnetGroup = (CreateReplicationSubnetGroupResponseReplicationSubnetGroup) o;
    return Objects.equals(this.replicationSubnetGroupIdentifier, createReplicationSubnetGroupResponseReplicationSubnetGroup.replicationSubnetGroupIdentifier) &&
        Objects.equals(this.replicationSubnetGroupDescription, createReplicationSubnetGroupResponseReplicationSubnetGroup.replicationSubnetGroupDescription) &&
        Objects.equals(this.vpcId, createReplicationSubnetGroupResponseReplicationSubnetGroup.vpcId) &&
        Objects.equals(this.subnetGroupStatus, createReplicationSubnetGroupResponseReplicationSubnetGroup.subnetGroupStatus) &&
        Objects.equals(this.subnets, createReplicationSubnetGroupResponseReplicationSubnetGroup.subnets) &&
        Objects.equals(this.supportedNetworkTypes, createReplicationSubnetGroupResponseReplicationSubnetGroup.supportedNetworkTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(replicationSubnetGroupIdentifier, replicationSubnetGroupDescription, vpcId, subnetGroupStatus, subnets, supportedNetworkTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateReplicationSubnetGroupResponseReplicationSubnetGroup {\n");
    sb.append("    replicationSubnetGroupIdentifier: ").append(toIndentedString(replicationSubnetGroupIdentifier)).append("\n");
    sb.append("    replicationSubnetGroupDescription: ").append(toIndentedString(replicationSubnetGroupDescription)).append("\n");
    sb.append("    vpcId: ").append(toIndentedString(vpcId)).append("\n");
    sb.append("    subnetGroupStatus: ").append(toIndentedString(subnetGroupStatus)).append("\n");
    sb.append("    subnets: ").append(toIndentedString(subnets)).append("\n");
    sb.append("    supportedNetworkTypes: ").append(toIndentedString(supportedNetworkTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReplicationSubnetGroupIdentifier");
    openapiFields.add("ReplicationSubnetGroupDescription");
    openapiFields.add("VpcId");
    openapiFields.add("SubnetGroupStatus");
    openapiFields.add("Subnets");
    openapiFields.add("SupportedNetworkTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateReplicationSubnetGroupResponseReplicationSubnetGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateReplicationSubnetGroupResponseReplicationSubnetGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateReplicationSubnetGroupResponseReplicationSubnetGroup is not found in the empty JSON string", CreateReplicationSubnetGroupResponseReplicationSubnetGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateReplicationSubnetGroupResponseReplicationSubnetGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateReplicationSubnetGroupResponseReplicationSubnetGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ReplicationSubnetGroupIdentifier`
      if (jsonObj.get("ReplicationSubnetGroupIdentifier") != null && !jsonObj.get("ReplicationSubnetGroupIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationSubnetGroupIdentifier"));
      }
      // validate the optional field `ReplicationSubnetGroupDescription`
      if (jsonObj.get("ReplicationSubnetGroupDescription") != null && !jsonObj.get("ReplicationSubnetGroupDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationSubnetGroupDescription"));
      }
      // validate the optional field `VpcId`
      if (jsonObj.get("VpcId") != null && !jsonObj.get("VpcId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcId"));
      }
      // validate the optional field `SubnetGroupStatus`
      if (jsonObj.get("SubnetGroupStatus") != null && !jsonObj.get("SubnetGroupStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubnetGroupStatus"));
      }
      // validate the optional field `Subnets`
      if (jsonObj.get("Subnets") != null && !jsonObj.get("Subnets").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Subnets"));
      }
      // validate the optional field `SupportedNetworkTypes`
      if (jsonObj.get("SupportedNetworkTypes") != null && !jsonObj.get("SupportedNetworkTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SupportedNetworkTypes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateReplicationSubnetGroupResponseReplicationSubnetGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateReplicationSubnetGroupResponseReplicationSubnetGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateReplicationSubnetGroupResponseReplicationSubnetGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateReplicationSubnetGroupResponseReplicationSubnetGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateReplicationSubnetGroupResponseReplicationSubnetGroup>() {
           @Override
           public void write(JsonWriter out, CreateReplicationSubnetGroupResponseReplicationSubnetGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateReplicationSubnetGroupResponseReplicationSubnetGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateReplicationSubnetGroupResponseReplicationSubnetGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateReplicationSubnetGroupResponseReplicationSubnetGroup
   * @throws IOException if the JSON string is invalid with respect to CreateReplicationSubnetGroupResponseReplicationSubnetGroup
   */
  public static CreateReplicationSubnetGroupResponseReplicationSubnetGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateReplicationSubnetGroupResponseReplicationSubnetGroup.class);
  }

  /**
   * Convert an instance of CreateReplicationSubnetGroupResponseReplicationSubnetGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

