/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SafeguardPolicy;
import org.openapitools.client.model.TlogAccessMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information that defines a Microsoft SQL Server endpoint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:34.502814-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MicrosoftSQLServerSettings {
  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_BCP_PACKET_SIZE = "BcpPacketSize";
  @SerializedName(SERIALIZED_NAME_BCP_PACKET_SIZE)
  private Integer bcpPacketSize;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "DatabaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_CONTROL_TABLES_FILE_GROUP = "ControlTablesFileGroup";
  @SerializedName(SERIALIZED_NAME_CONTROL_TABLES_FILE_GROUP)
  private String controlTablesFileGroup;

  public static final String SERIALIZED_NAME_PASSWORD = "Password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_QUERY_SINGLE_ALWAYS_ON_NODE = "QuerySingleAlwaysOnNode";
  @SerializedName(SERIALIZED_NAME_QUERY_SINGLE_ALWAYS_ON_NODE)
  private Boolean querySingleAlwaysOnNode;

  public static final String SERIALIZED_NAME_READ_BACKUP_ONLY = "ReadBackupOnly";
  @SerializedName(SERIALIZED_NAME_READ_BACKUP_ONLY)
  private Boolean readBackupOnly;

  public static final String SERIALIZED_NAME_SAFEGUARD_POLICY = "SafeguardPolicy";
  @SerializedName(SERIALIZED_NAME_SAFEGUARD_POLICY)
  private SafeguardPolicy safeguardPolicy;

  public static final String SERIALIZED_NAME_SERVER_NAME = "ServerName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  private String serverName;

  public static final String SERIALIZED_NAME_USERNAME = "Username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_USE_BCP_FULL_LOAD = "UseBcpFullLoad";
  @SerializedName(SERIALIZED_NAME_USE_BCP_FULL_LOAD)
  private Boolean useBcpFullLoad;

  public static final String SERIALIZED_NAME_USE_THIRD_PARTY_BACKUP_DEVICE = "UseThirdPartyBackupDevice";
  @SerializedName(SERIALIZED_NAME_USE_THIRD_PARTY_BACKUP_DEVICE)
  private Boolean useThirdPartyBackupDevice;

  public static final String SERIALIZED_NAME_SECRETS_MANAGER_ACCESS_ROLE_ARN = "SecretsManagerAccessRoleArn";
  @SerializedName(SERIALIZED_NAME_SECRETS_MANAGER_ACCESS_ROLE_ARN)
  private String secretsManagerAccessRoleArn;

  public static final String SERIALIZED_NAME_SECRETS_MANAGER_SECRET_ID = "SecretsManagerSecretId";
  @SerializedName(SERIALIZED_NAME_SECRETS_MANAGER_SECRET_ID)
  private String secretsManagerSecretId;

  public static final String SERIALIZED_NAME_TRIM_SPACE_IN_CHAR = "TrimSpaceInChar";
  @SerializedName(SERIALIZED_NAME_TRIM_SPACE_IN_CHAR)
  private Boolean trimSpaceInChar;

  public static final String SERIALIZED_NAME_TLOG_ACCESS_MODE = "TlogAccessMode";
  @SerializedName(SERIALIZED_NAME_TLOG_ACCESS_MODE)
  private TlogAccessMode tlogAccessMode;

  public static final String SERIALIZED_NAME_FORCE_LOB_LOOKUP = "ForceLobLookup";
  @SerializedName(SERIALIZED_NAME_FORCE_LOB_LOOKUP)
  private Boolean forceLobLookup;

  public MicrosoftSQLServerSettings() {
  }

  public MicrosoftSQLServerSettings port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public MicrosoftSQLServerSettings bcpPacketSize(Integer bcpPacketSize) {
    this.bcpPacketSize = bcpPacketSize;
    return this;
  }

  /**
   * Get bcpPacketSize
   * @return bcpPacketSize
   */
  @javax.annotation.Nullable
  public Integer getBcpPacketSize() {
    return bcpPacketSize;
  }

  public void setBcpPacketSize(Integer bcpPacketSize) {
    this.bcpPacketSize = bcpPacketSize;
  }


  public MicrosoftSQLServerSettings databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * Get databaseName
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public MicrosoftSQLServerSettings controlTablesFileGroup(String controlTablesFileGroup) {
    this.controlTablesFileGroup = controlTablesFileGroup;
    return this;
  }

  /**
   * Get controlTablesFileGroup
   * @return controlTablesFileGroup
   */
  @javax.annotation.Nullable
  public String getControlTablesFileGroup() {
    return controlTablesFileGroup;
  }

  public void setControlTablesFileGroup(String controlTablesFileGroup) {
    this.controlTablesFileGroup = controlTablesFileGroup;
  }


  public MicrosoftSQLServerSettings password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public MicrosoftSQLServerSettings querySingleAlwaysOnNode(Boolean querySingleAlwaysOnNode) {
    this.querySingleAlwaysOnNode = querySingleAlwaysOnNode;
    return this;
  }

  /**
   * Get querySingleAlwaysOnNode
   * @return querySingleAlwaysOnNode
   */
  @javax.annotation.Nullable
  public Boolean getQuerySingleAlwaysOnNode() {
    return querySingleAlwaysOnNode;
  }

  public void setQuerySingleAlwaysOnNode(Boolean querySingleAlwaysOnNode) {
    this.querySingleAlwaysOnNode = querySingleAlwaysOnNode;
  }


  public MicrosoftSQLServerSettings readBackupOnly(Boolean readBackupOnly) {
    this.readBackupOnly = readBackupOnly;
    return this;
  }

  /**
   * Get readBackupOnly
   * @return readBackupOnly
   */
  @javax.annotation.Nullable
  public Boolean getReadBackupOnly() {
    return readBackupOnly;
  }

  public void setReadBackupOnly(Boolean readBackupOnly) {
    this.readBackupOnly = readBackupOnly;
  }


  public MicrosoftSQLServerSettings safeguardPolicy(SafeguardPolicy safeguardPolicy) {
    this.safeguardPolicy = safeguardPolicy;
    return this;
  }

  /**
   * Get safeguardPolicy
   * @return safeguardPolicy
   */
  @javax.annotation.Nullable
  public SafeguardPolicy getSafeguardPolicy() {
    return safeguardPolicy;
  }

  public void setSafeguardPolicy(SafeguardPolicy safeguardPolicy) {
    this.safeguardPolicy = safeguardPolicy;
  }


  public MicrosoftSQLServerSettings serverName(String serverName) {
    this.serverName = serverName;
    return this;
  }

  /**
   * Get serverName
   * @return serverName
   */
  @javax.annotation.Nullable
  public String getServerName() {
    return serverName;
  }

  public void setServerName(String serverName) {
    this.serverName = serverName;
  }


  public MicrosoftSQLServerSettings username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public MicrosoftSQLServerSettings useBcpFullLoad(Boolean useBcpFullLoad) {
    this.useBcpFullLoad = useBcpFullLoad;
    return this;
  }

  /**
   * Get useBcpFullLoad
   * @return useBcpFullLoad
   */
  @javax.annotation.Nullable
  public Boolean getUseBcpFullLoad() {
    return useBcpFullLoad;
  }

  public void setUseBcpFullLoad(Boolean useBcpFullLoad) {
    this.useBcpFullLoad = useBcpFullLoad;
  }


  public MicrosoftSQLServerSettings useThirdPartyBackupDevice(Boolean useThirdPartyBackupDevice) {
    this.useThirdPartyBackupDevice = useThirdPartyBackupDevice;
    return this;
  }

  /**
   * Get useThirdPartyBackupDevice
   * @return useThirdPartyBackupDevice
   */
  @javax.annotation.Nullable
  public Boolean getUseThirdPartyBackupDevice() {
    return useThirdPartyBackupDevice;
  }

  public void setUseThirdPartyBackupDevice(Boolean useThirdPartyBackupDevice) {
    this.useThirdPartyBackupDevice = useThirdPartyBackupDevice;
  }


  public MicrosoftSQLServerSettings secretsManagerAccessRoleArn(String secretsManagerAccessRoleArn) {
    this.secretsManagerAccessRoleArn = secretsManagerAccessRoleArn;
    return this;
  }

  /**
   * Get secretsManagerAccessRoleArn
   * @return secretsManagerAccessRoleArn
   */
  @javax.annotation.Nullable
  public String getSecretsManagerAccessRoleArn() {
    return secretsManagerAccessRoleArn;
  }

  public void setSecretsManagerAccessRoleArn(String secretsManagerAccessRoleArn) {
    this.secretsManagerAccessRoleArn = secretsManagerAccessRoleArn;
  }


  public MicrosoftSQLServerSettings secretsManagerSecretId(String secretsManagerSecretId) {
    this.secretsManagerSecretId = secretsManagerSecretId;
    return this;
  }

  /**
   * Get secretsManagerSecretId
   * @return secretsManagerSecretId
   */
  @javax.annotation.Nullable
  public String getSecretsManagerSecretId() {
    return secretsManagerSecretId;
  }

  public void setSecretsManagerSecretId(String secretsManagerSecretId) {
    this.secretsManagerSecretId = secretsManagerSecretId;
  }


  public MicrosoftSQLServerSettings trimSpaceInChar(Boolean trimSpaceInChar) {
    this.trimSpaceInChar = trimSpaceInChar;
    return this;
  }

  /**
   * Get trimSpaceInChar
   * @return trimSpaceInChar
   */
  @javax.annotation.Nullable
  public Boolean getTrimSpaceInChar() {
    return trimSpaceInChar;
  }

  public void setTrimSpaceInChar(Boolean trimSpaceInChar) {
    this.trimSpaceInChar = trimSpaceInChar;
  }


  public MicrosoftSQLServerSettings tlogAccessMode(TlogAccessMode tlogAccessMode) {
    this.tlogAccessMode = tlogAccessMode;
    return this;
  }

  /**
   * Get tlogAccessMode
   * @return tlogAccessMode
   */
  @javax.annotation.Nullable
  public TlogAccessMode getTlogAccessMode() {
    return tlogAccessMode;
  }

  public void setTlogAccessMode(TlogAccessMode tlogAccessMode) {
    this.tlogAccessMode = tlogAccessMode;
  }


  public MicrosoftSQLServerSettings forceLobLookup(Boolean forceLobLookup) {
    this.forceLobLookup = forceLobLookup;
    return this;
  }

  /**
   * Get forceLobLookup
   * @return forceLobLookup
   */
  @javax.annotation.Nullable
  public Boolean getForceLobLookup() {
    return forceLobLookup;
  }

  public void setForceLobLookup(Boolean forceLobLookup) {
    this.forceLobLookup = forceLobLookup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MicrosoftSQLServerSettings microsoftSQLServerSettings = (MicrosoftSQLServerSettings) o;
    return Objects.equals(this.port, microsoftSQLServerSettings.port) &&
        Objects.equals(this.bcpPacketSize, microsoftSQLServerSettings.bcpPacketSize) &&
        Objects.equals(this.databaseName, microsoftSQLServerSettings.databaseName) &&
        Objects.equals(this.controlTablesFileGroup, microsoftSQLServerSettings.controlTablesFileGroup) &&
        Objects.equals(this.password, microsoftSQLServerSettings.password) &&
        Objects.equals(this.querySingleAlwaysOnNode, microsoftSQLServerSettings.querySingleAlwaysOnNode) &&
        Objects.equals(this.readBackupOnly, microsoftSQLServerSettings.readBackupOnly) &&
        Objects.equals(this.safeguardPolicy, microsoftSQLServerSettings.safeguardPolicy) &&
        Objects.equals(this.serverName, microsoftSQLServerSettings.serverName) &&
        Objects.equals(this.username, microsoftSQLServerSettings.username) &&
        Objects.equals(this.useBcpFullLoad, microsoftSQLServerSettings.useBcpFullLoad) &&
        Objects.equals(this.useThirdPartyBackupDevice, microsoftSQLServerSettings.useThirdPartyBackupDevice) &&
        Objects.equals(this.secretsManagerAccessRoleArn, microsoftSQLServerSettings.secretsManagerAccessRoleArn) &&
        Objects.equals(this.secretsManagerSecretId, microsoftSQLServerSettings.secretsManagerSecretId) &&
        Objects.equals(this.trimSpaceInChar, microsoftSQLServerSettings.trimSpaceInChar) &&
        Objects.equals(this.tlogAccessMode, microsoftSQLServerSettings.tlogAccessMode) &&
        Objects.equals(this.forceLobLookup, microsoftSQLServerSettings.forceLobLookup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(port, bcpPacketSize, databaseName, controlTablesFileGroup, password, querySingleAlwaysOnNode, readBackupOnly, safeguardPolicy, serverName, username, useBcpFullLoad, useThirdPartyBackupDevice, secretsManagerAccessRoleArn, secretsManagerSecretId, trimSpaceInChar, tlogAccessMode, forceLobLookup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MicrosoftSQLServerSettings {\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    bcpPacketSize: ").append(toIndentedString(bcpPacketSize)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    controlTablesFileGroup: ").append(toIndentedString(controlTablesFileGroup)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    querySingleAlwaysOnNode: ").append(toIndentedString(querySingleAlwaysOnNode)).append("\n");
    sb.append("    readBackupOnly: ").append(toIndentedString(readBackupOnly)).append("\n");
    sb.append("    safeguardPolicy: ").append(toIndentedString(safeguardPolicy)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    useBcpFullLoad: ").append(toIndentedString(useBcpFullLoad)).append("\n");
    sb.append("    useThirdPartyBackupDevice: ").append(toIndentedString(useThirdPartyBackupDevice)).append("\n");
    sb.append("    secretsManagerAccessRoleArn: ").append(toIndentedString(secretsManagerAccessRoleArn)).append("\n");
    sb.append("    secretsManagerSecretId: ").append(toIndentedString(secretsManagerSecretId)).append("\n");
    sb.append("    trimSpaceInChar: ").append(toIndentedString(trimSpaceInChar)).append("\n");
    sb.append("    tlogAccessMode: ").append(toIndentedString(tlogAccessMode)).append("\n");
    sb.append("    forceLobLookup: ").append(toIndentedString(forceLobLookup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Port");
    openapiFields.add("BcpPacketSize");
    openapiFields.add("DatabaseName");
    openapiFields.add("ControlTablesFileGroup");
    openapiFields.add("Password");
    openapiFields.add("QuerySingleAlwaysOnNode");
    openapiFields.add("ReadBackupOnly");
    openapiFields.add("SafeguardPolicy");
    openapiFields.add("ServerName");
    openapiFields.add("Username");
    openapiFields.add("UseBcpFullLoad");
    openapiFields.add("UseThirdPartyBackupDevice");
    openapiFields.add("SecretsManagerAccessRoleArn");
    openapiFields.add("SecretsManagerSecretId");
    openapiFields.add("TrimSpaceInChar");
    openapiFields.add("TlogAccessMode");
    openapiFields.add("ForceLobLookup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MicrosoftSQLServerSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MicrosoftSQLServerSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MicrosoftSQLServerSettings is not found in the empty JSON string", MicrosoftSQLServerSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MicrosoftSQLServerSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MicrosoftSQLServerSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Port`
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Port"));
      }
      // validate the optional field `BcpPacketSize`
      if (jsonObj.get("BcpPacketSize") != null && !jsonObj.get("BcpPacketSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BcpPacketSize"));
      }
      // validate the optional field `DatabaseName`
      if (jsonObj.get("DatabaseName") != null && !jsonObj.get("DatabaseName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatabaseName"));
      }
      // validate the optional field `ControlTablesFileGroup`
      if (jsonObj.get("ControlTablesFileGroup") != null && !jsonObj.get("ControlTablesFileGroup").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ControlTablesFileGroup"));
      }
      // validate the optional field `Password`
      if (jsonObj.get("Password") != null && !jsonObj.get("Password").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Password"));
      }
      // validate the optional field `QuerySingleAlwaysOnNode`
      if (jsonObj.get("QuerySingleAlwaysOnNode") != null && !jsonObj.get("QuerySingleAlwaysOnNode").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("QuerySingleAlwaysOnNode"));
      }
      // validate the optional field `ReadBackupOnly`
      if (jsonObj.get("ReadBackupOnly") != null && !jsonObj.get("ReadBackupOnly").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ReadBackupOnly"));
      }
      // validate the optional field `SafeguardPolicy`
      if (jsonObj.get("SafeguardPolicy") != null && !jsonObj.get("SafeguardPolicy").isJsonNull()) {
        SafeguardPolicy.validateJsonElement(jsonObj.get("SafeguardPolicy"));
      }
      // validate the optional field `ServerName`
      if (jsonObj.get("ServerName") != null && !jsonObj.get("ServerName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServerName"));
      }
      // validate the optional field `Username`
      if (jsonObj.get("Username") != null && !jsonObj.get("Username").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Username"));
      }
      // validate the optional field `UseBcpFullLoad`
      if (jsonObj.get("UseBcpFullLoad") != null && !jsonObj.get("UseBcpFullLoad").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UseBcpFullLoad"));
      }
      // validate the optional field `UseThirdPartyBackupDevice`
      if (jsonObj.get("UseThirdPartyBackupDevice") != null && !jsonObj.get("UseThirdPartyBackupDevice").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UseThirdPartyBackupDevice"));
      }
      // validate the optional field `SecretsManagerAccessRoleArn`
      if (jsonObj.get("SecretsManagerAccessRoleArn") != null && !jsonObj.get("SecretsManagerAccessRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecretsManagerAccessRoleArn"));
      }
      // validate the optional field `SecretsManagerSecretId`
      if (jsonObj.get("SecretsManagerSecretId") != null && !jsonObj.get("SecretsManagerSecretId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecretsManagerSecretId"));
      }
      // validate the optional field `TrimSpaceInChar`
      if (jsonObj.get("TrimSpaceInChar") != null && !jsonObj.get("TrimSpaceInChar").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("TrimSpaceInChar"));
      }
      // validate the optional field `TlogAccessMode`
      if (jsonObj.get("TlogAccessMode") != null && !jsonObj.get("TlogAccessMode").isJsonNull()) {
        TlogAccessMode.validateJsonElement(jsonObj.get("TlogAccessMode"));
      }
      // validate the optional field `ForceLobLookup`
      if (jsonObj.get("ForceLobLookup") != null && !jsonObj.get("ForceLobLookup").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ForceLobLookup"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MicrosoftSQLServerSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MicrosoftSQLServerSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MicrosoftSQLServerSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MicrosoftSQLServerSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<MicrosoftSQLServerSettings>() {
           @Override
           public void write(JsonWriter out, MicrosoftSQLServerSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MicrosoftSQLServerSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MicrosoftSQLServerSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MicrosoftSQLServerSettings
   * @throws IOException if the JSON string is invalid with respect to MicrosoftSQLServerSettings
   */
  public static MicrosoftSQLServerSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MicrosoftSQLServerSettings.class);
  }

  /**
   * Convert an instance of MicrosoftSQLServerSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

