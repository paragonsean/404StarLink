/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information that describes an individual assessment from a premigration assessment run.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:34.502814-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicationTaskIndividualAssessment {
  public static final String SERIALIZED_NAME_REPLICATION_TASK_INDIVIDUAL_ASSESSMENT_ARN = "ReplicationTaskIndividualAssessmentArn";
  @SerializedName(SERIALIZED_NAME_REPLICATION_TASK_INDIVIDUAL_ASSESSMENT_ARN)
  private String replicationTaskIndividualAssessmentArn;

  public static final String SERIALIZED_NAME_REPLICATION_TASK_ASSESSMENT_RUN_ARN = "ReplicationTaskAssessmentRunArn";
  @SerializedName(SERIALIZED_NAME_REPLICATION_TASK_ASSESSMENT_RUN_ARN)
  private String replicationTaskAssessmentRunArn;

  public static final String SERIALIZED_NAME_INDIVIDUAL_ASSESSMENT_NAME = "IndividualAssessmentName";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_ASSESSMENT_NAME)
  private String individualAssessmentName;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_REPLICATION_TASK_INDIVIDUAL_ASSESSMENT_START_DATE = "ReplicationTaskIndividualAssessmentStartDate";
  @SerializedName(SERIALIZED_NAME_REPLICATION_TASK_INDIVIDUAL_ASSESSMENT_START_DATE)
  private OffsetDateTime replicationTaskIndividualAssessmentStartDate;

  public ReplicationTaskIndividualAssessment() {
  }

  public ReplicationTaskIndividualAssessment replicationTaskIndividualAssessmentArn(String replicationTaskIndividualAssessmentArn) {
    this.replicationTaskIndividualAssessmentArn = replicationTaskIndividualAssessmentArn;
    return this;
  }

  /**
   * Get replicationTaskIndividualAssessmentArn
   * @return replicationTaskIndividualAssessmentArn
   */
  @javax.annotation.Nullable
  public String getReplicationTaskIndividualAssessmentArn() {
    return replicationTaskIndividualAssessmentArn;
  }

  public void setReplicationTaskIndividualAssessmentArn(String replicationTaskIndividualAssessmentArn) {
    this.replicationTaskIndividualAssessmentArn = replicationTaskIndividualAssessmentArn;
  }


  public ReplicationTaskIndividualAssessment replicationTaskAssessmentRunArn(String replicationTaskAssessmentRunArn) {
    this.replicationTaskAssessmentRunArn = replicationTaskAssessmentRunArn;
    return this;
  }

  /**
   * Get replicationTaskAssessmentRunArn
   * @return replicationTaskAssessmentRunArn
   */
  @javax.annotation.Nullable
  public String getReplicationTaskAssessmentRunArn() {
    return replicationTaskAssessmentRunArn;
  }

  public void setReplicationTaskAssessmentRunArn(String replicationTaskAssessmentRunArn) {
    this.replicationTaskAssessmentRunArn = replicationTaskAssessmentRunArn;
  }


  public ReplicationTaskIndividualAssessment individualAssessmentName(String individualAssessmentName) {
    this.individualAssessmentName = individualAssessmentName;
    return this;
  }

  /**
   * Get individualAssessmentName
   * @return individualAssessmentName
   */
  @javax.annotation.Nullable
  public String getIndividualAssessmentName() {
    return individualAssessmentName;
  }

  public void setIndividualAssessmentName(String individualAssessmentName) {
    this.individualAssessmentName = individualAssessmentName;
  }


  public ReplicationTaskIndividualAssessment status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ReplicationTaskIndividualAssessment replicationTaskIndividualAssessmentStartDate(OffsetDateTime replicationTaskIndividualAssessmentStartDate) {
    this.replicationTaskIndividualAssessmentStartDate = replicationTaskIndividualAssessmentStartDate;
    return this;
  }

  /**
   * Get replicationTaskIndividualAssessmentStartDate
   * @return replicationTaskIndividualAssessmentStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReplicationTaskIndividualAssessmentStartDate() {
    return replicationTaskIndividualAssessmentStartDate;
  }

  public void setReplicationTaskIndividualAssessmentStartDate(OffsetDateTime replicationTaskIndividualAssessmentStartDate) {
    this.replicationTaskIndividualAssessmentStartDate = replicationTaskIndividualAssessmentStartDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationTaskIndividualAssessment replicationTaskIndividualAssessment = (ReplicationTaskIndividualAssessment) o;
    return Objects.equals(this.replicationTaskIndividualAssessmentArn, replicationTaskIndividualAssessment.replicationTaskIndividualAssessmentArn) &&
        Objects.equals(this.replicationTaskAssessmentRunArn, replicationTaskIndividualAssessment.replicationTaskAssessmentRunArn) &&
        Objects.equals(this.individualAssessmentName, replicationTaskIndividualAssessment.individualAssessmentName) &&
        Objects.equals(this.status, replicationTaskIndividualAssessment.status) &&
        Objects.equals(this.replicationTaskIndividualAssessmentStartDate, replicationTaskIndividualAssessment.replicationTaskIndividualAssessmentStartDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(replicationTaskIndividualAssessmentArn, replicationTaskAssessmentRunArn, individualAssessmentName, status, replicationTaskIndividualAssessmentStartDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationTaskIndividualAssessment {\n");
    sb.append("    replicationTaskIndividualAssessmentArn: ").append(toIndentedString(replicationTaskIndividualAssessmentArn)).append("\n");
    sb.append("    replicationTaskAssessmentRunArn: ").append(toIndentedString(replicationTaskAssessmentRunArn)).append("\n");
    sb.append("    individualAssessmentName: ").append(toIndentedString(individualAssessmentName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    replicationTaskIndividualAssessmentStartDate: ").append(toIndentedString(replicationTaskIndividualAssessmentStartDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReplicationTaskIndividualAssessmentArn");
    openapiFields.add("ReplicationTaskAssessmentRunArn");
    openapiFields.add("IndividualAssessmentName");
    openapiFields.add("Status");
    openapiFields.add("ReplicationTaskIndividualAssessmentStartDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicationTaskIndividualAssessment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicationTaskIndividualAssessment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationTaskIndividualAssessment is not found in the empty JSON string", ReplicationTaskIndividualAssessment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicationTaskIndividualAssessment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicationTaskIndividualAssessment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ReplicationTaskIndividualAssessmentArn`
      if (jsonObj.get("ReplicationTaskIndividualAssessmentArn") != null && !jsonObj.get("ReplicationTaskIndividualAssessmentArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationTaskIndividualAssessmentArn"));
      }
      // validate the optional field `ReplicationTaskAssessmentRunArn`
      if (jsonObj.get("ReplicationTaskAssessmentRunArn") != null && !jsonObj.get("ReplicationTaskAssessmentRunArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationTaskAssessmentRunArn"));
      }
      // validate the optional field `IndividualAssessmentName`
      if (jsonObj.get("IndividualAssessmentName") != null && !jsonObj.get("IndividualAssessmentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IndividualAssessmentName"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `ReplicationTaskIndividualAssessmentStartDate`
      if (jsonObj.get("ReplicationTaskIndividualAssessmentStartDate") != null && !jsonObj.get("ReplicationTaskIndividualAssessmentStartDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ReplicationTaskIndividualAssessmentStartDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicationTaskIndividualAssessment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicationTaskIndividualAssessment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicationTaskIndividualAssessment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicationTaskIndividualAssessment.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicationTaskIndividualAssessment>() {
           @Override
           public void write(JsonWriter out, ReplicationTaskIndividualAssessment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicationTaskIndividualAssessment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicationTaskIndividualAssessment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicationTaskIndividualAssessment
   * @throws IOException if the JSON string is invalid with respect to ReplicationTaskIndividualAssessment
   */
  public static ReplicationTaskIndividualAssessment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationTaskIndividualAssessment.class);
  }

  /**
   * Convert an instance of ReplicationTaskIndividualAssessment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

