/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CollectorStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the last Fleet Advisor collector health check.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:34.502814-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CollectorHealthCheck {
  public static final String SERIALIZED_NAME_COLLECTOR_STATUS = "CollectorStatus";
  @SerializedName(SERIALIZED_NAME_COLLECTOR_STATUS)
  private CollectorStatus collectorStatus;

  public static final String SERIALIZED_NAME_LOCAL_COLLECTOR_S3_ACCESS = "LocalCollectorS3Access";
  @SerializedName(SERIALIZED_NAME_LOCAL_COLLECTOR_S3_ACCESS)
  private Boolean localCollectorS3Access;

  public static final String SERIALIZED_NAME_WEB_COLLECTOR_S3_ACCESS = "WebCollectorS3Access";
  @SerializedName(SERIALIZED_NAME_WEB_COLLECTOR_S3_ACCESS)
  private Boolean webCollectorS3Access;

  public static final String SERIALIZED_NAME_WEB_COLLECTOR_GRANTED_ROLE_BASED_ACCESS = "WebCollectorGrantedRoleBasedAccess";
  @SerializedName(SERIALIZED_NAME_WEB_COLLECTOR_GRANTED_ROLE_BASED_ACCESS)
  private Boolean webCollectorGrantedRoleBasedAccess;

  public CollectorHealthCheck() {
  }

  public CollectorHealthCheck collectorStatus(CollectorStatus collectorStatus) {
    this.collectorStatus = collectorStatus;
    return this;
  }

  /**
   * Get collectorStatus
   * @return collectorStatus
   */
  @javax.annotation.Nullable
  public CollectorStatus getCollectorStatus() {
    return collectorStatus;
  }

  public void setCollectorStatus(CollectorStatus collectorStatus) {
    this.collectorStatus = collectorStatus;
  }


  public CollectorHealthCheck localCollectorS3Access(Boolean localCollectorS3Access) {
    this.localCollectorS3Access = localCollectorS3Access;
    return this;
  }

  /**
   * Get localCollectorS3Access
   * @return localCollectorS3Access
   */
  @javax.annotation.Nullable
  public Boolean getLocalCollectorS3Access() {
    return localCollectorS3Access;
  }

  public void setLocalCollectorS3Access(Boolean localCollectorS3Access) {
    this.localCollectorS3Access = localCollectorS3Access;
  }


  public CollectorHealthCheck webCollectorS3Access(Boolean webCollectorS3Access) {
    this.webCollectorS3Access = webCollectorS3Access;
    return this;
  }

  /**
   * Get webCollectorS3Access
   * @return webCollectorS3Access
   */
  @javax.annotation.Nullable
  public Boolean getWebCollectorS3Access() {
    return webCollectorS3Access;
  }

  public void setWebCollectorS3Access(Boolean webCollectorS3Access) {
    this.webCollectorS3Access = webCollectorS3Access;
  }


  public CollectorHealthCheck webCollectorGrantedRoleBasedAccess(Boolean webCollectorGrantedRoleBasedAccess) {
    this.webCollectorGrantedRoleBasedAccess = webCollectorGrantedRoleBasedAccess;
    return this;
  }

  /**
   * Get webCollectorGrantedRoleBasedAccess
   * @return webCollectorGrantedRoleBasedAccess
   */
  @javax.annotation.Nullable
  public Boolean getWebCollectorGrantedRoleBasedAccess() {
    return webCollectorGrantedRoleBasedAccess;
  }

  public void setWebCollectorGrantedRoleBasedAccess(Boolean webCollectorGrantedRoleBasedAccess) {
    this.webCollectorGrantedRoleBasedAccess = webCollectorGrantedRoleBasedAccess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectorHealthCheck collectorHealthCheck = (CollectorHealthCheck) o;
    return Objects.equals(this.collectorStatus, collectorHealthCheck.collectorStatus) &&
        Objects.equals(this.localCollectorS3Access, collectorHealthCheck.localCollectorS3Access) &&
        Objects.equals(this.webCollectorS3Access, collectorHealthCheck.webCollectorS3Access) &&
        Objects.equals(this.webCollectorGrantedRoleBasedAccess, collectorHealthCheck.webCollectorGrantedRoleBasedAccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectorStatus, localCollectorS3Access, webCollectorS3Access, webCollectorGrantedRoleBasedAccess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectorHealthCheck {\n");
    sb.append("    collectorStatus: ").append(toIndentedString(collectorStatus)).append("\n");
    sb.append("    localCollectorS3Access: ").append(toIndentedString(localCollectorS3Access)).append("\n");
    sb.append("    webCollectorS3Access: ").append(toIndentedString(webCollectorS3Access)).append("\n");
    sb.append("    webCollectorGrantedRoleBasedAccess: ").append(toIndentedString(webCollectorGrantedRoleBasedAccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CollectorStatus");
    openapiFields.add("LocalCollectorS3Access");
    openapiFields.add("WebCollectorS3Access");
    openapiFields.add("WebCollectorGrantedRoleBasedAccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CollectorHealthCheck
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CollectorHealthCheck.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CollectorHealthCheck is not found in the empty JSON string", CollectorHealthCheck.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CollectorHealthCheck.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CollectorHealthCheck` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CollectorStatus`
      if (jsonObj.get("CollectorStatus") != null && !jsonObj.get("CollectorStatus").isJsonNull()) {
        CollectorStatus.validateJsonElement(jsonObj.get("CollectorStatus"));
      }
      // validate the optional field `LocalCollectorS3Access`
      if (jsonObj.get("LocalCollectorS3Access") != null && !jsonObj.get("LocalCollectorS3Access").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("LocalCollectorS3Access"));
      }
      // validate the optional field `WebCollectorS3Access`
      if (jsonObj.get("WebCollectorS3Access") != null && !jsonObj.get("WebCollectorS3Access").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("WebCollectorS3Access"));
      }
      // validate the optional field `WebCollectorGrantedRoleBasedAccess`
      if (jsonObj.get("WebCollectorGrantedRoleBasedAccess") != null && !jsonObj.get("WebCollectorGrantedRoleBasedAccess").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("WebCollectorGrantedRoleBasedAccess"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CollectorHealthCheck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CollectorHealthCheck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CollectorHealthCheck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CollectorHealthCheck.class));

       return (TypeAdapter<T>) new TypeAdapter<CollectorHealthCheck>() {
           @Override
           public void write(JsonWriter out, CollectorHealthCheck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CollectorHealthCheck read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CollectorHealthCheck given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CollectorHealthCheck
   * @throws IOException if the JSON string is invalid with respect to CollectorHealthCheck
   */
  public static CollectorHealthCheck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CollectorHealthCheck.class);
  }

  /**
   * Convert an instance of CollectorHealthCheck to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

