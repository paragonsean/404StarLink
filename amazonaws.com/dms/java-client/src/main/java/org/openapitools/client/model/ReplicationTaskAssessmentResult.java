/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  The task assessment report in JSON format. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:34.502814-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicationTaskAssessmentResult {
  public static final String SERIALIZED_NAME_REPLICATION_TASK_IDENTIFIER = "ReplicationTaskIdentifier";
  @SerializedName(SERIALIZED_NAME_REPLICATION_TASK_IDENTIFIER)
  private String replicationTaskIdentifier;

  public static final String SERIALIZED_NAME_REPLICATION_TASK_ARN = "ReplicationTaskArn";
  @SerializedName(SERIALIZED_NAME_REPLICATION_TASK_ARN)
  private String replicationTaskArn;

  public static final String SERIALIZED_NAME_REPLICATION_TASK_LAST_ASSESSMENT_DATE = "ReplicationTaskLastAssessmentDate";
  @SerializedName(SERIALIZED_NAME_REPLICATION_TASK_LAST_ASSESSMENT_DATE)
  private OffsetDateTime replicationTaskLastAssessmentDate;

  public static final String SERIALIZED_NAME_ASSESSMENT_STATUS = "AssessmentStatus";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_STATUS)
  private String assessmentStatus;

  public static final String SERIALIZED_NAME_ASSESSMENT_RESULTS_FILE = "AssessmentResultsFile";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_RESULTS_FILE)
  private String assessmentResultsFile;

  public static final String SERIALIZED_NAME_ASSESSMENT_RESULTS = "AssessmentResults";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_RESULTS)
  private String assessmentResults;

  public static final String SERIALIZED_NAME_S3_OBJECT_URL = "S3ObjectUrl";
  @SerializedName(SERIALIZED_NAME_S3_OBJECT_URL)
  private String s3ObjectUrl;

  public ReplicationTaskAssessmentResult() {
  }

  public ReplicationTaskAssessmentResult replicationTaskIdentifier(String replicationTaskIdentifier) {
    this.replicationTaskIdentifier = replicationTaskIdentifier;
    return this;
  }

  /**
   * Get replicationTaskIdentifier
   * @return replicationTaskIdentifier
   */
  @javax.annotation.Nullable
  public String getReplicationTaskIdentifier() {
    return replicationTaskIdentifier;
  }

  public void setReplicationTaskIdentifier(String replicationTaskIdentifier) {
    this.replicationTaskIdentifier = replicationTaskIdentifier;
  }


  public ReplicationTaskAssessmentResult replicationTaskArn(String replicationTaskArn) {
    this.replicationTaskArn = replicationTaskArn;
    return this;
  }

  /**
   * Get replicationTaskArn
   * @return replicationTaskArn
   */
  @javax.annotation.Nullable
  public String getReplicationTaskArn() {
    return replicationTaskArn;
  }

  public void setReplicationTaskArn(String replicationTaskArn) {
    this.replicationTaskArn = replicationTaskArn;
  }


  public ReplicationTaskAssessmentResult replicationTaskLastAssessmentDate(OffsetDateTime replicationTaskLastAssessmentDate) {
    this.replicationTaskLastAssessmentDate = replicationTaskLastAssessmentDate;
    return this;
  }

  /**
   * Get replicationTaskLastAssessmentDate
   * @return replicationTaskLastAssessmentDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReplicationTaskLastAssessmentDate() {
    return replicationTaskLastAssessmentDate;
  }

  public void setReplicationTaskLastAssessmentDate(OffsetDateTime replicationTaskLastAssessmentDate) {
    this.replicationTaskLastAssessmentDate = replicationTaskLastAssessmentDate;
  }


  public ReplicationTaskAssessmentResult assessmentStatus(String assessmentStatus) {
    this.assessmentStatus = assessmentStatus;
    return this;
  }

  /**
   * Get assessmentStatus
   * @return assessmentStatus
   */
  @javax.annotation.Nullable
  public String getAssessmentStatus() {
    return assessmentStatus;
  }

  public void setAssessmentStatus(String assessmentStatus) {
    this.assessmentStatus = assessmentStatus;
  }


  public ReplicationTaskAssessmentResult assessmentResultsFile(String assessmentResultsFile) {
    this.assessmentResultsFile = assessmentResultsFile;
    return this;
  }

  /**
   * Get assessmentResultsFile
   * @return assessmentResultsFile
   */
  @javax.annotation.Nullable
  public String getAssessmentResultsFile() {
    return assessmentResultsFile;
  }

  public void setAssessmentResultsFile(String assessmentResultsFile) {
    this.assessmentResultsFile = assessmentResultsFile;
  }


  public ReplicationTaskAssessmentResult assessmentResults(String assessmentResults) {
    this.assessmentResults = assessmentResults;
    return this;
  }

  /**
   * Get assessmentResults
   * @return assessmentResults
   */
  @javax.annotation.Nullable
  public String getAssessmentResults() {
    return assessmentResults;
  }

  public void setAssessmentResults(String assessmentResults) {
    this.assessmentResults = assessmentResults;
  }


  public ReplicationTaskAssessmentResult s3ObjectUrl(String s3ObjectUrl) {
    this.s3ObjectUrl = s3ObjectUrl;
    return this;
  }

  /**
   * Get s3ObjectUrl
   * @return s3ObjectUrl
   */
  @javax.annotation.Nullable
  public String getS3ObjectUrl() {
    return s3ObjectUrl;
  }

  public void setS3ObjectUrl(String s3ObjectUrl) {
    this.s3ObjectUrl = s3ObjectUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationTaskAssessmentResult replicationTaskAssessmentResult = (ReplicationTaskAssessmentResult) o;
    return Objects.equals(this.replicationTaskIdentifier, replicationTaskAssessmentResult.replicationTaskIdentifier) &&
        Objects.equals(this.replicationTaskArn, replicationTaskAssessmentResult.replicationTaskArn) &&
        Objects.equals(this.replicationTaskLastAssessmentDate, replicationTaskAssessmentResult.replicationTaskLastAssessmentDate) &&
        Objects.equals(this.assessmentStatus, replicationTaskAssessmentResult.assessmentStatus) &&
        Objects.equals(this.assessmentResultsFile, replicationTaskAssessmentResult.assessmentResultsFile) &&
        Objects.equals(this.assessmentResults, replicationTaskAssessmentResult.assessmentResults) &&
        Objects.equals(this.s3ObjectUrl, replicationTaskAssessmentResult.s3ObjectUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(replicationTaskIdentifier, replicationTaskArn, replicationTaskLastAssessmentDate, assessmentStatus, assessmentResultsFile, assessmentResults, s3ObjectUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationTaskAssessmentResult {\n");
    sb.append("    replicationTaskIdentifier: ").append(toIndentedString(replicationTaskIdentifier)).append("\n");
    sb.append("    replicationTaskArn: ").append(toIndentedString(replicationTaskArn)).append("\n");
    sb.append("    replicationTaskLastAssessmentDate: ").append(toIndentedString(replicationTaskLastAssessmentDate)).append("\n");
    sb.append("    assessmentStatus: ").append(toIndentedString(assessmentStatus)).append("\n");
    sb.append("    assessmentResultsFile: ").append(toIndentedString(assessmentResultsFile)).append("\n");
    sb.append("    assessmentResults: ").append(toIndentedString(assessmentResults)).append("\n");
    sb.append("    s3ObjectUrl: ").append(toIndentedString(s3ObjectUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReplicationTaskIdentifier");
    openapiFields.add("ReplicationTaskArn");
    openapiFields.add("ReplicationTaskLastAssessmentDate");
    openapiFields.add("AssessmentStatus");
    openapiFields.add("AssessmentResultsFile");
    openapiFields.add("AssessmentResults");
    openapiFields.add("S3ObjectUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicationTaskAssessmentResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicationTaskAssessmentResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationTaskAssessmentResult is not found in the empty JSON string", ReplicationTaskAssessmentResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicationTaskAssessmentResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicationTaskAssessmentResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ReplicationTaskIdentifier`
      if (jsonObj.get("ReplicationTaskIdentifier") != null && !jsonObj.get("ReplicationTaskIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationTaskIdentifier"));
      }
      // validate the optional field `ReplicationTaskArn`
      if (jsonObj.get("ReplicationTaskArn") != null && !jsonObj.get("ReplicationTaskArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationTaskArn"));
      }
      // validate the optional field `ReplicationTaskLastAssessmentDate`
      if (jsonObj.get("ReplicationTaskLastAssessmentDate") != null && !jsonObj.get("ReplicationTaskLastAssessmentDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ReplicationTaskLastAssessmentDate"));
      }
      // validate the optional field `AssessmentStatus`
      if (jsonObj.get("AssessmentStatus") != null && !jsonObj.get("AssessmentStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AssessmentStatus"));
      }
      // validate the optional field `AssessmentResultsFile`
      if (jsonObj.get("AssessmentResultsFile") != null && !jsonObj.get("AssessmentResultsFile").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AssessmentResultsFile"));
      }
      // validate the optional field `AssessmentResults`
      if (jsonObj.get("AssessmentResults") != null && !jsonObj.get("AssessmentResults").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AssessmentResults"));
      }
      // validate the optional field `S3ObjectUrl`
      if (jsonObj.get("S3ObjectUrl") != null && !jsonObj.get("S3ObjectUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("S3ObjectUrl"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicationTaskAssessmentResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicationTaskAssessmentResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicationTaskAssessmentResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicationTaskAssessmentResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicationTaskAssessmentResult>() {
           @Override
           public void write(JsonWriter out, ReplicationTaskAssessmentResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicationTaskAssessmentResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicationTaskAssessmentResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicationTaskAssessmentResult
   * @throws IOException if the JSON string is invalid with respect to ReplicationTaskAssessmentResult
   */
  public static ReplicationTaskAssessmentResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationTaskAssessmentResult.class);
  }

  /**
   * Convert an instance of ReplicationTaskAssessmentResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

