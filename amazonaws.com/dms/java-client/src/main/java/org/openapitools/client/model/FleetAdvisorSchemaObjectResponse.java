/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a schema object in a Fleet Advisor collector inventory.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:34.502814-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FleetAdvisorSchemaObjectResponse {
  public static final String SERIALIZED_NAME_SCHEMA_ID = "SchemaId";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ID)
  private String schemaId;

  public static final String SERIALIZED_NAME_OBJECT_TYPE = "ObjectType";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE)
  private String objectType;

  public static final String SERIALIZED_NAME_NUMBER_OF_OBJECTS = "NumberOfObjects";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_OBJECTS)
  private Integer numberOfObjects;

  public static final String SERIALIZED_NAME_CODE_LINE_COUNT = "CodeLineCount";
  @SerializedName(SERIALIZED_NAME_CODE_LINE_COUNT)
  private Integer codeLineCount;

  public static final String SERIALIZED_NAME_CODE_SIZE = "CodeSize";
  @SerializedName(SERIALIZED_NAME_CODE_SIZE)
  private Integer codeSize;

  public FleetAdvisorSchemaObjectResponse() {
  }

  public FleetAdvisorSchemaObjectResponse schemaId(String schemaId) {
    this.schemaId = schemaId;
    return this;
  }

  /**
   * Get schemaId
   * @return schemaId
   */
  @javax.annotation.Nullable
  public String getSchemaId() {
    return schemaId;
  }

  public void setSchemaId(String schemaId) {
    this.schemaId = schemaId;
  }


  public FleetAdvisorSchemaObjectResponse objectType(String objectType) {
    this.objectType = objectType;
    return this;
  }

  /**
   * Get objectType
   * @return objectType
   */
  @javax.annotation.Nullable
  public String getObjectType() {
    return objectType;
  }

  public void setObjectType(String objectType) {
    this.objectType = objectType;
  }


  public FleetAdvisorSchemaObjectResponse numberOfObjects(Integer numberOfObjects) {
    this.numberOfObjects = numberOfObjects;
    return this;
  }

  /**
   * Get numberOfObjects
   * @return numberOfObjects
   */
  @javax.annotation.Nullable
  public Integer getNumberOfObjects() {
    return numberOfObjects;
  }

  public void setNumberOfObjects(Integer numberOfObjects) {
    this.numberOfObjects = numberOfObjects;
  }


  public FleetAdvisorSchemaObjectResponse codeLineCount(Integer codeLineCount) {
    this.codeLineCount = codeLineCount;
    return this;
  }

  /**
   * Get codeLineCount
   * @return codeLineCount
   */
  @javax.annotation.Nullable
  public Integer getCodeLineCount() {
    return codeLineCount;
  }

  public void setCodeLineCount(Integer codeLineCount) {
    this.codeLineCount = codeLineCount;
  }


  public FleetAdvisorSchemaObjectResponse codeSize(Integer codeSize) {
    this.codeSize = codeSize;
    return this;
  }

  /**
   * Get codeSize
   * @return codeSize
   */
  @javax.annotation.Nullable
  public Integer getCodeSize() {
    return codeSize;
  }

  public void setCodeSize(Integer codeSize) {
    this.codeSize = codeSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FleetAdvisorSchemaObjectResponse fleetAdvisorSchemaObjectResponse = (FleetAdvisorSchemaObjectResponse) o;
    return Objects.equals(this.schemaId, fleetAdvisorSchemaObjectResponse.schemaId) &&
        Objects.equals(this.objectType, fleetAdvisorSchemaObjectResponse.objectType) &&
        Objects.equals(this.numberOfObjects, fleetAdvisorSchemaObjectResponse.numberOfObjects) &&
        Objects.equals(this.codeLineCount, fleetAdvisorSchemaObjectResponse.codeLineCount) &&
        Objects.equals(this.codeSize, fleetAdvisorSchemaObjectResponse.codeSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaId, objectType, numberOfObjects, codeLineCount, codeSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FleetAdvisorSchemaObjectResponse {\n");
    sb.append("    schemaId: ").append(toIndentedString(schemaId)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    numberOfObjects: ").append(toIndentedString(numberOfObjects)).append("\n");
    sb.append("    codeLineCount: ").append(toIndentedString(codeLineCount)).append("\n");
    sb.append("    codeSize: ").append(toIndentedString(codeSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SchemaId");
    openapiFields.add("ObjectType");
    openapiFields.add("NumberOfObjects");
    openapiFields.add("CodeLineCount");
    openapiFields.add("CodeSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FleetAdvisorSchemaObjectResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FleetAdvisorSchemaObjectResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FleetAdvisorSchemaObjectResponse is not found in the empty JSON string", FleetAdvisorSchemaObjectResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FleetAdvisorSchemaObjectResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FleetAdvisorSchemaObjectResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SchemaId`
      if (jsonObj.get("SchemaId") != null && !jsonObj.get("SchemaId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SchemaId"));
      }
      // validate the optional field `ObjectType`
      if (jsonObj.get("ObjectType") != null && !jsonObj.get("ObjectType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ObjectType"));
      }
      // validate the optional field `NumberOfObjects`
      if (jsonObj.get("NumberOfObjects") != null && !jsonObj.get("NumberOfObjects").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberOfObjects"));
      }
      // validate the optional field `CodeLineCount`
      if (jsonObj.get("CodeLineCount") != null && !jsonObj.get("CodeLineCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CodeLineCount"));
      }
      // validate the optional field `CodeSize`
      if (jsonObj.get("CodeSize") != null && !jsonObj.get("CodeSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CodeSize"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FleetAdvisorSchemaObjectResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FleetAdvisorSchemaObjectResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FleetAdvisorSchemaObjectResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FleetAdvisorSchemaObjectResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<FleetAdvisorSchemaObjectResponse>() {
           @Override
           public void write(JsonWriter out, FleetAdvisorSchemaObjectResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FleetAdvisorSchemaObjectResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FleetAdvisorSchemaObjectResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FleetAdvisorSchemaObjectResponse
   * @throws IOException if the JSON string is invalid with respect to FleetAdvisorSchemaObjectResponse
   */
  public static FleetAdvisorSchemaObjectResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FleetAdvisorSchemaObjectResponse.class);
  }

  /**
   * Convert an instance of FleetAdvisorSchemaObjectResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

