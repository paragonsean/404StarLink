/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReplicationInstancePendingModifiedValues;
import org.openapitools.client.model.ReplicationInstanceReplicationSubnetGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeleteReplicationInstanceResponseReplicationInstance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:34.502814-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeleteReplicationInstanceResponseReplicationInstance {
  public static final String SERIALIZED_NAME_REPLICATION_INSTANCE_IDENTIFIER = "ReplicationInstanceIdentifier";
  @SerializedName(SERIALIZED_NAME_REPLICATION_INSTANCE_IDENTIFIER)
  private String replicationInstanceIdentifier;

  public static final String SERIALIZED_NAME_REPLICATION_INSTANCE_CLASS = "ReplicationInstanceClass";
  @SerializedName(SERIALIZED_NAME_REPLICATION_INSTANCE_CLASS)
  private String replicationInstanceClass;

  public static final String SERIALIZED_NAME_REPLICATION_INSTANCE_STATUS = "ReplicationInstanceStatus";
  @SerializedName(SERIALIZED_NAME_REPLICATION_INSTANCE_STATUS)
  private String replicationInstanceStatus;

  public static final String SERIALIZED_NAME_ALLOCATED_STORAGE = "AllocatedStorage";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_STORAGE)
  private Integer allocatedStorage;

  public static final String SERIALIZED_NAME_INSTANCE_CREATE_TIME = "InstanceCreateTime";
  @SerializedName(SERIALIZED_NAME_INSTANCE_CREATE_TIME)
  private OffsetDateTime instanceCreateTime;

  public static final String SERIALIZED_NAME_VPC_SECURITY_GROUPS = "VpcSecurityGroups";
  @SerializedName(SERIALIZED_NAME_VPC_SECURITY_GROUPS)
  private List vpcSecurityGroups;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "AvailabilityZone";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
  private String availabilityZone;

  public static final String SERIALIZED_NAME_REPLICATION_SUBNET_GROUP = "ReplicationSubnetGroup";
  @SerializedName(SERIALIZED_NAME_REPLICATION_SUBNET_GROUP)
  private ReplicationInstanceReplicationSubnetGroup replicationSubnetGroup;

  public static final String SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW = "PreferredMaintenanceWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW)
  private String preferredMaintenanceWindow;

  public static final String SERIALIZED_NAME_PENDING_MODIFIED_VALUES = "PendingModifiedValues";
  @SerializedName(SERIALIZED_NAME_PENDING_MODIFIED_VALUES)
  private ReplicationInstancePendingModifiedValues pendingModifiedValues;

  public static final String SERIALIZED_NAME_MULTI_A_Z = "MultiAZ";
  @SerializedName(SERIALIZED_NAME_MULTI_A_Z)
  private Boolean multiAZ;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_AUTO_MINOR_VERSION_UPGRADE = "AutoMinorVersionUpgrade";
  @SerializedName(SERIALIZED_NAME_AUTO_MINOR_VERSION_UPGRADE)
  private Boolean autoMinorVersionUpgrade;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "KmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public static final String SERIALIZED_NAME_REPLICATION_INSTANCE_ARN = "ReplicationInstanceArn";
  @SerializedName(SERIALIZED_NAME_REPLICATION_INSTANCE_ARN)
  private String replicationInstanceArn;

  public static final String SERIALIZED_NAME_REPLICATION_INSTANCE_PUBLIC_IP_ADDRESS = "ReplicationInstancePublicIpAddress";
  @SerializedName(SERIALIZED_NAME_REPLICATION_INSTANCE_PUBLIC_IP_ADDRESS)
  private String replicationInstancePublicIpAddress;

  public static final String SERIALIZED_NAME_REPLICATION_INSTANCE_PRIVATE_IP_ADDRESS = "ReplicationInstancePrivateIpAddress";
  @SerializedName(SERIALIZED_NAME_REPLICATION_INSTANCE_PRIVATE_IP_ADDRESS)
  private String replicationInstancePrivateIpAddress;

  public static final String SERIALIZED_NAME_REPLICATION_INSTANCE_PUBLIC_IP_ADDRESSES = "ReplicationInstancePublicIpAddresses";
  @SerializedName(SERIALIZED_NAME_REPLICATION_INSTANCE_PUBLIC_IP_ADDRESSES)
  private List replicationInstancePublicIpAddresses;

  public static final String SERIALIZED_NAME_REPLICATION_INSTANCE_PRIVATE_IP_ADDRESSES = "ReplicationInstancePrivateIpAddresses";
  @SerializedName(SERIALIZED_NAME_REPLICATION_INSTANCE_PRIVATE_IP_ADDRESSES)
  private List replicationInstancePrivateIpAddresses;

  public static final String SERIALIZED_NAME_REPLICATION_INSTANCE_IPV6_ADDRESSES = "ReplicationInstanceIpv6Addresses";
  @SerializedName(SERIALIZED_NAME_REPLICATION_INSTANCE_IPV6_ADDRESSES)
  private List replicationInstanceIpv6Addresses;

  public static final String SERIALIZED_NAME_PUBLICLY_ACCESSIBLE = "PubliclyAccessible";
  @SerializedName(SERIALIZED_NAME_PUBLICLY_ACCESSIBLE)
  private Boolean publiclyAccessible;

  public static final String SERIALIZED_NAME_SECONDARY_AVAILABILITY_ZONE = "SecondaryAvailabilityZone";
  @SerializedName(SERIALIZED_NAME_SECONDARY_AVAILABILITY_ZONE)
  private String secondaryAvailabilityZone;

  public static final String SERIALIZED_NAME_FREE_UNTIL = "FreeUntil";
  @SerializedName(SERIALIZED_NAME_FREE_UNTIL)
  private OffsetDateTime freeUntil;

  public static final String SERIALIZED_NAME_DNS_NAME_SERVERS = "DnsNameServers";
  @SerializedName(SERIALIZED_NAME_DNS_NAME_SERVERS)
  private String dnsNameServers;

  public static final String SERIALIZED_NAME_NETWORK_TYPE = "NetworkType";
  @SerializedName(SERIALIZED_NAME_NETWORK_TYPE)
  private String networkType;

  public DeleteReplicationInstanceResponseReplicationInstance() {
  }

  public DeleteReplicationInstanceResponseReplicationInstance replicationInstanceIdentifier(String replicationInstanceIdentifier) {
    this.replicationInstanceIdentifier = replicationInstanceIdentifier;
    return this;
  }

  /**
   * Get replicationInstanceIdentifier
   * @return replicationInstanceIdentifier
   */
  @javax.annotation.Nullable
  public String getReplicationInstanceIdentifier() {
    return replicationInstanceIdentifier;
  }

  public void setReplicationInstanceIdentifier(String replicationInstanceIdentifier) {
    this.replicationInstanceIdentifier = replicationInstanceIdentifier;
  }


  public DeleteReplicationInstanceResponseReplicationInstance replicationInstanceClass(String replicationInstanceClass) {
    this.replicationInstanceClass = replicationInstanceClass;
    return this;
  }

  /**
   * Get replicationInstanceClass
   * @return replicationInstanceClass
   */
  @javax.annotation.Nullable
  public String getReplicationInstanceClass() {
    return replicationInstanceClass;
  }

  public void setReplicationInstanceClass(String replicationInstanceClass) {
    this.replicationInstanceClass = replicationInstanceClass;
  }


  public DeleteReplicationInstanceResponseReplicationInstance replicationInstanceStatus(String replicationInstanceStatus) {
    this.replicationInstanceStatus = replicationInstanceStatus;
    return this;
  }

  /**
   * Get replicationInstanceStatus
   * @return replicationInstanceStatus
   */
  @javax.annotation.Nullable
  public String getReplicationInstanceStatus() {
    return replicationInstanceStatus;
  }

  public void setReplicationInstanceStatus(String replicationInstanceStatus) {
    this.replicationInstanceStatus = replicationInstanceStatus;
  }


  public DeleteReplicationInstanceResponseReplicationInstance allocatedStorage(Integer allocatedStorage) {
    this.allocatedStorage = allocatedStorage;
    return this;
  }

  /**
   * Get allocatedStorage
   * @return allocatedStorage
   */
  @javax.annotation.Nullable
  public Integer getAllocatedStorage() {
    return allocatedStorage;
  }

  public void setAllocatedStorage(Integer allocatedStorage) {
    this.allocatedStorage = allocatedStorage;
  }


  public DeleteReplicationInstanceResponseReplicationInstance instanceCreateTime(OffsetDateTime instanceCreateTime) {
    this.instanceCreateTime = instanceCreateTime;
    return this;
  }

  /**
   * Get instanceCreateTime
   * @return instanceCreateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInstanceCreateTime() {
    return instanceCreateTime;
  }

  public void setInstanceCreateTime(OffsetDateTime instanceCreateTime) {
    this.instanceCreateTime = instanceCreateTime;
  }


  public DeleteReplicationInstanceResponseReplicationInstance vpcSecurityGroups(List vpcSecurityGroups) {
    this.vpcSecurityGroups = vpcSecurityGroups;
    return this;
  }

  /**
   * Get vpcSecurityGroups
   * @return vpcSecurityGroups
   */
  @javax.annotation.Nullable
  public List getVpcSecurityGroups() {
    return vpcSecurityGroups;
  }

  public void setVpcSecurityGroups(List vpcSecurityGroups) {
    this.vpcSecurityGroups = vpcSecurityGroups;
  }


  public DeleteReplicationInstanceResponseReplicationInstance availabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
    return this;
  }

  /**
   * Get availabilityZone
   * @return availabilityZone
   */
  @javax.annotation.Nullable
  public String getAvailabilityZone() {
    return availabilityZone;
  }

  public void setAvailabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
  }


  public DeleteReplicationInstanceResponseReplicationInstance replicationSubnetGroup(ReplicationInstanceReplicationSubnetGroup replicationSubnetGroup) {
    this.replicationSubnetGroup = replicationSubnetGroup;
    return this;
  }

  /**
   * Get replicationSubnetGroup
   * @return replicationSubnetGroup
   */
  @javax.annotation.Nullable
  public ReplicationInstanceReplicationSubnetGroup getReplicationSubnetGroup() {
    return replicationSubnetGroup;
  }

  public void setReplicationSubnetGroup(ReplicationInstanceReplicationSubnetGroup replicationSubnetGroup) {
    this.replicationSubnetGroup = replicationSubnetGroup;
  }


  public DeleteReplicationInstanceResponseReplicationInstance preferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
    return this;
  }

  /**
   * Get preferredMaintenanceWindow
   * @return preferredMaintenanceWindow
   */
  @javax.annotation.Nullable
  public String getPreferredMaintenanceWindow() {
    return preferredMaintenanceWindow;
  }

  public void setPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
  }


  public DeleteReplicationInstanceResponseReplicationInstance pendingModifiedValues(ReplicationInstancePendingModifiedValues pendingModifiedValues) {
    this.pendingModifiedValues = pendingModifiedValues;
    return this;
  }

  /**
   * Get pendingModifiedValues
   * @return pendingModifiedValues
   */
  @javax.annotation.Nullable
  public ReplicationInstancePendingModifiedValues getPendingModifiedValues() {
    return pendingModifiedValues;
  }

  public void setPendingModifiedValues(ReplicationInstancePendingModifiedValues pendingModifiedValues) {
    this.pendingModifiedValues = pendingModifiedValues;
  }


  public DeleteReplicationInstanceResponseReplicationInstance multiAZ(Boolean multiAZ) {
    this.multiAZ = multiAZ;
    return this;
  }

  /**
   * Get multiAZ
   * @return multiAZ
   */
  @javax.annotation.Nullable
  public Boolean getMultiAZ() {
    return multiAZ;
  }

  public void setMultiAZ(Boolean multiAZ) {
    this.multiAZ = multiAZ;
  }


  public DeleteReplicationInstanceResponseReplicationInstance engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public DeleteReplicationInstanceResponseReplicationInstance autoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
    this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
    return this;
  }

  /**
   * Get autoMinorVersionUpgrade
   * @return autoMinorVersionUpgrade
   */
  @javax.annotation.Nullable
  public Boolean getAutoMinorVersionUpgrade() {
    return autoMinorVersionUpgrade;
  }

  public void setAutoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
    this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
  }


  public DeleteReplicationInstanceResponseReplicationInstance kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * Get kmsKeyId
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public DeleteReplicationInstanceResponseReplicationInstance replicationInstanceArn(String replicationInstanceArn) {
    this.replicationInstanceArn = replicationInstanceArn;
    return this;
  }

  /**
   * Get replicationInstanceArn
   * @return replicationInstanceArn
   */
  @javax.annotation.Nullable
  public String getReplicationInstanceArn() {
    return replicationInstanceArn;
  }

  public void setReplicationInstanceArn(String replicationInstanceArn) {
    this.replicationInstanceArn = replicationInstanceArn;
  }


  public DeleteReplicationInstanceResponseReplicationInstance replicationInstancePublicIpAddress(String replicationInstancePublicIpAddress) {
    this.replicationInstancePublicIpAddress = replicationInstancePublicIpAddress;
    return this;
  }

  /**
   * Get replicationInstancePublicIpAddress
   * @return replicationInstancePublicIpAddress
   */
  @javax.annotation.Nullable
  public String getReplicationInstancePublicIpAddress() {
    return replicationInstancePublicIpAddress;
  }

  public void setReplicationInstancePublicIpAddress(String replicationInstancePublicIpAddress) {
    this.replicationInstancePublicIpAddress = replicationInstancePublicIpAddress;
  }


  public DeleteReplicationInstanceResponseReplicationInstance replicationInstancePrivateIpAddress(String replicationInstancePrivateIpAddress) {
    this.replicationInstancePrivateIpAddress = replicationInstancePrivateIpAddress;
    return this;
  }

  /**
   * Get replicationInstancePrivateIpAddress
   * @return replicationInstancePrivateIpAddress
   */
  @javax.annotation.Nullable
  public String getReplicationInstancePrivateIpAddress() {
    return replicationInstancePrivateIpAddress;
  }

  public void setReplicationInstancePrivateIpAddress(String replicationInstancePrivateIpAddress) {
    this.replicationInstancePrivateIpAddress = replicationInstancePrivateIpAddress;
  }


  public DeleteReplicationInstanceResponseReplicationInstance replicationInstancePublicIpAddresses(List replicationInstancePublicIpAddresses) {
    this.replicationInstancePublicIpAddresses = replicationInstancePublicIpAddresses;
    return this;
  }

  /**
   * Get replicationInstancePublicIpAddresses
   * @return replicationInstancePublicIpAddresses
   */
  @javax.annotation.Nullable
  public List getReplicationInstancePublicIpAddresses() {
    return replicationInstancePublicIpAddresses;
  }

  public void setReplicationInstancePublicIpAddresses(List replicationInstancePublicIpAddresses) {
    this.replicationInstancePublicIpAddresses = replicationInstancePublicIpAddresses;
  }


  public DeleteReplicationInstanceResponseReplicationInstance replicationInstancePrivateIpAddresses(List replicationInstancePrivateIpAddresses) {
    this.replicationInstancePrivateIpAddresses = replicationInstancePrivateIpAddresses;
    return this;
  }

  /**
   * Get replicationInstancePrivateIpAddresses
   * @return replicationInstancePrivateIpAddresses
   */
  @javax.annotation.Nullable
  public List getReplicationInstancePrivateIpAddresses() {
    return replicationInstancePrivateIpAddresses;
  }

  public void setReplicationInstancePrivateIpAddresses(List replicationInstancePrivateIpAddresses) {
    this.replicationInstancePrivateIpAddresses = replicationInstancePrivateIpAddresses;
  }


  public DeleteReplicationInstanceResponseReplicationInstance replicationInstanceIpv6Addresses(List replicationInstanceIpv6Addresses) {
    this.replicationInstanceIpv6Addresses = replicationInstanceIpv6Addresses;
    return this;
  }

  /**
   * Get replicationInstanceIpv6Addresses
   * @return replicationInstanceIpv6Addresses
   */
  @javax.annotation.Nullable
  public List getReplicationInstanceIpv6Addresses() {
    return replicationInstanceIpv6Addresses;
  }

  public void setReplicationInstanceIpv6Addresses(List replicationInstanceIpv6Addresses) {
    this.replicationInstanceIpv6Addresses = replicationInstanceIpv6Addresses;
  }


  public DeleteReplicationInstanceResponseReplicationInstance publiclyAccessible(Boolean publiclyAccessible) {
    this.publiclyAccessible = publiclyAccessible;
    return this;
  }

  /**
   * Get publiclyAccessible
   * @return publiclyAccessible
   */
  @javax.annotation.Nullable
  public Boolean getPubliclyAccessible() {
    return publiclyAccessible;
  }

  public void setPubliclyAccessible(Boolean publiclyAccessible) {
    this.publiclyAccessible = publiclyAccessible;
  }


  public DeleteReplicationInstanceResponseReplicationInstance secondaryAvailabilityZone(String secondaryAvailabilityZone) {
    this.secondaryAvailabilityZone = secondaryAvailabilityZone;
    return this;
  }

  /**
   * Get secondaryAvailabilityZone
   * @return secondaryAvailabilityZone
   */
  @javax.annotation.Nullable
  public String getSecondaryAvailabilityZone() {
    return secondaryAvailabilityZone;
  }

  public void setSecondaryAvailabilityZone(String secondaryAvailabilityZone) {
    this.secondaryAvailabilityZone = secondaryAvailabilityZone;
  }


  public DeleteReplicationInstanceResponseReplicationInstance freeUntil(OffsetDateTime freeUntil) {
    this.freeUntil = freeUntil;
    return this;
  }

  /**
   * Get freeUntil
   * @return freeUntil
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFreeUntil() {
    return freeUntil;
  }

  public void setFreeUntil(OffsetDateTime freeUntil) {
    this.freeUntil = freeUntil;
  }


  public DeleteReplicationInstanceResponseReplicationInstance dnsNameServers(String dnsNameServers) {
    this.dnsNameServers = dnsNameServers;
    return this;
  }

  /**
   * Get dnsNameServers
   * @return dnsNameServers
   */
  @javax.annotation.Nullable
  public String getDnsNameServers() {
    return dnsNameServers;
  }

  public void setDnsNameServers(String dnsNameServers) {
    this.dnsNameServers = dnsNameServers;
  }


  public DeleteReplicationInstanceResponseReplicationInstance networkType(String networkType) {
    this.networkType = networkType;
    return this;
  }

  /**
   * Get networkType
   * @return networkType
   */
  @javax.annotation.Nullable
  public String getNetworkType() {
    return networkType;
  }

  public void setNetworkType(String networkType) {
    this.networkType = networkType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteReplicationInstanceResponseReplicationInstance deleteReplicationInstanceResponseReplicationInstance = (DeleteReplicationInstanceResponseReplicationInstance) o;
    return Objects.equals(this.replicationInstanceIdentifier, deleteReplicationInstanceResponseReplicationInstance.replicationInstanceIdentifier) &&
        Objects.equals(this.replicationInstanceClass, deleteReplicationInstanceResponseReplicationInstance.replicationInstanceClass) &&
        Objects.equals(this.replicationInstanceStatus, deleteReplicationInstanceResponseReplicationInstance.replicationInstanceStatus) &&
        Objects.equals(this.allocatedStorage, deleteReplicationInstanceResponseReplicationInstance.allocatedStorage) &&
        Objects.equals(this.instanceCreateTime, deleteReplicationInstanceResponseReplicationInstance.instanceCreateTime) &&
        Objects.equals(this.vpcSecurityGroups, deleteReplicationInstanceResponseReplicationInstance.vpcSecurityGroups) &&
        Objects.equals(this.availabilityZone, deleteReplicationInstanceResponseReplicationInstance.availabilityZone) &&
        Objects.equals(this.replicationSubnetGroup, deleteReplicationInstanceResponseReplicationInstance.replicationSubnetGroup) &&
        Objects.equals(this.preferredMaintenanceWindow, deleteReplicationInstanceResponseReplicationInstance.preferredMaintenanceWindow) &&
        Objects.equals(this.pendingModifiedValues, deleteReplicationInstanceResponseReplicationInstance.pendingModifiedValues) &&
        Objects.equals(this.multiAZ, deleteReplicationInstanceResponseReplicationInstance.multiAZ) &&
        Objects.equals(this.engineVersion, deleteReplicationInstanceResponseReplicationInstance.engineVersion) &&
        Objects.equals(this.autoMinorVersionUpgrade, deleteReplicationInstanceResponseReplicationInstance.autoMinorVersionUpgrade) &&
        Objects.equals(this.kmsKeyId, deleteReplicationInstanceResponseReplicationInstance.kmsKeyId) &&
        Objects.equals(this.replicationInstanceArn, deleteReplicationInstanceResponseReplicationInstance.replicationInstanceArn) &&
        Objects.equals(this.replicationInstancePublicIpAddress, deleteReplicationInstanceResponseReplicationInstance.replicationInstancePublicIpAddress) &&
        Objects.equals(this.replicationInstancePrivateIpAddress, deleteReplicationInstanceResponseReplicationInstance.replicationInstancePrivateIpAddress) &&
        Objects.equals(this.replicationInstancePublicIpAddresses, deleteReplicationInstanceResponseReplicationInstance.replicationInstancePublicIpAddresses) &&
        Objects.equals(this.replicationInstancePrivateIpAddresses, deleteReplicationInstanceResponseReplicationInstance.replicationInstancePrivateIpAddresses) &&
        Objects.equals(this.replicationInstanceIpv6Addresses, deleteReplicationInstanceResponseReplicationInstance.replicationInstanceIpv6Addresses) &&
        Objects.equals(this.publiclyAccessible, deleteReplicationInstanceResponseReplicationInstance.publiclyAccessible) &&
        Objects.equals(this.secondaryAvailabilityZone, deleteReplicationInstanceResponseReplicationInstance.secondaryAvailabilityZone) &&
        Objects.equals(this.freeUntil, deleteReplicationInstanceResponseReplicationInstance.freeUntil) &&
        Objects.equals(this.dnsNameServers, deleteReplicationInstanceResponseReplicationInstance.dnsNameServers) &&
        Objects.equals(this.networkType, deleteReplicationInstanceResponseReplicationInstance.networkType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(replicationInstanceIdentifier, replicationInstanceClass, replicationInstanceStatus, allocatedStorage, instanceCreateTime, vpcSecurityGroups, availabilityZone, replicationSubnetGroup, preferredMaintenanceWindow, pendingModifiedValues, multiAZ, engineVersion, autoMinorVersionUpgrade, kmsKeyId, replicationInstanceArn, replicationInstancePublicIpAddress, replicationInstancePrivateIpAddress, replicationInstancePublicIpAddresses, replicationInstancePrivateIpAddresses, replicationInstanceIpv6Addresses, publiclyAccessible, secondaryAvailabilityZone, freeUntil, dnsNameServers, networkType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteReplicationInstanceResponseReplicationInstance {\n");
    sb.append("    replicationInstanceIdentifier: ").append(toIndentedString(replicationInstanceIdentifier)).append("\n");
    sb.append("    replicationInstanceClass: ").append(toIndentedString(replicationInstanceClass)).append("\n");
    sb.append("    replicationInstanceStatus: ").append(toIndentedString(replicationInstanceStatus)).append("\n");
    sb.append("    allocatedStorage: ").append(toIndentedString(allocatedStorage)).append("\n");
    sb.append("    instanceCreateTime: ").append(toIndentedString(instanceCreateTime)).append("\n");
    sb.append("    vpcSecurityGroups: ").append(toIndentedString(vpcSecurityGroups)).append("\n");
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("    replicationSubnetGroup: ").append(toIndentedString(replicationSubnetGroup)).append("\n");
    sb.append("    preferredMaintenanceWindow: ").append(toIndentedString(preferredMaintenanceWindow)).append("\n");
    sb.append("    pendingModifiedValues: ").append(toIndentedString(pendingModifiedValues)).append("\n");
    sb.append("    multiAZ: ").append(toIndentedString(multiAZ)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    autoMinorVersionUpgrade: ").append(toIndentedString(autoMinorVersionUpgrade)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    replicationInstanceArn: ").append(toIndentedString(replicationInstanceArn)).append("\n");
    sb.append("    replicationInstancePublicIpAddress: ").append(toIndentedString(replicationInstancePublicIpAddress)).append("\n");
    sb.append("    replicationInstancePrivateIpAddress: ").append(toIndentedString(replicationInstancePrivateIpAddress)).append("\n");
    sb.append("    replicationInstancePublicIpAddresses: ").append(toIndentedString(replicationInstancePublicIpAddresses)).append("\n");
    sb.append("    replicationInstancePrivateIpAddresses: ").append(toIndentedString(replicationInstancePrivateIpAddresses)).append("\n");
    sb.append("    replicationInstanceIpv6Addresses: ").append(toIndentedString(replicationInstanceIpv6Addresses)).append("\n");
    sb.append("    publiclyAccessible: ").append(toIndentedString(publiclyAccessible)).append("\n");
    sb.append("    secondaryAvailabilityZone: ").append(toIndentedString(secondaryAvailabilityZone)).append("\n");
    sb.append("    freeUntil: ").append(toIndentedString(freeUntil)).append("\n");
    sb.append("    dnsNameServers: ").append(toIndentedString(dnsNameServers)).append("\n");
    sb.append("    networkType: ").append(toIndentedString(networkType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReplicationInstanceIdentifier");
    openapiFields.add("ReplicationInstanceClass");
    openapiFields.add("ReplicationInstanceStatus");
    openapiFields.add("AllocatedStorage");
    openapiFields.add("InstanceCreateTime");
    openapiFields.add("VpcSecurityGroups");
    openapiFields.add("AvailabilityZone");
    openapiFields.add("ReplicationSubnetGroup");
    openapiFields.add("PreferredMaintenanceWindow");
    openapiFields.add("PendingModifiedValues");
    openapiFields.add("MultiAZ");
    openapiFields.add("EngineVersion");
    openapiFields.add("AutoMinorVersionUpgrade");
    openapiFields.add("KmsKeyId");
    openapiFields.add("ReplicationInstanceArn");
    openapiFields.add("ReplicationInstancePublicIpAddress");
    openapiFields.add("ReplicationInstancePrivateIpAddress");
    openapiFields.add("ReplicationInstancePublicIpAddresses");
    openapiFields.add("ReplicationInstancePrivateIpAddresses");
    openapiFields.add("ReplicationInstanceIpv6Addresses");
    openapiFields.add("PubliclyAccessible");
    openapiFields.add("SecondaryAvailabilityZone");
    openapiFields.add("FreeUntil");
    openapiFields.add("DnsNameServers");
    openapiFields.add("NetworkType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeleteReplicationInstanceResponseReplicationInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeleteReplicationInstanceResponseReplicationInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeleteReplicationInstanceResponseReplicationInstance is not found in the empty JSON string", DeleteReplicationInstanceResponseReplicationInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeleteReplicationInstanceResponseReplicationInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeleteReplicationInstanceResponseReplicationInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ReplicationInstanceIdentifier`
      if (jsonObj.get("ReplicationInstanceIdentifier") != null && !jsonObj.get("ReplicationInstanceIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationInstanceIdentifier"));
      }
      // validate the optional field `ReplicationInstanceClass`
      if (jsonObj.get("ReplicationInstanceClass") != null && !jsonObj.get("ReplicationInstanceClass").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationInstanceClass"));
      }
      // validate the optional field `ReplicationInstanceStatus`
      if (jsonObj.get("ReplicationInstanceStatus") != null && !jsonObj.get("ReplicationInstanceStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationInstanceStatus"));
      }
      // validate the optional field `AllocatedStorage`
      if (jsonObj.get("AllocatedStorage") != null && !jsonObj.get("AllocatedStorage").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AllocatedStorage"));
      }
      // validate the optional field `InstanceCreateTime`
      if (jsonObj.get("InstanceCreateTime") != null && !jsonObj.get("InstanceCreateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("InstanceCreateTime"));
      }
      // validate the optional field `VpcSecurityGroups`
      if (jsonObj.get("VpcSecurityGroups") != null && !jsonObj.get("VpcSecurityGroups").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("VpcSecurityGroups"));
      }
      // validate the optional field `AvailabilityZone`
      if (jsonObj.get("AvailabilityZone") != null && !jsonObj.get("AvailabilityZone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AvailabilityZone"));
      }
      // validate the optional field `ReplicationSubnetGroup`
      if (jsonObj.get("ReplicationSubnetGroup") != null && !jsonObj.get("ReplicationSubnetGroup").isJsonNull()) {
        ReplicationInstanceReplicationSubnetGroup.validateJsonElement(jsonObj.get("ReplicationSubnetGroup"));
      }
      // validate the optional field `PreferredMaintenanceWindow`
      if (jsonObj.get("PreferredMaintenanceWindow") != null && !jsonObj.get("PreferredMaintenanceWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreferredMaintenanceWindow"));
      }
      // validate the optional field `PendingModifiedValues`
      if (jsonObj.get("PendingModifiedValues") != null && !jsonObj.get("PendingModifiedValues").isJsonNull()) {
        ReplicationInstancePendingModifiedValues.validateJsonElement(jsonObj.get("PendingModifiedValues"));
      }
      // validate the optional field `MultiAZ`
      if (jsonObj.get("MultiAZ") != null && !jsonObj.get("MultiAZ").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("MultiAZ"));
      }
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `AutoMinorVersionUpgrade`
      if (jsonObj.get("AutoMinorVersionUpgrade") != null && !jsonObj.get("AutoMinorVersionUpgrade").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AutoMinorVersionUpgrade"));
      }
      // validate the optional field `KmsKeyId`
      if (jsonObj.get("KmsKeyId") != null && !jsonObj.get("KmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KmsKeyId"));
      }
      // validate the optional field `ReplicationInstanceArn`
      if (jsonObj.get("ReplicationInstanceArn") != null && !jsonObj.get("ReplicationInstanceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationInstanceArn"));
      }
      // validate the optional field `ReplicationInstancePublicIpAddress`
      if (jsonObj.get("ReplicationInstancePublicIpAddress") != null && !jsonObj.get("ReplicationInstancePublicIpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationInstancePublicIpAddress"));
      }
      // validate the optional field `ReplicationInstancePrivateIpAddress`
      if (jsonObj.get("ReplicationInstancePrivateIpAddress") != null && !jsonObj.get("ReplicationInstancePrivateIpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationInstancePrivateIpAddress"));
      }
      // validate the optional field `ReplicationInstancePublicIpAddresses`
      if (jsonObj.get("ReplicationInstancePublicIpAddresses") != null && !jsonObj.get("ReplicationInstancePublicIpAddresses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ReplicationInstancePublicIpAddresses"));
      }
      // validate the optional field `ReplicationInstancePrivateIpAddresses`
      if (jsonObj.get("ReplicationInstancePrivateIpAddresses") != null && !jsonObj.get("ReplicationInstancePrivateIpAddresses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ReplicationInstancePrivateIpAddresses"));
      }
      // validate the optional field `ReplicationInstanceIpv6Addresses`
      if (jsonObj.get("ReplicationInstanceIpv6Addresses") != null && !jsonObj.get("ReplicationInstanceIpv6Addresses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ReplicationInstanceIpv6Addresses"));
      }
      // validate the optional field `PubliclyAccessible`
      if (jsonObj.get("PubliclyAccessible") != null && !jsonObj.get("PubliclyAccessible").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("PubliclyAccessible"));
      }
      // validate the optional field `SecondaryAvailabilityZone`
      if (jsonObj.get("SecondaryAvailabilityZone") != null && !jsonObj.get("SecondaryAvailabilityZone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecondaryAvailabilityZone"));
      }
      // validate the optional field `FreeUntil`
      if (jsonObj.get("FreeUntil") != null && !jsonObj.get("FreeUntil").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("FreeUntil"));
      }
      // validate the optional field `DnsNameServers`
      if (jsonObj.get("DnsNameServers") != null && !jsonObj.get("DnsNameServers").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DnsNameServers"));
      }
      // validate the optional field `NetworkType`
      if (jsonObj.get("NetworkType") != null && !jsonObj.get("NetworkType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NetworkType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeleteReplicationInstanceResponseReplicationInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeleteReplicationInstanceResponseReplicationInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeleteReplicationInstanceResponseReplicationInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeleteReplicationInstanceResponseReplicationInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<DeleteReplicationInstanceResponseReplicationInstance>() {
           @Override
           public void write(JsonWriter out, DeleteReplicationInstanceResponseReplicationInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeleteReplicationInstanceResponseReplicationInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeleteReplicationInstanceResponseReplicationInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeleteReplicationInstanceResponseReplicationInstance
   * @throws IOException if the JSON string is invalid with respect to DeleteReplicationInstanceResponseReplicationInstance
   */
  public static DeleteReplicationInstanceResponseReplicationInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeleteReplicationInstanceResponseReplicationInstance.class);
  }

  /**
   * Convert an instance of DeleteReplicationInstanceResponseReplicationInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

