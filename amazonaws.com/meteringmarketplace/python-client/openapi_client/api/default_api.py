# coding: utf-8

"""
    AWSMarketplace Metering

    <fullname>AWS Marketplace Metering Service</fullname> <p>This reference provides descriptions of the low-level AWS Marketplace Metering Service API.</p> <p>AWS Marketplace sellers can use this API to submit usage data for custom usage dimensions.</p> <p>For information on the permissions you need to use this API, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/iam-user-policy-for-aws-marketplace-actions.html\">AWS Marketplace metering and entitlement API permissions</a> in the <i>AWS Marketplace Seller Guide.</i> </p> <p> <b>Submitting Metering Records</b> </p> <ul> <li> <p> <i>MeterUsage</i> - Submits the metering record for an AWS Marketplace product. <code>MeterUsage</code> is called from an EC2 instance or a container running on EKS or ECS.</p> </li> <li> <p> <i>BatchMeterUsage</i> - Submits the metering record for a set of customers. <code>BatchMeterUsage</code> is called from a software-as-a-service (SaaS) application.</p> </li> </ul> <p> <b>Accepting New Customers</b> </p> <ul> <li> <p> <i>ResolveCustomer</i> - Called by a SaaS application during the registration process. When a buyer visits your website during the registration process, the buyer submits a Registration Token through the browser. The Registration Token is resolved through this API to obtain a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p> </li> </ul> <p> <b>Entitlement and Metering for Paid Container Products</b> </p> <ul> <li> <p>Paid container software products sold through AWS Marketplace must integrate with the AWS Marketplace Metering Service and call the <code>RegisterUsage</code> operation for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't required to call <code>RegisterUsage</code>, but you can do so if you want to receive usage data in your seller reports. For more information on using the <code>RegisterUsage</code> operation, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/container-based-products.html\">Container-Based Products</a>. </p> </li> </ul> <p> <code>BatchMeterUsage</code> API calls are captured by AWS CloudTrail. You can use Cloudtrail to verify that the SaaS metering records that you sent are accurate by searching for records with the <code>eventName</code> of <code>BatchMeterUsage</code>. You can also use CloudTrail to audit records over time. For more information, see the <i> <a href=\"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html\">AWS CloudTrail User Guide</a>.</i> </p>

    The version of the OpenAPI document: 2016-01-14
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictStr, field_validator
from typing import Optional
from openapi_client.models.batch_meter_usage_request import BatchMeterUsageRequest
from openapi_client.models.batch_meter_usage_result import BatchMeterUsageResult
from openapi_client.models.meter_usage_request import MeterUsageRequest
from openapi_client.models.meter_usage_result import MeterUsageResult
from openapi_client.models.register_usage_request import RegisterUsageRequest
from openapi_client.models.register_usage_result import RegisterUsageResult
from openapi_client.models.resolve_customer_request import ResolveCustomerRequest
from openapi_client.models.resolve_customer_result import ResolveCustomerResult

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def batch_meter_usage(
        self,
        x_amz_target: StrictStr,
        batch_meter_usage_request: BatchMeterUsageRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BatchMeterUsageResult:
        """batch_meter_usage

        <p> <code>BatchMeterUsage</code> is called from a SaaS application listed on AWS Marketplace to post metering records for a set of customers.</p> <p>For identical requests, the API is idempotent; requests can be retried with the same records or a subset of the input records.</p> <p>Every request to <code>BatchMeterUsage</code> is for one product. If you need to meter usage for multiple products, you must make multiple calls to <code>BatchMeterUsage</code>.</p> <p>Usage records are expected to be submitted as quickly as possible after the event that is being recorded, and are not accepted more than 6 hours after the event.</p> <p> <code>BatchMeterUsage</code> can process up to 25 <code>UsageRecords</code> at a time.</p> <p>A <code>UsageRecord</code> can optionally include multiple usage allocations, to provide customers with usage data split into buckets by tags that you define (or allow the customer to define).</p> <p> <code>BatchMeterUsage</code> returns a list of <code>UsageRecordResult</code> objects, showing the result for each <code>UsageRecord</code>, as well as a list of <code>UnprocessedRecords</code>, indicating errors in the service side that you should retry.</p> <p> <code>BatchMeterUsage</code> requests must be less than 1MB in size.</p> <note> <p>For an example of using <code>BatchMeterUsage</code>, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-batchmeterusage-example\"> BatchMeterUsage code example</a> in the <i>AWS Marketplace Seller Guide</i>.</p> </note>

        :param x_amz_target: (required)
        :type x_amz_target: str
        :param batch_meter_usage_request: (required)
        :type batch_meter_usage_request: BatchMeterUsageRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._batch_meter_usage_serialize(
            x_amz_target=x_amz_target,
            batch_meter_usage_request=batch_meter_usage_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BatchMeterUsageResult",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
            '487': "object",
            '488': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def batch_meter_usage_with_http_info(
        self,
        x_amz_target: StrictStr,
        batch_meter_usage_request: BatchMeterUsageRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BatchMeterUsageResult]:
        """batch_meter_usage

        <p> <code>BatchMeterUsage</code> is called from a SaaS application listed on AWS Marketplace to post metering records for a set of customers.</p> <p>For identical requests, the API is idempotent; requests can be retried with the same records or a subset of the input records.</p> <p>Every request to <code>BatchMeterUsage</code> is for one product. If you need to meter usage for multiple products, you must make multiple calls to <code>BatchMeterUsage</code>.</p> <p>Usage records are expected to be submitted as quickly as possible after the event that is being recorded, and are not accepted more than 6 hours after the event.</p> <p> <code>BatchMeterUsage</code> can process up to 25 <code>UsageRecords</code> at a time.</p> <p>A <code>UsageRecord</code> can optionally include multiple usage allocations, to provide customers with usage data split into buckets by tags that you define (or allow the customer to define).</p> <p> <code>BatchMeterUsage</code> returns a list of <code>UsageRecordResult</code> objects, showing the result for each <code>UsageRecord</code>, as well as a list of <code>UnprocessedRecords</code>, indicating errors in the service side that you should retry.</p> <p> <code>BatchMeterUsage</code> requests must be less than 1MB in size.</p> <note> <p>For an example of using <code>BatchMeterUsage</code>, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-batchmeterusage-example\"> BatchMeterUsage code example</a> in the <i>AWS Marketplace Seller Guide</i>.</p> </note>

        :param x_amz_target: (required)
        :type x_amz_target: str
        :param batch_meter_usage_request: (required)
        :type batch_meter_usage_request: BatchMeterUsageRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._batch_meter_usage_serialize(
            x_amz_target=x_amz_target,
            batch_meter_usage_request=batch_meter_usage_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BatchMeterUsageResult",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
            '487': "object",
            '488': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def batch_meter_usage_without_preload_content(
        self,
        x_amz_target: StrictStr,
        batch_meter_usage_request: BatchMeterUsageRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """batch_meter_usage

        <p> <code>BatchMeterUsage</code> is called from a SaaS application listed on AWS Marketplace to post metering records for a set of customers.</p> <p>For identical requests, the API is idempotent; requests can be retried with the same records or a subset of the input records.</p> <p>Every request to <code>BatchMeterUsage</code> is for one product. If you need to meter usage for multiple products, you must make multiple calls to <code>BatchMeterUsage</code>.</p> <p>Usage records are expected to be submitted as quickly as possible after the event that is being recorded, and are not accepted more than 6 hours after the event.</p> <p> <code>BatchMeterUsage</code> can process up to 25 <code>UsageRecords</code> at a time.</p> <p>A <code>UsageRecord</code> can optionally include multiple usage allocations, to provide customers with usage data split into buckets by tags that you define (or allow the customer to define).</p> <p> <code>BatchMeterUsage</code> returns a list of <code>UsageRecordResult</code> objects, showing the result for each <code>UsageRecord</code>, as well as a list of <code>UnprocessedRecords</code>, indicating errors in the service side that you should retry.</p> <p> <code>BatchMeterUsage</code> requests must be less than 1MB in size.</p> <note> <p>For an example of using <code>BatchMeterUsage</code>, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-batchmeterusage-example\"> BatchMeterUsage code example</a> in the <i>AWS Marketplace Seller Guide</i>.</p> </note>

        :param x_amz_target: (required)
        :type x_amz_target: str
        :param batch_meter_usage_request: (required)
        :type batch_meter_usage_request: BatchMeterUsageRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._batch_meter_usage_serialize(
            x_amz_target=x_amz_target,
            batch_meter_usage_request=batch_meter_usage_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BatchMeterUsageResult",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
            '487': "object",
            '488': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _batch_meter_usage_serialize(
        self,
        x_amz_target,
        batch_meter_usage_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        if x_amz_target is not None:
            _header_params['X-Amz-Target'] = x_amz_target
        # process the form parameters
        # process the body parameter
        if batch_meter_usage_request is not None:
            _body_params = batch_meter_usage_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/#X-Amz-Target=AWSMPMeteringService.BatchMeterUsage',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def meter_usage(
        self,
        x_amz_target: StrictStr,
        meter_usage_request: MeterUsageRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MeterUsageResult:
        """meter_usage

        <p>API to emit metering records. For identical requests, the API is idempotent. It simply returns the metering record ID.</p> <p> <code>MeterUsage</code> is authenticated on the buyer's AWS account using credentials from the EC2 instance, ECS task, or EKS pod.</p> <p> <code>MeterUsage</code> can optionally include multiple usage allocations, to provide customers with usage data split into buckets by tags that you define (or allow the customer to define).</p> <p>Usage records are expected to be submitted as quickly as possible after the event that is being recorded, and are not accepted more than 6 hours after the event.</p>

        :param x_amz_target: (required)
        :type x_amz_target: str
        :param meter_usage_request: (required)
        :type meter_usage_request: MeterUsageRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._meter_usage_serialize(
            x_amz_target=x_amz_target,
            meter_usage_request=meter_usage_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MeterUsageResult",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
            '487': "object",
            '488': "object",
            '489': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def meter_usage_with_http_info(
        self,
        x_amz_target: StrictStr,
        meter_usage_request: MeterUsageRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MeterUsageResult]:
        """meter_usage

        <p>API to emit metering records. For identical requests, the API is idempotent. It simply returns the metering record ID.</p> <p> <code>MeterUsage</code> is authenticated on the buyer's AWS account using credentials from the EC2 instance, ECS task, or EKS pod.</p> <p> <code>MeterUsage</code> can optionally include multiple usage allocations, to provide customers with usage data split into buckets by tags that you define (or allow the customer to define).</p> <p>Usage records are expected to be submitted as quickly as possible after the event that is being recorded, and are not accepted more than 6 hours after the event.</p>

        :param x_amz_target: (required)
        :type x_amz_target: str
        :param meter_usage_request: (required)
        :type meter_usage_request: MeterUsageRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._meter_usage_serialize(
            x_amz_target=x_amz_target,
            meter_usage_request=meter_usage_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MeterUsageResult",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
            '487': "object",
            '488': "object",
            '489': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def meter_usage_without_preload_content(
        self,
        x_amz_target: StrictStr,
        meter_usage_request: MeterUsageRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """meter_usage

        <p>API to emit metering records. For identical requests, the API is idempotent. It simply returns the metering record ID.</p> <p> <code>MeterUsage</code> is authenticated on the buyer's AWS account using credentials from the EC2 instance, ECS task, or EKS pod.</p> <p> <code>MeterUsage</code> can optionally include multiple usage allocations, to provide customers with usage data split into buckets by tags that you define (or allow the customer to define).</p> <p>Usage records are expected to be submitted as quickly as possible after the event that is being recorded, and are not accepted more than 6 hours after the event.</p>

        :param x_amz_target: (required)
        :type x_amz_target: str
        :param meter_usage_request: (required)
        :type meter_usage_request: MeterUsageRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._meter_usage_serialize(
            x_amz_target=x_amz_target,
            meter_usage_request=meter_usage_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MeterUsageResult",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
            '487': "object",
            '488': "object",
            '489': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _meter_usage_serialize(
        self,
        x_amz_target,
        meter_usage_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        if x_amz_target is not None:
            _header_params['X-Amz-Target'] = x_amz_target
        # process the form parameters
        # process the body parameter
        if meter_usage_request is not None:
            _body_params = meter_usage_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/#X-Amz-Target=AWSMPMeteringService.MeterUsage',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def register_usage(
        self,
        x_amz_target: StrictStr,
        register_usage_request: RegisterUsageRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RegisterUsageResult:
        """register_usage

        <p>Paid container software products sold through AWS Marketplace must integrate with the AWS Marketplace Metering Service and call the <code>RegisterUsage</code> operation for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't required to call <code>RegisterUsage</code>, but you may choose to do so if you would like to receive usage data in your seller reports. The sections below explain the behavior of <code>RegisterUsage</code>. <code>RegisterUsage</code> performs two primary functions: metering and entitlement.</p> <ul> <li> <p> <i>Entitlement</i>: <code>RegisterUsage</code> allows you to verify that the customer running your paid software is subscribed to your product on AWS Marketplace, enabling you to guard against unauthorized use. Your container image that integrates with <code>RegisterUsage</code> is only required to guard against unauthorized use at container startup, as such a <code>CustomerNotSubscribedException</code> or <code>PlatformNotSupportedException</code> will only be thrown on the initial call to <code>RegisterUsage</code>. Subsequent calls from the same Amazon ECS task instance (e.g. task-id) or Amazon EKS pod will not throw a <code>CustomerNotSubscribedException</code>, even if the customer unsubscribes while the Amazon ECS task or Amazon EKS pod is still running.</p> </li> <li> <p> <i>Metering</i>: <code>RegisterUsage</code> meters software use per ECS task, per hour, or per pod for Amazon EKS with usage prorated to the second. A minimum of 1 minute of usage applies to tasks that are short lived. For example, if a customer has a 10 node Amazon ECS or Amazon EKS cluster and a service configured as a Daemon Set, then Amazon ECS or Amazon EKS will launch a task on all 10 cluster nodes and the customer will be charged: (10 * hourly_rate). Metering for software use is automatically handled by the AWS Marketplace Metering Control Plane -- your software is not required to perform any metering specific actions, other than call <code>RegisterUsage</code> once for metering of software use to commence. The AWS Marketplace Metering Control Plane will also continue to bill customers for running ECS tasks and Amazon EKS pods, regardless of the customers subscription state, removing the need for your software to perform entitlement checks at runtime.</p> </li> </ul>

        :param x_amz_target: (required)
        :type x_amz_target: str
        :param register_usage_request: (required)
        :type register_usage_request: RegisterUsageRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._register_usage_serialize(
            x_amz_target=x_amz_target,
            register_usage_request=register_usage_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RegisterUsageResult",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
            '487': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def register_usage_with_http_info(
        self,
        x_amz_target: StrictStr,
        register_usage_request: RegisterUsageRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RegisterUsageResult]:
        """register_usage

        <p>Paid container software products sold through AWS Marketplace must integrate with the AWS Marketplace Metering Service and call the <code>RegisterUsage</code> operation for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't required to call <code>RegisterUsage</code>, but you may choose to do so if you would like to receive usage data in your seller reports. The sections below explain the behavior of <code>RegisterUsage</code>. <code>RegisterUsage</code> performs two primary functions: metering and entitlement.</p> <ul> <li> <p> <i>Entitlement</i>: <code>RegisterUsage</code> allows you to verify that the customer running your paid software is subscribed to your product on AWS Marketplace, enabling you to guard against unauthorized use. Your container image that integrates with <code>RegisterUsage</code> is only required to guard against unauthorized use at container startup, as such a <code>CustomerNotSubscribedException</code> or <code>PlatformNotSupportedException</code> will only be thrown on the initial call to <code>RegisterUsage</code>. Subsequent calls from the same Amazon ECS task instance (e.g. task-id) or Amazon EKS pod will not throw a <code>CustomerNotSubscribedException</code>, even if the customer unsubscribes while the Amazon ECS task or Amazon EKS pod is still running.</p> </li> <li> <p> <i>Metering</i>: <code>RegisterUsage</code> meters software use per ECS task, per hour, or per pod for Amazon EKS with usage prorated to the second. A minimum of 1 minute of usage applies to tasks that are short lived. For example, if a customer has a 10 node Amazon ECS or Amazon EKS cluster and a service configured as a Daemon Set, then Amazon ECS or Amazon EKS will launch a task on all 10 cluster nodes and the customer will be charged: (10 * hourly_rate). Metering for software use is automatically handled by the AWS Marketplace Metering Control Plane -- your software is not required to perform any metering specific actions, other than call <code>RegisterUsage</code> once for metering of software use to commence. The AWS Marketplace Metering Control Plane will also continue to bill customers for running ECS tasks and Amazon EKS pods, regardless of the customers subscription state, removing the need for your software to perform entitlement checks at runtime.</p> </li> </ul>

        :param x_amz_target: (required)
        :type x_amz_target: str
        :param register_usage_request: (required)
        :type register_usage_request: RegisterUsageRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._register_usage_serialize(
            x_amz_target=x_amz_target,
            register_usage_request=register_usage_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RegisterUsageResult",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
            '487': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def register_usage_without_preload_content(
        self,
        x_amz_target: StrictStr,
        register_usage_request: RegisterUsageRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """register_usage

        <p>Paid container software products sold through AWS Marketplace must integrate with the AWS Marketplace Metering Service and call the <code>RegisterUsage</code> operation for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't required to call <code>RegisterUsage</code>, but you may choose to do so if you would like to receive usage data in your seller reports. The sections below explain the behavior of <code>RegisterUsage</code>. <code>RegisterUsage</code> performs two primary functions: metering and entitlement.</p> <ul> <li> <p> <i>Entitlement</i>: <code>RegisterUsage</code> allows you to verify that the customer running your paid software is subscribed to your product on AWS Marketplace, enabling you to guard against unauthorized use. Your container image that integrates with <code>RegisterUsage</code> is only required to guard against unauthorized use at container startup, as such a <code>CustomerNotSubscribedException</code> or <code>PlatformNotSupportedException</code> will only be thrown on the initial call to <code>RegisterUsage</code>. Subsequent calls from the same Amazon ECS task instance (e.g. task-id) or Amazon EKS pod will not throw a <code>CustomerNotSubscribedException</code>, even if the customer unsubscribes while the Amazon ECS task or Amazon EKS pod is still running.</p> </li> <li> <p> <i>Metering</i>: <code>RegisterUsage</code> meters software use per ECS task, per hour, or per pod for Amazon EKS with usage prorated to the second. A minimum of 1 minute of usage applies to tasks that are short lived. For example, if a customer has a 10 node Amazon ECS or Amazon EKS cluster and a service configured as a Daemon Set, then Amazon ECS or Amazon EKS will launch a task on all 10 cluster nodes and the customer will be charged: (10 * hourly_rate). Metering for software use is automatically handled by the AWS Marketplace Metering Control Plane -- your software is not required to perform any metering specific actions, other than call <code>RegisterUsage</code> once for metering of software use to commence. The AWS Marketplace Metering Control Plane will also continue to bill customers for running ECS tasks and Amazon EKS pods, regardless of the customers subscription state, removing the need for your software to perform entitlement checks at runtime.</p> </li> </ul>

        :param x_amz_target: (required)
        :type x_amz_target: str
        :param register_usage_request: (required)
        :type register_usage_request: RegisterUsageRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._register_usage_serialize(
            x_amz_target=x_amz_target,
            register_usage_request=register_usage_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RegisterUsageResult",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
            '487': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _register_usage_serialize(
        self,
        x_amz_target,
        register_usage_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        if x_amz_target is not None:
            _header_params['X-Amz-Target'] = x_amz_target
        # process the form parameters
        # process the body parameter
        if register_usage_request is not None:
            _body_params = register_usage_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/#X-Amz-Target=AWSMPMeteringService.RegisterUsage',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def resolve_customer(
        self,
        x_amz_target: StrictStr,
        resolve_customer_request: ResolveCustomerRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResolveCustomerResult:
        """resolve_customer

        <p> <code>ResolveCustomer</code> is called by a SaaS application during the registration process. When a buyer visits your website during the registration process, the buyer submits a registration token through their browser. The registration token is resolved through this API to obtain a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p> <note> <p>The API needs to called from the seller account id used to publish the SaaS application to successfully resolve the token.</p> <p>For an example of using <code>ResolveCustomer</code>, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-resolvecustomer-example\"> ResolveCustomer code example</a> in the <i>AWS Marketplace Seller Guide</i>.</p> </note>

        :param x_amz_target: (required)
        :type x_amz_target: str
        :param resolve_customer_request: (required)
        :type resolve_customer_request: ResolveCustomerRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._resolve_customer_serialize(
            x_amz_target=x_amz_target,
            resolve_customer_request=resolve_customer_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResolveCustomerResult",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def resolve_customer_with_http_info(
        self,
        x_amz_target: StrictStr,
        resolve_customer_request: ResolveCustomerRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResolveCustomerResult]:
        """resolve_customer

        <p> <code>ResolveCustomer</code> is called by a SaaS application during the registration process. When a buyer visits your website during the registration process, the buyer submits a registration token through their browser. The registration token is resolved through this API to obtain a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p> <note> <p>The API needs to called from the seller account id used to publish the SaaS application to successfully resolve the token.</p> <p>For an example of using <code>ResolveCustomer</code>, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-resolvecustomer-example\"> ResolveCustomer code example</a> in the <i>AWS Marketplace Seller Guide</i>.</p> </note>

        :param x_amz_target: (required)
        :type x_amz_target: str
        :param resolve_customer_request: (required)
        :type resolve_customer_request: ResolveCustomerRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._resolve_customer_serialize(
            x_amz_target=x_amz_target,
            resolve_customer_request=resolve_customer_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResolveCustomerResult",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def resolve_customer_without_preload_content(
        self,
        x_amz_target: StrictStr,
        resolve_customer_request: ResolveCustomerRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """resolve_customer

        <p> <code>ResolveCustomer</code> is called by a SaaS application during the registration process. When a buyer visits your website during the registration process, the buyer submits a registration token through their browser. The registration token is resolved through this API to obtain a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p> <note> <p>The API needs to called from the seller account id used to publish the SaaS application to successfully resolve the token.</p> <p>For an example of using <code>ResolveCustomer</code>, see <a href=\"https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-resolvecustomer-example\"> ResolveCustomer code example</a> in the <i>AWS Marketplace Seller Guide</i>.</p> </note>

        :param x_amz_target: (required)
        :type x_amz_target: str
        :param resolve_customer_request: (required)
        :type resolve_customer_request: ResolveCustomerRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._resolve_customer_serialize(
            x_amz_target=x_amz_target,
            resolve_customer_request=resolve_customer_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResolveCustomerResult",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _resolve_customer_serialize(
        self,
        x_amz_target,
        resolve_customer_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        if x_amz_target is not None:
            _header_params['X-Amz-Target'] = x_amz_target
        # process the form parameters
        # process the body parameter
        if resolve_customer_request is not None:
            _body_params = resolve_customer_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/#X-Amz-Target=AWSMPMeteringService.ResolveCustomer',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


