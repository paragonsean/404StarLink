# coding: utf-8

"""
    Application Migration Service

    The Application Migration Service service.

    The version of the OpenAPI document: 2020-02-26
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.application import Application
from openapi_client.models.archive_application_request import ArchiveApplicationRequest
from openapi_client.models.archive_wave_request import ArchiveWaveRequest
from openapi_client.models.associate_applications_request import AssociateApplicationsRequest
from openapi_client.models.associate_source_servers_request import AssociateSourceServersRequest
from openapi_client.models.change_server_life_cycle_state_request import ChangeServerLifeCycleStateRequest
from openapi_client.models.create_application_request import CreateApplicationRequest
from openapi_client.models.create_launch_configuration_template_request import CreateLaunchConfigurationTemplateRequest
from openapi_client.models.create_replication_configuration_template_request import CreateReplicationConfigurationTemplateRequest
from openapi_client.models.create_wave_request import CreateWaveRequest
from openapi_client.models.delete_job_request import DeleteJobRequest
from openapi_client.models.delete_launch_configuration_template_request import DeleteLaunchConfigurationTemplateRequest
from openapi_client.models.delete_replication_configuration_template_request import DeleteReplicationConfigurationTemplateRequest
from openapi_client.models.delete_source_server_request import DeleteSourceServerRequest
from openapi_client.models.delete_vcenter_client_request import DeleteVcenterClientRequest
from openapi_client.models.describe_job_log_items_request import DescribeJobLogItemsRequest
from openapi_client.models.describe_job_log_items_response import DescribeJobLogItemsResponse
from openapi_client.models.describe_jobs_request import DescribeJobsRequest
from openapi_client.models.describe_jobs_response import DescribeJobsResponse
from openapi_client.models.describe_launch_configuration_templates_request import DescribeLaunchConfigurationTemplatesRequest
from openapi_client.models.describe_launch_configuration_templates_response import DescribeLaunchConfigurationTemplatesResponse
from openapi_client.models.describe_replication_configuration_templates_request import DescribeReplicationConfigurationTemplatesRequest
from openapi_client.models.describe_replication_configuration_templates_response import DescribeReplicationConfigurationTemplatesResponse
from openapi_client.models.describe_source_servers_request import DescribeSourceServersRequest
from openapi_client.models.describe_source_servers_response import DescribeSourceServersResponse
from openapi_client.models.describe_vcenter_clients_response import DescribeVcenterClientsResponse
from openapi_client.models.disconnect_from_service_request import DisconnectFromServiceRequest
from openapi_client.models.finalize_cutover_request import FinalizeCutoverRequest
from openapi_client.models.get_launch_configuration_request import GetLaunchConfigurationRequest
from openapi_client.models.get_replication_configuration_request import GetReplicationConfigurationRequest
from openapi_client.models.launch_configuration import LaunchConfiguration
from openapi_client.models.launch_configuration_template import LaunchConfigurationTemplate
from openapi_client.models.list_applications_request import ListApplicationsRequest
from openapi_client.models.list_applications_response import ListApplicationsResponse
from openapi_client.models.list_export_errors_request import ListExportErrorsRequest
from openapi_client.models.list_export_errors_response import ListExportErrorsResponse
from openapi_client.models.list_exports_request import ListExportsRequest
from openapi_client.models.list_exports_response import ListExportsResponse
from openapi_client.models.list_import_errors_request import ListImportErrorsRequest
from openapi_client.models.list_import_errors_response import ListImportErrorsResponse
from openapi_client.models.list_imports_request import ListImportsRequest
from openapi_client.models.list_imports_response import ListImportsResponse
from openapi_client.models.list_source_server_actions_request import ListSourceServerActionsRequest
from openapi_client.models.list_source_server_actions_response import ListSourceServerActionsResponse
from openapi_client.models.list_tags_for_resource_response import ListTagsForResourceResponse
from openapi_client.models.list_template_actions_request import ListTemplateActionsRequest
from openapi_client.models.list_template_actions_response import ListTemplateActionsResponse
from openapi_client.models.list_waves_request import ListWavesRequest
from openapi_client.models.list_waves_response import ListWavesResponse
from openapi_client.models.mark_as_archived_request import MarkAsArchivedRequest
from openapi_client.models.put_source_server_action_request import PutSourceServerActionRequest
from openapi_client.models.put_template_action_request import PutTemplateActionRequest
from openapi_client.models.remove_source_server_action_request import RemoveSourceServerActionRequest
from openapi_client.models.remove_template_action_request import RemoveTemplateActionRequest
from openapi_client.models.replication_configuration import ReplicationConfiguration
from openapi_client.models.replication_configuration_template import ReplicationConfigurationTemplate
from openapi_client.models.retry_data_replication_request import RetryDataReplicationRequest
from openapi_client.models.source_server import SourceServer
from openapi_client.models.source_server_action_document import SourceServerActionDocument
from openapi_client.models.start_cutover_request import StartCutoverRequest
from openapi_client.models.start_cutover_response import StartCutoverResponse
from openapi_client.models.start_export_request import StartExportRequest
from openapi_client.models.start_export_response import StartExportResponse
from openapi_client.models.start_import_request import StartImportRequest
from openapi_client.models.start_import_response import StartImportResponse
from openapi_client.models.start_replication_request import StartReplicationRequest
from openapi_client.models.start_test_request import StartTestRequest
from openapi_client.models.start_test_response import StartTestResponse
from openapi_client.models.tag_resource_request import TagResourceRequest
from openapi_client.models.template_action_document import TemplateActionDocument
from openapi_client.models.terminate_target_instances_request import TerminateTargetInstancesRequest
from openapi_client.models.terminate_target_instances_response import TerminateTargetInstancesResponse
from openapi_client.models.update_application_request import UpdateApplicationRequest
from openapi_client.models.update_launch_configuration_request import UpdateLaunchConfigurationRequest
from openapi_client.models.update_launch_configuration_template_request import UpdateLaunchConfigurationTemplateRequest
from openapi_client.models.update_replication_configuration_request import UpdateReplicationConfigurationRequest
from openapi_client.models.update_replication_configuration_template_request import UpdateReplicationConfigurationTemplateRequest
from openapi_client.models.update_source_server_replication_type_request import UpdateSourceServerReplicationTypeRequest
from openapi_client.models.update_wave_request import UpdateWaveRequest
from openapi_client.models.wave import Wave

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def archive_application(
        self,
        archive_application_request: ArchiveApplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Application:
        """archive_application

        Archive application.

        :param archive_application_request: (required)
        :type archive_application_request: ArchiveApplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._archive_application_serialize(
            archive_application_request=archive_application_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Application",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def archive_application_with_http_info(
        self,
        archive_application_request: ArchiveApplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Application]:
        """archive_application

        Archive application.

        :param archive_application_request: (required)
        :type archive_application_request: ArchiveApplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._archive_application_serialize(
            archive_application_request=archive_application_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Application",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def archive_application_without_preload_content(
        self,
        archive_application_request: ArchiveApplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """archive_application

        Archive application.

        :param archive_application_request: (required)
        :type archive_application_request: ArchiveApplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._archive_application_serialize(
            archive_application_request=archive_application_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Application",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _archive_application_serialize(
        self,
        archive_application_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if archive_application_request is not None:
            _body_params = archive_application_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ArchiveApplication',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def archive_wave(
        self,
        archive_wave_request: ArchiveWaveRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Wave:
        """archive_wave

        Archive wave.

        :param archive_wave_request: (required)
        :type archive_wave_request: ArchiveWaveRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._archive_wave_serialize(
            archive_wave_request=archive_wave_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Wave",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def archive_wave_with_http_info(
        self,
        archive_wave_request: ArchiveWaveRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Wave]:
        """archive_wave

        Archive wave.

        :param archive_wave_request: (required)
        :type archive_wave_request: ArchiveWaveRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._archive_wave_serialize(
            archive_wave_request=archive_wave_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Wave",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def archive_wave_without_preload_content(
        self,
        archive_wave_request: ArchiveWaveRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """archive_wave

        Archive wave.

        :param archive_wave_request: (required)
        :type archive_wave_request: ArchiveWaveRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._archive_wave_serialize(
            archive_wave_request=archive_wave_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Wave",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _archive_wave_serialize(
        self,
        archive_wave_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if archive_wave_request is not None:
            _body_params = archive_wave_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ArchiveWave',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def associate_applications(
        self,
        associate_applications_request: AssociateApplicationsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """associate_applications

        Associate applications to wave.

        :param associate_applications_request: (required)
        :type associate_applications_request: AssociateApplicationsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_applications_serialize(
            associate_applications_request=associate_applications_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def associate_applications_with_http_info(
        self,
        associate_applications_request: AssociateApplicationsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """associate_applications

        Associate applications to wave.

        :param associate_applications_request: (required)
        :type associate_applications_request: AssociateApplicationsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_applications_serialize(
            associate_applications_request=associate_applications_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def associate_applications_without_preload_content(
        self,
        associate_applications_request: AssociateApplicationsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """associate_applications

        Associate applications to wave.

        :param associate_applications_request: (required)
        :type associate_applications_request: AssociateApplicationsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_applications_serialize(
            associate_applications_request=associate_applications_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _associate_applications_serialize(
        self,
        associate_applications_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if associate_applications_request is not None:
            _body_params = associate_applications_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/AssociateApplications',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def associate_source_servers(
        self,
        associate_source_servers_request: AssociateSourceServersRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """associate_source_servers

        Associate source servers to application.

        :param associate_source_servers_request: (required)
        :type associate_source_servers_request: AssociateSourceServersRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_source_servers_serialize(
            associate_source_servers_request=associate_source_servers_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def associate_source_servers_with_http_info(
        self,
        associate_source_servers_request: AssociateSourceServersRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """associate_source_servers

        Associate source servers to application.

        :param associate_source_servers_request: (required)
        :type associate_source_servers_request: AssociateSourceServersRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_source_servers_serialize(
            associate_source_servers_request=associate_source_servers_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def associate_source_servers_without_preload_content(
        self,
        associate_source_servers_request: AssociateSourceServersRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """associate_source_servers

        Associate source servers to application.

        :param associate_source_servers_request: (required)
        :type associate_source_servers_request: AssociateSourceServersRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._associate_source_servers_serialize(
            associate_source_servers_request=associate_source_servers_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _associate_source_servers_serialize(
        self,
        associate_source_servers_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if associate_source_servers_request is not None:
            _body_params = associate_source_servers_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/AssociateSourceServers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def change_server_life_cycle_state(
        self,
        change_server_life_cycle_state_request: ChangeServerLifeCycleStateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SourceServer:
        """change_server_life_cycle_state

        Allows the user to set the SourceServer.LifeCycle.state property for specific Source Server IDs to one of the following: READY_FOR_TEST or READY_FOR_CUTOVER. This command only works if the Source Server is already launchable (dataReplicationInfo.lagDuration is not null.)

        :param change_server_life_cycle_state_request: (required)
        :type change_server_life_cycle_state_request: ChangeServerLifeCycleStateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._change_server_life_cycle_state_serialize(
            change_server_life_cycle_state_request=change_server_life_cycle_state_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def change_server_life_cycle_state_with_http_info(
        self,
        change_server_life_cycle_state_request: ChangeServerLifeCycleStateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SourceServer]:
        """change_server_life_cycle_state

        Allows the user to set the SourceServer.LifeCycle.state property for specific Source Server IDs to one of the following: READY_FOR_TEST or READY_FOR_CUTOVER. This command only works if the Source Server is already launchable (dataReplicationInfo.lagDuration is not null.)

        :param change_server_life_cycle_state_request: (required)
        :type change_server_life_cycle_state_request: ChangeServerLifeCycleStateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._change_server_life_cycle_state_serialize(
            change_server_life_cycle_state_request=change_server_life_cycle_state_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def change_server_life_cycle_state_without_preload_content(
        self,
        change_server_life_cycle_state_request: ChangeServerLifeCycleStateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """change_server_life_cycle_state

        Allows the user to set the SourceServer.LifeCycle.state property for specific Source Server IDs to one of the following: READY_FOR_TEST or READY_FOR_CUTOVER. This command only works if the Source Server is already launchable (dataReplicationInfo.lagDuration is not null.)

        :param change_server_life_cycle_state_request: (required)
        :type change_server_life_cycle_state_request: ChangeServerLifeCycleStateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._change_server_life_cycle_state_serialize(
            change_server_life_cycle_state_request=change_server_life_cycle_state_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _change_server_life_cycle_state_serialize(
        self,
        change_server_life_cycle_state_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if change_server_life_cycle_state_request is not None:
            _body_params = change_server_life_cycle_state_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ChangeServerLifeCycleState',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_application(
        self,
        create_application_request: CreateApplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Application:
        """create_application

        Create application.

        :param create_application_request: (required)
        :type create_application_request: CreateApplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_application_serialize(
            create_application_request=create_application_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Application",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_application_with_http_info(
        self,
        create_application_request: CreateApplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Application]:
        """create_application

        Create application.

        :param create_application_request: (required)
        :type create_application_request: CreateApplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_application_serialize(
            create_application_request=create_application_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Application",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_application_without_preload_content(
        self,
        create_application_request: CreateApplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_application

        Create application.

        :param create_application_request: (required)
        :type create_application_request: CreateApplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_application_serialize(
            create_application_request=create_application_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Application",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_application_serialize(
        self,
        create_application_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_application_request is not None:
            _body_params = create_application_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/CreateApplication',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_launch_configuration_template(
        self,
        create_launch_configuration_template_request: CreateLaunchConfigurationTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LaunchConfigurationTemplate:
        """create_launch_configuration_template

        Creates a new Launch Configuration Template.

        :param create_launch_configuration_template_request: (required)
        :type create_launch_configuration_template_request: CreateLaunchConfigurationTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_launch_configuration_template_serialize(
            create_launch_configuration_template_request=create_launch_configuration_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "LaunchConfigurationTemplate",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_launch_configuration_template_with_http_info(
        self,
        create_launch_configuration_template_request: CreateLaunchConfigurationTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LaunchConfigurationTemplate]:
        """create_launch_configuration_template

        Creates a new Launch Configuration Template.

        :param create_launch_configuration_template_request: (required)
        :type create_launch_configuration_template_request: CreateLaunchConfigurationTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_launch_configuration_template_serialize(
            create_launch_configuration_template_request=create_launch_configuration_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "LaunchConfigurationTemplate",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_launch_configuration_template_without_preload_content(
        self,
        create_launch_configuration_template_request: CreateLaunchConfigurationTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_launch_configuration_template

        Creates a new Launch Configuration Template.

        :param create_launch_configuration_template_request: (required)
        :type create_launch_configuration_template_request: CreateLaunchConfigurationTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_launch_configuration_template_serialize(
            create_launch_configuration_template_request=create_launch_configuration_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "LaunchConfigurationTemplate",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_launch_configuration_template_serialize(
        self,
        create_launch_configuration_template_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_launch_configuration_template_request is not None:
            _body_params = create_launch_configuration_template_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/CreateLaunchConfigurationTemplate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_replication_configuration_template(
        self,
        create_replication_configuration_template_request: CreateReplicationConfigurationTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReplicationConfigurationTemplate:
        """create_replication_configuration_template

        Creates a new ReplicationConfigurationTemplate.

        :param create_replication_configuration_template_request: (required)
        :type create_replication_configuration_template_request: CreateReplicationConfigurationTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_replication_configuration_template_serialize(
            create_replication_configuration_template_request=create_replication_configuration_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ReplicationConfigurationTemplate",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_replication_configuration_template_with_http_info(
        self,
        create_replication_configuration_template_request: CreateReplicationConfigurationTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReplicationConfigurationTemplate]:
        """create_replication_configuration_template

        Creates a new ReplicationConfigurationTemplate.

        :param create_replication_configuration_template_request: (required)
        :type create_replication_configuration_template_request: CreateReplicationConfigurationTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_replication_configuration_template_serialize(
            create_replication_configuration_template_request=create_replication_configuration_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ReplicationConfigurationTemplate",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_replication_configuration_template_without_preload_content(
        self,
        create_replication_configuration_template_request: CreateReplicationConfigurationTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_replication_configuration_template

        Creates a new ReplicationConfigurationTemplate.

        :param create_replication_configuration_template_request: (required)
        :type create_replication_configuration_template_request: CreateReplicationConfigurationTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_replication_configuration_template_serialize(
            create_replication_configuration_template_request=create_replication_configuration_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "ReplicationConfigurationTemplate",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_replication_configuration_template_serialize(
        self,
        create_replication_configuration_template_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_replication_configuration_template_request is not None:
            _body_params = create_replication_configuration_template_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/CreateReplicationConfigurationTemplate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_wave(
        self,
        create_wave_request: CreateWaveRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Wave:
        """create_wave

        Create wave.

        :param create_wave_request: (required)
        :type create_wave_request: CreateWaveRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_wave_serialize(
            create_wave_request=create_wave_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Wave",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_wave_with_http_info(
        self,
        create_wave_request: CreateWaveRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Wave]:
        """create_wave

        Create wave.

        :param create_wave_request: (required)
        :type create_wave_request: CreateWaveRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_wave_serialize(
            create_wave_request=create_wave_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Wave",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_wave_without_preload_content(
        self,
        create_wave_request: CreateWaveRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_wave

        Create wave.

        :param create_wave_request: (required)
        :type create_wave_request: CreateWaveRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_wave_serialize(
            create_wave_request=create_wave_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "Wave",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_wave_serialize(
        self,
        create_wave_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_wave_request is not None:
            _body_params = create_wave_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/CreateWave',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_application(
        self,
        archive_application_request: ArchiveApplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """delete_application

        Delete application.

        :param archive_application_request: (required)
        :type archive_application_request: ArchiveApplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_application_serialize(
            archive_application_request=archive_application_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_application_with_http_info(
        self,
        archive_application_request: ArchiveApplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """delete_application

        Delete application.

        :param archive_application_request: (required)
        :type archive_application_request: ArchiveApplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_application_serialize(
            archive_application_request=archive_application_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_application_without_preload_content(
        self,
        archive_application_request: ArchiveApplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_application

        Delete application.

        :param archive_application_request: (required)
        :type archive_application_request: ArchiveApplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_application_serialize(
            archive_application_request=archive_application_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_application_serialize(
        self,
        archive_application_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if archive_application_request is not None:
            _body_params = archive_application_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/DeleteApplication',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_job(
        self,
        delete_job_request: DeleteJobRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """delete_job

        Deletes a single Job by ID.

        :param delete_job_request: (required)
        :type delete_job_request: DeleteJobRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_job_serialize(
            delete_job_request=delete_job_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_job_with_http_info(
        self,
        delete_job_request: DeleteJobRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """delete_job

        Deletes a single Job by ID.

        :param delete_job_request: (required)
        :type delete_job_request: DeleteJobRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_job_serialize(
            delete_job_request=delete_job_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_job_without_preload_content(
        self,
        delete_job_request: DeleteJobRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_job

        Deletes a single Job by ID.

        :param delete_job_request: (required)
        :type delete_job_request: DeleteJobRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_job_serialize(
            delete_job_request=delete_job_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_job_serialize(
        self,
        delete_job_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if delete_job_request is not None:
            _body_params = delete_job_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/DeleteJob',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_launch_configuration_template(
        self,
        delete_launch_configuration_template_request: DeleteLaunchConfigurationTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """delete_launch_configuration_template

        Deletes a single Launch Configuration Template by ID.

        :param delete_launch_configuration_template_request: (required)
        :type delete_launch_configuration_template_request: DeleteLaunchConfigurationTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_launch_configuration_template_serialize(
            delete_launch_configuration_template_request=delete_launch_configuration_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_launch_configuration_template_with_http_info(
        self,
        delete_launch_configuration_template_request: DeleteLaunchConfigurationTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """delete_launch_configuration_template

        Deletes a single Launch Configuration Template by ID.

        :param delete_launch_configuration_template_request: (required)
        :type delete_launch_configuration_template_request: DeleteLaunchConfigurationTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_launch_configuration_template_serialize(
            delete_launch_configuration_template_request=delete_launch_configuration_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_launch_configuration_template_without_preload_content(
        self,
        delete_launch_configuration_template_request: DeleteLaunchConfigurationTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_launch_configuration_template

        Deletes a single Launch Configuration Template by ID.

        :param delete_launch_configuration_template_request: (required)
        :type delete_launch_configuration_template_request: DeleteLaunchConfigurationTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_launch_configuration_template_serialize(
            delete_launch_configuration_template_request=delete_launch_configuration_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_launch_configuration_template_serialize(
        self,
        delete_launch_configuration_template_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if delete_launch_configuration_template_request is not None:
            _body_params = delete_launch_configuration_template_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/DeleteLaunchConfigurationTemplate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_replication_configuration_template(
        self,
        delete_replication_configuration_template_request: DeleteReplicationConfigurationTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """delete_replication_configuration_template

        Deletes a single Replication Configuration Template by ID

        :param delete_replication_configuration_template_request: (required)
        :type delete_replication_configuration_template_request: DeleteReplicationConfigurationTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_replication_configuration_template_serialize(
            delete_replication_configuration_template_request=delete_replication_configuration_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_replication_configuration_template_with_http_info(
        self,
        delete_replication_configuration_template_request: DeleteReplicationConfigurationTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """delete_replication_configuration_template

        Deletes a single Replication Configuration Template by ID

        :param delete_replication_configuration_template_request: (required)
        :type delete_replication_configuration_template_request: DeleteReplicationConfigurationTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_replication_configuration_template_serialize(
            delete_replication_configuration_template_request=delete_replication_configuration_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_replication_configuration_template_without_preload_content(
        self,
        delete_replication_configuration_template_request: DeleteReplicationConfigurationTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_replication_configuration_template

        Deletes a single Replication Configuration Template by ID

        :param delete_replication_configuration_template_request: (required)
        :type delete_replication_configuration_template_request: DeleteReplicationConfigurationTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_replication_configuration_template_serialize(
            delete_replication_configuration_template_request=delete_replication_configuration_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_replication_configuration_template_serialize(
        self,
        delete_replication_configuration_template_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if delete_replication_configuration_template_request is not None:
            _body_params = delete_replication_configuration_template_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/DeleteReplicationConfigurationTemplate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_source_server(
        self,
        delete_source_server_request: DeleteSourceServerRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """delete_source_server

        Deletes a single source server by ID.

        :param delete_source_server_request: (required)
        :type delete_source_server_request: DeleteSourceServerRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_source_server_serialize(
            delete_source_server_request=delete_source_server_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_source_server_with_http_info(
        self,
        delete_source_server_request: DeleteSourceServerRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """delete_source_server

        Deletes a single source server by ID.

        :param delete_source_server_request: (required)
        :type delete_source_server_request: DeleteSourceServerRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_source_server_serialize(
            delete_source_server_request=delete_source_server_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_source_server_without_preload_content(
        self,
        delete_source_server_request: DeleteSourceServerRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_source_server

        Deletes a single source server by ID.

        :param delete_source_server_request: (required)
        :type delete_source_server_request: DeleteSourceServerRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_source_server_serialize(
            delete_source_server_request=delete_source_server_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_source_server_serialize(
        self,
        delete_source_server_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if delete_source_server_request is not None:
            _body_params = delete_source_server_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/DeleteSourceServer',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_vcenter_client(
        self,
        delete_vcenter_client_request: DeleteVcenterClientRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """delete_vcenter_client

        Deletes a given vCenter client by ID.

        :param delete_vcenter_client_request: (required)
        :type delete_vcenter_client_request: DeleteVcenterClientRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_vcenter_client_serialize(
            delete_vcenter_client_request=delete_vcenter_client_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_vcenter_client_with_http_info(
        self,
        delete_vcenter_client_request: DeleteVcenterClientRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """delete_vcenter_client

        Deletes a given vCenter client by ID.

        :param delete_vcenter_client_request: (required)
        :type delete_vcenter_client_request: DeleteVcenterClientRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_vcenter_client_serialize(
            delete_vcenter_client_request=delete_vcenter_client_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_vcenter_client_without_preload_content(
        self,
        delete_vcenter_client_request: DeleteVcenterClientRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_vcenter_client

        Deletes a given vCenter client by ID.

        :param delete_vcenter_client_request: (required)
        :type delete_vcenter_client_request: DeleteVcenterClientRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_vcenter_client_serialize(
            delete_vcenter_client_request=delete_vcenter_client_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_vcenter_client_serialize(
        self,
        delete_vcenter_client_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if delete_vcenter_client_request is not None:
            _body_params = delete_vcenter_client_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/DeleteVcenterClient',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_wave(
        self,
        archive_wave_request: ArchiveWaveRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """delete_wave

        Delete wave.

        :param archive_wave_request: (required)
        :type archive_wave_request: ArchiveWaveRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_wave_serialize(
            archive_wave_request=archive_wave_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_wave_with_http_info(
        self,
        archive_wave_request: ArchiveWaveRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """delete_wave

        Delete wave.

        :param archive_wave_request: (required)
        :type archive_wave_request: ArchiveWaveRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_wave_serialize(
            archive_wave_request=archive_wave_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_wave_without_preload_content(
        self,
        archive_wave_request: ArchiveWaveRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_wave

        Delete wave.

        :param archive_wave_request: (required)
        :type archive_wave_request: ArchiveWaveRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_wave_serialize(
            archive_wave_request=archive_wave_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_wave_serialize(
        self,
        archive_wave_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if archive_wave_request is not None:
            _body_params = archive_wave_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/DeleteWave',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def describe_job_log_items(
        self,
        describe_job_log_items_request: DescribeJobLogItemsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DescribeJobLogItemsResponse:
        """describe_job_log_items

        Retrieves detailed job log items with paging.

        :param describe_job_log_items_request: (required)
        :type describe_job_log_items_request: DescribeJobLogItemsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_job_log_items_serialize(
            describe_job_log_items_request=describe_job_log_items_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeJobLogItemsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def describe_job_log_items_with_http_info(
        self,
        describe_job_log_items_request: DescribeJobLogItemsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DescribeJobLogItemsResponse]:
        """describe_job_log_items

        Retrieves detailed job log items with paging.

        :param describe_job_log_items_request: (required)
        :type describe_job_log_items_request: DescribeJobLogItemsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_job_log_items_serialize(
            describe_job_log_items_request=describe_job_log_items_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeJobLogItemsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def describe_job_log_items_without_preload_content(
        self,
        describe_job_log_items_request: DescribeJobLogItemsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """describe_job_log_items

        Retrieves detailed job log items with paging.

        :param describe_job_log_items_request: (required)
        :type describe_job_log_items_request: DescribeJobLogItemsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_job_log_items_serialize(
            describe_job_log_items_request=describe_job_log_items_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeJobLogItemsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _describe_job_log_items_serialize(
        self,
        describe_job_log_items_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if describe_job_log_items_request is not None:
            _body_params = describe_job_log_items_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/DescribeJobLogItems',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def describe_jobs(
        self,
        describe_jobs_request: DescribeJobsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DescribeJobsResponse:
        """describe_jobs

        Returns a list of Jobs. Use the JobsID and fromDate and toData filters to limit which jobs are returned. The response is sorted by creationDataTime - latest date first. Jobs are normally created by the StartTest, StartCutover, and TerminateTargetInstances APIs. Jobs are also created by DiagnosticLaunch and TerminateDiagnosticInstances, which are APIs available only to *Support* and only used in response to relevant support tickets.

        :param describe_jobs_request: (required)
        :type describe_jobs_request: DescribeJobsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_jobs_serialize(
            describe_jobs_request=describe_jobs_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeJobsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def describe_jobs_with_http_info(
        self,
        describe_jobs_request: DescribeJobsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DescribeJobsResponse]:
        """describe_jobs

        Returns a list of Jobs. Use the JobsID and fromDate and toData filters to limit which jobs are returned. The response is sorted by creationDataTime - latest date first. Jobs are normally created by the StartTest, StartCutover, and TerminateTargetInstances APIs. Jobs are also created by DiagnosticLaunch and TerminateDiagnosticInstances, which are APIs available only to *Support* and only used in response to relevant support tickets.

        :param describe_jobs_request: (required)
        :type describe_jobs_request: DescribeJobsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_jobs_serialize(
            describe_jobs_request=describe_jobs_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeJobsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def describe_jobs_without_preload_content(
        self,
        describe_jobs_request: DescribeJobsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """describe_jobs

        Returns a list of Jobs. Use the JobsID and fromDate and toData filters to limit which jobs are returned. The response is sorted by creationDataTime - latest date first. Jobs are normally created by the StartTest, StartCutover, and TerminateTargetInstances APIs. Jobs are also created by DiagnosticLaunch and TerminateDiagnosticInstances, which are APIs available only to *Support* and only used in response to relevant support tickets.

        :param describe_jobs_request: (required)
        :type describe_jobs_request: DescribeJobsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_jobs_serialize(
            describe_jobs_request=describe_jobs_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeJobsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _describe_jobs_serialize(
        self,
        describe_jobs_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if describe_jobs_request is not None:
            _body_params = describe_jobs_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/DescribeJobs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def describe_launch_configuration_templates(
        self,
        describe_launch_configuration_templates_request: DescribeLaunchConfigurationTemplatesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DescribeLaunchConfigurationTemplatesResponse:
        """describe_launch_configuration_templates

        Lists all Launch Configuration Templates, filtered by Launch Configuration Template IDs

        :param describe_launch_configuration_templates_request: (required)
        :type describe_launch_configuration_templates_request: DescribeLaunchConfigurationTemplatesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_launch_configuration_templates_serialize(
            describe_launch_configuration_templates_request=describe_launch_configuration_templates_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeLaunchConfigurationTemplatesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def describe_launch_configuration_templates_with_http_info(
        self,
        describe_launch_configuration_templates_request: DescribeLaunchConfigurationTemplatesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DescribeLaunchConfigurationTemplatesResponse]:
        """describe_launch_configuration_templates

        Lists all Launch Configuration Templates, filtered by Launch Configuration Template IDs

        :param describe_launch_configuration_templates_request: (required)
        :type describe_launch_configuration_templates_request: DescribeLaunchConfigurationTemplatesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_launch_configuration_templates_serialize(
            describe_launch_configuration_templates_request=describe_launch_configuration_templates_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeLaunchConfigurationTemplatesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def describe_launch_configuration_templates_without_preload_content(
        self,
        describe_launch_configuration_templates_request: DescribeLaunchConfigurationTemplatesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """describe_launch_configuration_templates

        Lists all Launch Configuration Templates, filtered by Launch Configuration Template IDs

        :param describe_launch_configuration_templates_request: (required)
        :type describe_launch_configuration_templates_request: DescribeLaunchConfigurationTemplatesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_launch_configuration_templates_serialize(
            describe_launch_configuration_templates_request=describe_launch_configuration_templates_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeLaunchConfigurationTemplatesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _describe_launch_configuration_templates_serialize(
        self,
        describe_launch_configuration_templates_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if describe_launch_configuration_templates_request is not None:
            _body_params = describe_launch_configuration_templates_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/DescribeLaunchConfigurationTemplates',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def describe_replication_configuration_templates(
        self,
        describe_replication_configuration_templates_request: DescribeReplicationConfigurationTemplatesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DescribeReplicationConfigurationTemplatesResponse:
        """describe_replication_configuration_templates

        Lists all ReplicationConfigurationTemplates, filtered by Source Server IDs.

        :param describe_replication_configuration_templates_request: (required)
        :type describe_replication_configuration_templates_request: DescribeReplicationConfigurationTemplatesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_replication_configuration_templates_serialize(
            describe_replication_configuration_templates_request=describe_replication_configuration_templates_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeReplicationConfigurationTemplatesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def describe_replication_configuration_templates_with_http_info(
        self,
        describe_replication_configuration_templates_request: DescribeReplicationConfigurationTemplatesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DescribeReplicationConfigurationTemplatesResponse]:
        """describe_replication_configuration_templates

        Lists all ReplicationConfigurationTemplates, filtered by Source Server IDs.

        :param describe_replication_configuration_templates_request: (required)
        :type describe_replication_configuration_templates_request: DescribeReplicationConfigurationTemplatesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_replication_configuration_templates_serialize(
            describe_replication_configuration_templates_request=describe_replication_configuration_templates_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeReplicationConfigurationTemplatesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def describe_replication_configuration_templates_without_preload_content(
        self,
        describe_replication_configuration_templates_request: DescribeReplicationConfigurationTemplatesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """describe_replication_configuration_templates

        Lists all ReplicationConfigurationTemplates, filtered by Source Server IDs.

        :param describe_replication_configuration_templates_request: (required)
        :type describe_replication_configuration_templates_request: DescribeReplicationConfigurationTemplatesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_replication_configuration_templates_serialize(
            describe_replication_configuration_templates_request=describe_replication_configuration_templates_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeReplicationConfigurationTemplatesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _describe_replication_configuration_templates_serialize(
        self,
        describe_replication_configuration_templates_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if describe_replication_configuration_templates_request is not None:
            _body_params = describe_replication_configuration_templates_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/DescribeReplicationConfigurationTemplates',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def describe_source_servers(
        self,
        describe_source_servers_request: DescribeSourceServersRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DescribeSourceServersResponse:
        """describe_source_servers

        Retrieves all SourceServers or multiple SourceServers by ID.

        :param describe_source_servers_request: (required)
        :type describe_source_servers_request: DescribeSourceServersRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_source_servers_serialize(
            describe_source_servers_request=describe_source_servers_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeSourceServersResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def describe_source_servers_with_http_info(
        self,
        describe_source_servers_request: DescribeSourceServersRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DescribeSourceServersResponse]:
        """describe_source_servers

        Retrieves all SourceServers or multiple SourceServers by ID.

        :param describe_source_servers_request: (required)
        :type describe_source_servers_request: DescribeSourceServersRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_source_servers_serialize(
            describe_source_servers_request=describe_source_servers_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeSourceServersResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def describe_source_servers_without_preload_content(
        self,
        describe_source_servers_request: DescribeSourceServersRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """describe_source_servers

        Retrieves all SourceServers or multiple SourceServers by ID.

        :param describe_source_servers_request: (required)
        :type describe_source_servers_request: DescribeSourceServersRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_source_servers_serialize(
            describe_source_servers_request=describe_source_servers_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeSourceServersResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _describe_source_servers_serialize(
        self,
        describe_source_servers_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if describe_source_servers_request is not None:
            _body_params = describe_source_servers_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/DescribeSourceServers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def describe_vcenter_clients(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Maximum results to be returned in DescribeVcenterClients.")] = None,
        next_token: Annotated[Optional[Annotated[str, Field(min_length=0, strict=True, max_length=2048)]], Field(description="Next pagination token to be provided for DescribeVcenterClients.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DescribeVcenterClientsResponse:
        """describe_vcenter_clients

        Returns a list of the installed vCenter clients.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Maximum results to be returned in DescribeVcenterClients.
        :type max_results: int
        :param next_token: Next pagination token to be provided for DescribeVcenterClients.
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_vcenter_clients_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeVcenterClientsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def describe_vcenter_clients_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Maximum results to be returned in DescribeVcenterClients.")] = None,
        next_token: Annotated[Optional[Annotated[str, Field(min_length=0, strict=True, max_length=2048)]], Field(description="Next pagination token to be provided for DescribeVcenterClients.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DescribeVcenterClientsResponse]:
        """describe_vcenter_clients

        Returns a list of the installed vCenter clients.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Maximum results to be returned in DescribeVcenterClients.
        :type max_results: int
        :param next_token: Next pagination token to be provided for DescribeVcenterClients.
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_vcenter_clients_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeVcenterClientsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def describe_vcenter_clients_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]], Field(description="Maximum results to be returned in DescribeVcenterClients.")] = None,
        next_token: Annotated[Optional[Annotated[str, Field(min_length=0, strict=True, max_length=2048)]], Field(description="Next pagination token to be provided for DescribeVcenterClients.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """describe_vcenter_clients

        Returns a list of the installed vCenter clients.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Maximum results to be returned in DescribeVcenterClients.
        :type max_results: int
        :param next_token: Next pagination token to be provided for DescribeVcenterClients.
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._describe_vcenter_clients_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DescribeVcenterClientsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _describe_vcenter_clients_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/DescribeVcenterClients',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def disassociate_applications(
        self,
        associate_applications_request: AssociateApplicationsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """disassociate_applications

        Disassociate applications from wave.

        :param associate_applications_request: (required)
        :type associate_applications_request: AssociateApplicationsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_applications_serialize(
            associate_applications_request=associate_applications_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def disassociate_applications_with_http_info(
        self,
        associate_applications_request: AssociateApplicationsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """disassociate_applications

        Disassociate applications from wave.

        :param associate_applications_request: (required)
        :type associate_applications_request: AssociateApplicationsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_applications_serialize(
            associate_applications_request=associate_applications_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def disassociate_applications_without_preload_content(
        self,
        associate_applications_request: AssociateApplicationsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """disassociate_applications

        Disassociate applications from wave.

        :param associate_applications_request: (required)
        :type associate_applications_request: AssociateApplicationsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_applications_serialize(
            associate_applications_request=associate_applications_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _disassociate_applications_serialize(
        self,
        associate_applications_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if associate_applications_request is not None:
            _body_params = associate_applications_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/DisassociateApplications',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def disassociate_source_servers(
        self,
        associate_source_servers_request: AssociateSourceServersRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """disassociate_source_servers

        Disassociate source servers from application.

        :param associate_source_servers_request: (required)
        :type associate_source_servers_request: AssociateSourceServersRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_source_servers_serialize(
            associate_source_servers_request=associate_source_servers_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def disassociate_source_servers_with_http_info(
        self,
        associate_source_servers_request: AssociateSourceServersRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """disassociate_source_servers

        Disassociate source servers from application.

        :param associate_source_servers_request: (required)
        :type associate_source_servers_request: AssociateSourceServersRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_source_servers_serialize(
            associate_source_servers_request=associate_source_servers_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def disassociate_source_servers_without_preload_content(
        self,
        associate_source_servers_request: AssociateSourceServersRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """disassociate_source_servers

        Disassociate source servers from application.

        :param associate_source_servers_request: (required)
        :type associate_source_servers_request: AssociateSourceServersRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disassociate_source_servers_serialize(
            associate_source_servers_request=associate_source_servers_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _disassociate_source_servers_serialize(
        self,
        associate_source_servers_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if associate_source_servers_request is not None:
            _body_params = associate_source_servers_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/DisassociateSourceServers',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def disconnect_from_service(
        self,
        disconnect_from_service_request: DisconnectFromServiceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SourceServer:
        """disconnect_from_service

        Disconnects specific Source Servers from Application Migration Service. Data replication is stopped immediately. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. If the agent on the source server has not been prevented from communicating with the Application Migration Service service, then it will receive a command to uninstall itself (within approximately 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be set to DISCONNECTED; The totalStorageBytes property for each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.

        :param disconnect_from_service_request: (required)
        :type disconnect_from_service_request: DisconnectFromServiceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disconnect_from_service_serialize(
            disconnect_from_service_request=disconnect_from_service_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def disconnect_from_service_with_http_info(
        self,
        disconnect_from_service_request: DisconnectFromServiceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SourceServer]:
        """disconnect_from_service

        Disconnects specific Source Servers from Application Migration Service. Data replication is stopped immediately. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. If the agent on the source server has not been prevented from communicating with the Application Migration Service service, then it will receive a command to uninstall itself (within approximately 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be set to DISCONNECTED; The totalStorageBytes property for each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.

        :param disconnect_from_service_request: (required)
        :type disconnect_from_service_request: DisconnectFromServiceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disconnect_from_service_serialize(
            disconnect_from_service_request=disconnect_from_service_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def disconnect_from_service_without_preload_content(
        self,
        disconnect_from_service_request: DisconnectFromServiceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """disconnect_from_service

        Disconnects specific Source Servers from Application Migration Service. Data replication is stopped immediately. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. If the agent on the source server has not been prevented from communicating with the Application Migration Service service, then it will receive a command to uninstall itself (within approximately 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be set to DISCONNECTED; The totalStorageBytes property for each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.

        :param disconnect_from_service_request: (required)
        :type disconnect_from_service_request: DisconnectFromServiceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._disconnect_from_service_serialize(
            disconnect_from_service_request=disconnect_from_service_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _disconnect_from_service_serialize(
        self,
        disconnect_from_service_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if disconnect_from_service_request is not None:
            _body_params = disconnect_from_service_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/DisconnectFromService',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def finalize_cutover(
        self,
        finalize_cutover_request: FinalizeCutoverRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SourceServer:
        """finalize_cutover

        Finalizes the cutover immediately for specific Source Servers. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. The AWS Replication Agent will receive a command to uninstall itself (within 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be changed to DISCONNECTED; The SourceServer.lifeCycle.state will be changed to CUTOVER; The totalStorageBytes property fo each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.

        :param finalize_cutover_request: (required)
        :type finalize_cutover_request: FinalizeCutoverRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._finalize_cutover_serialize(
            finalize_cutover_request=finalize_cutover_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def finalize_cutover_with_http_info(
        self,
        finalize_cutover_request: FinalizeCutoverRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SourceServer]:
        """finalize_cutover

        Finalizes the cutover immediately for specific Source Servers. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. The AWS Replication Agent will receive a command to uninstall itself (within 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be changed to DISCONNECTED; The SourceServer.lifeCycle.state will be changed to CUTOVER; The totalStorageBytes property fo each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.

        :param finalize_cutover_request: (required)
        :type finalize_cutover_request: FinalizeCutoverRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._finalize_cutover_serialize(
            finalize_cutover_request=finalize_cutover_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def finalize_cutover_without_preload_content(
        self,
        finalize_cutover_request: FinalizeCutoverRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """finalize_cutover

        Finalizes the cutover immediately for specific Source Servers. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. The AWS Replication Agent will receive a command to uninstall itself (within 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be changed to DISCONNECTED; The SourceServer.lifeCycle.state will be changed to CUTOVER; The totalStorageBytes property fo each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.

        :param finalize_cutover_request: (required)
        :type finalize_cutover_request: FinalizeCutoverRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._finalize_cutover_serialize(
            finalize_cutover_request=finalize_cutover_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _finalize_cutover_serialize(
        self,
        finalize_cutover_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if finalize_cutover_request is not None:
            _body_params = finalize_cutover_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/FinalizeCutover',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_launch_configuration(
        self,
        get_launch_configuration_request: GetLaunchConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LaunchConfiguration:
        """get_launch_configuration

        Lists all LaunchConfigurations available, filtered by Source Server IDs.

        :param get_launch_configuration_request: (required)
        :type get_launch_configuration_request: GetLaunchConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_launch_configuration_serialize(
            get_launch_configuration_request=get_launch_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LaunchConfiguration",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_launch_configuration_with_http_info(
        self,
        get_launch_configuration_request: GetLaunchConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LaunchConfiguration]:
        """get_launch_configuration

        Lists all LaunchConfigurations available, filtered by Source Server IDs.

        :param get_launch_configuration_request: (required)
        :type get_launch_configuration_request: GetLaunchConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_launch_configuration_serialize(
            get_launch_configuration_request=get_launch_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LaunchConfiguration",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_launch_configuration_without_preload_content(
        self,
        get_launch_configuration_request: GetLaunchConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_launch_configuration

        Lists all LaunchConfigurations available, filtered by Source Server IDs.

        :param get_launch_configuration_request: (required)
        :type get_launch_configuration_request: GetLaunchConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_launch_configuration_serialize(
            get_launch_configuration_request=get_launch_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LaunchConfiguration",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_launch_configuration_serialize(
        self,
        get_launch_configuration_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if get_launch_configuration_request is not None:
            _body_params = get_launch_configuration_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/GetLaunchConfiguration',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_replication_configuration(
        self,
        get_replication_configuration_request: GetReplicationConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReplicationConfiguration:
        """get_replication_configuration

        Lists all ReplicationConfigurations, filtered by Source Server ID.

        :param get_replication_configuration_request: (required)
        :type get_replication_configuration_request: GetReplicationConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_replication_configuration_serialize(
            get_replication_configuration_request=get_replication_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReplicationConfiguration",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_replication_configuration_with_http_info(
        self,
        get_replication_configuration_request: GetReplicationConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReplicationConfiguration]:
        """get_replication_configuration

        Lists all ReplicationConfigurations, filtered by Source Server ID.

        :param get_replication_configuration_request: (required)
        :type get_replication_configuration_request: GetReplicationConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_replication_configuration_serialize(
            get_replication_configuration_request=get_replication_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReplicationConfiguration",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_replication_configuration_without_preload_content(
        self,
        get_replication_configuration_request: GetReplicationConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_replication_configuration

        Lists all ReplicationConfigurations, filtered by Source Server ID.

        :param get_replication_configuration_request: (required)
        :type get_replication_configuration_request: GetReplicationConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_replication_configuration_serialize(
            get_replication_configuration_request=get_replication_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReplicationConfiguration",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_replication_configuration_serialize(
        self,
        get_replication_configuration_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if get_replication_configuration_request is not None:
            _body_params = get_replication_configuration_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/GetReplicationConfiguration',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def initialize_service(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """initialize_service

        Initialize Application Migration Service.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._initialize_service_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def initialize_service_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """initialize_service

        Initialize Application Migration Service.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._initialize_service_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def initialize_service_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """initialize_service

        Initialize Application Migration Service.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._initialize_service_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _initialize_service_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/InitializeService',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_applications(
        self,
        list_applications_request: ListApplicationsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListApplicationsResponse:
        """list_applications

        Retrieves all applications or multiple applications by ID.

        :param list_applications_request: (required)
        :type list_applications_request: ListApplicationsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_applications_serialize(
            list_applications_request=list_applications_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListApplicationsResponse",
            '480': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_applications_with_http_info(
        self,
        list_applications_request: ListApplicationsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListApplicationsResponse]:
        """list_applications

        Retrieves all applications or multiple applications by ID.

        :param list_applications_request: (required)
        :type list_applications_request: ListApplicationsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_applications_serialize(
            list_applications_request=list_applications_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListApplicationsResponse",
            '480': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_applications_without_preload_content(
        self,
        list_applications_request: ListApplicationsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_applications

        Retrieves all applications or multiple applications by ID.

        :param list_applications_request: (required)
        :type list_applications_request: ListApplicationsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_applications_serialize(
            list_applications_request=list_applications_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListApplicationsResponse",
            '480': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_applications_serialize(
        self,
        list_applications_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if list_applications_request is not None:
            _body_params = list_applications_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ListApplications',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_export_errors(
        self,
        list_export_errors_request: ListExportErrorsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListExportErrorsResponse:
        """list_export_errors

        List export errors.

        :param list_export_errors_request: (required)
        :type list_export_errors_request: ListExportErrorsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_export_errors_serialize(
            list_export_errors_request=list_export_errors_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListExportErrorsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_export_errors_with_http_info(
        self,
        list_export_errors_request: ListExportErrorsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListExportErrorsResponse]:
        """list_export_errors

        List export errors.

        :param list_export_errors_request: (required)
        :type list_export_errors_request: ListExportErrorsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_export_errors_serialize(
            list_export_errors_request=list_export_errors_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListExportErrorsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_export_errors_without_preload_content(
        self,
        list_export_errors_request: ListExportErrorsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_export_errors

        List export errors.

        :param list_export_errors_request: (required)
        :type list_export_errors_request: ListExportErrorsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_export_errors_serialize(
            list_export_errors_request=list_export_errors_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListExportErrorsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_export_errors_serialize(
        self,
        list_export_errors_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if list_export_errors_request is not None:
            _body_params = list_export_errors_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ListExportErrors',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_exports(
        self,
        list_exports_request: ListExportsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListExportsResponse:
        """list_exports

        List exports.

        :param list_exports_request: (required)
        :type list_exports_request: ListExportsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_exports_serialize(
            list_exports_request=list_exports_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListExportsResponse",
            '480': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_exports_with_http_info(
        self,
        list_exports_request: ListExportsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListExportsResponse]:
        """list_exports

        List exports.

        :param list_exports_request: (required)
        :type list_exports_request: ListExportsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_exports_serialize(
            list_exports_request=list_exports_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListExportsResponse",
            '480': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_exports_without_preload_content(
        self,
        list_exports_request: ListExportsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_exports

        List exports.

        :param list_exports_request: (required)
        :type list_exports_request: ListExportsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_exports_serialize(
            list_exports_request=list_exports_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListExportsResponse",
            '480': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_exports_serialize(
        self,
        list_exports_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if list_exports_request is not None:
            _body_params = list_exports_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ListExports',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_import_errors(
        self,
        list_import_errors_request: ListImportErrorsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListImportErrorsResponse:
        """list_import_errors

        List import errors.

        :param list_import_errors_request: (required)
        :type list_import_errors_request: ListImportErrorsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_import_errors_serialize(
            list_import_errors_request=list_import_errors_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListImportErrorsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_import_errors_with_http_info(
        self,
        list_import_errors_request: ListImportErrorsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListImportErrorsResponse]:
        """list_import_errors

        List import errors.

        :param list_import_errors_request: (required)
        :type list_import_errors_request: ListImportErrorsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_import_errors_serialize(
            list_import_errors_request=list_import_errors_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListImportErrorsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_import_errors_without_preload_content(
        self,
        list_import_errors_request: ListImportErrorsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_import_errors

        List import errors.

        :param list_import_errors_request: (required)
        :type list_import_errors_request: ListImportErrorsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_import_errors_serialize(
            list_import_errors_request=list_import_errors_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListImportErrorsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_import_errors_serialize(
        self,
        list_import_errors_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if list_import_errors_request is not None:
            _body_params = list_import_errors_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ListImportErrors',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_imports(
        self,
        list_imports_request: ListImportsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListImportsResponse:
        """list_imports

        List imports.

        :param list_imports_request: (required)
        :type list_imports_request: ListImportsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_imports_serialize(
            list_imports_request=list_imports_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListImportsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_imports_with_http_info(
        self,
        list_imports_request: ListImportsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListImportsResponse]:
        """list_imports

        List imports.

        :param list_imports_request: (required)
        :type list_imports_request: ListImportsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_imports_serialize(
            list_imports_request=list_imports_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListImportsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_imports_without_preload_content(
        self,
        list_imports_request: ListImportsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_imports

        List imports.

        :param list_imports_request: (required)
        :type list_imports_request: ListImportsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_imports_serialize(
            list_imports_request=list_imports_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListImportsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_imports_serialize(
        self,
        list_imports_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if list_imports_request is not None:
            _body_params = list_imports_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ListImports',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_source_server_actions(
        self,
        list_source_server_actions_request: ListSourceServerActionsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListSourceServerActionsResponse:
        """list_source_server_actions

        List source server post migration custom actions.

        :param list_source_server_actions_request: (required)
        :type list_source_server_actions_request: ListSourceServerActionsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_source_server_actions_serialize(
            list_source_server_actions_request=list_source_server_actions_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListSourceServerActionsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_source_server_actions_with_http_info(
        self,
        list_source_server_actions_request: ListSourceServerActionsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListSourceServerActionsResponse]:
        """list_source_server_actions

        List source server post migration custom actions.

        :param list_source_server_actions_request: (required)
        :type list_source_server_actions_request: ListSourceServerActionsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_source_server_actions_serialize(
            list_source_server_actions_request=list_source_server_actions_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListSourceServerActionsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_source_server_actions_without_preload_content(
        self,
        list_source_server_actions_request: ListSourceServerActionsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_source_server_actions

        List source server post migration custom actions.

        :param list_source_server_actions_request: (required)
        :type list_source_server_actions_request: ListSourceServerActionsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_source_server_actions_serialize(
            list_source_server_actions_request=list_source_server_actions_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListSourceServerActionsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_source_server_actions_serialize(
        self,
        list_source_server_actions_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if list_source_server_actions_request is not None:
            _body_params = list_source_server_actions_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ListSourceServerActions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_tags_for_resource(
        self,
        resource_arn: Annotated[str, Field(min_length=20, strict=True, max_length=2048, description="List tags for resource request by ARN.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListTagsForResourceResponse:
        """list_tags_for_resource

        List all tags for your Application Migration Service resources.

        :param resource_arn: List tags for resource request by ARN. (required)
        :type resource_arn: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_tags_for_resource_serialize(
            resource_arn=resource_arn,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTagsForResourceResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_tags_for_resource_with_http_info(
        self,
        resource_arn: Annotated[str, Field(min_length=20, strict=True, max_length=2048, description="List tags for resource request by ARN.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListTagsForResourceResponse]:
        """list_tags_for_resource

        List all tags for your Application Migration Service resources.

        :param resource_arn: List tags for resource request by ARN. (required)
        :type resource_arn: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_tags_for_resource_serialize(
            resource_arn=resource_arn,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTagsForResourceResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_tags_for_resource_without_preload_content(
        self,
        resource_arn: Annotated[str, Field(min_length=20, strict=True, max_length=2048, description="List tags for resource request by ARN.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_tags_for_resource

        List all tags for your Application Migration Service resources.

        :param resource_arn: List tags for resource request by ARN. (required)
        :type resource_arn: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_tags_for_resource_serialize(
            resource_arn=resource_arn,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTagsForResourceResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_tags_for_resource_serialize(
        self,
        resource_arn,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_arn is not None:
            _path_params['resourceArn'] = resource_arn
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/tags/{resourceArn}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_template_actions(
        self,
        list_template_actions_request: ListTemplateActionsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListTemplateActionsResponse:
        """list_template_actions

        List template post migration custom actions.

        :param list_template_actions_request: (required)
        :type list_template_actions_request: ListTemplateActionsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_template_actions_serialize(
            list_template_actions_request=list_template_actions_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTemplateActionsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_template_actions_with_http_info(
        self,
        list_template_actions_request: ListTemplateActionsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListTemplateActionsResponse]:
        """list_template_actions

        List template post migration custom actions.

        :param list_template_actions_request: (required)
        :type list_template_actions_request: ListTemplateActionsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_template_actions_serialize(
            list_template_actions_request=list_template_actions_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTemplateActionsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_template_actions_without_preload_content(
        self,
        list_template_actions_request: ListTemplateActionsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_template_actions

        List template post migration custom actions.

        :param list_template_actions_request: (required)
        :type list_template_actions_request: ListTemplateActionsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_template_actions_serialize(
            list_template_actions_request=list_template_actions_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTemplateActionsResponse",
            '480': "object",
            '481': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_template_actions_serialize(
        self,
        list_template_actions_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if list_template_actions_request is not None:
            _body_params = list_template_actions_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ListTemplateActions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_waves(
        self,
        list_waves_request: ListWavesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListWavesResponse:
        """list_waves

        Retrieves all waves or multiple waves by ID.

        :param list_waves_request: (required)
        :type list_waves_request: ListWavesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_waves_serialize(
            list_waves_request=list_waves_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWavesResponse",
            '480': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_waves_with_http_info(
        self,
        list_waves_request: ListWavesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListWavesResponse]:
        """list_waves

        Retrieves all waves or multiple waves by ID.

        :param list_waves_request: (required)
        :type list_waves_request: ListWavesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_waves_serialize(
            list_waves_request=list_waves_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWavesResponse",
            '480': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_waves_without_preload_content(
        self,
        list_waves_request: ListWavesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        max_results: Annotated[Optional[StrictStr], Field(description="Pagination limit")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="Pagination token")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_waves

        Retrieves all waves or multiple waves by ID.

        :param list_waves_request: (required)
        :type list_waves_request: ListWavesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param max_results: Pagination limit
        :type max_results: str
        :param next_token: Pagination token
        :type next_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_waves_serialize(
            list_waves_request=list_waves_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            max_results=max_results,
            next_token=next_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListWavesResponse",
            '480': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_waves_serialize(
        self,
        list_waves_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        max_results,
        next_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if next_token is not None:
            
            _query_params.append(('nextToken', next_token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if list_waves_request is not None:
            _body_params = list_waves_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ListWaves',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def mark_as_archived(
        self,
        mark_as_archived_request: MarkAsArchivedRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SourceServer:
        """mark_as_archived

        Archives specific Source Servers by setting the SourceServer.isArchived property to true for specified SourceServers by ID. This command only works for SourceServers with a lifecycle. state which equals DISCONNECTED or CUTOVER.

        :param mark_as_archived_request: (required)
        :type mark_as_archived_request: MarkAsArchivedRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mark_as_archived_serialize(
            mark_as_archived_request=mark_as_archived_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def mark_as_archived_with_http_info(
        self,
        mark_as_archived_request: MarkAsArchivedRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SourceServer]:
        """mark_as_archived

        Archives specific Source Servers by setting the SourceServer.isArchived property to true for specified SourceServers by ID. This command only works for SourceServers with a lifecycle. state which equals DISCONNECTED or CUTOVER.

        :param mark_as_archived_request: (required)
        :type mark_as_archived_request: MarkAsArchivedRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mark_as_archived_serialize(
            mark_as_archived_request=mark_as_archived_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def mark_as_archived_without_preload_content(
        self,
        mark_as_archived_request: MarkAsArchivedRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """mark_as_archived

        Archives specific Source Servers by setting the SourceServer.isArchived property to true for specified SourceServers by ID. This command only works for SourceServers with a lifecycle. state which equals DISCONNECTED or CUTOVER.

        :param mark_as_archived_request: (required)
        :type mark_as_archived_request: MarkAsArchivedRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mark_as_archived_serialize(
            mark_as_archived_request=mark_as_archived_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _mark_as_archived_serialize(
        self,
        mark_as_archived_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if mark_as_archived_request is not None:
            _body_params = mark_as_archived_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/MarkAsArchived',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_source_server_action(
        self,
        put_source_server_action_request: PutSourceServerActionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SourceServerActionDocument:
        """put_source_server_action

        Put source server post migration custom action.

        :param put_source_server_action_request: (required)
        :type put_source_server_action_request: PutSourceServerActionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_source_server_action_serialize(
            put_source_server_action_request=put_source_server_action_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServerActionDocument",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_source_server_action_with_http_info(
        self,
        put_source_server_action_request: PutSourceServerActionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SourceServerActionDocument]:
        """put_source_server_action

        Put source server post migration custom action.

        :param put_source_server_action_request: (required)
        :type put_source_server_action_request: PutSourceServerActionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_source_server_action_serialize(
            put_source_server_action_request=put_source_server_action_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServerActionDocument",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_source_server_action_without_preload_content(
        self,
        put_source_server_action_request: PutSourceServerActionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """put_source_server_action

        Put source server post migration custom action.

        :param put_source_server_action_request: (required)
        :type put_source_server_action_request: PutSourceServerActionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_source_server_action_serialize(
            put_source_server_action_request=put_source_server_action_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServerActionDocument",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_source_server_action_serialize(
        self,
        put_source_server_action_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if put_source_server_action_request is not None:
            _body_params = put_source_server_action_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/PutSourceServerAction',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_template_action(
        self,
        put_template_action_request: PutTemplateActionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TemplateActionDocument:
        """put_template_action

        Put template post migration custom action.

        :param put_template_action_request: (required)
        :type put_template_action_request: PutTemplateActionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_template_action_serialize(
            put_template_action_request=put_template_action_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TemplateActionDocument",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_template_action_with_http_info(
        self,
        put_template_action_request: PutTemplateActionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TemplateActionDocument]:
        """put_template_action

        Put template post migration custom action.

        :param put_template_action_request: (required)
        :type put_template_action_request: PutTemplateActionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_template_action_serialize(
            put_template_action_request=put_template_action_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TemplateActionDocument",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_template_action_without_preload_content(
        self,
        put_template_action_request: PutTemplateActionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """put_template_action

        Put template post migration custom action.

        :param put_template_action_request: (required)
        :type put_template_action_request: PutTemplateActionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_template_action_serialize(
            put_template_action_request=put_template_action_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TemplateActionDocument",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_template_action_serialize(
        self,
        put_template_action_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if put_template_action_request is not None:
            _body_params = put_template_action_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/PutTemplateAction',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def remove_source_server_action(
        self,
        remove_source_server_action_request: RemoveSourceServerActionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """remove_source_server_action

        Remove source server post migration custom action.

        :param remove_source_server_action_request: (required)
        :type remove_source_server_action_request: RemoveSourceServerActionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_source_server_action_serialize(
            remove_source_server_action_request=remove_source_server_action_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def remove_source_server_action_with_http_info(
        self,
        remove_source_server_action_request: RemoveSourceServerActionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """remove_source_server_action

        Remove source server post migration custom action.

        :param remove_source_server_action_request: (required)
        :type remove_source_server_action_request: RemoveSourceServerActionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_source_server_action_serialize(
            remove_source_server_action_request=remove_source_server_action_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def remove_source_server_action_without_preload_content(
        self,
        remove_source_server_action_request: RemoveSourceServerActionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """remove_source_server_action

        Remove source server post migration custom action.

        :param remove_source_server_action_request: (required)
        :type remove_source_server_action_request: RemoveSourceServerActionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_source_server_action_serialize(
            remove_source_server_action_request=remove_source_server_action_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _remove_source_server_action_serialize(
        self,
        remove_source_server_action_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if remove_source_server_action_request is not None:
            _body_params = remove_source_server_action_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/RemoveSourceServerAction',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def remove_template_action(
        self,
        remove_template_action_request: RemoveTemplateActionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """remove_template_action

        Remove template post migration custom action.

        :param remove_template_action_request: (required)
        :type remove_template_action_request: RemoveTemplateActionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_template_action_serialize(
            remove_template_action_request=remove_template_action_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def remove_template_action_with_http_info(
        self,
        remove_template_action_request: RemoveTemplateActionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """remove_template_action

        Remove template post migration custom action.

        :param remove_template_action_request: (required)
        :type remove_template_action_request: RemoveTemplateActionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_template_action_serialize(
            remove_template_action_request=remove_template_action_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def remove_template_action_without_preload_content(
        self,
        remove_template_action_request: RemoveTemplateActionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """remove_template_action

        Remove template post migration custom action.

        :param remove_template_action_request: (required)
        :type remove_template_action_request: RemoveTemplateActionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_template_action_serialize(
            remove_template_action_request=remove_template_action_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': "object",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _remove_template_action_serialize(
        self,
        remove_template_action_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if remove_template_action_request is not None:
            _body_params = remove_template_action_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/RemoveTemplateAction',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def retry_data_replication(
        self,
        retry_data_replication_request: RetryDataReplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SourceServer:
        """retry_data_replication

        Causes the data replication initiation sequence to begin immediately upon next Handshake for specified SourceServer IDs, regardless of when the previous initiation started. This command will not work if the SourceServer is not stalled or is in a DISCONNECTED or STOPPED state.

        :param retry_data_replication_request: (required)
        :type retry_data_replication_request: RetryDataReplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retry_data_replication_serialize(
            retry_data_replication_request=retry_data_replication_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def retry_data_replication_with_http_info(
        self,
        retry_data_replication_request: RetryDataReplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SourceServer]:
        """retry_data_replication

        Causes the data replication initiation sequence to begin immediately upon next Handshake for specified SourceServer IDs, regardless of when the previous initiation started. This command will not work if the SourceServer is not stalled or is in a DISCONNECTED or STOPPED state.

        :param retry_data_replication_request: (required)
        :type retry_data_replication_request: RetryDataReplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retry_data_replication_serialize(
            retry_data_replication_request=retry_data_replication_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def retry_data_replication_without_preload_content(
        self,
        retry_data_replication_request: RetryDataReplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """retry_data_replication

        Causes the data replication initiation sequence to begin immediately upon next Handshake for specified SourceServer IDs, regardless of when the previous initiation started. This command will not work if the SourceServer is not stalled or is in a DISCONNECTED or STOPPED state.

        :param retry_data_replication_request: (required)
        :type retry_data_replication_request: RetryDataReplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retry_data_replication_serialize(
            retry_data_replication_request=retry_data_replication_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _retry_data_replication_serialize(
        self,
        retry_data_replication_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if retry_data_replication_request is not None:
            _body_params = retry_data_replication_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/RetryDataReplication',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def start_cutover(
        self,
        start_cutover_request: StartCutoverRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StartCutoverResponse:
        """start_cutover

        Launches a Cutover Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartCutover and changes the SourceServer.lifeCycle.state property to CUTTING_OVER.

        :param start_cutover_request: (required)
        :type start_cutover_request: StartCutoverRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_cutover_serialize(
            start_cutover_request=start_cutover_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "StartCutoverResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def start_cutover_with_http_info(
        self,
        start_cutover_request: StartCutoverRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StartCutoverResponse]:
        """start_cutover

        Launches a Cutover Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartCutover and changes the SourceServer.lifeCycle.state property to CUTTING_OVER.

        :param start_cutover_request: (required)
        :type start_cutover_request: StartCutoverRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_cutover_serialize(
            start_cutover_request=start_cutover_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "StartCutoverResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def start_cutover_without_preload_content(
        self,
        start_cutover_request: StartCutoverRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """start_cutover

        Launches a Cutover Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartCutover and changes the SourceServer.lifeCycle.state property to CUTTING_OVER.

        :param start_cutover_request: (required)
        :type start_cutover_request: StartCutoverRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_cutover_serialize(
            start_cutover_request=start_cutover_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "StartCutoverResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _start_cutover_serialize(
        self,
        start_cutover_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if start_cutover_request is not None:
            _body_params = start_cutover_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/StartCutover',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def start_export(
        self,
        start_export_request: StartExportRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StartExportResponse:
        """start_export

        Start export.

        :param start_export_request: (required)
        :type start_export_request: StartExportRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_export_serialize(
            start_export_request=start_export_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "StartExportResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def start_export_with_http_info(
        self,
        start_export_request: StartExportRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StartExportResponse]:
        """start_export

        Start export.

        :param start_export_request: (required)
        :type start_export_request: StartExportRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_export_serialize(
            start_export_request=start_export_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "StartExportResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def start_export_without_preload_content(
        self,
        start_export_request: StartExportRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """start_export

        Start export.

        :param start_export_request: (required)
        :type start_export_request: StartExportRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_export_serialize(
            start_export_request=start_export_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "StartExportResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _start_export_serialize(
        self,
        start_export_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if start_export_request is not None:
            _body_params = start_export_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/StartExport',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def start_import(
        self,
        start_import_request: StartImportRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StartImportResponse:
        """start_import

        Start import.

        :param start_import_request: (required)
        :type start_import_request: StartImportRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_import_serialize(
            start_import_request=start_import_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "StartImportResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def start_import_with_http_info(
        self,
        start_import_request: StartImportRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StartImportResponse]:
        """start_import

        Start import.

        :param start_import_request: (required)
        :type start_import_request: StartImportRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_import_serialize(
            start_import_request=start_import_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "StartImportResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def start_import_without_preload_content(
        self,
        start_import_request: StartImportRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """start_import

        Start import.

        :param start_import_request: (required)
        :type start_import_request: StartImportRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_import_serialize(
            start_import_request=start_import_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "StartImportResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _start_import_serialize(
        self,
        start_import_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if start_import_request is not None:
            _body_params = start_import_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/StartImport',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def start_replication(
        self,
        start_replication_request: StartReplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SourceServer:
        """start_replication

        Starts replication for SNAPSHOT_SHIPPING agents.

        :param start_replication_request: (required)
        :type start_replication_request: StartReplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_replication_serialize(
            start_replication_request=start_replication_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def start_replication_with_http_info(
        self,
        start_replication_request: StartReplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SourceServer]:
        """start_replication

        Starts replication for SNAPSHOT_SHIPPING agents.

        :param start_replication_request: (required)
        :type start_replication_request: StartReplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_replication_serialize(
            start_replication_request=start_replication_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def start_replication_without_preload_content(
        self,
        start_replication_request: StartReplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """start_replication

        Starts replication for SNAPSHOT_SHIPPING agents.

        :param start_replication_request: (required)
        :type start_replication_request: StartReplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_replication_serialize(
            start_replication_request=start_replication_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _start_replication_serialize(
        self,
        start_replication_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if start_replication_request is not None:
            _body_params = start_replication_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/StartReplication',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def start_test(
        self,
        start_test_request: StartTestRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StartTestResponse:
        """start_test

        Launches a Test Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartTest and changes the SourceServer.lifeCycle.state property to TESTING.

        :param start_test_request: (required)
        :type start_test_request: StartTestRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_test_serialize(
            start_test_request=start_test_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "StartTestResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def start_test_with_http_info(
        self,
        start_test_request: StartTestRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StartTestResponse]:
        """start_test

        Launches a Test Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartTest and changes the SourceServer.lifeCycle.state property to TESTING.

        :param start_test_request: (required)
        :type start_test_request: StartTestRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_test_serialize(
            start_test_request=start_test_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "StartTestResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def start_test_without_preload_content(
        self,
        start_test_request: StartTestRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """start_test

        Launches a Test Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartTest and changes the SourceServer.lifeCycle.state property to TESTING.

        :param start_test_request: (required)
        :type start_test_request: StartTestRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._start_test_serialize(
            start_test_request=start_test_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "StartTestResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _start_test_serialize(
        self,
        start_test_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if start_test_request is not None:
            _body_params = start_test_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/StartTest',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tag_resource(
        self,
        resource_arn: Annotated[str, Field(min_length=20, strict=True, max_length=2048, description="Tag resource by ARN.")],
        tag_resource_request: TagResourceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """tag_resource

        Adds or overwrites only the specified tags for the specified Application Migration Service resource or resources. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value.

        :param resource_arn: Tag resource by ARN. (required)
        :type resource_arn: str
        :param tag_resource_request: (required)
        :type tag_resource_request: TagResourceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tag_resource_serialize(
            resource_arn=resource_arn,
            tag_resource_request=tag_resource_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tag_resource_with_http_info(
        self,
        resource_arn: Annotated[str, Field(min_length=20, strict=True, max_length=2048, description="Tag resource by ARN.")],
        tag_resource_request: TagResourceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """tag_resource

        Adds or overwrites only the specified tags for the specified Application Migration Service resource or resources. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value.

        :param resource_arn: Tag resource by ARN. (required)
        :type resource_arn: str
        :param tag_resource_request: (required)
        :type tag_resource_request: TagResourceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tag_resource_serialize(
            resource_arn=resource_arn,
            tag_resource_request=tag_resource_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tag_resource_without_preload_content(
        self,
        resource_arn: Annotated[str, Field(min_length=20, strict=True, max_length=2048, description="Tag resource by ARN.")],
        tag_resource_request: TagResourceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tag_resource

        Adds or overwrites only the specified tags for the specified Application Migration Service resource or resources. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value.

        :param resource_arn: Tag resource by ARN. (required)
        :type resource_arn: str
        :param tag_resource_request: (required)
        :type tag_resource_request: TagResourceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tag_resource_serialize(
            resource_arn=resource_arn,
            tag_resource_request=tag_resource_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tag_resource_serialize(
        self,
        resource_arn,
        tag_resource_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_arn is not None:
            _path_params['resourceArn'] = resource_arn
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if tag_resource_request is not None:
            _body_params = tag_resource_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/tags/{resourceArn}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def terminate_target_instances(
        self,
        terminate_target_instances_request: TerminateTargetInstancesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TerminateTargetInstancesResponse:
        """terminate_target_instances

        Starts a job that terminates specific launched EC2 Test and Cutover instances. This command will not work for any Source Server with a lifecycle.state of TESTING, CUTTING_OVER, or CUTOVER.

        :param terminate_target_instances_request: (required)
        :type terminate_target_instances_request: TerminateTargetInstancesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._terminate_target_instances_serialize(
            terminate_target_instances_request=terminate_target_instances_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "TerminateTargetInstancesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def terminate_target_instances_with_http_info(
        self,
        terminate_target_instances_request: TerminateTargetInstancesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TerminateTargetInstancesResponse]:
        """terminate_target_instances

        Starts a job that terminates specific launched EC2 Test and Cutover instances. This command will not work for any Source Server with a lifecycle.state of TESTING, CUTTING_OVER, or CUTOVER.

        :param terminate_target_instances_request: (required)
        :type terminate_target_instances_request: TerminateTargetInstancesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._terminate_target_instances_serialize(
            terminate_target_instances_request=terminate_target_instances_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "TerminateTargetInstancesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def terminate_target_instances_without_preload_content(
        self,
        terminate_target_instances_request: TerminateTargetInstancesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """terminate_target_instances

        Starts a job that terminates specific launched EC2 Test and Cutover instances. This command will not work for any Source Server with a lifecycle.state of TESTING, CUTTING_OVER, or CUTOVER.

        :param terminate_target_instances_request: (required)
        :type terminate_target_instances_request: TerminateTargetInstancesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._terminate_target_instances_serialize(
            terminate_target_instances_request=terminate_target_instances_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "TerminateTargetInstancesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _terminate_target_instances_serialize(
        self,
        terminate_target_instances_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if terminate_target_instances_request is not None:
            _body_params = terminate_target_instances_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/TerminateTargetInstances',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def unarchive_application(
        self,
        archive_application_request: ArchiveApplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Application:
        """unarchive_application

        Unarchive application.

        :param archive_application_request: (required)
        :type archive_application_request: ArchiveApplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._unarchive_application_serialize(
            archive_application_request=archive_application_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Application",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def unarchive_application_with_http_info(
        self,
        archive_application_request: ArchiveApplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Application]:
        """unarchive_application

        Unarchive application.

        :param archive_application_request: (required)
        :type archive_application_request: ArchiveApplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._unarchive_application_serialize(
            archive_application_request=archive_application_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Application",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def unarchive_application_without_preload_content(
        self,
        archive_application_request: ArchiveApplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """unarchive_application

        Unarchive application.

        :param archive_application_request: (required)
        :type archive_application_request: ArchiveApplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._unarchive_application_serialize(
            archive_application_request=archive_application_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Application",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _unarchive_application_serialize(
        self,
        archive_application_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if archive_application_request is not None:
            _body_params = archive_application_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/UnarchiveApplication',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def unarchive_wave(
        self,
        archive_wave_request: ArchiveWaveRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Wave:
        """unarchive_wave

        Unarchive wave.

        :param archive_wave_request: (required)
        :type archive_wave_request: ArchiveWaveRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._unarchive_wave_serialize(
            archive_wave_request=archive_wave_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Wave",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def unarchive_wave_with_http_info(
        self,
        archive_wave_request: ArchiveWaveRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Wave]:
        """unarchive_wave

        Unarchive wave.

        :param archive_wave_request: (required)
        :type archive_wave_request: ArchiveWaveRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._unarchive_wave_serialize(
            archive_wave_request=archive_wave_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Wave",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def unarchive_wave_without_preload_content(
        self,
        archive_wave_request: ArchiveWaveRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """unarchive_wave

        Unarchive wave.

        :param archive_wave_request: (required)
        :type archive_wave_request: ArchiveWaveRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._unarchive_wave_serialize(
            archive_wave_request=archive_wave_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Wave",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _unarchive_wave_serialize(
        self,
        archive_wave_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if archive_wave_request is not None:
            _body_params = archive_wave_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/UnarchiveWave',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def untag_resource(
        self,
        resource_arn: Annotated[str, Field(min_length=20, strict=True, max_length=2048, description="Untag resource by ARN.")],
        tag_keys: Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=256)]], Field(description="Untag resource by Keys.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """untag_resource

        Deletes the specified set of tags from the specified set of Application Migration Service resources.

        :param resource_arn: Untag resource by ARN. (required)
        :type resource_arn: str
        :param tag_keys: Untag resource by Keys. (required)
        :type tag_keys: List[str]
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._untag_resource_serialize(
            resource_arn=resource_arn,
            tag_keys=tag_keys,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def untag_resource_with_http_info(
        self,
        resource_arn: Annotated[str, Field(min_length=20, strict=True, max_length=2048, description="Untag resource by ARN.")],
        tag_keys: Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=256)]], Field(description="Untag resource by Keys.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """untag_resource

        Deletes the specified set of tags from the specified set of Application Migration Service resources.

        :param resource_arn: Untag resource by ARN. (required)
        :type resource_arn: str
        :param tag_keys: Untag resource by Keys. (required)
        :type tag_keys: List[str]
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._untag_resource_serialize(
            resource_arn=resource_arn,
            tag_keys=tag_keys,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def untag_resource_without_preload_content(
        self,
        resource_arn: Annotated[str, Field(min_length=20, strict=True, max_length=2048, description="Untag resource by ARN.")],
        tag_keys: Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=256)]], Field(description="Untag resource by Keys.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """untag_resource

        Deletes the specified set of tags from the specified set of Application Migration Service resources.

        :param resource_arn: Untag resource by ARN. (required)
        :type resource_arn: str
        :param tag_keys: Untag resource by Keys. (required)
        :type tag_keys: List[str]
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._untag_resource_serialize(
            resource_arn=resource_arn,
            tag_keys=tag_keys,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _untag_resource_serialize(
        self,
        resource_arn,
        tag_keys,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tagKeys': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_arn is not None:
            _path_params['resourceArn'] = resource_arn
        # process the query parameters
        if tag_keys is not None:
            
            _query_params.append(('tagKeys', tag_keys))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/tags/{resourceArn}#tagKeys',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_application(
        self,
        update_application_request: UpdateApplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Application:
        """update_application

        Update application.

        :param update_application_request: (required)
        :type update_application_request: UpdateApplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_application_serialize(
            update_application_request=update_application_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Application",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_application_with_http_info(
        self,
        update_application_request: UpdateApplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Application]:
        """update_application

        Update application.

        :param update_application_request: (required)
        :type update_application_request: UpdateApplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_application_serialize(
            update_application_request=update_application_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Application",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_application_without_preload_content(
        self,
        update_application_request: UpdateApplicationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_application

        Update application.

        :param update_application_request: (required)
        :type update_application_request: UpdateApplicationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_application_serialize(
            update_application_request=update_application_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Application",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_application_serialize(
        self,
        update_application_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_application_request is not None:
            _body_params = update_application_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/UpdateApplication',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_launch_configuration(
        self,
        update_launch_configuration_request: UpdateLaunchConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LaunchConfiguration:
        """update_launch_configuration

        Updates multiple LaunchConfigurations by Source Server ID.

        :param update_launch_configuration_request: (required)
        :type update_launch_configuration_request: UpdateLaunchConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_launch_configuration_serialize(
            update_launch_configuration_request=update_launch_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LaunchConfiguration",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_launch_configuration_with_http_info(
        self,
        update_launch_configuration_request: UpdateLaunchConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LaunchConfiguration]:
        """update_launch_configuration

        Updates multiple LaunchConfigurations by Source Server ID.

        :param update_launch_configuration_request: (required)
        :type update_launch_configuration_request: UpdateLaunchConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_launch_configuration_serialize(
            update_launch_configuration_request=update_launch_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LaunchConfiguration",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_launch_configuration_without_preload_content(
        self,
        update_launch_configuration_request: UpdateLaunchConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_launch_configuration

        Updates multiple LaunchConfigurations by Source Server ID.

        :param update_launch_configuration_request: (required)
        :type update_launch_configuration_request: UpdateLaunchConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_launch_configuration_serialize(
            update_launch_configuration_request=update_launch_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LaunchConfiguration",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_launch_configuration_serialize(
        self,
        update_launch_configuration_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_launch_configuration_request is not None:
            _body_params = update_launch_configuration_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/UpdateLaunchConfiguration',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_launch_configuration_template(
        self,
        update_launch_configuration_template_request: UpdateLaunchConfigurationTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> LaunchConfigurationTemplate:
        """update_launch_configuration_template

        Updates an existing Launch Configuration Template by ID.

        :param update_launch_configuration_template_request: (required)
        :type update_launch_configuration_template_request: UpdateLaunchConfigurationTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_launch_configuration_template_serialize(
            update_launch_configuration_template_request=update_launch_configuration_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LaunchConfigurationTemplate",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_launch_configuration_template_with_http_info(
        self,
        update_launch_configuration_template_request: UpdateLaunchConfigurationTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[LaunchConfigurationTemplate]:
        """update_launch_configuration_template

        Updates an existing Launch Configuration Template by ID.

        :param update_launch_configuration_template_request: (required)
        :type update_launch_configuration_template_request: UpdateLaunchConfigurationTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_launch_configuration_template_serialize(
            update_launch_configuration_template_request=update_launch_configuration_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LaunchConfigurationTemplate",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_launch_configuration_template_without_preload_content(
        self,
        update_launch_configuration_template_request: UpdateLaunchConfigurationTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_launch_configuration_template

        Updates an existing Launch Configuration Template by ID.

        :param update_launch_configuration_template_request: (required)
        :type update_launch_configuration_template_request: UpdateLaunchConfigurationTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_launch_configuration_template_serialize(
            update_launch_configuration_template_request=update_launch_configuration_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "LaunchConfigurationTemplate",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_launch_configuration_template_serialize(
        self,
        update_launch_configuration_template_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_launch_configuration_template_request is not None:
            _body_params = update_launch_configuration_template_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/UpdateLaunchConfigurationTemplate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_replication_configuration(
        self,
        update_replication_configuration_request: UpdateReplicationConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReplicationConfiguration:
        """update_replication_configuration

        Allows you to update multiple ReplicationConfigurations by Source Server ID.

        :param update_replication_configuration_request: (required)
        :type update_replication_configuration_request: UpdateReplicationConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_replication_configuration_serialize(
            update_replication_configuration_request=update_replication_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReplicationConfiguration",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_replication_configuration_with_http_info(
        self,
        update_replication_configuration_request: UpdateReplicationConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReplicationConfiguration]:
        """update_replication_configuration

        Allows you to update multiple ReplicationConfigurations by Source Server ID.

        :param update_replication_configuration_request: (required)
        :type update_replication_configuration_request: UpdateReplicationConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_replication_configuration_serialize(
            update_replication_configuration_request=update_replication_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReplicationConfiguration",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_replication_configuration_without_preload_content(
        self,
        update_replication_configuration_request: UpdateReplicationConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_replication_configuration

        Allows you to update multiple ReplicationConfigurations by Source Server ID.

        :param update_replication_configuration_request: (required)
        :type update_replication_configuration_request: UpdateReplicationConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_replication_configuration_serialize(
            update_replication_configuration_request=update_replication_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReplicationConfiguration",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_replication_configuration_serialize(
        self,
        update_replication_configuration_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_replication_configuration_request is not None:
            _body_params = update_replication_configuration_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/UpdateReplicationConfiguration',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_replication_configuration_template(
        self,
        update_replication_configuration_template_request: UpdateReplicationConfigurationTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ReplicationConfigurationTemplate:
        """update_replication_configuration_template

        Updates multiple ReplicationConfigurationTemplates by ID.

        :param update_replication_configuration_template_request: (required)
        :type update_replication_configuration_template_request: UpdateReplicationConfigurationTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_replication_configuration_template_serialize(
            update_replication_configuration_template_request=update_replication_configuration_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReplicationConfigurationTemplate",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_replication_configuration_template_with_http_info(
        self,
        update_replication_configuration_template_request: UpdateReplicationConfigurationTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ReplicationConfigurationTemplate]:
        """update_replication_configuration_template

        Updates multiple ReplicationConfigurationTemplates by ID.

        :param update_replication_configuration_template_request: (required)
        :type update_replication_configuration_template_request: UpdateReplicationConfigurationTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_replication_configuration_template_serialize(
            update_replication_configuration_template_request=update_replication_configuration_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReplicationConfigurationTemplate",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_replication_configuration_template_without_preload_content(
        self,
        update_replication_configuration_template_request: UpdateReplicationConfigurationTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_replication_configuration_template

        Updates multiple ReplicationConfigurationTemplates by ID.

        :param update_replication_configuration_template_request: (required)
        :type update_replication_configuration_template_request: UpdateReplicationConfigurationTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_replication_configuration_template_serialize(
            update_replication_configuration_template_request=update_replication_configuration_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ReplicationConfigurationTemplate",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_replication_configuration_template_serialize(
        self,
        update_replication_configuration_template_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_replication_configuration_template_request is not None:
            _body_params = update_replication_configuration_template_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/UpdateReplicationConfigurationTemplate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_source_server_replication_type(
        self,
        update_source_server_replication_type_request: UpdateSourceServerReplicationTypeRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SourceServer:
        """update_source_server_replication_type

        Allows you to change between the AGENT_BASED replication type and the SNAPSHOT_SHIPPING replication type.

        :param update_source_server_replication_type_request: (required)
        :type update_source_server_replication_type_request: UpdateSourceServerReplicationTypeRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_source_server_replication_type_serialize(
            update_source_server_replication_type_request=update_source_server_replication_type_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_source_server_replication_type_with_http_info(
        self,
        update_source_server_replication_type_request: UpdateSourceServerReplicationTypeRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SourceServer]:
        """update_source_server_replication_type

        Allows you to change between the AGENT_BASED replication type and the SNAPSHOT_SHIPPING replication type.

        :param update_source_server_replication_type_request: (required)
        :type update_source_server_replication_type_request: UpdateSourceServerReplicationTypeRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_source_server_replication_type_serialize(
            update_source_server_replication_type_request=update_source_server_replication_type_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_source_server_replication_type_without_preload_content(
        self,
        update_source_server_replication_type_request: UpdateSourceServerReplicationTypeRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_source_server_replication_type

        Allows you to change between the AGENT_BASED replication type and the SNAPSHOT_SHIPPING replication type.

        :param update_source_server_replication_type_request: (required)
        :type update_source_server_replication_type_request: UpdateSourceServerReplicationTypeRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_source_server_replication_type_serialize(
            update_source_server_replication_type_request=update_source_server_replication_type_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SourceServer",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_source_server_replication_type_serialize(
        self,
        update_source_server_replication_type_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_source_server_replication_type_request is not None:
            _body_params = update_source_server_replication_type_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/UpdateSourceServerReplicationType',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_wave(
        self,
        update_wave_request: UpdateWaveRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Wave:
        """update_wave

        Update wave.

        :param update_wave_request: (required)
        :type update_wave_request: UpdateWaveRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_wave_serialize(
            update_wave_request=update_wave_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Wave",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_wave_with_http_info(
        self,
        update_wave_request: UpdateWaveRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Wave]:
        """update_wave

        Update wave.

        :param update_wave_request: (required)
        :type update_wave_request: UpdateWaveRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_wave_serialize(
            update_wave_request=update_wave_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Wave",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_wave_without_preload_content(
        self,
        update_wave_request: UpdateWaveRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_wave

        Update wave.

        :param update_wave_request: (required)
        :type update_wave_request: UpdateWaveRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_wave_serialize(
            update_wave_request=update_wave_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Wave",
            '480': "object",
            '481': "object",
            '482': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_wave_serialize(
        self,
        update_wave_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_wave_request is not None:
            _body_params = update_wave_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/UpdateWave',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


