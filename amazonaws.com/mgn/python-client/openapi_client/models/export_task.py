# coding: utf-8

"""
    Application Migration Service

    The Application Migration Service service.

    The version of the OpenAPI document: 2020-02-26
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.export_task_summary import ExportTaskSummary
from typing import Optional, Set
from typing_extensions import Self

class ExportTask(BaseModel):
    """
    Export task.
    """ # noqa: E501
    creation_date_time: Optional[Any] = Field(default=None, alias="creationDateTime")
    end_date_time: Optional[Any] = Field(default=None, alias="endDateTime")
    export_id: Optional[Any] = Field(default=None, alias="exportID")
    progress_percentage: Optional[Any] = Field(default=None, alias="progressPercentage")
    s3_bucket: Optional[Any] = Field(default=None, alias="s3Bucket")
    s3_bucket_owner: Optional[Any] = Field(default=None, alias="s3BucketOwner")
    s3_key: Optional[Any] = Field(default=None, alias="s3Key")
    status: Optional[Any] = None
    summary: Optional[ExportTaskSummary] = None
    __properties: ClassVar[List[str]] = ["creationDateTime", "endDateTime", "exportID", "progressPercentage", "s3Bucket", "s3BucketOwner", "s3Key", "status", "summary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationDateTime": obj.get("creationDateTime"),
            "endDateTime": obj.get("endDateTime"),
            "exportID": obj.get("exportID"),
            "progressPercentage": obj.get("progressPercentage"),
            "s3Bucket": obj.get("s3Bucket"),
            "s3BucketOwner": obj.get("s3BucketOwner"),
            "s3Key": obj.get("s3Key"),
            "status": ExportStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "summary": ExportTaskSummary.from_dict(obj["summary"]) if obj.get("summary") is not None else None
        })
        return _obj


