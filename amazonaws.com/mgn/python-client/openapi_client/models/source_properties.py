# coding: utf-8

"""
    Application Migration Service

    The Application Migration Service service.

    The version of the OpenAPI document: 2020-02-26
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.source_properties_identification_hints import SourcePropertiesIdentificationHints
from openapi_client.models.source_properties_os import SourcePropertiesOs
from typing import Optional, Set
from typing_extensions import Self

class SourceProperties(BaseModel):
    """
    Source server properties.
    """ # noqa: E501
    cpus: Optional[Any] = None
    disks: Optional[Any] = None
    identification_hints: Optional[SourcePropertiesIdentificationHints] = Field(default=None, alias="identificationHints")
    last_updated_date_time: Optional[Any] = Field(default=None, alias="lastUpdatedDateTime")
    network_interfaces: Optional[Any] = Field(default=None, alias="networkInterfaces")
    os: Optional[SourcePropertiesOs] = None
    ram_bytes: Optional[Any] = Field(default=None, alias="ramBytes")
    recommended_instance_type: Optional[Any] = Field(default=None, alias="recommendedInstanceType")
    __properties: ClassVar[List[str]] = ["cpus", "disks", "identificationHints", "lastUpdatedDateTime", "networkInterfaces", "os", "ramBytes", "recommendedInstanceType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SourceProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of identification_hints
        if self.identification_hints:
            _dict['identificationHints'] = self.identification_hints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of os
        if self.os:
            _dict['os'] = self.os.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SourceProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cpus": obj.get("cpus"),
            "disks": obj.get("disks"),
            "identificationHints": SourcePropertiesIdentificationHints.from_dict(obj["identificationHints"]) if obj.get("identificationHints") is not None else None,
            "lastUpdatedDateTime": obj.get("lastUpdatedDateTime"),
            "networkInterfaces": obj.get("networkInterfaces"),
            "os": SourcePropertiesOs.from_dict(obj["os"]) if obj.get("os") is not None else None,
            "ramBytes": obj.get("ramBytes"),
            "recommendedInstanceType": obj.get("recommendedInstanceType")
        })
        return _obj


