# coding: utf-8

"""
    Application Migration Service

    The Application Migration Service service.

    The version of the OpenAPI document: 2020-02-26
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.ssm_external_parameter import SsmExternalParameter
from openapi_client.models.ssm_parameter_store_parameter import SsmParameterStoreParameter
from typing import Optional, Set
from typing_extensions import Self

class PutSourceServerActionRequest(BaseModel):
    """
    PutSourceServerActionRequest
    """ # noqa: E501
    action_id: Annotated[str, Field(min_length=1, strict=True, max_length=64)] = Field(description="Source server post migration custom action ID.", alias="actionID")
    action_name: Annotated[str, Field(min_length=1, strict=True, max_length=256)] = Field(description="Source server post migration custom action name.", alias="actionName")
    active: Optional[StrictBool] = Field(default=None, description="Source server post migration custom action active status.")
    category: Optional[StrictStr] = Field(default=None, description="Source server post migration custom action category.")
    description: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=256)]] = Field(default=None, description="Source server post migration custom action description.")
    document_identifier: Annotated[str, Field(min_length=0, strict=True, max_length=256)] = Field(description="Source server post migration custom action document identifier.", alias="documentIdentifier")
    document_version: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Source server post migration custom action document version.", alias="documentVersion")
    external_parameters: Optional[Dict[str, SsmExternalParameter]] = Field(default=None, description="Source server post migration custom action external parameters.", alias="externalParameters")
    must_succeed_for_cutover: Optional[StrictBool] = Field(default=None, description="Source server post migration custom action must succeed for cutover.", alias="mustSucceedForCutover")
    order: Annotated[int, Field(le=10000, strict=True, ge=1001)] = Field(description="Source server post migration custom action order.")
    parameters: Optional[Dict[str, Annotated[List[SsmParameterStoreParameter], Field(min_length=0, max_length=10)]]] = Field(default=None, description="Source server post migration custom action parameters.")
    source_server_id: Annotated[str, Field(min_length=19, strict=True, max_length=19)] = Field(description="Source server ID.", alias="sourceServerID")
    timeout_seconds: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="Source server post migration custom action timeout in seconds.", alias="timeoutSeconds")
    __properties: ClassVar[List[str]] = ["actionID", "actionName", "active", "category", "description", "documentIdentifier", "documentVersion", "externalParameters", "mustSucceedForCutover", "order", "parameters", "sourceServerID", "timeoutSeconds"]

    @field_validator('action_id')
    def action_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"[0-9a-zA-Z]$", value):
            raise ValueError(r"must validate the regular expression /[0-9a-zA-Z]$/")
        return value

    @field_validator('action_name')
    def action_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[^\s\x00]( *[^\s\x00])*$", value):
            raise ValueError(r"must validate the regular expression /^[^\s\x00]( *[^\s\x00])*$/")
        return value

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DISASTER_RECOVERY', 'OPERATING_SYSTEM', 'LICENSE_AND_SUBSCRIPTION', 'VALIDATION', 'OBSERVABILITY', 'SECURITY', 'NETWORKING', 'CONFIGURATION', 'BACKUP', 'OTHER']):
            raise ValueError("must be one of enum values ('DISASTER_RECOVERY', 'OPERATING_SYSTEM', 'LICENSE_AND_SUBSCRIPTION', 'VALIDATION', 'OBSERVABILITY', 'SECURITY', 'NETWORKING', 'CONFIGURATION', 'BACKUP', 'OTHER')")
        return value

    @field_validator('description')
    def description_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9a-zA-Z ():\/.,\'-_#*; ]*$", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-zA-Z ():\/.,'-_#*; ]*$/")
        return value

    @field_validator('document_version')
    def document_version_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(\$DEFAULT|\$LATEST|[0-9]+)$", value):
            raise ValueError(r"must validate the regular expression /^(\$DEFAULT|\$LATEST|[0-9]+)$/")
        return value

    @field_validator('source_server_id')
    def source_server_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^s-[0-9a-zA-Z]{17}$", value):
            raise ValueError(r"must validate the regular expression /^s-[0-9a-zA-Z]{17}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PutSourceServerActionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in external_parameters (dict)
        _field_dict = {}
        if self.external_parameters:
            for _key_external_parameters in self.external_parameters:
                if self.external_parameters[_key_external_parameters]:
                    _field_dict[_key_external_parameters] = self.external_parameters[_key_external_parameters].to_dict()
            _dict['externalParameters'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in parameters (dict of array)
        _field_dict_of_array = {}
        if self.parameters:
            for _key_parameters in self.parameters:
                if self.parameters[_key_parameters] is not None:
                    _field_dict_of_array[_key_parameters] = [
                        _item.to_dict() for _item in self.parameters[_key_parameters]
                    ]
            _dict['parameters'] = _field_dict_of_array
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PutSourceServerActionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionID": obj.get("actionID"),
            "actionName": obj.get("actionName"),
            "active": obj.get("active"),
            "category": obj.get("category"),
            "description": obj.get("description"),
            "documentIdentifier": obj.get("documentIdentifier"),
            "documentVersion": obj.get("documentVersion"),
            "externalParameters": dict(
                (_k, SsmExternalParameter.from_dict(_v))
                for _k, _v in obj["externalParameters"].items()
            )
            if obj.get("externalParameters") is not None
            else None,
            "mustSucceedForCutover": obj.get("mustSucceedForCutover"),
            "order": obj.get("order"),
            "parameters": dict(
                (_k,
                        [SsmParameterStoreParameter.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("parameters", {}).items()
            ),
            "sourceServerID": obj.get("sourceServerID"),
            "timeoutSeconds": obj.get("timeoutSeconds")
        })
        return _obj


