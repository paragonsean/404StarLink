# coding: utf-8

"""
    Application Migration Service

    The Application Migration Service service.

    The version of the OpenAPI document: 2020-02-26
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_replication_info_data_replication_error import DataReplicationInfoDataReplicationError
from openapi_client.models.data_replication_info_data_replication_initiation import DataReplicationInfoDataReplicationInitiation
from typing import Optional, Set
from typing_extensions import Self

class DataReplicationInfo(BaseModel):
    """
    Request data replication info.
    """ # noqa: E501
    data_replication_error: Optional[DataReplicationInfoDataReplicationError] = Field(default=None, alias="dataReplicationError")
    data_replication_initiation: Optional[DataReplicationInfoDataReplicationInitiation] = Field(default=None, alias="dataReplicationInitiation")
    data_replication_state: Optional[Any] = Field(default=None, alias="dataReplicationState")
    eta_date_time: Optional[Any] = Field(default=None, alias="etaDateTime")
    lag_duration: Optional[Any] = Field(default=None, alias="lagDuration")
    last_snapshot_date_time: Optional[Any] = Field(default=None, alias="lastSnapshotDateTime")
    replicated_disks: Optional[Any] = Field(default=None, alias="replicatedDisks")
    __properties: ClassVar[List[str]] = ["dataReplicationError", "dataReplicationInitiation", "dataReplicationState", "etaDateTime", "lagDuration", "lastSnapshotDateTime", "replicatedDisks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataReplicationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_replication_error
        if self.data_replication_error:
            _dict['dataReplicationError'] = self.data_replication_error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_replication_initiation
        if self.data_replication_initiation:
            _dict['dataReplicationInitiation'] = self.data_replication_initiation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_replication_state
        if self.data_replication_state:
            _dict['dataReplicationState'] = self.data_replication_state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataReplicationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataReplicationError": DataReplicationInfoDataReplicationError.from_dict(obj["dataReplicationError"]) if obj.get("dataReplicationError") is not None else None,
            "dataReplicationInitiation": DataReplicationInfoDataReplicationInitiation.from_dict(obj["dataReplicationInitiation"]) if obj.get("dataReplicationInitiation") is not None else None,
            "dataReplicationState": DataReplicationState.from_dict(obj["dataReplicationState"]) if obj.get("dataReplicationState") is not None else None,
            "etaDateTime": obj.get("etaDateTime"),
            "lagDuration": obj.get("lagDuration"),
            "lastSnapshotDateTime": obj.get("lastSnapshotDateTime"),
            "replicatedDisks": obj.get("replicatedDisks")
        })
        return _obj


