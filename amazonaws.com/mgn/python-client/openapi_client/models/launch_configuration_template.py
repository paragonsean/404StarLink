# coding: utf-8

"""
    Application Migration Service

    The Application Migration Service service.

    The version of the OpenAPI document: 2020-02-26
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.launch_configuration_template_large_volume_conf import LaunchConfigurationTemplateLargeVolumeConf
from openapi_client.models.launch_configuration_template_post_launch_actions import LaunchConfigurationTemplatePostLaunchActions
from openapi_client.models.launch_configuration_template_small_volume_conf import LaunchConfigurationTemplateSmallVolumeConf
from openapi_client.models.licensing import Licensing
from typing import Optional, Set
from typing_extensions import Self

class LaunchConfigurationTemplate(BaseModel):
    """
    LaunchConfigurationTemplate
    """ # noqa: E501
    arn: Optional[Any] = None
    associate_public_ip_address: Optional[Any] = Field(default=None, alias="associatePublicIpAddress")
    boot_mode: Optional[Any] = Field(default=None, alias="bootMode")
    copy_private_ip: Optional[Any] = Field(default=None, alias="copyPrivateIp")
    copy_tags: Optional[Any] = Field(default=None, alias="copyTags")
    ec2_launch_template_id: Optional[Any] = Field(default=None, alias="ec2LaunchTemplateID")
    enable_map_auto_tagging: Optional[Any] = Field(default=None, alias="enableMapAutoTagging")
    large_volume_conf: Optional[LaunchConfigurationTemplateLargeVolumeConf] = Field(default=None, alias="largeVolumeConf")
    launch_configuration_template_id: Any = Field(alias="launchConfigurationTemplateID")
    launch_disposition: Optional[Any] = Field(default=None, alias="launchDisposition")
    licensing: Optional[Licensing] = None
    map_auto_tagging_mpe_id: Optional[Any] = Field(default=None, alias="mapAutoTaggingMpeID")
    post_launch_actions: Optional[LaunchConfigurationTemplatePostLaunchActions] = Field(default=None, alias="postLaunchActions")
    small_volume_conf: Optional[LaunchConfigurationTemplateSmallVolumeConf] = Field(default=None, alias="smallVolumeConf")
    small_volume_max_size: Optional[Any] = Field(default=None, alias="smallVolumeMaxSize")
    tags: Optional[Any] = None
    target_instance_type_right_sizing_method: Optional[Any] = Field(default=None, alias="targetInstanceTypeRightSizingMethod")
    __properties: ClassVar[List[str]] = ["arn", "associatePublicIpAddress", "bootMode", "copyPrivateIp", "copyTags", "ec2LaunchTemplateID", "enableMapAutoTagging", "largeVolumeConf", "launchConfigurationTemplateID", "launchDisposition", "licensing", "mapAutoTaggingMpeID", "postLaunchActions", "smallVolumeConf", "smallVolumeMaxSize", "tags", "targetInstanceTypeRightSizingMethod"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LaunchConfigurationTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of boot_mode
        if self.boot_mode:
            _dict['bootMode'] = self.boot_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of large_volume_conf
        if self.large_volume_conf:
            _dict['largeVolumeConf'] = self.large_volume_conf.to_dict()
        # override the default output from pydantic by calling `to_dict()` of launch_disposition
        if self.launch_disposition:
            _dict['launchDisposition'] = self.launch_disposition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of licensing
        if self.licensing:
            _dict['licensing'] = self.licensing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of post_launch_actions
        if self.post_launch_actions:
            _dict['postLaunchActions'] = self.post_launch_actions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of small_volume_conf
        if self.small_volume_conf:
            _dict['smallVolumeConf'] = self.small_volume_conf.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_instance_type_right_sizing_method
        if self.target_instance_type_right_sizing_method:
            _dict['targetInstanceTypeRightSizingMethod'] = self.target_instance_type_right_sizing_method.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LaunchConfigurationTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arn": obj.get("arn"),
            "associatePublicIpAddress": obj.get("associatePublicIpAddress"),
            "bootMode": BootMode.from_dict(obj["bootMode"]) if obj.get("bootMode") is not None else None,
            "copyPrivateIp": obj.get("copyPrivateIp"),
            "copyTags": obj.get("copyTags"),
            "ec2LaunchTemplateID": obj.get("ec2LaunchTemplateID"),
            "enableMapAutoTagging": obj.get("enableMapAutoTagging"),
            "largeVolumeConf": LaunchConfigurationTemplateLargeVolumeConf.from_dict(obj["largeVolumeConf"]) if obj.get("largeVolumeConf") is not None else None,
            "launchConfigurationTemplateID": obj.get("launchConfigurationTemplateID"),
            "launchDisposition": LaunchDisposition.from_dict(obj["launchDisposition"]) if obj.get("launchDisposition") is not None else None,
            "licensing": Licensing.from_dict(obj["licensing"]) if obj.get("licensing") is not None else None,
            "mapAutoTaggingMpeID": obj.get("mapAutoTaggingMpeID"),
            "postLaunchActions": LaunchConfigurationTemplatePostLaunchActions.from_dict(obj["postLaunchActions"]) if obj.get("postLaunchActions") is not None else None,
            "smallVolumeConf": LaunchConfigurationTemplateSmallVolumeConf.from_dict(obj["smallVolumeConf"]) if obj.get("smallVolumeConf") is not None else None,
            "smallVolumeMaxSize": obj.get("smallVolumeMaxSize"),
            "tags": obj.get("tags"),
            "targetInstanceTypeRightSizingMethod": TargetInstanceTypeRightSizingMethod.from_dict(obj["targetInstanceTypeRightSizingMethod"]) if obj.get("targetInstanceTypeRightSizingMethod") is not None else None
        })
        return _obj


