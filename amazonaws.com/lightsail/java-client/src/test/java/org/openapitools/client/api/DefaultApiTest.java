/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AllocateStaticIpRequest;
import org.openapitools.client.model.AllocateStaticIpResult;
import org.openapitools.client.model.AttachCertificateToDistributionRequest;
import org.openapitools.client.model.AttachCertificateToDistributionResult;
import org.openapitools.client.model.AttachDiskRequest;
import org.openapitools.client.model.AttachDiskResult;
import org.openapitools.client.model.AttachInstancesToLoadBalancerRequest;
import org.openapitools.client.model.AttachInstancesToLoadBalancerResult;
import org.openapitools.client.model.AttachLoadBalancerTlsCertificateRequest;
import org.openapitools.client.model.AttachLoadBalancerTlsCertificateResult;
import org.openapitools.client.model.AttachStaticIpRequest;
import org.openapitools.client.model.AttachStaticIpResult;
import org.openapitools.client.model.CloseInstancePublicPortsRequest;
import org.openapitools.client.model.CloseInstancePublicPortsResult;
import org.openapitools.client.model.ContainerServicesListResult;
import org.openapitools.client.model.CopySnapshotRequest;
import org.openapitools.client.model.CopySnapshotResult;
import org.openapitools.client.model.CreateBucketAccessKeyRequest;
import org.openapitools.client.model.CreateBucketAccessKeyResult;
import org.openapitools.client.model.CreateBucketRequest;
import org.openapitools.client.model.CreateBucketResult;
import org.openapitools.client.model.CreateCertificateRequest;
import org.openapitools.client.model.CreateCertificateResult;
import org.openapitools.client.model.CreateCloudFormationStackRequest;
import org.openapitools.client.model.CreateCloudFormationStackResult;
import org.openapitools.client.model.CreateContactMethodRequest;
import org.openapitools.client.model.CreateContactMethodResult;
import org.openapitools.client.model.CreateContainerServiceDeploymentRequest;
import org.openapitools.client.model.CreateContainerServiceDeploymentResult;
import org.openapitools.client.model.CreateContainerServiceRegistryLoginResult;
import org.openapitools.client.model.CreateContainerServiceRequest;
import org.openapitools.client.model.CreateContainerServiceResult;
import org.openapitools.client.model.CreateDiskFromSnapshotRequest;
import org.openapitools.client.model.CreateDiskFromSnapshotResult;
import org.openapitools.client.model.CreateDiskRequest;
import org.openapitools.client.model.CreateDiskResult;
import org.openapitools.client.model.CreateDiskSnapshotRequest;
import org.openapitools.client.model.CreateDiskSnapshotResult;
import org.openapitools.client.model.CreateDistributionRequest;
import org.openapitools.client.model.CreateDistributionResult;
import org.openapitools.client.model.CreateDomainEntryRequest;
import org.openapitools.client.model.CreateDomainEntryResult;
import org.openapitools.client.model.CreateDomainRequest;
import org.openapitools.client.model.CreateDomainResult;
import org.openapitools.client.model.CreateGUISessionAccessDetailsRequest;
import org.openapitools.client.model.CreateGUISessionAccessDetailsResult;
import org.openapitools.client.model.CreateInstanceSnapshotRequest;
import org.openapitools.client.model.CreateInstanceSnapshotResult;
import org.openapitools.client.model.CreateInstancesFromSnapshotRequest;
import org.openapitools.client.model.CreateInstancesFromSnapshotResult;
import org.openapitools.client.model.CreateInstancesRequest;
import org.openapitools.client.model.CreateInstancesResult;
import org.openapitools.client.model.CreateKeyPairRequest;
import org.openapitools.client.model.CreateKeyPairResult;
import org.openapitools.client.model.CreateLoadBalancerRequest;
import org.openapitools.client.model.CreateLoadBalancerResult;
import org.openapitools.client.model.CreateLoadBalancerTlsCertificateRequest;
import org.openapitools.client.model.CreateLoadBalancerTlsCertificateResult;
import org.openapitools.client.model.CreateRelationalDatabaseFromSnapshotRequest;
import org.openapitools.client.model.CreateRelationalDatabaseFromSnapshotResult;
import org.openapitools.client.model.CreateRelationalDatabaseRequest;
import org.openapitools.client.model.CreateRelationalDatabaseResult;
import org.openapitools.client.model.CreateRelationalDatabaseSnapshotRequest;
import org.openapitools.client.model.CreateRelationalDatabaseSnapshotResult;
import org.openapitools.client.model.DeleteAlarmRequest;
import org.openapitools.client.model.DeleteAlarmResult;
import org.openapitools.client.model.DeleteAutoSnapshotRequest;
import org.openapitools.client.model.DeleteAutoSnapshotResult;
import org.openapitools.client.model.DeleteBucketAccessKeyRequest;
import org.openapitools.client.model.DeleteBucketAccessKeyResult;
import org.openapitools.client.model.DeleteBucketRequest;
import org.openapitools.client.model.DeleteBucketResult;
import org.openapitools.client.model.DeleteCertificateRequest;
import org.openapitools.client.model.DeleteCertificateResult;
import org.openapitools.client.model.DeleteContactMethodRequest;
import org.openapitools.client.model.DeleteContactMethodResult;
import org.openapitools.client.model.DeleteContainerImageRequest;
import org.openapitools.client.model.DeleteContainerServiceRequest;
import org.openapitools.client.model.DeleteDiskRequest;
import org.openapitools.client.model.DeleteDiskResult;
import org.openapitools.client.model.DeleteDiskSnapshotRequest;
import org.openapitools.client.model.DeleteDiskSnapshotResult;
import org.openapitools.client.model.DeleteDistributionRequest;
import org.openapitools.client.model.DeleteDistributionResult;
import org.openapitools.client.model.DeleteDomainEntryRequest;
import org.openapitools.client.model.DeleteDomainEntryResult;
import org.openapitools.client.model.DeleteDomainRequest;
import org.openapitools.client.model.DeleteDomainResult;
import org.openapitools.client.model.DeleteInstanceRequest;
import org.openapitools.client.model.DeleteInstanceResult;
import org.openapitools.client.model.DeleteInstanceSnapshotRequest;
import org.openapitools.client.model.DeleteInstanceSnapshotResult;
import org.openapitools.client.model.DeleteKeyPairRequest;
import org.openapitools.client.model.DeleteKeyPairResult;
import org.openapitools.client.model.DeleteKnownHostKeysRequest;
import org.openapitools.client.model.DeleteKnownHostKeysResult;
import org.openapitools.client.model.DeleteLoadBalancerRequest;
import org.openapitools.client.model.DeleteLoadBalancerResult;
import org.openapitools.client.model.DeleteLoadBalancerTlsCertificateRequest;
import org.openapitools.client.model.DeleteLoadBalancerTlsCertificateResult;
import org.openapitools.client.model.DeleteRelationalDatabaseRequest;
import org.openapitools.client.model.DeleteRelationalDatabaseResult;
import org.openapitools.client.model.DeleteRelationalDatabaseSnapshotRequest;
import org.openapitools.client.model.DeleteRelationalDatabaseSnapshotResult;
import org.openapitools.client.model.DetachCertificateFromDistributionRequest;
import org.openapitools.client.model.DetachCertificateFromDistributionResult;
import org.openapitools.client.model.DetachDiskRequest;
import org.openapitools.client.model.DetachDiskResult;
import org.openapitools.client.model.DetachInstancesFromLoadBalancerRequest;
import org.openapitools.client.model.DetachInstancesFromLoadBalancerResult;
import org.openapitools.client.model.DetachStaticIpRequest;
import org.openapitools.client.model.DetachStaticIpResult;
import org.openapitools.client.model.DisableAddOnRequest;
import org.openapitools.client.model.DisableAddOnResult;
import org.openapitools.client.model.DownloadDefaultKeyPairResult;
import org.openapitools.client.model.EnableAddOnRequest;
import org.openapitools.client.model.EnableAddOnResult;
import org.openapitools.client.model.ExportSnapshotRequest;
import org.openapitools.client.model.ExportSnapshotResult;
import org.openapitools.client.model.GetActiveNamesRequest;
import org.openapitools.client.model.GetActiveNamesResult;
import org.openapitools.client.model.GetAlarmsRequest;
import org.openapitools.client.model.GetAlarmsResult;
import org.openapitools.client.model.GetAutoSnapshotsRequest;
import org.openapitools.client.model.GetAutoSnapshotsResult;
import org.openapitools.client.model.GetBlueprintsRequest;
import org.openapitools.client.model.GetBlueprintsResult;
import org.openapitools.client.model.GetBucketAccessKeysRequest;
import org.openapitools.client.model.GetBucketAccessKeysResult;
import org.openapitools.client.model.GetBucketBundlesRequest;
import org.openapitools.client.model.GetBucketBundlesResult;
import org.openapitools.client.model.GetBucketMetricDataRequest;
import org.openapitools.client.model.GetBucketMetricDataResult;
import org.openapitools.client.model.GetBucketsRequest;
import org.openapitools.client.model.GetBucketsResult;
import org.openapitools.client.model.GetBundlesRequest;
import org.openapitools.client.model.GetBundlesResult;
import org.openapitools.client.model.GetCertificatesRequest;
import org.openapitools.client.model.GetCertificatesResult;
import org.openapitools.client.model.GetCloudFormationStackRecordsRequest;
import org.openapitools.client.model.GetCloudFormationStackRecordsResult;
import org.openapitools.client.model.GetContactMethodsRequest;
import org.openapitools.client.model.GetContactMethodsResult;
import org.openapitools.client.model.GetContainerAPIMetadataResult;
import org.openapitools.client.model.GetContainerImagesRequest;
import org.openapitools.client.model.GetContainerImagesResult;
import org.openapitools.client.model.GetContainerLogRequest;
import org.openapitools.client.model.GetContainerLogResult;
import org.openapitools.client.model.GetContainerServiceDeploymentsRequest;
import org.openapitools.client.model.GetContainerServiceDeploymentsResult;
import org.openapitools.client.model.GetContainerServiceMetricDataRequest;
import org.openapitools.client.model.GetContainerServiceMetricDataResult;
import org.openapitools.client.model.GetContainerServicePowersResult;
import org.openapitools.client.model.GetContainerServicesRequest;
import org.openapitools.client.model.GetCostEstimateRequest;
import org.openapitools.client.model.GetCostEstimateResult;
import org.openapitools.client.model.GetDiskRequest;
import org.openapitools.client.model.GetDiskResult;
import org.openapitools.client.model.GetDiskSnapshotRequest;
import org.openapitools.client.model.GetDiskSnapshotResult;
import org.openapitools.client.model.GetDiskSnapshotsRequest;
import org.openapitools.client.model.GetDiskSnapshotsResult;
import org.openapitools.client.model.GetDisksRequest;
import org.openapitools.client.model.GetDisksResult;
import org.openapitools.client.model.GetDistributionBundlesResult;
import org.openapitools.client.model.GetDistributionLatestCacheResetRequest;
import org.openapitools.client.model.GetDistributionLatestCacheResetResult;
import org.openapitools.client.model.GetDistributionMetricDataRequest;
import org.openapitools.client.model.GetDistributionMetricDataResult;
import org.openapitools.client.model.GetDistributionsRequest;
import org.openapitools.client.model.GetDistributionsResult;
import org.openapitools.client.model.GetDomainRequest;
import org.openapitools.client.model.GetDomainResult;
import org.openapitools.client.model.GetDomainsRequest;
import org.openapitools.client.model.GetDomainsResult;
import org.openapitools.client.model.GetExportSnapshotRecordsRequest;
import org.openapitools.client.model.GetExportSnapshotRecordsResult;
import org.openapitools.client.model.GetInstanceAccessDetailsRequest;
import org.openapitools.client.model.GetInstanceAccessDetailsResult;
import org.openapitools.client.model.GetInstanceMetricDataRequest;
import org.openapitools.client.model.GetInstanceMetricDataResult;
import org.openapitools.client.model.GetInstancePortStatesRequest;
import org.openapitools.client.model.GetInstancePortStatesResult;
import org.openapitools.client.model.GetInstanceRequest;
import org.openapitools.client.model.GetInstanceResult;
import org.openapitools.client.model.GetInstanceSnapshotRequest;
import org.openapitools.client.model.GetInstanceSnapshotResult;
import org.openapitools.client.model.GetInstanceSnapshotsRequest;
import org.openapitools.client.model.GetInstanceSnapshotsResult;
import org.openapitools.client.model.GetInstanceStateRequest;
import org.openapitools.client.model.GetInstanceStateResult;
import org.openapitools.client.model.GetInstancesRequest;
import org.openapitools.client.model.GetInstancesResult;
import org.openapitools.client.model.GetKeyPairRequest;
import org.openapitools.client.model.GetKeyPairResult;
import org.openapitools.client.model.GetKeyPairsRequest;
import org.openapitools.client.model.GetKeyPairsResult;
import org.openapitools.client.model.GetLoadBalancerMetricDataRequest;
import org.openapitools.client.model.GetLoadBalancerMetricDataResult;
import org.openapitools.client.model.GetLoadBalancerRequest;
import org.openapitools.client.model.GetLoadBalancerResult;
import org.openapitools.client.model.GetLoadBalancerTlsCertificatesRequest;
import org.openapitools.client.model.GetLoadBalancerTlsCertificatesResult;
import org.openapitools.client.model.GetLoadBalancerTlsPoliciesRequest;
import org.openapitools.client.model.GetLoadBalancerTlsPoliciesResult;
import org.openapitools.client.model.GetLoadBalancersRequest;
import org.openapitools.client.model.GetLoadBalancersResult;
import org.openapitools.client.model.GetOperationRequest;
import org.openapitools.client.model.GetOperationResult;
import org.openapitools.client.model.GetOperationsForResourceRequest;
import org.openapitools.client.model.GetOperationsForResourceResult;
import org.openapitools.client.model.GetOperationsRequest;
import org.openapitools.client.model.GetOperationsResult;
import org.openapitools.client.model.GetRegionsRequest;
import org.openapitools.client.model.GetRegionsResult;
import org.openapitools.client.model.GetRelationalDatabaseBlueprintsRequest;
import org.openapitools.client.model.GetRelationalDatabaseBlueprintsResult;
import org.openapitools.client.model.GetRelationalDatabaseBundlesRequest;
import org.openapitools.client.model.GetRelationalDatabaseBundlesResult;
import org.openapitools.client.model.GetRelationalDatabaseEventsRequest;
import org.openapitools.client.model.GetRelationalDatabaseEventsResult;
import org.openapitools.client.model.GetRelationalDatabaseLogEventsRequest;
import org.openapitools.client.model.GetRelationalDatabaseLogEventsResult;
import org.openapitools.client.model.GetRelationalDatabaseLogStreamsRequest;
import org.openapitools.client.model.GetRelationalDatabaseLogStreamsResult;
import org.openapitools.client.model.GetRelationalDatabaseMasterUserPasswordRequest;
import org.openapitools.client.model.GetRelationalDatabaseMasterUserPasswordResult;
import org.openapitools.client.model.GetRelationalDatabaseMetricDataRequest;
import org.openapitools.client.model.GetRelationalDatabaseMetricDataResult;
import org.openapitools.client.model.GetRelationalDatabaseParametersRequest;
import org.openapitools.client.model.GetRelationalDatabaseParametersResult;
import org.openapitools.client.model.GetRelationalDatabaseRequest;
import org.openapitools.client.model.GetRelationalDatabaseResult;
import org.openapitools.client.model.GetRelationalDatabaseSnapshotRequest;
import org.openapitools.client.model.GetRelationalDatabaseSnapshotResult;
import org.openapitools.client.model.GetRelationalDatabaseSnapshotsRequest;
import org.openapitools.client.model.GetRelationalDatabaseSnapshotsResult;
import org.openapitools.client.model.GetRelationalDatabasesRequest;
import org.openapitools.client.model.GetRelationalDatabasesResult;
import org.openapitools.client.model.GetStaticIpRequest;
import org.openapitools.client.model.GetStaticIpResult;
import org.openapitools.client.model.GetStaticIpsRequest;
import org.openapitools.client.model.GetStaticIpsResult;
import org.openapitools.client.model.ImportKeyPairRequest;
import org.openapitools.client.model.ImportKeyPairResult;
import org.openapitools.client.model.IsVpcPeeredResult;
import org.openapitools.client.model.OpenInstancePublicPortsRequest;
import org.openapitools.client.model.OpenInstancePublicPortsResult;
import org.openapitools.client.model.PeerVpcResult;
import org.openapitools.client.model.PutAlarmRequest;
import org.openapitools.client.model.PutAlarmResult;
import org.openapitools.client.model.PutInstancePublicPortsRequest;
import org.openapitools.client.model.PutInstancePublicPortsResult;
import org.openapitools.client.model.RebootInstanceRequest;
import org.openapitools.client.model.RebootInstanceResult;
import org.openapitools.client.model.RebootRelationalDatabaseRequest;
import org.openapitools.client.model.RebootRelationalDatabaseResult;
import org.openapitools.client.model.RegisterContainerImageRequest;
import org.openapitools.client.model.RegisterContainerImageResult;
import org.openapitools.client.model.ReleaseStaticIpRequest;
import org.openapitools.client.model.ReleaseStaticIpResult;
import org.openapitools.client.model.ResetDistributionCacheRequest;
import org.openapitools.client.model.ResetDistributionCacheResult;
import org.openapitools.client.model.SendContactMethodVerificationRequest;
import org.openapitools.client.model.SendContactMethodVerificationResult;
import org.openapitools.client.model.SetIpAddressTypeRequest;
import org.openapitools.client.model.SetIpAddressTypeResult;
import org.openapitools.client.model.SetResourceAccessForBucketRequest;
import org.openapitools.client.model.SetResourceAccessForBucketResult;
import org.openapitools.client.model.StartGUISessionRequest;
import org.openapitools.client.model.StartGUISessionResult;
import org.openapitools.client.model.StartInstanceRequest;
import org.openapitools.client.model.StartInstanceResult;
import org.openapitools.client.model.StartRelationalDatabaseRequest;
import org.openapitools.client.model.StartRelationalDatabaseResult;
import org.openapitools.client.model.StopGUISessionRequest;
import org.openapitools.client.model.StopGUISessionResult;
import org.openapitools.client.model.StopInstanceRequest;
import org.openapitools.client.model.StopInstanceResult;
import org.openapitools.client.model.StopRelationalDatabaseRequest;
import org.openapitools.client.model.StopRelationalDatabaseResult;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.TagResourceResult;
import org.openapitools.client.model.TestAlarmRequest;
import org.openapitools.client.model.TestAlarmResult;
import org.openapitools.client.model.UnpeerVpcResult;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UntagResourceResult;
import org.openapitools.client.model.UpdateBucketBundleRequest;
import org.openapitools.client.model.UpdateBucketBundleResult;
import org.openapitools.client.model.UpdateBucketRequest;
import org.openapitools.client.model.UpdateBucketResult;
import org.openapitools.client.model.UpdateContainerServiceRequest;
import org.openapitools.client.model.UpdateContainerServiceResult;
import org.openapitools.client.model.UpdateDistributionBundleRequest;
import org.openapitools.client.model.UpdateDistributionBundleResult;
import org.openapitools.client.model.UpdateDistributionRequest;
import org.openapitools.client.model.UpdateDistributionResult;
import org.openapitools.client.model.UpdateDomainEntryRequest;
import org.openapitools.client.model.UpdateDomainEntryResult;
import org.openapitools.client.model.UpdateInstanceMetadataOptionsRequest;
import org.openapitools.client.model.UpdateInstanceMetadataOptionsResult;
import org.openapitools.client.model.UpdateLoadBalancerAttributeRequest;
import org.openapitools.client.model.UpdateLoadBalancerAttributeResult;
import org.openapitools.client.model.UpdateRelationalDatabaseParametersRequest;
import org.openapitools.client.model.UpdateRelationalDatabaseParametersResult;
import org.openapitools.client.model.UpdateRelationalDatabaseRequest;
import org.openapitools.client.model.UpdateRelationalDatabaseResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Allocates a static IP address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void allocateStaticIpTest() throws ApiException {
        String xAmzTarget = null;
        AllocateStaticIpRequest allocateStaticIpRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AllocateStaticIpResult response = api.allocateStaticIp(xAmzTarget, allocateStaticIpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Attaches an SSL/TLS certificate to your Amazon Lightsail content delivery network (CDN) distribution.&lt;/p&gt; &lt;p&gt;After the certificate is attached, your distribution accepts HTTPS traffic for all of the domains that are associated with the certificate.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;CreateCertificate&lt;/code&gt; action to create a certificate that you can attach to your distribution.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Only certificates created in the &lt;code&gt;us-east-1&lt;/code&gt; Amazon Web Services Region can be attached to Lightsail distributions. Lightsail distributions are global resources that can reference an origin in any Amazon Web Services Region, and distribute its content globally. However, all distributions are located in the &lt;code&gt;us-east-1&lt;/code&gt; Region.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachCertificateToDistributionTest() throws ApiException {
        String xAmzTarget = null;
        AttachCertificateToDistributionRequest attachCertificateToDistributionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AttachCertificateToDistributionResult response = api.attachCertificateToDistribution(xAmzTarget, attachCertificateToDistributionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Attaches a block storage disk to a running or stopped Lightsail instance and exposes it to the instance with the specified disk name.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;attach disk&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;disk name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachDiskTest() throws ApiException {
        String xAmzTarget = null;
        AttachDiskRequest attachDiskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AttachDiskResult response = api.attachDisk(xAmzTarget, attachDiskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Attaches one or more Lightsail instances to a load balancer.&lt;/p&gt; &lt;p&gt;After some time, the instances are attached to the load balancer and the health check status is available.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;attach instances to load balancer&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;load balancer name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachInstancesToLoadBalancerTest() throws ApiException {
        String xAmzTarget = null;
        AttachInstancesToLoadBalancerRequest attachInstancesToLoadBalancerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AttachInstancesToLoadBalancerResult response = api.attachInstancesToLoadBalancer(xAmzTarget, attachInstancesToLoadBalancerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Attaches a Transport Layer Security (TLS) certificate to your load balancer. TLS is just an updated, more secure version of Secure Socket Layer (SSL).&lt;/p&gt; &lt;p&gt;Once you create and validate your certificate, you can attach it to your load balancer. You can also use this API to rotate the certificates on your account. Use the &lt;code&gt;AttachLoadBalancerTlsCertificate&lt;/code&gt; action with the non-attached certificate, and it will replace the existing one and become the attached certificate.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;AttachLoadBalancerTlsCertificate&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;load balancer name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachLoadBalancerTlsCertificateTest() throws ApiException {
        String xAmzTarget = null;
        AttachLoadBalancerTlsCertificateRequest attachLoadBalancerTlsCertificateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AttachLoadBalancerTlsCertificateResult response = api.attachLoadBalancerTlsCertificate(xAmzTarget, attachLoadBalancerTlsCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Attaches a static IP address to a specific Amazon Lightsail instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachStaticIpTest() throws ApiException {
        String xAmzTarget = null;
        AttachStaticIpRequest attachStaticIpRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AttachStaticIpResult response = api.attachStaticIp(xAmzTarget, attachStaticIpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Closes ports for a specific Amazon Lightsail instance.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;CloseInstancePublicPorts&lt;/code&gt; action supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;instanceName&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void closeInstancePublicPortsTest() throws ApiException {
        String xAmzTarget = null;
        CloseInstancePublicPortsRequest closeInstancePublicPortsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CloseInstancePublicPortsResult response = api.closeInstancePublicPorts(xAmzTarget, closeInstancePublicPortsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Copies a manual snapshot of an instance or disk as another manual snapshot, or copies an automatic snapshot of an instance or disk as a manual snapshot. This operation can also be used to copy a manual or automatic snapshot of an instance or a disk from one Amazon Web Services Region to another in Amazon Lightsail.&lt;/p&gt; &lt;p&gt;When copying a &lt;i&gt;manual snapshot&lt;/i&gt;, be sure to define the &lt;code&gt;source region&lt;/code&gt;, &lt;code&gt;source snapshot name&lt;/code&gt;, and &lt;code&gt;target snapshot name&lt;/code&gt; parameters.&lt;/p&gt; &lt;p&gt;When copying an &lt;i&gt;automatic snapshot&lt;/i&gt;, be sure to define the &lt;code&gt;source region&lt;/code&gt;, &lt;code&gt;source resource name&lt;/code&gt;, &lt;code&gt;target snapshot name&lt;/code&gt;, and either the &lt;code&gt;restore date&lt;/code&gt; or the &lt;code&gt;use latest restorable auto snapshot&lt;/code&gt; parameters.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copySnapshotTest() throws ApiException {
        String xAmzTarget = null;
        CopySnapshotRequest copySnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CopySnapshotResult response = api.copySnapshot(xAmzTarget, copySnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Amazon Lightsail bucket.&lt;/p&gt; &lt;p&gt;A bucket is a cloud storage resource available in the Lightsail object storage service. Use buckets to store objects such as data and its descriptive metadata. For more information about buckets, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/buckets-in-amazon-lightsail\&quot;&gt;Buckets in Amazon Lightsail&lt;/a&gt; in the &lt;i&gt;Amazon Lightsail Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBucketTest() throws ApiException {
        String xAmzTarget = null;
        CreateBucketRequest createBucketRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBucketResult response = api.createBucket(xAmzTarget, createBucketRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new access key for the specified Amazon Lightsail bucket. Access keys consist of an access key ID and corresponding secret access key.&lt;/p&gt; &lt;p&gt;Access keys grant full programmatic access to the specified bucket and its objects. You can have a maximum of two access keys per bucket. Use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBucketAccessKeys.html\&quot;&gt;GetBucketAccessKeys&lt;/a&gt; action to get a list of current access keys for a specific bucket. For more information about access keys, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-bucket-access-keys\&quot;&gt;Creating access keys for a bucket in Amazon Lightsail&lt;/a&gt; in the &lt;i&gt;Amazon Lightsail Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The &lt;code&gt;secretAccessKey&lt;/code&gt; value is returned only in response to the &lt;code&gt;CreateBucketAccessKey&lt;/code&gt; action. You can get a secret access key only when you first create an access key; you cannot get the secret access key later. If you lose the secret access key, you must create a new access key.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBucketAccessKeyTest() throws ApiException {
        String xAmzTarget = null;
        CreateBucketAccessKeyRequest createBucketAccessKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBucketAccessKeyResult response = api.createBucketAccessKey(xAmzTarget, createBucketAccessKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an SSL/TLS certificate for an Amazon Lightsail content delivery network (CDN) distribution and a container service.&lt;/p&gt; &lt;p&gt;After the certificate is valid, use the &lt;code&gt;AttachCertificateToDistribution&lt;/code&gt; action to use the certificate and its domains with your distribution. Or use the &lt;code&gt;UpdateContainerService&lt;/code&gt; action to use the certificate and its domains with your container service.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Only certificates created in the &lt;code&gt;us-east-1&lt;/code&gt; Amazon Web Services Region can be attached to Lightsail distributions. Lightsail distributions are global resources that can reference an origin in any Amazon Web Services Region, and distribute its content globally. However, all distributions are located in the &lt;code&gt;us-east-1&lt;/code&gt; Region.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCertificateTest() throws ApiException {
        String xAmzTarget = null;
        CreateCertificateRequest createCertificateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCertificateResult response = api.createCertificate(xAmzTarget, createCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an AWS CloudFormation stack, which creates a new Amazon EC2 instance from an exported Amazon Lightsail snapshot. This operation results in a CloudFormation stack record that can be used to track the AWS CloudFormation stack created. Use the &lt;code&gt;get cloud formation stack records&lt;/code&gt; operation to get a list of the CloudFormation stacks created.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Wait until after your new Amazon EC2 instance is created before running the &lt;code&gt;create cloud formation stack&lt;/code&gt; operation again with the same export snapshot record.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCloudFormationStackTest() throws ApiException {
        String xAmzTarget = null;
        CreateCloudFormationStackRequest createCloudFormationStackRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCloudFormationStackResult response = api.createCloudFormationStack(xAmzTarget, createCloudFormationStackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an email or SMS text message contact method.&lt;/p&gt; &lt;p&gt;A contact method is used to send you notifications about your Amazon Lightsail resources. You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services Regions, and SMS text messages cannot be sent to some countries/regions. For more information, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications\&quot;&gt;Notifications in Amazon Lightsail&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContactMethodTest() throws ApiException {
        String xAmzTarget = null;
        CreateContactMethodRequest createContactMethodRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateContactMethodResult response = api.createContactMethod(xAmzTarget, createContactMethodRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Amazon Lightsail container service.&lt;/p&gt; &lt;p&gt;A Lightsail container service is a compute resource to which you can deploy containers. For more information, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-services\&quot;&gt;Container services in Amazon Lightsail&lt;/a&gt; in the &lt;i&gt;Lightsail Dev Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContainerServiceTest() throws ApiException {
        String xAmzTarget = null;
        CreateContainerServiceRequest createContainerServiceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateContainerServiceResult response = api.createContainerService(xAmzTarget, createContainerServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a deployment for your Amazon Lightsail container service.&lt;/p&gt; &lt;p&gt;A deployment specifies the containers that will be launched on the container service and their settings, such as the ports to open, the environment variables to apply, and the launch command to run. It also specifies the container that will serve as the public endpoint of the deployment and its settings, such as the HTTP or HTTPS port to use, and the health check configuration.&lt;/p&gt; &lt;p&gt;You can deploy containers to your container service using container images from a public registry such as Amazon ECR Public, or from your local machine. For more information, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-container-images\&quot;&gt;Creating container images for your Amazon Lightsail container services&lt;/a&gt; in the &lt;i&gt;Amazon Lightsail Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContainerServiceDeploymentTest() throws ApiException {
        String xAmzTarget = null;
        CreateContainerServiceDeploymentRequest createContainerServiceDeploymentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateContainerServiceDeploymentResult response = api.createContainerServiceDeployment(xAmzTarget, createContainerServiceDeploymentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a temporary set of log in credentials that you can use to log in to the Docker process on your local machine. After you&#39;re logged in, you can use the native Docker commands to push your local container images to the container image registry of your Amazon Lightsail account so that you can use them with your Lightsail container service. The log in credentials expire 12 hours after they are created, at which point you will need to create a new set of log in credentials.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can only push container images to the container service registry of your Lightsail account. You cannot pull container images or perform any other container image management actions on the container service registry.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;After you push your container images to the container image registry of your Lightsail account, use the &lt;code&gt;RegisterContainerImage&lt;/code&gt; action to register the pushed images to a specific Lightsail container service.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action is not required if you install and use the Lightsail Control (lightsailctl) plugin to push container images to your Lightsail container service. For more information, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-pushing-container-images\&quot;&gt;Pushing and managing container images on your Amazon Lightsail container services&lt;/a&gt; in the &lt;i&gt;Amazon Lightsail Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContainerServiceRegistryLoginTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateContainerServiceRegistryLoginResult response = api.createContainerServiceRegistryLogin(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a block storage disk that can be attached to an Amazon Lightsail instance in the same Availability Zone (e.g., &lt;code&gt;us-east-2a&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;The &lt;code&gt;create disk&lt;/code&gt; operation supports tag-based access control via request tags. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDiskTest() throws ApiException {
        String xAmzTarget = null;
        CreateDiskRequest createDiskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDiskResult response = api.createDisk(xAmzTarget, createDiskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a block storage disk from a manual or automatic snapshot of a disk. The resulting disk can be attached to an Amazon Lightsail instance in the same Availability Zone (e.g., &lt;code&gt;us-east-2a&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;The &lt;code&gt;create disk from snapshot&lt;/code&gt; operation supports tag-based access control via request tags and resource tags applied to the resource identified by &lt;code&gt;disk snapshot name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDiskFromSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        CreateDiskFromSnapshotRequest createDiskFromSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDiskFromSnapshotResult response = api.createDiskFromSnapshot(xAmzTarget, createDiskFromSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a snapshot of a block storage disk. You can use snapshots for backups, to make copies of disks, and to save data before shutting down a Lightsail instance.&lt;/p&gt; &lt;p&gt;You can take a snapshot of an attached disk that is in use; however, snapshots only capture data that has been written to your disk at the time the snapshot command is issued. This may exclude any data that has been cached by any applications or the operating system. If you can pause any file systems on the disk long enough to take a snapshot, your snapshot should be complete. Nevertheless, if you cannot pause all file writes to the disk, you should unmount the disk from within the Lightsail instance, issue the create disk snapshot command, and then remount the disk to ensure a consistent and complete snapshot. You may remount and use your disk while the snapshot status is pending.&lt;/p&gt; &lt;p&gt;You can also use this operation to create a snapshot of an instance&#39;s system volume. You might want to do this, for example, to recover data from the system volume of a botched instance or to create a backup of the system volume like you would for a block storage disk. To create a snapshot of a system volume, just define the &lt;code&gt;instance name&lt;/code&gt; parameter when issuing the snapshot command, and a snapshot of the defined instance&#39;s system volume will be created. After the snapshot is available, you can create a block storage disk from the snapshot and attach it to a running instance to access the data on the disk.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;create disk snapshot&lt;/code&gt; operation supports tag-based access control via request tags. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDiskSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        CreateDiskSnapshotRequest createDiskSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDiskSnapshotResult response = api.createDiskSnapshot(xAmzTarget, createDiskSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Amazon Lightsail content delivery network (CDN) distribution.&lt;/p&gt; &lt;p&gt;A distribution is a globally distributed network of caching servers that improve the performance of your website or web application hosted on a Lightsail instance. For more information, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-content-delivery-network-distributions\&quot;&gt;Content delivery networks in Amazon Lightsail&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDistributionTest() throws ApiException {
        String xAmzTarget = null;
        CreateDistributionRequest createDistributionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDistributionResult response = api.createDistribution(xAmzTarget, createDistributionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a domain resource for the specified domain (e.g., example.com).&lt;/p&gt; &lt;p&gt;The &lt;code&gt;create domain&lt;/code&gt; operation supports tag-based access control via request tags. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDomainTest() throws ApiException {
        String xAmzTarget = null;
        CreateDomainRequest createDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDomainResult response = api.createDomain(xAmzTarget, createDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates one of the following domain name system (DNS) records in a domain DNS zone: Address (A), canonical name (CNAME), mail exchanger (MX), name server (NS), start of authority (SOA), service locator (SRV), or text (TXT).&lt;/p&gt; &lt;p&gt;The &lt;code&gt;create domain entry&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;domain name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDomainEntryTest() throws ApiException {
        String xAmzTarget = null;
        CreateDomainEntryRequest createDomainEntryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDomainEntryResult response = api.createDomainEntry(xAmzTarget, createDomainEntryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates two URLs that are used to access a virtual computer’s graphical user interface (GUI) session. The primary URL initiates a web-based NICE DCV session to the virtual computer&#39;s application. The secondary URL initiates a web-based NICE DCV session to the virtual computer&#39;s operating session. &lt;/p&gt; &lt;p&gt;Use &lt;code&gt;StartGUISession&lt;/code&gt; to open the session.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGUISessionAccessDetailsTest() throws ApiException {
        String xAmzTarget = null;
        CreateGUISessionAccessDetailsRequest createGUISessionAccessDetailsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateGUISessionAccessDetailsResult response = api.createGUISessionAccessDetails(xAmzTarget, createGUISessionAccessDetailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a snapshot of a specific virtual private server, or &lt;i&gt;instance&lt;/i&gt;. You can use a snapshot to create a new instance that is based on that snapshot.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;create instance snapshot&lt;/code&gt; operation supports tag-based access control via request tags. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInstanceSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        CreateInstanceSnapshotRequest createInstanceSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateInstanceSnapshotResult response = api.createInstanceSnapshot(xAmzTarget, createInstanceSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates one or more Amazon Lightsail instances.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;create instances&lt;/code&gt; operation supports tag-based access control via request tags. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInstancesTest() throws ApiException {
        String xAmzTarget = null;
        CreateInstancesRequest createInstancesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateInstancesResult response = api.createInstances(xAmzTarget, createInstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates one or more new instances from a manual or automatic snapshot of an instance.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;create instances from snapshot&lt;/code&gt; operation supports tag-based access control via request tags and resource tags applied to the resource identified by &lt;code&gt;instance snapshot name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInstancesFromSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        CreateInstancesFromSnapshotRequest createInstancesFromSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateInstancesFromSnapshotResult response = api.createInstancesFromSnapshot(xAmzTarget, createInstancesFromSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a custom SSH key pair that you can use with an Amazon Lightsail instance.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_DownloadDefaultKeyPair.html\&quot;&gt;DownloadDefaultKeyPair&lt;/a&gt; action to create a Lightsail default key pair in an Amazon Web Services Region where a default key pair does not currently exist.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The &lt;code&gt;create key pair&lt;/code&gt; operation supports tag-based access control via request tags. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createKeyPairTest() throws ApiException {
        String xAmzTarget = null;
        CreateKeyPairRequest createKeyPairRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateKeyPairResult response = api.createKeyPair(xAmzTarget, createKeyPairRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a Lightsail load balancer. To learn more about deciding whether to load balance your application, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/configure-lightsail-instances-for-load-balancing\&quot;&gt;Configure your Lightsail instances for load balancing&lt;/a&gt;. You can create up to 5 load balancers per AWS Region in your account.&lt;/p&gt; &lt;p&gt;When you create a load balancer, you can specify a unique name and port settings. To change additional load balancer settings, use the &lt;code&gt;UpdateLoadBalancerAttribute&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;create load balancer&lt;/code&gt; operation supports tag-based access control via request tags. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLoadBalancerTest() throws ApiException {
        String xAmzTarget = null;
        CreateLoadBalancerRequest createLoadBalancerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLoadBalancerResult response = api.createLoadBalancer(xAmzTarget, createLoadBalancerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an SSL/TLS certificate for an Amazon Lightsail load balancer.&lt;/p&gt; &lt;p&gt;TLS is just an updated, more secure version of Secure Socket Layer (SSL).&lt;/p&gt; &lt;p&gt;The &lt;code&gt;CreateLoadBalancerTlsCertificate&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;load balancer name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLoadBalancerTlsCertificateTest() throws ApiException {
        String xAmzTarget = null;
        CreateLoadBalancerTlsCertificateRequest createLoadBalancerTlsCertificateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLoadBalancerTlsCertificateResult response = api.createLoadBalancerTlsCertificate(xAmzTarget, createLoadBalancerTlsCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new database in Amazon Lightsail.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;create relational database&lt;/code&gt; operation supports tag-based access control via request tags. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRelationalDatabaseTest() throws ApiException {
        String xAmzTarget = null;
        CreateRelationalDatabaseRequest createRelationalDatabaseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRelationalDatabaseResult response = api.createRelationalDatabase(xAmzTarget, createRelationalDatabaseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new database from an existing database snapshot in Amazon Lightsail.&lt;/p&gt; &lt;p&gt;You can create a new database from a snapshot in if something goes wrong with your original database, or to change it to a different plan, such as a high availability or standard plan.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;create relational database from snapshot&lt;/code&gt; operation supports tag-based access control via request tags and resource tags applied to the resource identified by relationalDatabaseSnapshotName. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRelationalDatabaseFromSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        CreateRelationalDatabaseFromSnapshotRequest createRelationalDatabaseFromSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRelationalDatabaseFromSnapshotResult response = api.createRelationalDatabaseFromSnapshot(xAmzTarget, createRelationalDatabaseFromSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a snapshot of your database in Amazon Lightsail. You can use snapshots for backups, to make copies of a database, and to save data before deleting a database.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;create relational database snapshot&lt;/code&gt; operation supports tag-based access control via request tags. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRelationalDatabaseSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        CreateRelationalDatabaseSnapshotRequest createRelationalDatabaseSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRelationalDatabaseSnapshotResult response = api.createRelationalDatabaseSnapshot(xAmzTarget, createRelationalDatabaseSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an alarm.&lt;/p&gt; &lt;p&gt;An alarm is used to monitor a single metric for one of your resources. When a metric condition is met, the alarm can notify you by email, SMS text message, and a banner displayed on the Amazon Lightsail console. For more information, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms\&quot;&gt;Alarms in Amazon Lightsail&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAlarmTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAlarmRequest deleteAlarmRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteAlarmResult response = api.deleteAlarm(xAmzTarget, deleteAlarmRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an automatic snapshot of an instance or disk. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAutoSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAutoSnapshotRequest deleteAutoSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteAutoSnapshotResult response = api.deleteAutoSnapshot(xAmzTarget, deleteAutoSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a Amazon Lightsail bucket.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you delete your bucket, the bucket name is released and can be reused for a new bucket in your account or another Amazon Web Services account.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBucketTest() throws ApiException {
        String xAmzTarget = null;
        DeleteBucketRequest deleteBucketRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteBucketResult response = api.deleteBucket(xAmzTarget, deleteBucketRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an access key for the specified Amazon Lightsail bucket.&lt;/p&gt; &lt;p&gt;We recommend that you delete an access key if the secret access key is compromised.&lt;/p&gt; &lt;p&gt;For more information about access keys, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-bucket-access-keys\&quot;&gt;Creating access keys for a bucket in Amazon Lightsail&lt;/a&gt; in the &lt;i&gt;Amazon Lightsail Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBucketAccessKeyTest() throws ApiException {
        String xAmzTarget = null;
        DeleteBucketAccessKeyRequest deleteBucketAccessKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteBucketAccessKeyResult response = api.deleteBucketAccessKey(xAmzTarget, deleteBucketAccessKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an SSL/TLS certificate for your Amazon Lightsail content delivery network (CDN) distribution.&lt;/p&gt; &lt;p&gt;Certificates that are currently attached to a distribution cannot be deleted. Use the &lt;code&gt;DetachCertificateFromDistribution&lt;/code&gt; action to detach a certificate from a distribution.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCertificateTest() throws ApiException {
        String xAmzTarget = null;
        DeleteCertificateRequest deleteCertificateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteCertificateResult response = api.deleteCertificate(xAmzTarget, deleteCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a contact method.&lt;/p&gt; &lt;p&gt;A contact method is used to send you notifications about your Amazon Lightsail resources. You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services Regions, and SMS text messages cannot be sent to some countries/regions. For more information, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications\&quot;&gt;Notifications in Amazon Lightsail&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContactMethodTest() throws ApiException {
        String xAmzTarget = null;
        DeleteContactMethodRequest deleteContactMethodRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteContactMethodResult response = api.deleteContactMethod(xAmzTarget, deleteContactMethodRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a container image that is registered to your Amazon Lightsail container service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContainerImageTest() throws ApiException {
        String xAmzTarget = null;
        DeleteContainerImageRequest deleteContainerImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteContainerImage(xAmzTarget, deleteContainerImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes your Amazon Lightsail container service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContainerServiceTest() throws ApiException {
        String xAmzTarget = null;
        DeleteContainerServiceRequest deleteContainerServiceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteContainerService(xAmzTarget, deleteContainerServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified block storage disk. The disk must be in the &lt;code&gt;available&lt;/code&gt; state (not attached to a Lightsail instance).&lt;/p&gt; &lt;note&gt; &lt;p&gt;The disk may remain in the &lt;code&gt;deleting&lt;/code&gt; state for several minutes.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The &lt;code&gt;delete disk&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;disk name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDiskTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDiskRequest deleteDiskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDiskResult response = api.deleteDisk(xAmzTarget, deleteDiskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified disk snapshot.&lt;/p&gt; &lt;p&gt;When you make periodic snapshots of a disk, the snapshots are incremental, and only the blocks on the device that have changed since your last snapshot are saved in the new snapshot. When you delete a snapshot, only the data not needed for any other snapshot is removed. So regardless of which prior snapshots have been deleted, all active snapshots will have access to all the information needed to restore the disk.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;delete disk snapshot&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;disk snapshot name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDiskSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDiskSnapshotRequest deleteDiskSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDiskSnapshotResult response = api.deleteDiskSnapshot(xAmzTarget, deleteDiskSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes your Amazon Lightsail content delivery network (CDN) distribution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDistributionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDistributionRequest deleteDistributionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDistributionResult response = api.deleteDistribution(xAmzTarget, deleteDistributionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified domain recordset and all of its domain records.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;delete domain&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;domain name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDomainTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDomainRequest deleteDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDomainResult response = api.deleteDomain(xAmzTarget, deleteDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a specific domain entry.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;delete domain entry&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;domain name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDomainEntryTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDomainEntryRequest deleteDomainEntryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDomainEntryResult response = api.deleteDomainEntry(xAmzTarget, deleteDomainEntryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an Amazon Lightsail instance.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;delete instance&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;instance name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInstanceTest() throws ApiException {
        String xAmzTarget = null;
        DeleteInstanceRequest deleteInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteInstanceResult response = api.deleteInstance(xAmzTarget, deleteInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a specific snapshot of a virtual private server (or &lt;i&gt;instance&lt;/i&gt;).&lt;/p&gt; &lt;p&gt;The &lt;code&gt;delete instance snapshot&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;instance snapshot name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInstanceSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        DeleteInstanceSnapshotRequest deleteInstanceSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteInstanceSnapshotResult response = api.deleteInstanceSnapshot(xAmzTarget, deleteInstanceSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified key pair by removing the public key from Amazon Lightsail.&lt;/p&gt; &lt;p&gt;You can delete key pairs that were created using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_ImportKeyPair.html\&quot;&gt;ImportKeyPair&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateKeyPair.html\&quot;&gt;CreateKeyPair&lt;/a&gt; actions, as well as the Lightsail default key pair. A new default key pair will not be created unless you launch an instance without specifying a custom key pair, or you call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_DownloadDefaultKeyPair.html\&quot;&gt;DownloadDefaultKeyPair&lt;/a&gt; API. &lt;/p&gt; &lt;p&gt;The &lt;code&gt;delete key pair&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;key pair name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteKeyPairTest() throws ApiException {
        String xAmzTarget = null;
        DeleteKeyPairRequest deleteKeyPairRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteKeyPairResult response = api.deleteKeyPair(xAmzTarget, deleteKeyPairRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the known host key or certificate used by the Amazon Lightsail browser-based SSH or RDP clients to authenticate an instance. This operation enables the Lightsail browser-based SSH or RDP clients to connect to the instance after a host key mismatch.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Perform this operation only if you were expecting the host key or certificate mismatch or if you are familiar with the new host key or certificate on the instance. For more information, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-troubleshooting-browser-based-ssh-rdp-client-connection\&quot;&gt;Troubleshooting connection issues when using the Amazon Lightsail browser-based SSH or RDP client&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteKnownHostKeysTest() throws ApiException {
        String xAmzTarget = null;
        DeleteKnownHostKeysRequest deleteKnownHostKeysRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteKnownHostKeysResult response = api.deleteKnownHostKeys(xAmzTarget, deleteKnownHostKeysRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a Lightsail load balancer and all its associated SSL/TLS certificates. Once the load balancer is deleted, you will need to create a new load balancer, create a new certificate, and verify domain ownership again.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;delete load balancer&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;load balancer name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLoadBalancerTest() throws ApiException {
        String xAmzTarget = null;
        DeleteLoadBalancerRequest deleteLoadBalancerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteLoadBalancerResult response = api.deleteLoadBalancer(xAmzTarget, deleteLoadBalancerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an SSL/TLS certificate associated with a Lightsail load balancer.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DeleteLoadBalancerTlsCertificate&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;load balancer name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLoadBalancerTlsCertificateTest() throws ApiException {
        String xAmzTarget = null;
        DeleteLoadBalancerTlsCertificateRequest deleteLoadBalancerTlsCertificateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteLoadBalancerTlsCertificateResult response = api.deleteLoadBalancerTlsCertificate(xAmzTarget, deleteLoadBalancerTlsCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a database in Amazon Lightsail.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;delete relational database&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRelationalDatabaseTest() throws ApiException {
        String xAmzTarget = null;
        DeleteRelationalDatabaseRequest deleteRelationalDatabaseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteRelationalDatabaseResult response = api.deleteRelationalDatabase(xAmzTarget, deleteRelationalDatabaseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a database snapshot in Amazon Lightsail.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;delete relational database snapshot&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRelationalDatabaseSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        DeleteRelationalDatabaseSnapshotRequest deleteRelationalDatabaseSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteRelationalDatabaseSnapshotResult response = api.deleteRelationalDatabaseSnapshot(xAmzTarget, deleteRelationalDatabaseSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Detaches an SSL/TLS certificate from your Amazon Lightsail content delivery network (CDN) distribution.&lt;/p&gt; &lt;p&gt;After the certificate is detached, your distribution stops accepting traffic for all of the domains that are associated with the certificate.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detachCertificateFromDistributionTest() throws ApiException {
        String xAmzTarget = null;
        DetachCertificateFromDistributionRequest detachCertificateFromDistributionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DetachCertificateFromDistributionResult response = api.detachCertificateFromDistribution(xAmzTarget, detachCertificateFromDistributionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Detaches a stopped block storage disk from a Lightsail instance. Make sure to unmount any file systems on the device within your operating system before stopping the instance and detaching the disk.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;detach disk&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;disk name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detachDiskTest() throws ApiException {
        String xAmzTarget = null;
        DetachDiskRequest detachDiskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DetachDiskResult response = api.detachDisk(xAmzTarget, detachDiskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Detaches the specified instances from a Lightsail load balancer.&lt;/p&gt; &lt;p&gt;This operation waits until the instances are no longer needed before they are detached from the load balancer.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;detach instances from load balancer&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;load balancer name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detachInstancesFromLoadBalancerTest() throws ApiException {
        String xAmzTarget = null;
        DetachInstancesFromLoadBalancerRequest detachInstancesFromLoadBalancerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DetachInstancesFromLoadBalancerResult response = api.detachInstancesFromLoadBalancer(xAmzTarget, detachInstancesFromLoadBalancerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Detaches a static IP from the Amazon Lightsail instance to which it is attached.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detachStaticIpTest() throws ApiException {
        String xAmzTarget = null;
        DetachStaticIpRequest detachStaticIpRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DetachStaticIpResult response = api.detachStaticIp(xAmzTarget, detachStaticIpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables an add-on for an Amazon Lightsail resource. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableAddOnTest() throws ApiException {
        String xAmzTarget = null;
        DisableAddOnRequest disableAddOnRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisableAddOnResult response = api.disableAddOn(xAmzTarget, disableAddOnRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Downloads the regional Amazon Lightsail default key pair.&lt;/p&gt; &lt;p&gt;This action also creates a Lightsail default key pair if a default key pair does not currently exist in the Amazon Web Services Region.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadDefaultKeyPairTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DownloadDefaultKeyPairResult response = api.downloadDefaultKeyPair(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables or modifies an add-on for an Amazon Lightsail resource. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableAddOnTest() throws ApiException {
        String xAmzTarget = null;
        EnableAddOnRequest enableAddOnRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        EnableAddOnResult response = api.enableAddOn(xAmzTarget, enableAddOnRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Exports an Amazon Lightsail instance or block storage disk snapshot to Amazon Elastic Compute Cloud (Amazon EC2). This operation results in an export snapshot record that can be used with the &lt;code&gt;create cloud formation stack&lt;/code&gt; operation to create new Amazon EC2 instances.&lt;/p&gt; &lt;p&gt;Exported instance snapshots appear in Amazon EC2 as Amazon Machine Images (AMIs), and the instance system disk appears as an Amazon Elastic Block Store (Amazon EBS) volume. Exported disk snapshots appear in Amazon EC2 as Amazon EBS volumes. Snapshots are exported to the same Amazon Web Services Region in Amazon EC2 as the source Lightsail snapshot.&lt;/p&gt; &lt;p/&gt; &lt;p&gt;The &lt;code&gt;export snapshot&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;source snapshot name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Use the &lt;code&gt;get instance snapshots&lt;/code&gt; or &lt;code&gt;get disk snapshots&lt;/code&gt; operations to get a list of snapshots that you can export to Amazon EC2.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        ExportSnapshotRequest exportSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ExportSnapshotResult response = api.exportSnapshot(xAmzTarget, exportSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the names of all active (not deleted) resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActiveNamesTest() throws ApiException {
        String xAmzTarget = null;
        GetActiveNamesRequest getActiveNamesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetActiveNamesResult response = api.getActiveNames(xAmzTarget, getActiveNamesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about the configured alarms. Specify an alarm name in your request to return information about a specific alarm, or specify a monitored resource name to return information about all alarms for a specific resource.&lt;/p&gt; &lt;p&gt;An alarm is used to monitor a single metric for one of your resources. When a metric condition is met, the alarm can notify you by email, SMS text message, and a banner displayed on the Amazon Lightsail console. For more information, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms\&quot;&gt;Alarms in Amazon Lightsail&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlarmsTest() throws ApiException {
        String xAmzTarget = null;
        GetAlarmsRequest getAlarmsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAlarmsResult response = api.getAlarms(xAmzTarget, getAlarmsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the available automatic snapshots for an instance or disk. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAutoSnapshotsTest() throws ApiException {
        String xAmzTarget = null;
        GetAutoSnapshotsRequest getAutoSnapshotsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAutoSnapshotsResult response = api.getAutoSnapshots(xAmzTarget, getAutoSnapshotsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the list of available instance images, or &lt;i&gt;blueprints&lt;/i&gt;. You can use a blueprint to create a new instance already running a specific operating system, as well as a preinstalled app or development stack. The software each instance is running depends on the blueprint image you choose.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Use active blueprints when creating new instances. Inactive blueprints are listed to support customers with existing instances and are not necessarily available to create new instances. Blueprints are marked inactive when they become outdated due to operating system updates or new application releases.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBlueprintsTest() throws ApiException {
        String xAmzTarget = null;
        GetBlueprintsRequest getBlueprintsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBlueprintsResult response = api.getBlueprints(xAmzTarget, getBlueprintsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the existing access key IDs for the specified Amazon Lightsail bucket.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This action does not return the secret access key value of an access key. You can get a secret access key only when you create it from the response of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateBucketAccessKey.html\&quot;&gt;CreateBucketAccessKey&lt;/a&gt; action. If you lose the secret access key, you must create a new access key.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBucketAccessKeysTest() throws ApiException {
        String xAmzTarget = null;
        GetBucketAccessKeysRequest getBucketAccessKeysRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBucketAccessKeysResult response = api.getBucketAccessKeys(xAmzTarget, getBucketAccessKeysRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the bundles that you can apply to a Amazon Lightsail bucket.&lt;/p&gt; &lt;p&gt;The bucket bundle specifies the monthly cost, storage quota, and data transfer quota for a bucket.&lt;/p&gt; &lt;p&gt;Use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html\&quot;&gt;UpdateBucketBundle&lt;/a&gt; action to update the bundle for a bucket.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBucketBundlesTest() throws ApiException {
        String xAmzTarget = null;
        GetBucketBundlesRequest getBucketBundlesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBucketBundlesResult response = api.getBucketBundles(xAmzTarget, getBucketBundlesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the data points of a specific metric for an Amazon Lightsail bucket.&lt;/p&gt; &lt;p&gt;Metrics report the utilization of a bucket. View and collect metric data regularly to monitor the number of objects stored in a bucket (including object versions) and the storage space used by those objects.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBucketMetricDataTest() throws ApiException {
        String xAmzTarget = null;
        GetBucketMetricDataRequest getBucketMetricDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBucketMetricDataResult response = api.getBucketMetricData(xAmzTarget, getBucketMetricDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about one or more Amazon Lightsail buckets. The information returned includes the synchronization status of the Amazon Simple Storage Service (Amazon S3) account-level block public access feature for your Lightsail buckets.&lt;/p&gt; &lt;p&gt;For more information about buckets, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/buckets-in-amazon-lightsail\&quot;&gt;Buckets in Amazon Lightsail&lt;/a&gt; in the &lt;i&gt;Amazon Lightsail Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBucketsTest() throws ApiException {
        String xAmzTarget = null;
        GetBucketsRequest getBucketsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBucketsResult response = api.getBuckets(xAmzTarget, getBucketsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the bundles that you can apply to an Amazon Lightsail instance when you create it.&lt;/p&gt; &lt;p&gt;A bundle describes the specifications of an instance, such as the monthly cost, amount of memory, the number of vCPUs, amount of storage space, and monthly network data transfer quota.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Bundles are referred to as &lt;i&gt;instance plans&lt;/i&gt; in the Lightsail console.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBundlesTest() throws ApiException {
        String xAmzTarget = null;
        GetBundlesRequest getBundlesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBundlesResult response = api.getBundles(xAmzTarget, getBundlesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about one or more Amazon Lightsail SSL/TLS certificates.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To get a summary of a certificate, ommit &lt;code&gt;includeCertificateDetails&lt;/code&gt; from your request. The response will include only the certificate Amazon Resource Name (ARN), certificate name, domain name, and tags.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCertificatesTest() throws ApiException {
        String xAmzTarget = null;
        GetCertificatesRequest getCertificatesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCertificatesResult response = api.getCertificates(xAmzTarget, getCertificatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the CloudFormation stack record created as a result of the &lt;code&gt;create cloud formation stack&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;An AWS CloudFormation stack is used to create a new Amazon EC2 instance from an exported Lightsail snapshot.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCloudFormationStackRecordsTest() throws ApiException {
        String xAmzTarget = null;
        GetCloudFormationStackRecordsRequest getCloudFormationStackRecordsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCloudFormationStackRecordsResult response = api.getCloudFormationStackRecords(xAmzTarget, getCloudFormationStackRecordsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about the configured contact methods. Specify a protocol in your request to return information about a specific contact method.&lt;/p&gt; &lt;p&gt;A contact method is used to send you notifications about your Amazon Lightsail resources. You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services Regions, and SMS text messages cannot be sent to some countries/regions. For more information, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications\&quot;&gt;Notifications in Amazon Lightsail&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactMethodsTest() throws ApiException {
        String xAmzTarget = null;
        GetContactMethodsRequest getContactMethodsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContactMethodsResult response = api.getContactMethods(xAmzTarget, getContactMethodsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about Amazon Lightsail containers, such as the current version of the Lightsail Control (lightsailctl) plugin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContainerAPIMetadataTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContainerAPIMetadataResult response = api.getContainerAPIMetadata(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the container images that are registered to your Amazon Lightsail container service.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you created a deployment on your Lightsail container service that uses container images from a public registry like Docker Hub, those images are not returned as part of this action. Those images are not registered to your Lightsail container service.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContainerImagesTest() throws ApiException {
        String xAmzTarget = null;
        GetContainerImagesRequest getContainerImagesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContainerImagesResult response = api.getContainerImages(xAmzTarget, getContainerImagesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the log events of a container of your Amazon Lightsail container service.&lt;/p&gt; &lt;p&gt;If your container service has more than one node (i.e., a scale greater than 1), then the log events that are returned for the specified container are merged from all nodes on your container service.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Container logs are retained for a certain amount of time. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/lightsail.html\&quot;&gt;Amazon Lightsail endpoints and quotas&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContainerLogTest() throws ApiException {
        String xAmzTarget = null;
        GetContainerLogRequest getContainerLogRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContainerLogResult response = api.getContainerLog(xAmzTarget, getContainerLogRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the deployments for your Amazon Lightsail container service&lt;/p&gt; &lt;p&gt;A deployment specifies the settings, such as the ports and launch command, of containers that are deployed to your container service.&lt;/p&gt; &lt;p&gt;The deployments are ordered by version in ascending order. The newest version is listed at the top of the response.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A set number of deployments are kept before the oldest one is replaced with the newest one. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/lightsail.html\&quot;&gt;Amazon Lightsail endpoints and quotas&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContainerServiceDeploymentsTest() throws ApiException {
        String xAmzTarget = null;
        GetContainerServiceDeploymentsRequest getContainerServiceDeploymentsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContainerServiceDeploymentsResult response = api.getContainerServiceDeployments(xAmzTarget, getContainerServiceDeploymentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the data points of a specific metric of your Amazon Lightsail container service.&lt;/p&gt; &lt;p&gt;Metrics report the utilization of your resources. Monitor and collect metric data regularly to maintain the reliability, availability, and performance of your resources.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContainerServiceMetricDataTest() throws ApiException {
        String xAmzTarget = null;
        GetContainerServiceMetricDataRequest getContainerServiceMetricDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContainerServiceMetricDataResult response = api.getContainerServiceMetricData(xAmzTarget, getContainerServiceMetricDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the list of powers that can be specified for your Amazon Lightsail container services.&lt;/p&gt; &lt;p&gt;The power specifies the amount of memory, the number of vCPUs, and the base price of the container service.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContainerServicePowersTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContainerServicePowersResult response = api.getContainerServicePowers(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about one or more of your Amazon Lightsail container services.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContainerServicesTest() throws ApiException {
        String xAmzTarget = null;
        GetContainerServicesRequest getContainerServicesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ContainerServicesListResult response = api.getContainerServices(xAmzTarget, getContainerServicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the cost estimate for a specified resource. A cost estimate will not generate for a resource that has been deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCostEstimateTest() throws ApiException {
        String xAmzTarget = null;
        GetCostEstimateRequest getCostEstimateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCostEstimateResult response = api.getCostEstimate(xAmzTarget, getCostEstimateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a specific block storage disk.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiskTest() throws ApiException {
        String xAmzTarget = null;
        GetDiskRequest getDiskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDiskResult response = api.getDisk(xAmzTarget, getDiskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a specific block storage disk snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiskSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        GetDiskSnapshotRequest getDiskSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDiskSnapshotResult response = api.getDiskSnapshot(xAmzTarget, getDiskSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about all block storage disk snapshots in your AWS account and region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiskSnapshotsTest() throws ApiException {
        String xAmzTarget = null;
        GetDiskSnapshotsRequest getDiskSnapshotsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDiskSnapshotsResult response = api.getDiskSnapshots(xAmzTarget, getDiskSnapshotsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about all block storage disks in your AWS account and region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDisksTest() throws ApiException {
        String xAmzTarget = null;
        GetDisksRequest getDisksRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDisksResult response = api.getDisks(xAmzTarget, getDisksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the bundles that can be applied to your Amazon Lightsail content delivery network (CDN) distributions.&lt;/p&gt; &lt;p&gt;A distribution bundle specifies the monthly network transfer quota and monthly cost of your distribution.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistributionBundlesTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDistributionBundlesResult response = api.getDistributionBundles(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the timestamp and status of the last cache reset of a specific Amazon Lightsail content delivery network (CDN) distribution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistributionLatestCacheResetTest() throws ApiException {
        String xAmzTarget = null;
        GetDistributionLatestCacheResetRequest getDistributionLatestCacheResetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDistributionLatestCacheResetResult response = api.getDistributionLatestCacheReset(xAmzTarget, getDistributionLatestCacheResetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the data points of a specific metric for an Amazon Lightsail content delivery network (CDN) distribution.&lt;/p&gt; &lt;p&gt;Metrics report the utilization of your resources, and the error counts generated by them. Monitor and collect metric data regularly to maintain the reliability, availability, and performance of your resources.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistributionMetricDataTest() throws ApiException {
        String xAmzTarget = null;
        GetDistributionMetricDataRequest getDistributionMetricDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDistributionMetricDataResult response = api.getDistributionMetricData(xAmzTarget, getDistributionMetricDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about one or more of your Amazon Lightsail content delivery network (CDN) distributions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistributionsTest() throws ApiException {
        String xAmzTarget = null;
        GetDistributionsRequest getDistributionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDistributionsResult response = api.getDistributions(xAmzTarget, getDistributionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a specific domain recordset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainTest() throws ApiException {
        String xAmzTarget = null;
        GetDomainRequest getDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDomainResult response = api.getDomain(xAmzTarget, getDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of all domains in the user&#39;s account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainsTest() throws ApiException {
        String xAmzTarget = null;
        GetDomainsRequest getDomainsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDomainsResult response = api.getDomains(xAmzTarget, getDomainsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns all export snapshot records created as a result of the &lt;code&gt;export snapshot&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;An export snapshot record can be used to create a new Amazon EC2 instance and its related resources with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateCloudFormationStack.html\&quot;&gt;CreateCloudFormationStack&lt;/a&gt; action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExportSnapshotRecordsTest() throws ApiException {
        String xAmzTarget = null;
        GetExportSnapshotRecordsRequest getExportSnapshotRecordsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetExportSnapshotRecordsResult response = api.getExportSnapshotRecords(xAmzTarget, getExportSnapshotRecordsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a specific Amazon Lightsail instance, which is a virtual private server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstanceTest() throws ApiException {
        String xAmzTarget = null;
        GetInstanceRequest getInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInstanceResult response = api.getInstance(xAmzTarget, getInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns temporary SSH keys you can use to connect to a specific virtual private server, or &lt;i&gt;instance&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;get instance access details&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;instance name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstanceAccessDetailsTest() throws ApiException {
        String xAmzTarget = null;
        GetInstanceAccessDetailsRequest getInstanceAccessDetailsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInstanceAccessDetailsResult response = api.getInstanceAccessDetails(xAmzTarget, getInstanceAccessDetailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the data points for the specified Amazon Lightsail instance metric, given an instance name.&lt;/p&gt; &lt;p&gt;Metrics report the utilization of your resources, and the error counts generated by them. Monitor and collect metric data regularly to maintain the reliability, availability, and performance of your resources.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstanceMetricDataTest() throws ApiException {
        String xAmzTarget = null;
        GetInstanceMetricDataRequest getInstanceMetricDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInstanceMetricDataResult response = api.getInstanceMetricData(xAmzTarget, getInstanceMetricDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the firewall port states for a specific Amazon Lightsail instance, the IP addresses allowed to connect to the instance through the ports, and the protocol.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstancePortStatesTest() throws ApiException {
        String xAmzTarget = null;
        GetInstancePortStatesRequest getInstancePortStatesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInstancePortStatesResult response = api.getInstancePortStates(xAmzTarget, getInstancePortStatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a specific instance snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstanceSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        GetInstanceSnapshotRequest getInstanceSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInstanceSnapshotResult response = api.getInstanceSnapshot(xAmzTarget, getInstanceSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns all instance snapshots for the user&#39;s account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstanceSnapshotsTest() throws ApiException {
        String xAmzTarget = null;
        GetInstanceSnapshotsRequest getInstanceSnapshotsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInstanceSnapshotsResult response = api.getInstanceSnapshots(xAmzTarget, getInstanceSnapshotsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the state of a specific instance. Works on one instance at a time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstanceStateTest() throws ApiException {
        String xAmzTarget = null;
        GetInstanceStateRequest getInstanceStateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInstanceStateResult response = api.getInstanceState(xAmzTarget, getInstanceStateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about all Amazon Lightsail virtual private servers, or &lt;i&gt;instances&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstancesTest() throws ApiException {
        String xAmzTarget = null;
        GetInstancesRequest getInstancesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInstancesResult response = api.getInstances(xAmzTarget, getInstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a specific key pair.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getKeyPairTest() throws ApiException {
        String xAmzTarget = null;
        GetKeyPairRequest getKeyPairRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetKeyPairResult response = api.getKeyPair(xAmzTarget, getKeyPairRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about all key pairs in the user&#39;s account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getKeyPairsTest() throws ApiException {
        String xAmzTarget = null;
        GetKeyPairsRequest getKeyPairsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetKeyPairsResult response = api.getKeyPairs(xAmzTarget, getKeyPairsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about the specified Lightsail load balancer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLoadBalancerTest() throws ApiException {
        String xAmzTarget = null;
        GetLoadBalancerRequest getLoadBalancerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLoadBalancerResult response = api.getLoadBalancer(xAmzTarget, getLoadBalancerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about health metrics for your Lightsail load balancer.&lt;/p&gt; &lt;p&gt;Metrics report the utilization of your resources, and the error counts generated by them. Monitor and collect metric data regularly to maintain the reliability, availability, and performance of your resources.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLoadBalancerMetricDataTest() throws ApiException {
        String xAmzTarget = null;
        GetLoadBalancerMetricDataRequest getLoadBalancerMetricDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLoadBalancerMetricDataResult response = api.getLoadBalancerMetricData(xAmzTarget, getLoadBalancerMetricDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about the TLS certificates that are associated with the specified Lightsail load balancer.&lt;/p&gt; &lt;p&gt;TLS is just an updated, more secure version of Secure Socket Layer (SSL).&lt;/p&gt; &lt;p&gt;You can have a maximum of 2 certificates associated with a Lightsail load balancer. One is active and the other is inactive.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLoadBalancerTlsCertificatesTest() throws ApiException {
        String xAmzTarget = null;
        GetLoadBalancerTlsCertificatesRequest getLoadBalancerTlsCertificatesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLoadBalancerTlsCertificatesResult response = api.getLoadBalancerTlsCertificates(xAmzTarget, getLoadBalancerTlsCertificatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of TLS security policies that you can apply to Lightsail load balancers.&lt;/p&gt; &lt;p&gt;For more information about load balancer TLS security policies, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configure-load-balancer-tls-security-policy\&quot;&gt;Configuring TLS security policies on your Amazon Lightsail load balancers&lt;/a&gt; in the &lt;i&gt;Amazon Lightsail Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLoadBalancerTlsPoliciesTest() throws ApiException {
        String xAmzTarget = null;
        GetLoadBalancerTlsPoliciesRequest getLoadBalancerTlsPoliciesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLoadBalancerTlsPoliciesResult response = api.getLoadBalancerTlsPolicies(xAmzTarget, getLoadBalancerTlsPoliciesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about all load balancers in an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLoadBalancersTest() throws ApiException {
        String xAmzTarget = null;
        GetLoadBalancersRequest getLoadBalancersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLoadBalancersResult response = api.getLoadBalancers(xAmzTarget, getLoadBalancersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a specific operation. Operations include events such as when you create an instance, allocate a static IP, attach a static IP, and so on.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOperationTest() throws ApiException {
        String xAmzTarget = null;
        GetOperationRequest getOperationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetOperationResult response = api.getOperation(xAmzTarget, getOperationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about all operations.&lt;/p&gt; &lt;p&gt;Results are returned from oldest to newest, up to a maximum of 200. Results can be paged by making each subsequent call to &lt;code&gt;GetOperations&lt;/code&gt; use the maximum (last) &lt;code&gt;statusChangedAt&lt;/code&gt; value from the previous request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOperationsTest() throws ApiException {
        String xAmzTarget = null;
        GetOperationsRequest getOperationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetOperationsResult response = api.getOperations(xAmzTarget, getOperationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets operations for a specific resource (e.g., an instance or a static IP).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOperationsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        GetOperationsForResourceRequest getOperationsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetOperationsForResourceResult response = api.getOperationsForResource(xAmzTarget, getOperationsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of all valid regions for Amazon Lightsail. Use the &lt;code&gt;include availability zones&lt;/code&gt; parameter to also return the Availability Zones in a region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRegionsTest() throws ApiException {
        String xAmzTarget = null;
        GetRegionsRequest getRegionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRegionsResult response = api.getRegions(xAmzTarget, getRegionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a specific database in Amazon Lightsail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationalDatabaseTest() throws ApiException {
        String xAmzTarget = null;
        GetRelationalDatabaseRequest getRelationalDatabaseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRelationalDatabaseResult response = api.getRelationalDatabase(xAmzTarget, getRelationalDatabaseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of available database blueprints in Amazon Lightsail. A blueprint describes the major engine version of a database.&lt;/p&gt; &lt;p&gt;You can use a blueprint ID to create a new database that runs a specific database engine.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationalDatabaseBlueprintsTest() throws ApiException {
        String xAmzTarget = null;
        GetRelationalDatabaseBlueprintsRequest getRelationalDatabaseBlueprintsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRelationalDatabaseBlueprintsResult response = api.getRelationalDatabaseBlueprints(xAmzTarget, getRelationalDatabaseBlueprintsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the list of bundles that are available in Amazon Lightsail. A bundle describes the performance specifications for a database.&lt;/p&gt; &lt;p&gt;You can use a bundle ID to create a new database with explicit performance specifications.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationalDatabaseBundlesTest() throws ApiException {
        String xAmzTarget = null;
        GetRelationalDatabaseBundlesRequest getRelationalDatabaseBundlesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRelationalDatabaseBundlesResult response = api.getRelationalDatabaseBundles(xAmzTarget, getRelationalDatabaseBundlesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of events for a specific database in Amazon Lightsail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationalDatabaseEventsTest() throws ApiException {
        String xAmzTarget = null;
        GetRelationalDatabaseEventsRequest getRelationalDatabaseEventsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRelationalDatabaseEventsResult response = api.getRelationalDatabaseEvents(xAmzTarget, getRelationalDatabaseEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of log events for a database in Amazon Lightsail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationalDatabaseLogEventsTest() throws ApiException {
        String xAmzTarget = null;
        GetRelationalDatabaseLogEventsRequest getRelationalDatabaseLogEventsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRelationalDatabaseLogEventsResult response = api.getRelationalDatabaseLogEvents(xAmzTarget, getRelationalDatabaseLogEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of available log streams for a specific database in Amazon Lightsail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationalDatabaseLogStreamsTest() throws ApiException {
        String xAmzTarget = null;
        GetRelationalDatabaseLogStreamsRequest getRelationalDatabaseLogStreamsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRelationalDatabaseLogStreamsResult response = api.getRelationalDatabaseLogStreams(xAmzTarget, getRelationalDatabaseLogStreamsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the current, previous, or pending versions of the master user password for a Lightsail database.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;GetRelationalDatabaseMasterUserPassword&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationalDatabaseMasterUserPasswordTest() throws ApiException {
        String xAmzTarget = null;
        GetRelationalDatabaseMasterUserPasswordRequest getRelationalDatabaseMasterUserPasswordRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRelationalDatabaseMasterUserPasswordResult response = api.getRelationalDatabaseMasterUserPassword(xAmzTarget, getRelationalDatabaseMasterUserPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the data points of the specified metric for a database in Amazon Lightsail.&lt;/p&gt; &lt;p&gt;Metrics report the utilization of your resources, and the error counts generated by them. Monitor and collect metric data regularly to maintain the reliability, availability, and performance of your resources.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationalDatabaseMetricDataTest() throws ApiException {
        String xAmzTarget = null;
        GetRelationalDatabaseMetricDataRequest getRelationalDatabaseMetricDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRelationalDatabaseMetricDataResult response = api.getRelationalDatabaseMetricData(xAmzTarget, getRelationalDatabaseMetricDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns all of the runtime parameters offered by the underlying database software, or engine, for a specific database in Amazon Lightsail.&lt;/p&gt; &lt;p&gt;In addition to the parameter names and values, this operation returns other information about each parameter. This information includes whether changes require a reboot, whether the parameter is modifiable, the allowed values, and the data types.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationalDatabaseParametersTest() throws ApiException {
        String xAmzTarget = null;
        GetRelationalDatabaseParametersRequest getRelationalDatabaseParametersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRelationalDatabaseParametersResult response = api.getRelationalDatabaseParameters(xAmzTarget, getRelationalDatabaseParametersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a specific database snapshot in Amazon Lightsail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationalDatabaseSnapshotTest() throws ApiException {
        String xAmzTarget = null;
        GetRelationalDatabaseSnapshotRequest getRelationalDatabaseSnapshotRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRelationalDatabaseSnapshotResult response = api.getRelationalDatabaseSnapshot(xAmzTarget, getRelationalDatabaseSnapshotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about all of your database snapshots in Amazon Lightsail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationalDatabaseSnapshotsTest() throws ApiException {
        String xAmzTarget = null;
        GetRelationalDatabaseSnapshotsRequest getRelationalDatabaseSnapshotsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRelationalDatabaseSnapshotsResult response = api.getRelationalDatabaseSnapshots(xAmzTarget, getRelationalDatabaseSnapshotsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about all of your databases in Amazon Lightsail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelationalDatabasesTest() throws ApiException {
        String xAmzTarget = null;
        GetRelationalDatabasesRequest getRelationalDatabasesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRelationalDatabasesResult response = api.getRelationalDatabases(xAmzTarget, getRelationalDatabasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about an Amazon Lightsail static IP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStaticIpTest() throws ApiException {
        String xAmzTarget = null;
        GetStaticIpRequest getStaticIpRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetStaticIpResult response = api.getStaticIp(xAmzTarget, getStaticIpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about all static IPs in the user&#39;s account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStaticIpsTest() throws ApiException {
        String xAmzTarget = null;
        GetStaticIpsRequest getStaticIpsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetStaticIpsResult response = api.getStaticIps(xAmzTarget, getStaticIpsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Imports a public SSH key from a specific key pair.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importKeyPairTest() throws ApiException {
        String xAmzTarget = null;
        ImportKeyPairRequest importKeyPairRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ImportKeyPairResult response = api.importKeyPair(xAmzTarget, importKeyPairRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a Boolean value indicating whether your Lightsail VPC is peered.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void isVpcPeeredTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        IsVpcPeeredResult response = api.isVpcPeered(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Opens ports for a specific Amazon Lightsail instance, and specifies the IP addresses allowed to connect to the instance through the ports, and the protocol.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;OpenInstancePublicPorts&lt;/code&gt; action supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;instanceName&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openInstancePublicPortsTest() throws ApiException {
        String xAmzTarget = null;
        OpenInstancePublicPortsRequest openInstancePublicPortsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        OpenInstancePublicPortsResult response = api.openInstancePublicPorts(xAmzTarget, openInstancePublicPortsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Peers the Lightsail VPC with the user&#39;s default VPC.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void peerVpcTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PeerVpcResult response = api.peerVpc(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates an alarm, and associates it with the specified metric.&lt;/p&gt; &lt;p&gt;An alarm is used to monitor a single metric for one of your resources. When a metric condition is met, the alarm can notify you by email, SMS text message, and a banner displayed on the Amazon Lightsail console. For more information, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms\&quot;&gt;Alarms in Amazon Lightsail&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When this action creates an alarm, the alarm state is immediately set to &lt;code&gt;INSUFFICIENT_DATA&lt;/code&gt;. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed.&lt;/p&gt; &lt;p&gt;When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm. The alarm is then evaluated with the updated configuration.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putAlarmTest() throws ApiException {
        String xAmzTarget = null;
        PutAlarmRequest putAlarmRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutAlarmResult response = api.putAlarm(xAmzTarget, putAlarmRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Opens ports for a specific Amazon Lightsail instance, and specifies the IP addresses allowed to connect to the instance through the ports, and the protocol. This action also closes all currently open ports that are not included in the request. Include all of the ports and the protocols you want to open in your &lt;code&gt;PutInstancePublicPorts&lt;/code&gt;request. Or use the &lt;code&gt;OpenInstancePublicPorts&lt;/code&gt; action to open ports without closing currently open ports.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;PutInstancePublicPorts&lt;/code&gt; action supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;instanceName&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putInstancePublicPortsTest() throws ApiException {
        String xAmzTarget = null;
        PutInstancePublicPortsRequest putInstancePublicPortsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutInstancePublicPortsResult response = api.putInstancePublicPorts(xAmzTarget, putInstancePublicPortsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Restarts a specific instance.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;reboot instance&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;instance name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rebootInstanceTest() throws ApiException {
        String xAmzTarget = null;
        RebootInstanceRequest rebootInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RebootInstanceResult response = api.rebootInstance(xAmzTarget, rebootInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Restarts a specific database in Amazon Lightsail.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;reboot relational database&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rebootRelationalDatabaseTest() throws ApiException {
        String xAmzTarget = null;
        RebootRelationalDatabaseRequest rebootRelationalDatabaseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RebootRelationalDatabaseResult response = api.rebootRelationalDatabase(xAmzTarget, rebootRelationalDatabaseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Registers a container image to your Amazon Lightsail container service.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action is not required if you install and use the Lightsail Control (lightsailctl) plugin to push container images to your Lightsail container service. For more information, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-pushing-container-images\&quot;&gt;Pushing and managing container images on your Amazon Lightsail container services&lt;/a&gt; in the &lt;i&gt;Amazon Lightsail Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerContainerImageTest() throws ApiException {
        String xAmzTarget = null;
        RegisterContainerImageRequest registerContainerImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RegisterContainerImageResult response = api.registerContainerImage(xAmzTarget, registerContainerImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specific static IP from your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void releaseStaticIpTest() throws ApiException {
        String xAmzTarget = null;
        ReleaseStaticIpRequest releaseStaticIpRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ReleaseStaticIpResult response = api.releaseStaticIp(xAmzTarget, releaseStaticIpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes currently cached content from your Amazon Lightsail content delivery network (CDN) distribution.&lt;/p&gt; &lt;p&gt;After resetting the cache, the next time a content request is made, your distribution pulls, serves, and caches it from the origin.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetDistributionCacheTest() throws ApiException {
        String xAmzTarget = null;
        ResetDistributionCacheRequest resetDistributionCacheRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResetDistributionCacheResult response = api.resetDistributionCache(xAmzTarget, resetDistributionCacheRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sends a verification request to an email contact method to ensure it&#39;s owned by the requester. SMS contact methods don&#39;t need to be verified.&lt;/p&gt; &lt;p&gt;A contact method is used to send you notifications about your Amazon Lightsail resources. You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services Regions, and SMS text messages cannot be sent to some countries/regions. For more information, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications\&quot;&gt;Notifications in Amazon Lightsail&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;A verification request is sent to the contact method when you initially create it. Use this action to send another verification request if a previous verification request was deleted, or has expired.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Notifications are not sent to an email contact method until after it is verified, and confirmed as valid.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendContactMethodVerificationTest() throws ApiException {
        String xAmzTarget = null;
        SendContactMethodVerificationRequest sendContactMethodVerificationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SendContactMethodVerificationResult response = api.sendContactMethodVerification(xAmzTarget, sendContactMethodVerificationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets the IP address type for an Amazon Lightsail resource.&lt;/p&gt; &lt;p&gt;Use this action to enable dual-stack for a resource, which enables IPv4 and IPv6 for the specified resource. Alternately, you can use this action to disable dual-stack, and enable IPv4 only.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setIpAddressTypeTest() throws ApiException {
        String xAmzTarget = null;
        SetIpAddressTypeRequest setIpAddressTypeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetIpAddressTypeResult response = api.setIpAddressType(xAmzTarget, setIpAddressTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets the Amazon Lightsail resources that can access the specified Lightsail bucket.&lt;/p&gt; &lt;p&gt;Lightsail buckets currently support setting access for Lightsail instances in the same Amazon Web Services Region.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setResourceAccessForBucketTest() throws ApiException {
        String xAmzTarget = null;
        SetResourceAccessForBucketRequest setResourceAccessForBucketRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetResourceAccessForBucketResult response = api.setResourceAccessForBucket(xAmzTarget, setResourceAccessForBucketRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Initiates a graphical user interface (GUI) session that’s used to access a virtual computer’s operating system and application. The session will be active for 1 hour. Use this action to resume the session after it expires. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startGUISessionTest() throws ApiException {
        String xAmzTarget = null;
        StartGUISessionRequest startGUISessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartGUISessionResult response = api.startGUISession(xAmzTarget, startGUISessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts a specific Amazon Lightsail instance from a stopped state. To restart an instance, use the &lt;code&gt;reboot instance&lt;/code&gt; operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you start a stopped instance, Lightsail assigns a new public IP address to the instance. To use the same IP address after stopping and starting an instance, create a static IP address and attach it to the instance. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-create-static-ip\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The &lt;code&gt;start instance&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;instance name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startInstanceTest() throws ApiException {
        String xAmzTarget = null;
        StartInstanceRequest startInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartInstanceResult response = api.startInstance(xAmzTarget, startInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts a specific database from a stopped state in Amazon Lightsail. To restart a database, use the &lt;code&gt;reboot relational database&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;start relational database&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startRelationalDatabaseTest() throws ApiException {
        String xAmzTarget = null;
        StartRelationalDatabaseRequest startRelationalDatabaseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartRelationalDatabaseResult response = api.startRelationalDatabase(xAmzTarget, startRelationalDatabaseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Terminates a web-based NICE DCV session that’s used to access a virtual computer’s operating system or application. The session will close and any unsaved data will be lost.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopGUISessionTest() throws ApiException {
        String xAmzTarget = null;
        StopGUISessionRequest stopGUISessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopGUISessionResult response = api.stopGUISession(xAmzTarget, stopGUISessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Stops a specific Amazon Lightsail instance that is currently running.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you start a stopped instance, Lightsail assigns a new public IP address to the instance. To use the same IP address after stopping and starting an instance, create a static IP address and attach it to the instance. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-create-static-ip\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The &lt;code&gt;stop instance&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;instance name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopInstanceTest() throws ApiException {
        String xAmzTarget = null;
        StopInstanceRequest stopInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopInstanceResult response = api.stopInstance(xAmzTarget, stopInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Stops a specific database that is currently running in Amazon Lightsail.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;stop relational database&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopRelationalDatabaseTest() throws ApiException {
        String xAmzTarget = null;
        StopRelationalDatabaseRequest stopRelationalDatabaseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopRelationalDatabaseResult response = api.stopRelationalDatabase(xAmzTarget, stopRelationalDatabaseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds one or more tags to the specified Amazon Lightsail resource. Each resource can have a maximum of 50 tags. Each tag consists of a key and an optional value. Tag keys must be unique per resource. For more information about tags, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;tag resource&lt;/code&gt; operation supports tag-based access control via request tags and resource tags applied to the resource identified by &lt;code&gt;resource name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TagResourceResult response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Tests an alarm by displaying a banner on the Amazon Lightsail console. If a notification trigger is configured for the specified alarm, the test also sends a notification to the notification protocol (&lt;code&gt;Email&lt;/code&gt; and/or &lt;code&gt;SMS&lt;/code&gt;) configured for the alarm.&lt;/p&gt; &lt;p&gt;An alarm is used to monitor a single metric for one of your resources. When a metric condition is met, the alarm can notify you by email, SMS text message, and a banner displayed on the Amazon Lightsail console. For more information, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms\&quot;&gt;Alarms in Amazon Lightsail&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testAlarmTest() throws ApiException {
        String xAmzTarget = null;
        TestAlarmRequest testAlarmRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TestAlarmResult response = api.testAlarm(xAmzTarget, testAlarmRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Unpeers the Lightsail VPC from the user&#39;s default VPC.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unpeerVpcTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UnpeerVpcResult response = api.unpeerVpc(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified set of tag keys and their values from the specified Amazon Lightsail resource.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;untag resource&lt;/code&gt; operation supports tag-based access control via request tags and resource tags applied to the resource identified by &lt;code&gt;resource name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UntagResourceResult response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates an existing Amazon Lightsail bucket.&lt;/p&gt; &lt;p&gt;Use this action to update the configuration of an existing bucket, such as versioning, public accessibility, and the Amazon Web Services accounts that can access the bucket.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBucketTest() throws ApiException {
        String xAmzTarget = null;
        UpdateBucketRequest updateBucketRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBucketResult response = api.updateBucket(xAmzTarget, updateBucketRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the bundle, or storage plan, of an existing Amazon Lightsail bucket.&lt;/p&gt; &lt;p&gt;A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a bucket. You can update a bucket&#39;s bundle only one time within a monthly Amazon Web Services billing cycle. To determine if you can update a bucket&#39;s bundle, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBuckets.html\&quot;&gt;GetBuckets&lt;/a&gt; action. The &lt;code&gt;ableToUpdateBundle&lt;/code&gt; parameter in the response will indicate whether you can currently update a bucket&#39;s bundle.&lt;/p&gt; &lt;p&gt;Update a bucket&#39;s bundle if it&#39;s consistently going over its storage space or data transfer quota, or if a bucket&#39;s usage is consistently in the lower range of its storage space or data transfer quota. Due to the unpredictable usage fluctuations that a bucket might experience, we strongly recommend that you update a bucket&#39;s bundle only as a long-term strategy, instead of as a short-term, monthly cost-cutting measure. Choose a bucket bundle that will provide the bucket with ample storage space and data transfer for a long time to come.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBucketBundleTest() throws ApiException {
        String xAmzTarget = null;
        UpdateBucketBundleRequest updateBucketBundleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBucketBundleResult response = api.updateBucketBundle(xAmzTarget, updateBucketBundleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the configuration of your Amazon Lightsail container service, such as its power, scale, and public domain names.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContainerServiceTest() throws ApiException {
        String xAmzTarget = null;
        UpdateContainerServiceRequest updateContainerServiceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateContainerServiceResult response = api.updateContainerService(xAmzTarget, updateContainerServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates an existing Amazon Lightsail content delivery network (CDN) distribution.&lt;/p&gt; &lt;p&gt;Use this action to update the configuration of your existing distribution.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDistributionTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDistributionRequest updateDistributionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDistributionResult response = api.updateDistribution(xAmzTarget, updateDistributionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the bundle of your Amazon Lightsail content delivery network (CDN) distribution.&lt;/p&gt; &lt;p&gt;A distribution bundle specifies the monthly network transfer quota and monthly cost of your distribution.&lt;/p&gt; &lt;p&gt;Update your distribution&#39;s bundle if your distribution is going over its monthly network transfer quota and is incurring an overage fee.&lt;/p&gt; &lt;p&gt;You can update your distribution&#39;s bundle only one time within your monthly Amazon Web Services billing cycle. To determine if you can update your distribution&#39;s bundle, use the &lt;code&gt;GetDistributions&lt;/code&gt; action. The &lt;code&gt;ableToUpdateBundle&lt;/code&gt; parameter in the result will indicate whether you can currently update your distribution&#39;s bundle.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDistributionBundleTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDistributionBundleRequest updateDistributionBundleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDistributionBundleResult response = api.updateDistributionBundle(xAmzTarget, updateDistributionBundleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates a domain recordset after it is created.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;update domain entry&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;domain name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDomainEntryTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDomainEntryRequest updateDomainEntryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDomainEntryResult response = api.updateDomainEntry(xAmzTarget, updateDomainEntryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the Amazon Lightsail instance metadata parameters on a running or stopped instance. When you modify the parameters on a running instance, the &lt;code&gt;GetInstance&lt;/code&gt; or &lt;code&gt;GetInstances&lt;/code&gt; API operation initially responds with a state of &lt;code&gt;pending&lt;/code&gt;. After the parameter modifications are successfully applied, the state changes to &lt;code&gt;applied&lt;/code&gt; in subsequent &lt;code&gt;GetInstance&lt;/code&gt; or &lt;code&gt;GetInstances&lt;/code&gt; API calls. For more information, see &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-instance-metadata-service\&quot;&gt;Use IMDSv2 with an Amazon Lightsail instance&lt;/a&gt; in the &lt;i&gt;Amazon Lightsail Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInstanceMetadataOptionsTest() throws ApiException {
        String xAmzTarget = null;
        UpdateInstanceMetadataOptionsRequest updateInstanceMetadataOptionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateInstanceMetadataOptionsResult response = api.updateInstanceMetadataOptions(xAmzTarget, updateInstanceMetadataOptionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the specified attribute for a load balancer. You can only update one attribute at a time.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;update load balancer attribute&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by &lt;code&gt;load balancer name&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLoadBalancerAttributeTest() throws ApiException {
        String xAmzTarget = null;
        UpdateLoadBalancerAttributeRequest updateLoadBalancerAttributeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateLoadBalancerAttributeResult response = api.updateLoadBalancerAttribute(xAmzTarget, updateLoadBalancerAttributeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Allows the update of one or more attributes of a database in Amazon Lightsail.&lt;/p&gt; &lt;p&gt;Updates are applied immediately, or in cases where the updates could result in an outage, are applied during the database&#39;s predefined maintenance window.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;update relational database&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRelationalDatabaseTest() throws ApiException {
        String xAmzTarget = null;
        UpdateRelationalDatabaseRequest updateRelationalDatabaseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateRelationalDatabaseResult response = api.updateRelationalDatabase(xAmzTarget, updateRelationalDatabaseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Allows the update of one or more parameters of a database in Amazon Lightsail.&lt;/p&gt; &lt;p&gt;Parameter updates don&#39;t cause outages; therefore, their application is not subject to the preferred maintenance window. However, there are two ways in which parameter updates are applied: &lt;code&gt;dynamic&lt;/code&gt; or &lt;code&gt;pending-reboot&lt;/code&gt;. Parameters marked with a &lt;code&gt;dynamic&lt;/code&gt; apply type are applied immediately. Parameters marked with a &lt;code&gt;pending-reboot&lt;/code&gt; apply type are applied only after the database is rebooted using the &lt;code&gt;reboot relational database&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;update relational database parameters&lt;/code&gt; operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the &lt;a href&#x3D;\&quot;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags\&quot;&gt;Amazon Lightsail Developer Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRelationalDatabaseParametersTest() throws ApiException {
        String xAmzTarget = null;
        UpdateRelationalDatabaseParametersRequest updateRelationalDatabaseParametersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateRelationalDatabaseParametersResult response = api.updateRelationalDatabaseParameters(xAmzTarget, updateRelationalDatabaseParametersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
