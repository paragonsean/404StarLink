/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InstanceAccessDetailsPasswordData;
import org.openapitools.client.model.InstanceAccessProtocol;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters for gaining temporary access to one of your Amazon Lightsail instances.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:08:53.071508-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceAccessDetails {
  public static final String SERIALIZED_NAME_CERT_KEY = "certKey";
  @SerializedName(SERIALIZED_NAME_CERT_KEY)
  private String certKey;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private OffsetDateTime expiresAt;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PASSWORD_DATA = "passwordData";
  @SerializedName(SERIALIZED_NAME_PASSWORD_DATA)
  private InstanceAccessDetailsPasswordData passwordData;

  public static final String SERIALIZED_NAME_PRIVATE_KEY = "privateKey";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY)
  private String privateKey;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private InstanceAccessProtocol protocol;

  public static final String SERIALIZED_NAME_INSTANCE_NAME = "instanceName";
  @SerializedName(SERIALIZED_NAME_INSTANCE_NAME)
  private String instanceName;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_HOST_KEYS = "hostKeys";
  @SerializedName(SERIALIZED_NAME_HOST_KEYS)
  private List hostKeys;

  public InstanceAccessDetails() {
  }

  public InstanceAccessDetails certKey(String certKey) {
    this.certKey = certKey;
    return this;
  }

  /**
   * Get certKey
   * @return certKey
   */
  @javax.annotation.Nullable
  public String getCertKey() {
    return certKey;
  }

  public void setCertKey(String certKey) {
    this.certKey = certKey;
  }


  public InstanceAccessDetails expiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * Get expiresAt
   * @return expiresAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }


  public InstanceAccessDetails ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public InstanceAccessDetails password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public InstanceAccessDetails passwordData(InstanceAccessDetailsPasswordData passwordData) {
    this.passwordData = passwordData;
    return this;
  }

  /**
   * Get passwordData
   * @return passwordData
   */
  @javax.annotation.Nullable
  public InstanceAccessDetailsPasswordData getPasswordData() {
    return passwordData;
  }

  public void setPasswordData(InstanceAccessDetailsPasswordData passwordData) {
    this.passwordData = passwordData;
  }


  public InstanceAccessDetails privateKey(String privateKey) {
    this.privateKey = privateKey;
    return this;
  }

  /**
   * Get privateKey
   * @return privateKey
   */
  @javax.annotation.Nullable
  public String getPrivateKey() {
    return privateKey;
  }

  public void setPrivateKey(String privateKey) {
    this.privateKey = privateKey;
  }


  public InstanceAccessDetails protocol(InstanceAccessProtocol protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public InstanceAccessProtocol getProtocol() {
    return protocol;
  }

  public void setProtocol(InstanceAccessProtocol protocol) {
    this.protocol = protocol;
  }


  public InstanceAccessDetails instanceName(String instanceName) {
    this.instanceName = instanceName;
    return this;
  }

  /**
   * Get instanceName
   * @return instanceName
   */
  @javax.annotation.Nullable
  public String getInstanceName() {
    return instanceName;
  }

  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }


  public InstanceAccessDetails username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public InstanceAccessDetails hostKeys(List hostKeys) {
    this.hostKeys = hostKeys;
    return this;
  }

  /**
   * Get hostKeys
   * @return hostKeys
   */
  @javax.annotation.Nullable
  public List getHostKeys() {
    return hostKeys;
  }

  public void setHostKeys(List hostKeys) {
    this.hostKeys = hostKeys;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceAccessDetails instanceAccessDetails = (InstanceAccessDetails) o;
    return Objects.equals(this.certKey, instanceAccessDetails.certKey) &&
        Objects.equals(this.expiresAt, instanceAccessDetails.expiresAt) &&
        Objects.equals(this.ipAddress, instanceAccessDetails.ipAddress) &&
        Objects.equals(this.password, instanceAccessDetails.password) &&
        Objects.equals(this.passwordData, instanceAccessDetails.passwordData) &&
        Objects.equals(this.privateKey, instanceAccessDetails.privateKey) &&
        Objects.equals(this.protocol, instanceAccessDetails.protocol) &&
        Objects.equals(this.instanceName, instanceAccessDetails.instanceName) &&
        Objects.equals(this.username, instanceAccessDetails.username) &&
        Objects.equals(this.hostKeys, instanceAccessDetails.hostKeys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certKey, expiresAt, ipAddress, password, passwordData, privateKey, protocol, instanceName, username, hostKeys);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceAccessDetails {\n");
    sb.append("    certKey: ").append(toIndentedString(certKey)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    passwordData: ").append(toIndentedString(passwordData)).append("\n");
    sb.append("    privateKey: ").append(toIndentedString(privateKey)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    hostKeys: ").append(toIndentedString(hostKeys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certKey");
    openapiFields.add("expiresAt");
    openapiFields.add("ipAddress");
    openapiFields.add("password");
    openapiFields.add("passwordData");
    openapiFields.add("privateKey");
    openapiFields.add("protocol");
    openapiFields.add("instanceName");
    openapiFields.add("username");
    openapiFields.add("hostKeys");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceAccessDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceAccessDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceAccessDetails is not found in the empty JSON string", InstanceAccessDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceAccessDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceAccessDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `certKey`
      if (jsonObj.get("certKey") != null && !jsonObj.get("certKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("certKey"));
      }
      // validate the optional field `expiresAt`
      if (jsonObj.get("expiresAt") != null && !jsonObj.get("expiresAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("expiresAt"));
      }
      // validate the optional field `ipAddress`
      if (jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ipAddress"));
      }
      // validate the optional field `password`
      if (jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("password"));
      }
      // validate the optional field `passwordData`
      if (jsonObj.get("passwordData") != null && !jsonObj.get("passwordData").isJsonNull()) {
        InstanceAccessDetailsPasswordData.validateJsonElement(jsonObj.get("passwordData"));
      }
      // validate the optional field `privateKey`
      if (jsonObj.get("privateKey") != null && !jsonObj.get("privateKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("privateKey"));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        InstanceAccessProtocol.validateJsonElement(jsonObj.get("protocol"));
      }
      // validate the optional field `instanceName`
      if (jsonObj.get("instanceName") != null && !jsonObj.get("instanceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("instanceName"));
      }
      // validate the optional field `username`
      if (jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("username"));
      }
      // validate the optional field `hostKeys`
      if (jsonObj.get("hostKeys") != null && !jsonObj.get("hostKeys").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("hostKeys"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceAccessDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceAccessDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceAccessDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceAccessDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceAccessDetails>() {
           @Override
           public void write(JsonWriter out, InstanceAccessDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceAccessDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceAccessDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceAccessDetails
   * @throws IOException if the JSON string is invalid with respect to InstanceAccessDetails
   */
  public static InstanceAccessDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceAccessDetails.class);
  }

  /**
   * Convert an instance of InstanceAccessDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

