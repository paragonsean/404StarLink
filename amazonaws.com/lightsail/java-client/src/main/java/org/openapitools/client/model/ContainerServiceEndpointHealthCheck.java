/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContainerServiceEndpointHealthCheck
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:08:53.071508-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerServiceEndpointHealthCheck {
  public static final String SERIALIZED_NAME_HEALTHY_THRESHOLD = "healthyThreshold";
  @SerializedName(SERIALIZED_NAME_HEALTHY_THRESHOLD)
  private Integer healthyThreshold;

  public static final String SERIALIZED_NAME_UNHEALTHY_THRESHOLD = "unhealthyThreshold";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_THRESHOLD)
  private Integer unhealthyThreshold;

  public static final String SERIALIZED_NAME_TIMEOUT_SECONDS = "timeoutSeconds";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_SECONDS)
  private Integer timeoutSeconds;

  public static final String SERIALIZED_NAME_INTERVAL_SECONDS = "intervalSeconds";
  @SerializedName(SERIALIZED_NAME_INTERVAL_SECONDS)
  private Integer intervalSeconds;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_SUCCESS_CODES = "successCodes";
  @SerializedName(SERIALIZED_NAME_SUCCESS_CODES)
  private String successCodes;

  public ContainerServiceEndpointHealthCheck() {
  }

  public ContainerServiceEndpointHealthCheck healthyThreshold(Integer healthyThreshold) {
    this.healthyThreshold = healthyThreshold;
    return this;
  }

  /**
   * Get healthyThreshold
   * @return healthyThreshold
   */
  @javax.annotation.Nullable
  public Integer getHealthyThreshold() {
    return healthyThreshold;
  }

  public void setHealthyThreshold(Integer healthyThreshold) {
    this.healthyThreshold = healthyThreshold;
  }


  public ContainerServiceEndpointHealthCheck unhealthyThreshold(Integer unhealthyThreshold) {
    this.unhealthyThreshold = unhealthyThreshold;
    return this;
  }

  /**
   * Get unhealthyThreshold
   * @return unhealthyThreshold
   */
  @javax.annotation.Nullable
  public Integer getUnhealthyThreshold() {
    return unhealthyThreshold;
  }

  public void setUnhealthyThreshold(Integer unhealthyThreshold) {
    this.unhealthyThreshold = unhealthyThreshold;
  }


  public ContainerServiceEndpointHealthCheck timeoutSeconds(Integer timeoutSeconds) {
    this.timeoutSeconds = timeoutSeconds;
    return this;
  }

  /**
   * Get timeoutSeconds
   * @return timeoutSeconds
   */
  @javax.annotation.Nullable
  public Integer getTimeoutSeconds() {
    return timeoutSeconds;
  }

  public void setTimeoutSeconds(Integer timeoutSeconds) {
    this.timeoutSeconds = timeoutSeconds;
  }


  public ContainerServiceEndpointHealthCheck intervalSeconds(Integer intervalSeconds) {
    this.intervalSeconds = intervalSeconds;
    return this;
  }

  /**
   * Get intervalSeconds
   * @return intervalSeconds
   */
  @javax.annotation.Nullable
  public Integer getIntervalSeconds() {
    return intervalSeconds;
  }

  public void setIntervalSeconds(Integer intervalSeconds) {
    this.intervalSeconds = intervalSeconds;
  }


  public ContainerServiceEndpointHealthCheck path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ContainerServiceEndpointHealthCheck successCodes(String successCodes) {
    this.successCodes = successCodes;
    return this;
  }

  /**
   * Get successCodes
   * @return successCodes
   */
  @javax.annotation.Nullable
  public String getSuccessCodes() {
    return successCodes;
  }

  public void setSuccessCodes(String successCodes) {
    this.successCodes = successCodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerServiceEndpointHealthCheck containerServiceEndpointHealthCheck = (ContainerServiceEndpointHealthCheck) o;
    return Objects.equals(this.healthyThreshold, containerServiceEndpointHealthCheck.healthyThreshold) &&
        Objects.equals(this.unhealthyThreshold, containerServiceEndpointHealthCheck.unhealthyThreshold) &&
        Objects.equals(this.timeoutSeconds, containerServiceEndpointHealthCheck.timeoutSeconds) &&
        Objects.equals(this.intervalSeconds, containerServiceEndpointHealthCheck.intervalSeconds) &&
        Objects.equals(this.path, containerServiceEndpointHealthCheck.path) &&
        Objects.equals(this.successCodes, containerServiceEndpointHealthCheck.successCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthyThreshold, unhealthyThreshold, timeoutSeconds, intervalSeconds, path, successCodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerServiceEndpointHealthCheck {\n");
    sb.append("    healthyThreshold: ").append(toIndentedString(healthyThreshold)).append("\n");
    sb.append("    unhealthyThreshold: ").append(toIndentedString(unhealthyThreshold)).append("\n");
    sb.append("    timeoutSeconds: ").append(toIndentedString(timeoutSeconds)).append("\n");
    sb.append("    intervalSeconds: ").append(toIndentedString(intervalSeconds)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    successCodes: ").append(toIndentedString(successCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("healthyThreshold");
    openapiFields.add("unhealthyThreshold");
    openapiFields.add("timeoutSeconds");
    openapiFields.add("intervalSeconds");
    openapiFields.add("path");
    openapiFields.add("successCodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerServiceEndpointHealthCheck
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerServiceEndpointHealthCheck.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerServiceEndpointHealthCheck is not found in the empty JSON string", ContainerServiceEndpointHealthCheck.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerServiceEndpointHealthCheck.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerServiceEndpointHealthCheck` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `healthyThreshold`
      if (jsonObj.get("healthyThreshold") != null && !jsonObj.get("healthyThreshold").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("healthyThreshold"));
      }
      // validate the optional field `unhealthyThreshold`
      if (jsonObj.get("unhealthyThreshold") != null && !jsonObj.get("unhealthyThreshold").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("unhealthyThreshold"));
      }
      // validate the optional field `timeoutSeconds`
      if (jsonObj.get("timeoutSeconds") != null && !jsonObj.get("timeoutSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("timeoutSeconds"));
      }
      // validate the optional field `intervalSeconds`
      if (jsonObj.get("intervalSeconds") != null && !jsonObj.get("intervalSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("intervalSeconds"));
      }
      // validate the optional field `path`
      if (jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("path"));
      }
      // validate the optional field `successCodes`
      if (jsonObj.get("successCodes") != null && !jsonObj.get("successCodes").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("successCodes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerServiceEndpointHealthCheck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerServiceEndpointHealthCheck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerServiceEndpointHealthCheck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerServiceEndpointHealthCheck.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerServiceEndpointHealthCheck>() {
           @Override
           public void write(JsonWriter out, ContainerServiceEndpointHealthCheck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerServiceEndpointHealthCheck read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerServiceEndpointHealthCheck given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerServiceEndpointHealthCheck
   * @throws IOException if the JSON string is invalid with respect to ContainerServiceEndpointHealthCheck
   */
  public static ContainerServiceEndpointHealthCheck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerServiceEndpointHealthCheck.class);
  }

  /**
   * Convert an instance of ContainerServiceEndpointHealthCheck to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

