/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateRelationalDatabaseFromSnapshotRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:08:53.071508-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRelationalDatabaseFromSnapshotRequest {
  public static final String SERIALIZED_NAME_RELATIONAL_DATABASE_NAME = "relationalDatabaseName";
  @SerializedName(SERIALIZED_NAME_RELATIONAL_DATABASE_NAME)
  private String relationalDatabaseName;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "availabilityZone";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
  private String availabilityZone;

  public static final String SERIALIZED_NAME_PUBLICLY_ACCESSIBLE = "publiclyAccessible";
  @SerializedName(SERIALIZED_NAME_PUBLICLY_ACCESSIBLE)
  private Boolean publiclyAccessible;

  public static final String SERIALIZED_NAME_RELATIONAL_DATABASE_SNAPSHOT_NAME = "relationalDatabaseSnapshotName";
  @SerializedName(SERIALIZED_NAME_RELATIONAL_DATABASE_SNAPSHOT_NAME)
  private String relationalDatabaseSnapshotName;

  public static final String SERIALIZED_NAME_RELATIONAL_DATABASE_BUNDLE_ID = "relationalDatabaseBundleId";
  @SerializedName(SERIALIZED_NAME_RELATIONAL_DATABASE_BUNDLE_ID)
  private String relationalDatabaseBundleId;

  public static final String SERIALIZED_NAME_SOURCE_RELATIONAL_DATABASE_NAME = "sourceRelationalDatabaseName";
  @SerializedName(SERIALIZED_NAME_SOURCE_RELATIONAL_DATABASE_NAME)
  private String sourceRelationalDatabaseName;

  public static final String SERIALIZED_NAME_RESTORE_TIME = "restoreTime";
  @SerializedName(SERIALIZED_NAME_RESTORE_TIME)
  private OffsetDateTime restoreTime;

  public static final String SERIALIZED_NAME_USE_LATEST_RESTORABLE_TIME = "useLatestRestorableTime";
  @SerializedName(SERIALIZED_NAME_USE_LATEST_RESTORABLE_TIME)
  private Boolean useLatestRestorableTime;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public CreateRelationalDatabaseFromSnapshotRequest() {
  }

  public CreateRelationalDatabaseFromSnapshotRequest relationalDatabaseName(String relationalDatabaseName) {
    this.relationalDatabaseName = relationalDatabaseName;
    return this;
  }

  /**
   * Get relationalDatabaseName
   * @return relationalDatabaseName
   */
  @javax.annotation.Nonnull
  public String getRelationalDatabaseName() {
    return relationalDatabaseName;
  }

  public void setRelationalDatabaseName(String relationalDatabaseName) {
    this.relationalDatabaseName = relationalDatabaseName;
  }


  public CreateRelationalDatabaseFromSnapshotRequest availabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
    return this;
  }

  /**
   * Get availabilityZone
   * @return availabilityZone
   */
  @javax.annotation.Nullable
  public String getAvailabilityZone() {
    return availabilityZone;
  }

  public void setAvailabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
  }


  public CreateRelationalDatabaseFromSnapshotRequest publiclyAccessible(Boolean publiclyAccessible) {
    this.publiclyAccessible = publiclyAccessible;
    return this;
  }

  /**
   * Get publiclyAccessible
   * @return publiclyAccessible
   */
  @javax.annotation.Nullable
  public Boolean getPubliclyAccessible() {
    return publiclyAccessible;
  }

  public void setPubliclyAccessible(Boolean publiclyAccessible) {
    this.publiclyAccessible = publiclyAccessible;
  }


  public CreateRelationalDatabaseFromSnapshotRequest relationalDatabaseSnapshotName(String relationalDatabaseSnapshotName) {
    this.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName;
    return this;
  }

  /**
   * Get relationalDatabaseSnapshotName
   * @return relationalDatabaseSnapshotName
   */
  @javax.annotation.Nullable
  public String getRelationalDatabaseSnapshotName() {
    return relationalDatabaseSnapshotName;
  }

  public void setRelationalDatabaseSnapshotName(String relationalDatabaseSnapshotName) {
    this.relationalDatabaseSnapshotName = relationalDatabaseSnapshotName;
  }


  public CreateRelationalDatabaseFromSnapshotRequest relationalDatabaseBundleId(String relationalDatabaseBundleId) {
    this.relationalDatabaseBundleId = relationalDatabaseBundleId;
    return this;
  }

  /**
   * Get relationalDatabaseBundleId
   * @return relationalDatabaseBundleId
   */
  @javax.annotation.Nullable
  public String getRelationalDatabaseBundleId() {
    return relationalDatabaseBundleId;
  }

  public void setRelationalDatabaseBundleId(String relationalDatabaseBundleId) {
    this.relationalDatabaseBundleId = relationalDatabaseBundleId;
  }


  public CreateRelationalDatabaseFromSnapshotRequest sourceRelationalDatabaseName(String sourceRelationalDatabaseName) {
    this.sourceRelationalDatabaseName = sourceRelationalDatabaseName;
    return this;
  }

  /**
   * Get sourceRelationalDatabaseName
   * @return sourceRelationalDatabaseName
   */
  @javax.annotation.Nullable
  public String getSourceRelationalDatabaseName() {
    return sourceRelationalDatabaseName;
  }

  public void setSourceRelationalDatabaseName(String sourceRelationalDatabaseName) {
    this.sourceRelationalDatabaseName = sourceRelationalDatabaseName;
  }


  public CreateRelationalDatabaseFromSnapshotRequest restoreTime(OffsetDateTime restoreTime) {
    this.restoreTime = restoreTime;
    return this;
  }

  /**
   * Get restoreTime
   * @return restoreTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRestoreTime() {
    return restoreTime;
  }

  public void setRestoreTime(OffsetDateTime restoreTime) {
    this.restoreTime = restoreTime;
  }


  public CreateRelationalDatabaseFromSnapshotRequest useLatestRestorableTime(Boolean useLatestRestorableTime) {
    this.useLatestRestorableTime = useLatestRestorableTime;
    return this;
  }

  /**
   * Get useLatestRestorableTime
   * @return useLatestRestorableTime
   */
  @javax.annotation.Nullable
  public Boolean getUseLatestRestorableTime() {
    return useLatestRestorableTime;
  }

  public void setUseLatestRestorableTime(Boolean useLatestRestorableTime) {
    this.useLatestRestorableTime = useLatestRestorableTime;
  }


  public CreateRelationalDatabaseFromSnapshotRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRelationalDatabaseFromSnapshotRequest createRelationalDatabaseFromSnapshotRequest = (CreateRelationalDatabaseFromSnapshotRequest) o;
    return Objects.equals(this.relationalDatabaseName, createRelationalDatabaseFromSnapshotRequest.relationalDatabaseName) &&
        Objects.equals(this.availabilityZone, createRelationalDatabaseFromSnapshotRequest.availabilityZone) &&
        Objects.equals(this.publiclyAccessible, createRelationalDatabaseFromSnapshotRequest.publiclyAccessible) &&
        Objects.equals(this.relationalDatabaseSnapshotName, createRelationalDatabaseFromSnapshotRequest.relationalDatabaseSnapshotName) &&
        Objects.equals(this.relationalDatabaseBundleId, createRelationalDatabaseFromSnapshotRequest.relationalDatabaseBundleId) &&
        Objects.equals(this.sourceRelationalDatabaseName, createRelationalDatabaseFromSnapshotRequest.sourceRelationalDatabaseName) &&
        Objects.equals(this.restoreTime, createRelationalDatabaseFromSnapshotRequest.restoreTime) &&
        Objects.equals(this.useLatestRestorableTime, createRelationalDatabaseFromSnapshotRequest.useLatestRestorableTime) &&
        Objects.equals(this.tags, createRelationalDatabaseFromSnapshotRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(relationalDatabaseName, availabilityZone, publiclyAccessible, relationalDatabaseSnapshotName, relationalDatabaseBundleId, sourceRelationalDatabaseName, restoreTime, useLatestRestorableTime, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRelationalDatabaseFromSnapshotRequest {\n");
    sb.append("    relationalDatabaseName: ").append(toIndentedString(relationalDatabaseName)).append("\n");
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("    publiclyAccessible: ").append(toIndentedString(publiclyAccessible)).append("\n");
    sb.append("    relationalDatabaseSnapshotName: ").append(toIndentedString(relationalDatabaseSnapshotName)).append("\n");
    sb.append("    relationalDatabaseBundleId: ").append(toIndentedString(relationalDatabaseBundleId)).append("\n");
    sb.append("    sourceRelationalDatabaseName: ").append(toIndentedString(sourceRelationalDatabaseName)).append("\n");
    sb.append("    restoreTime: ").append(toIndentedString(restoreTime)).append("\n");
    sb.append("    useLatestRestorableTime: ").append(toIndentedString(useLatestRestorableTime)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("relationalDatabaseName");
    openapiFields.add("availabilityZone");
    openapiFields.add("publiclyAccessible");
    openapiFields.add("relationalDatabaseSnapshotName");
    openapiFields.add("relationalDatabaseBundleId");
    openapiFields.add("sourceRelationalDatabaseName");
    openapiFields.add("restoreTime");
    openapiFields.add("useLatestRestorableTime");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("relationalDatabaseName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRelationalDatabaseFromSnapshotRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRelationalDatabaseFromSnapshotRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRelationalDatabaseFromSnapshotRequest is not found in the empty JSON string", CreateRelationalDatabaseFromSnapshotRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRelationalDatabaseFromSnapshotRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRelationalDatabaseFromSnapshotRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRelationalDatabaseFromSnapshotRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `relationalDatabaseName`
      String.validateJsonElement(jsonObj.get("relationalDatabaseName"));
      // validate the optional field `availabilityZone`
      if (jsonObj.get("availabilityZone") != null && !jsonObj.get("availabilityZone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("availabilityZone"));
      }
      // validate the optional field `publiclyAccessible`
      if (jsonObj.get("publiclyAccessible") != null && !jsonObj.get("publiclyAccessible").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("publiclyAccessible"));
      }
      // validate the optional field `relationalDatabaseSnapshotName`
      if (jsonObj.get("relationalDatabaseSnapshotName") != null && !jsonObj.get("relationalDatabaseSnapshotName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("relationalDatabaseSnapshotName"));
      }
      // validate the optional field `relationalDatabaseBundleId`
      if (jsonObj.get("relationalDatabaseBundleId") != null && !jsonObj.get("relationalDatabaseBundleId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("relationalDatabaseBundleId"));
      }
      // validate the optional field `sourceRelationalDatabaseName`
      if (jsonObj.get("sourceRelationalDatabaseName") != null && !jsonObj.get("sourceRelationalDatabaseName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceRelationalDatabaseName"));
      }
      // validate the optional field `restoreTime`
      if (jsonObj.get("restoreTime") != null && !jsonObj.get("restoreTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("restoreTime"));
      }
      // validate the optional field `useLatestRestorableTime`
      if (jsonObj.get("useLatestRestorableTime") != null && !jsonObj.get("useLatestRestorableTime").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("useLatestRestorableTime"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRelationalDatabaseFromSnapshotRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRelationalDatabaseFromSnapshotRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRelationalDatabaseFromSnapshotRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRelationalDatabaseFromSnapshotRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRelationalDatabaseFromSnapshotRequest>() {
           @Override
           public void write(JsonWriter out, CreateRelationalDatabaseFromSnapshotRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRelationalDatabaseFromSnapshotRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRelationalDatabaseFromSnapshotRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRelationalDatabaseFromSnapshotRequest
   * @throws IOException if the JSON string is invalid with respect to CreateRelationalDatabaseFromSnapshotRequest
   */
  public static CreateRelationalDatabaseFromSnapshotRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRelationalDatabaseFromSnapshotRequest.class);
  }

  /**
   * Convert an instance of CreateRelationalDatabaseFromSnapshotRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

