# coding: utf-8

"""
    Amazon Textract

    Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.

    The version of the OpenAPI document: 2018-06-27
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.block_geometry import BlockGeometry
from openapi_client.models.block_query import BlockQuery
from typing import Optional, Set
from typing_extensions import Self

class Block(BaseModel):
    """
    <p>A <code>Block</code> represents items that are recognized in a document within a group of pixels close to each other. The information returned in a <code>Block</code> object depends on the type of operation. In text detection for documents (for example <a>DetectDocumentText</a>), you get information about the detected words and lines of text. In text analysis (for example <a>AnalyzeDocument</a>), you can also get information about the fields, tables, and selection elements that are detected in the document.</p> <p>An array of <code>Block</code> objects is returned by both synchronous and asynchronous operations. In synchronous operations, such as <a>DetectDocumentText</a>, the array of <code>Block</code> objects is the entire set of results. In asynchronous operations, such as <a>GetDocumentAnalysis</a>, the array is returned over one or more responses.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/textract/latest/dg/how-it-works.html\">How Amazon Textract Works</a>.</p>
    """ # noqa: E501
    block_type: Optional[Any] = Field(default=None, alias="BlockType")
    confidence: Optional[Any] = Field(default=None, alias="Confidence")
    text: Optional[Any] = Field(default=None, alias="Text")
    text_type: Optional[Any] = Field(default=None, alias="TextType")
    row_index: Optional[Any] = Field(default=None, alias="RowIndex")
    column_index: Optional[Any] = Field(default=None, alias="ColumnIndex")
    row_span: Optional[Any] = Field(default=None, alias="RowSpan")
    column_span: Optional[Any] = Field(default=None, alias="ColumnSpan")
    geometry: Optional[BlockGeometry] = Field(default=None, alias="Geometry")
    id: Optional[Any] = Field(default=None, alias="Id")
    relationships: Optional[Any] = Field(default=None, alias="Relationships")
    entity_types: Optional[Any] = Field(default=None, alias="EntityTypes")
    selection_status: Optional[Any] = Field(default=None, alias="SelectionStatus")
    page: Optional[Any] = Field(default=None, alias="Page")
    query: Optional[BlockQuery] = Field(default=None, alias="Query")
    __properties: ClassVar[List[str]] = ["BlockType", "Confidence", "Text", "TextType", "RowIndex", "ColumnIndex", "RowSpan", "ColumnSpan", "Geometry", "Id", "Relationships", "EntityTypes", "SelectionStatus", "Page", "Query"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Block from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of block_type
        if self.block_type:
            _dict['BlockType'] = self.block_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_type
        if self.text_type:
            _dict['TextType'] = self.text_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geometry
        if self.geometry:
            _dict['Geometry'] = self.geometry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selection_status
        if self.selection_status:
            _dict['SelectionStatus'] = self.selection_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['Query'] = self.query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Block from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BlockType": BlockType.from_dict(obj["BlockType"]) if obj.get("BlockType") is not None else None,
            "Confidence": obj.get("Confidence"),
            "Text": obj.get("Text"),
            "TextType": TextType.from_dict(obj["TextType"]) if obj.get("TextType") is not None else None,
            "RowIndex": obj.get("RowIndex"),
            "ColumnIndex": obj.get("ColumnIndex"),
            "RowSpan": obj.get("RowSpan"),
            "ColumnSpan": obj.get("ColumnSpan"),
            "Geometry": BlockGeometry.from_dict(obj["Geometry"]) if obj.get("Geometry") is not None else None,
            "Id": obj.get("Id"),
            "Relationships": obj.get("Relationships"),
            "EntityTypes": obj.get("EntityTypes"),
            "SelectionStatus": SelectionStatus.from_dict(obj["SelectionStatus"]) if obj.get("SelectionStatus") is not None else None,
            "Page": obj.get("Page"),
            "Query": BlockQuery.from_dict(obj["Query"]) if obj.get("Query") is not None else None
        })
        return _obj


