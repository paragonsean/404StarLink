# coding: utf-8

"""
    eBay Finances API

    This API is used to retrieve seller payouts and monetary transaction details related to those payouts.

    The version of the OpenAPI document: v1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from openapi_client.models.funding_source import FundingSource
from openapi_client.models.transfer_detail import TransferDetail
from typing import Optional, Set
from typing_extensions import Self

class Transfer(BaseModel):
    """
    This type is the base response type used by <code>TRANSFER</code> transaction type that is returned in the response.
    """ # noqa: E501
    funding_source: Optional[FundingSource] = Field(default=None, alias="fundingSource")
    transaction_date: Optional[StrictStr] = Field(default=None, description="This timestamp indicates the date/time of the transfer. The following (UTC) format is used: <code>YYYY-MM-DDTHH:MM:SS.SSSZ</code>. For example, <code>2020-08-04T19:09:02.768Z</code>", alias="transactionDate")
    transfer_amount: Optional[Amount] = Field(default=None, alias="transferAmount")
    transfer_detail: Optional[TransferDetail] = Field(default=None, alias="transferDetail")
    transfer_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the <code>TRANSFER</code> transaction type. This is the same value that was passed into the end of the call URI.", alias="transferId")
    __properties: ClassVar[List[str]] = ["fundingSource", "transactionDate", "transferAmount", "transferDetail", "transferId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transfer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of funding_source
        if self.funding_source:
            _dict['fundingSource'] = self.funding_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer_amount
        if self.transfer_amount:
            _dict['transferAmount'] = self.transfer_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer_detail
        if self.transfer_detail:
            _dict['transferDetail'] = self.transfer_detail.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transfer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fundingSource": FundingSource.from_dict(obj["fundingSource"]) if obj.get("fundingSource") is not None else None,
            "transactionDate": obj.get("transactionDate"),
            "transferAmount": Amount.from_dict(obj["transferAmount"]) if obj.get("transferAmount") is not None else None,
            "transferDetail": TransferDetail.from_dict(obj["transferDetail"]) if obj.get("transferDetail") is not None else None,
            "transferId": obj.get("transferId")
        })
        return _obj


