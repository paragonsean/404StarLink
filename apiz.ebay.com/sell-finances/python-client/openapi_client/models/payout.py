# coding: utf-8

"""
    eBay Finances API

    This API is used to retrieve seller payouts and monetary transaction details related to those payouts.

    The version of the OpenAPI document: v1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from openapi_client.models.payout_instrument import PayoutInstrument
from typing import Optional, Set
from typing_extensions import Self

class Payout(BaseModel):
    """
    This type is used to express the details of one seller payout that is returned with the <strong>getPayout</strong> or <strong>getPayouts</strong> methods.
    """ # noqa: E501
    amount: Optional[Amount] = None
    bank_reference: Optional[StrictStr] = Field(default=None, description="This field contains additional information provided by the bank and passed on by the payment processor; e.g., the manner in which the transaction will appear on the seller's bank statement. The field is returned only when provided by the bank and processor.", alias="bankReference")
    last_attempted_payout_date: Optional[StrictStr] = Field(default=None, description="This timestamp indicates the date/time when eBay last attempted to process a seller payout but it failed. This field is only returned if a seller payout fails, and the <strong>payoutStatus</strong> value shows <code>RETRYABLE_FAILED</code> or <code>TERMINAL_FAILED</code>. A seller can filter on the <b>lastAttemptedPayoutDate</b> in a <b>getPayouts</b> request.", alias="lastAttemptedPayoutDate")
    payout_date: Optional[StrictStr] = Field(default=None, description="This timestamp indicates when the seller payout began processing. The following format is used: <code>YYYY-MM-DDTHH:MM:SS.SSSZ</code>. For example, <code>2015-08-04T19:09:02.768Z</code>. This field is still returned even if the payout was pending but failed (<strong>payoutStatus</strong> value shows <code>RETRYABLE_FAILED</code> or <code>TERMINAL_FAILED</code>).", alias="payoutDate")
    payout_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the seller payout. This identifier is generated once eBay begins processing the payout to the seller's bank account.", alias="payoutId")
    payout_instrument: Optional[PayoutInstrument] = Field(default=None, alias="payoutInstrument")
    payout_memo: Optional[StrictStr] = Field(default=None, description="This field contains information provided by upstream components, based on internal and external commitments. A typical message would contain the expected arrival time of the payout.", alias="payoutMemo")
    payout_status: Optional[StrictStr] = Field(default=None, description="This enumeration value indicates the current status of the seller payout. For a successful payout, the value returned will be <code>SUCCEEDED</code>. See the <strong>PayoutStatusEnum</strong> type for more details on each payout status value. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:PayoutStatusEnum'>eBay API documentation</a>", alias="payoutStatus")
    payout_status_description: Optional[StrictStr] = Field(default=None, description="This field provides more details about the current status of payout. The description returned here will correspond with enumeration value returned in the <strong>payoutStatus</strong> field. The following shows what description text might appear based on the different <strong>payoutStatus</strong> values:<ul><li><code>INITIATED</code>: <em>Preparing to send</em></li><li><code>SUCCEEDED</code>: <em>Funds sent</em></li><li><code>REVERSED</code>: <em>Waiting to retry : Money rejected by seller's bank</em></li><li><code>RETRYABLE_FAILED</code>: <em>Waiting to retry</em></li><li><code>TERMINAL_FAILED</code>: <em>Payout failed</em></li></ul>", alias="payoutStatusDescription")
    total_amount: Optional[Amount] = Field(default=None, alias="totalAmount")
    total_fee: Optional[Amount] = Field(default=None, alias="totalFee")
    transaction_count: Optional[StrictInt] = Field(default=None, description="This integer value indicates the number of monetary transactions (all orders, refunds, and credits, etc.) that have occurred with the corresponding payout. Its value should always be at least <code>1</code>, since there is at least one order per seller payout.", alias="transactionCount")
    __properties: ClassVar[List[str]] = ["amount", "bankReference", "lastAttemptedPayoutDate", "payoutDate", "payoutId", "payoutInstrument", "payoutMemo", "payoutStatus", "payoutStatusDescription", "totalAmount", "totalFee", "transactionCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Payout from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payout_instrument
        if self.payout_instrument:
            _dict['payoutInstrument'] = self.payout_instrument.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_amount
        if self.total_amount:
            _dict['totalAmount'] = self.total_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_fee
        if self.total_fee:
            _dict['totalFee'] = self.total_fee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Payout from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": Amount.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "bankReference": obj.get("bankReference"),
            "lastAttemptedPayoutDate": obj.get("lastAttemptedPayoutDate"),
            "payoutDate": obj.get("payoutDate"),
            "payoutId": obj.get("payoutId"),
            "payoutInstrument": PayoutInstrument.from_dict(obj["payoutInstrument"]) if obj.get("payoutInstrument") is not None else None,
            "payoutMemo": obj.get("payoutMemo"),
            "payoutStatus": obj.get("payoutStatus"),
            "payoutStatusDescription": obj.get("payoutStatusDescription"),
            "totalAmount": Amount.from_dict(obj["totalAmount"]) if obj.get("totalAmount") is not None else None,
            "totalFee": Amount.from_dict(obj["totalFee"]) if obj.get("totalFee") is not None else None,
            "transactionCount": obj.get("transactionCount")
        })
        return _obj


