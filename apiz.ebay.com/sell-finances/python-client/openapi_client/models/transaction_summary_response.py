# coding: utf-8

"""
    eBay Finances API

    This API is used to retrieve seller payouts and monetary transaction details related to those payouts.

    The version of the OpenAPI document: v1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from typing import Optional, Set
from typing_extensions import Self

class TransactionSummaryResponse(BaseModel):
    """
    This type is the base response type of the <strong>getTransactionSummary</strong> method, and based on the filters that are used in the <strong>getTransactionSummary</strong> call URI, the response may include  total count and amount of the seller's sales and credits, total count and amount of buyer refunds, and total count and amount of seller payment holds.
    """ # noqa: E501
    adjustment_amount: Optional[Amount] = Field(default=None, alias="adjustmentAmount")
    adjustment_booking_entry: Optional[StrictStr] = Field(default=None, description="The credit debit sign indicator for adjustment. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>", alias="adjustmentBookingEntry")
    adjustment_count: Optional[StrictInt] = Field(default=None, description="Total adjustment count for given payee within a specified period.", alias="adjustmentCount")
    balance_transfer_amount: Optional[Amount] = Field(default=None, alias="balanceTransferAmount")
    balance_transfer_booking_entry: Optional[StrictStr] = Field(default=None, description="The credit debit sign indicator for the balance transfer. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>", alias="balanceTransferBookingEntry")
    balance_transfer_count: Optional[StrictInt] = Field(default=None, description="The total balance transfer count for given payee within the specified period.", alias="balanceTransferCount")
    credit_amount: Optional[Amount] = Field(default=None, alias="creditAmount")
    credit_booking_entry: Optional[StrictStr] = Field(default=None, description="The enumeration value indicates whether the dollar amount in the <strong>creditAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>CREDIT</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>", alias="creditBookingEntry")
    credit_count: Optional[StrictInt] = Field(default=None, description="This integer value indicates the total number of the seller's sales and/or credits that match the input criteria. <br><br><span class=\"tablenote\"><strong>Note:</strong> Unless the <b>transactionType</b> filter is used in the request to retrieve a specific type of monetary transaction (sale, buyer refund, or seller credit), the <b>creditCount</b> and <b>creditAmount</b> fields account for both order sales and seller credits (the count and value is not distinguished between the two monetary transaction types).</span><br><br>This field is generally returned, even if <code>0</code>, but it will not be returned if a <strong>transactionType</strong> filter is used, and its value is set to either <code>REFUND</code>, <code>DISPUTE</code>, or <code>SHIPPING_LABEL</code>.", alias="creditCount")
    dispute_amount: Optional[Amount] = Field(default=None, alias="disputeAmount")
    dispute_booking_entry: Optional[StrictStr] = Field(default=None, description="The enumeration value indicates whether the dollar amount in the <strong>disputeAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>DEBIT</code>, but its possible that <code>CREDIT</code> could be returned if the seller contested one or more payment disputes and won the dispute. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>", alias="disputeBookingEntry")
    dispute_count: Optional[StrictInt] = Field(default=None, description="This integer value indicates the total number of payment disputes that have been initiated by one or more buyers. Only the orders that match the input criteria are considered. The Payment Disputes methods in the Fulfillment API can be used by the seller to retrieve more information about any payment disputes. <br><br>This field is generally returned, even if <code>0</code>, but it will not be returned if a <strong>transactionType</strong> filter is used, and its value is set to any value other than <code>DISPUTE</code>.", alias="disputeCount")
    loan_repayment_amount: Optional[Amount] = Field(default=None, alias="loanRepaymentAmount")
    loan_repayment_booking_entry: Optional[StrictStr] = Field(default=None, description="The enumeration value indicates whether the <code>loanRepaymentAmount</code> is a <code>DEBIT</code> against, or a <code>CREDIT</code> to, the sellers's account.<br><br>For most <code>loanRepaymentAmount</code> transactions, <code>loanRepaymentBookingEntry</code> will be <b>DEBIT</b>. However, if a loan repayment transaction is reversed, that transaction will be shown as a <b>CREDIT</b>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>", alias="loanRepaymentBookingEntry")
    loan_repayment_count: Optional[StrictInt] = Field(default=None, description="This integer value indicates the total number of <code>LOAN_REPAYMENT</code> transactions (i.e., <code>DEBIT</code> and <code>CREDIT</code>,) that match the input criteria.<br><br>This field is generally returned even if it equals <b>0</b>. However it will not be returned if a <code>transactionType</code> filter is used and its value has been set to any enumeration value other than <code>LOAN_REPAYMENT</code>.", alias="loanRepaymentCount")
    non_sale_charge_amount: Optional[Amount] = Field(default=None, alias="nonSaleChargeAmount")
    non_sale_charge_booking_entry: Optional[StrictStr] = Field(default=None, description="The credit/debit sign indicator for the non-sale charge. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>", alias="nonSaleChargeBookingEntry")
    non_sale_charge_count: Optional[StrictInt] = Field(default=None, description="The total non-sale charge count for given payee within a specified period.", alias="nonSaleChargeCount")
    on_hold_amount: Optional[Amount] = Field(default=None, alias="onHoldAmount")
    on_hold_booking_entry: Optional[StrictStr] = Field(default=None, description="The enumeration value indicates whether the dollar amount in the <strong>onHoldAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>CREDIT</code>, since on-hold funds should eventually be released as part of a payout to the seller once the hold is cleared. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>", alias="onHoldBookingEntry")
    on_hold_count: Optional[StrictInt] = Field(default=None, description="This integer value indicates the total number of order sales where the associated funds are on hold. Only the orders that match the input criteria are considered.<br><br>This field is generally returned, even if <code>0</code>, but it will not be returned if a <strong>transactionStatus</strong> filter is used, and its value is set to any value other than <code>FUNDS_ON_HOLD</code>.", alias="onHoldCount")
    refund_amount: Optional[Amount] = Field(default=None, alias="refundAmount")
    refund_booking_entry: Optional[StrictStr] = Field(default=None, description="The enumeration value indicates whether the dollar amount in the <strong>refundAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>DEBIT</code> since this a refund from the seller to the buyer. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>", alias="refundBookingEntry")
    refund_count: Optional[StrictInt] = Field(default=None, description="This integer value indicates the total number of buyer refunds that match the input criteria. <br><br>This field is generally returned, even if <code>0</code>, but it will not be returned if a <strong>transactionType</strong> filter is used, and its value is set to any value other than <code>REFUND</code>.", alias="refundCount")
    shipping_label_amount: Optional[Amount] = Field(default=None, alias="shippingLabelAmount")
    shipping_label_booking_entry: Optional[StrictStr] = Field(default=None, description="The enumeration value indicates whether the dollar amount in the <strong>shippingLabelAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>DEBIT</code>, as eBay will charge the seller when eBay shipping labels are purchased, but it can be <code>CREDIT</code> if the seller was refunded for a shipping label or was possibly overcharged for a shipping label. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>", alias="shippingLabelBookingEntry")
    shipping_label_count: Optional[StrictInt] = Field(default=None, description="This is the total number of eBay shipping labels purchased by the seller. The count returned here may depend on the specified input criteria.", alias="shippingLabelCount")
    transfer_amount: Optional[Amount] = Field(default=None, alias="transferAmount")
    transfer_booking_entry: Optional[StrictStr] = Field(default=None, description="The enumeration value indicates whether the dollar amount in the <strong>transferAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>DEBIT</code> since this a seller reimbursement to eBay for buyer refunds. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>", alias="transferBookingEntry")
    transfer_count: Optional[StrictInt] = Field(default=None, description="This integer value indicates the total number of buyer refund transfers that match the input criteria. <br><br>This field is generally returned, even if <code>0</code>, but it will not be returned if a <strong>transactionType</strong> filter is used, and its value is set to any value other than <code>TRANSFER</code>.", alias="transferCount")
    withdrawal_amount: Optional[Amount] = Field(default=None, alias="withdrawalAmount")
    withdrawal_booking_entry: Optional[StrictStr] = Field(default=None, description="The enumeration value indicates whether the dollar amount in the <strong>withdrawalAmount</strong> field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be <code>DEBIT</code> since this transaction involves a debit to the seller's available payout funds. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>", alias="withdrawalBookingEntry")
    withdrawal_count: Optional[StrictInt] = Field(default=None, description="This integer value indicates the total number of on-demand payouts (withdrawals) that match the input criteria. <br><br>This field is generally returned, even if <code>0</code>, but it will not be returned if a <strong>transactionType</strong> filter is used, and its value is set to any value other than <code>WITHDRAWAL</code>.", alias="withdrawalCount")
    __properties: ClassVar[List[str]] = ["adjustmentAmount", "adjustmentBookingEntry", "adjustmentCount", "balanceTransferAmount", "balanceTransferBookingEntry", "balanceTransferCount", "creditAmount", "creditBookingEntry", "creditCount", "disputeAmount", "disputeBookingEntry", "disputeCount", "loanRepaymentAmount", "loanRepaymentBookingEntry", "loanRepaymentCount", "nonSaleChargeAmount", "nonSaleChargeBookingEntry", "nonSaleChargeCount", "onHoldAmount", "onHoldBookingEntry", "onHoldCount", "refundAmount", "refundBookingEntry", "refundCount", "shippingLabelAmount", "shippingLabelBookingEntry", "shippingLabelCount", "transferAmount", "transferBookingEntry", "transferCount", "withdrawalAmount", "withdrawalBookingEntry", "withdrawalCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionSummaryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of adjustment_amount
        if self.adjustment_amount:
            _dict['adjustmentAmount'] = self.adjustment_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of balance_transfer_amount
        if self.balance_transfer_amount:
            _dict['balanceTransferAmount'] = self.balance_transfer_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credit_amount
        if self.credit_amount:
            _dict['creditAmount'] = self.credit_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dispute_amount
        if self.dispute_amount:
            _dict['disputeAmount'] = self.dispute_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loan_repayment_amount
        if self.loan_repayment_amount:
            _dict['loanRepaymentAmount'] = self.loan_repayment_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of non_sale_charge_amount
        if self.non_sale_charge_amount:
            _dict['nonSaleChargeAmount'] = self.non_sale_charge_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of on_hold_amount
        if self.on_hold_amount:
            _dict['onHoldAmount'] = self.on_hold_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refund_amount
        if self.refund_amount:
            _dict['refundAmount'] = self.refund_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_label_amount
        if self.shipping_label_amount:
            _dict['shippingLabelAmount'] = self.shipping_label_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer_amount
        if self.transfer_amount:
            _dict['transferAmount'] = self.transfer_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of withdrawal_amount
        if self.withdrawal_amount:
            _dict['withdrawalAmount'] = self.withdrawal_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionSummaryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adjustmentAmount": Amount.from_dict(obj["adjustmentAmount"]) if obj.get("adjustmentAmount") is not None else None,
            "adjustmentBookingEntry": obj.get("adjustmentBookingEntry"),
            "adjustmentCount": obj.get("adjustmentCount"),
            "balanceTransferAmount": Amount.from_dict(obj["balanceTransferAmount"]) if obj.get("balanceTransferAmount") is not None else None,
            "balanceTransferBookingEntry": obj.get("balanceTransferBookingEntry"),
            "balanceTransferCount": obj.get("balanceTransferCount"),
            "creditAmount": Amount.from_dict(obj["creditAmount"]) if obj.get("creditAmount") is not None else None,
            "creditBookingEntry": obj.get("creditBookingEntry"),
            "creditCount": obj.get("creditCount"),
            "disputeAmount": Amount.from_dict(obj["disputeAmount"]) if obj.get("disputeAmount") is not None else None,
            "disputeBookingEntry": obj.get("disputeBookingEntry"),
            "disputeCount": obj.get("disputeCount"),
            "loanRepaymentAmount": Amount.from_dict(obj["loanRepaymentAmount"]) if obj.get("loanRepaymentAmount") is not None else None,
            "loanRepaymentBookingEntry": obj.get("loanRepaymentBookingEntry"),
            "loanRepaymentCount": obj.get("loanRepaymentCount"),
            "nonSaleChargeAmount": Amount.from_dict(obj["nonSaleChargeAmount"]) if obj.get("nonSaleChargeAmount") is not None else None,
            "nonSaleChargeBookingEntry": obj.get("nonSaleChargeBookingEntry"),
            "nonSaleChargeCount": obj.get("nonSaleChargeCount"),
            "onHoldAmount": Amount.from_dict(obj["onHoldAmount"]) if obj.get("onHoldAmount") is not None else None,
            "onHoldBookingEntry": obj.get("onHoldBookingEntry"),
            "onHoldCount": obj.get("onHoldCount"),
            "refundAmount": Amount.from_dict(obj["refundAmount"]) if obj.get("refundAmount") is not None else None,
            "refundBookingEntry": obj.get("refundBookingEntry"),
            "refundCount": obj.get("refundCount"),
            "shippingLabelAmount": Amount.from_dict(obj["shippingLabelAmount"]) if obj.get("shippingLabelAmount") is not None else None,
            "shippingLabelBookingEntry": obj.get("shippingLabelBookingEntry"),
            "shippingLabelCount": obj.get("shippingLabelCount"),
            "transferAmount": Amount.from_dict(obj["transferAmount"]) if obj.get("transferAmount") is not None else None,
            "transferBookingEntry": obj.get("transferBookingEntry"),
            "transferCount": obj.get("transferCount"),
            "withdrawalAmount": Amount.from_dict(obj["withdrawalAmount"]) if obj.get("withdrawalAmount") is not None else None,
            "withdrawalBookingEntry": obj.get("withdrawalBookingEntry"),
            "withdrawalCount": obj.get("withdrawalCount")
        })
        return _obj


