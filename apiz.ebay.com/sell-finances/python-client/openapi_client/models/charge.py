# coding: utf-8

"""
    eBay Finances API

    This API is used to retrieve seller payouts and monetary transaction details related to those payouts.

    The version of the OpenAPI document: v1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from typing import Optional, Set
from typing_extensions import Self

class Charge(BaseModel):
    """
    This type is used by the <b>charge</b> container, which is an array of one or more charges related to the transfer.
    """ # noqa: E501
    cancellation_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of an order cancellation. This field is only applicable and returned if the charge is related to an order  cancellation.", alias="cancellationId")
    case_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of a case filed against an order. This field is only applicable and returned if the charge is related to a case filed against an order.", alias="caseId")
    charge_net_amount: Optional[Amount] = Field(default=None, alias="chargeNetAmount")
    inquiry_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of an Item Not Received (INR) inquiry filed against an order. This field is only applicable and returned if the charge is related to has an INR inquiry filed against the order.", alias="inquiryId")
    order_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the order that is associated with the charge.", alias="orderId")
    payment_dispute_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of a third-party payment dispute filed against an order. This occurs when the buyer files a dispute against the order with their payment provider, and then the dispute comes into eBay's system. This field is only applicable and returned if the charge is related to a third-party payment dispute filed against an order.", alias="paymentDisputeId")
    refund_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of a buyer refund associated with the charge.", alias="refundId")
    return_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of an order return. This field is only applicable and returned if the charge is related to an order that was returned by the buyer.", alias="returnId")
    __properties: ClassVar[List[str]] = ["cancellationId", "caseId", "chargeNetAmount", "inquiryId", "orderId", "paymentDisputeId", "refundId", "returnId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Charge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of charge_net_amount
        if self.charge_net_amount:
            _dict['chargeNetAmount'] = self.charge_net_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Charge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cancellationId": obj.get("cancellationId"),
            "caseId": obj.get("caseId"),
            "chargeNetAmount": Amount.from_dict(obj["chargeNetAmount"]) if obj.get("chargeNetAmount") is not None else None,
            "inquiryId": obj.get("inquiryId"),
            "orderId": obj.get("orderId"),
            "paymentDisputeId": obj.get("paymentDisputeId"),
            "refundId": obj.get("refundId"),
            "returnId": obj.get("returnId")
        })
        return _obj


