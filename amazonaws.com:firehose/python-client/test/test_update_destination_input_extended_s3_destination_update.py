# coding: utf-8

"""
    Amazon Kinesis Firehose

    <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>

    The version of the OpenAPI document: 2015-08-04
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.update_destination_input_extended_s3_destination_update import UpdateDestinationInputExtendedS3DestinationUpdate

class TestUpdateDestinationInputExtendedS3DestinationUpdate(unittest.TestCase):
    """UpdateDestinationInputExtendedS3DestinationUpdate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UpdateDestinationInputExtendedS3DestinationUpdate:
        """Test UpdateDestinationInputExtendedS3DestinationUpdate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UpdateDestinationInputExtendedS3DestinationUpdate`
        """
        model = UpdateDestinationInputExtendedS3DestinationUpdate()
        if include_optional:
            return UpdateDestinationInputExtendedS3DestinationUpdate(
                role_arn = None,
                bucket_arn = None,
                prefix = None,
                error_output_prefix = None,
                buffering_hints = None,
                compression_format = None,
                encryption_configuration = None,
                cloud_watch_logging_options = None,
                processing_configuration = None,
                s3_backup_mode = None,
                s3_backup_update = None,
                data_format_conversion_configuration = None,
                dynamic_partitioning_configuration = None
            )
        else:
            return UpdateDestinationInputExtendedS3DestinationUpdate(
        )
        """

    def testUpdateDestinationInputExtendedS3DestinationUpdate(self):
        """Test UpdateDestinationInputExtendedS3DestinationUpdate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
