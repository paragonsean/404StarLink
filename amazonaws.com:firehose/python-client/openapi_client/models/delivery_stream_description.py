# coding: utf-8

"""
    Amazon Kinesis Firehose

    <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>

    The version of the OpenAPI document: 2015-08-04
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.delivery_stream_description_delivery_stream_encryption_configuration import DeliveryStreamDescriptionDeliveryStreamEncryptionConfiguration
from openapi_client.models.delivery_stream_description_source import DeliveryStreamDescriptionSource
from openapi_client.models.delivery_stream_encryption_configuration_failure_description import DeliveryStreamEncryptionConfigurationFailureDescription
from typing import Optional, Set
from typing_extensions import Self

class DeliveryStreamDescription(BaseModel):
    """
    Contains information about a delivery stream.
    """ # noqa: E501
    delivery_stream_name: Any = Field(alias="DeliveryStreamName")
    delivery_stream_arn: Any = Field(alias="DeliveryStreamARN")
    delivery_stream_status: Any = Field(alias="DeliveryStreamStatus")
    failure_description: Optional[DeliveryStreamEncryptionConfigurationFailureDescription] = Field(default=None, alias="FailureDescription")
    delivery_stream_encryption_configuration: Optional[DeliveryStreamDescriptionDeliveryStreamEncryptionConfiguration] = Field(default=None, alias="DeliveryStreamEncryptionConfiguration")
    delivery_stream_type: Any = Field(alias="DeliveryStreamType")
    version_id: Any = Field(alias="VersionId")
    create_timestamp: Optional[Any] = Field(default=None, alias="CreateTimestamp")
    last_update_timestamp: Optional[Any] = Field(default=None, alias="LastUpdateTimestamp")
    source: Optional[DeliveryStreamDescriptionSource] = Field(default=None, alias="Source")
    destinations: Any = Field(alias="Destinations")
    has_more_destinations: Any = Field(alias="HasMoreDestinations")
    __properties: ClassVar[List[str]] = ["DeliveryStreamName", "DeliveryStreamARN", "DeliveryStreamStatus", "FailureDescription", "DeliveryStreamEncryptionConfiguration", "DeliveryStreamType", "VersionId", "CreateTimestamp", "LastUpdateTimestamp", "Source", "Destinations", "HasMoreDestinations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeliveryStreamDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delivery_stream_status
        if self.delivery_stream_status:
            _dict['DeliveryStreamStatus'] = self.delivery_stream_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of failure_description
        if self.failure_description:
            _dict['FailureDescription'] = self.failure_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_stream_encryption_configuration
        if self.delivery_stream_encryption_configuration:
            _dict['DeliveryStreamEncryptionConfiguration'] = self.delivery_stream_encryption_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_stream_type
        if self.delivery_stream_type:
            _dict['DeliveryStreamType'] = self.delivery_stream_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['Source'] = self.source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeliveryStreamDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DeliveryStreamName": obj.get("DeliveryStreamName"),
            "DeliveryStreamARN": obj.get("DeliveryStreamARN"),
            "DeliveryStreamStatus": DeliveryStreamStatus.from_dict(obj["DeliveryStreamStatus"]) if obj.get("DeliveryStreamStatus") is not None else None,
            "FailureDescription": DeliveryStreamEncryptionConfigurationFailureDescription.from_dict(obj["FailureDescription"]) if obj.get("FailureDescription") is not None else None,
            "DeliveryStreamEncryptionConfiguration": DeliveryStreamDescriptionDeliveryStreamEncryptionConfiguration.from_dict(obj["DeliveryStreamEncryptionConfiguration"]) if obj.get("DeliveryStreamEncryptionConfiguration") is not None else None,
            "DeliveryStreamType": DeliveryStreamType.from_dict(obj["DeliveryStreamType"]) if obj.get("DeliveryStreamType") is not None else None,
            "VersionId": obj.get("VersionId"),
            "CreateTimestamp": obj.get("CreateTimestamp"),
            "LastUpdateTimestamp": obj.get("LastUpdateTimestamp"),
            "Source": DeliveryStreamDescriptionSource.from_dict(obj["Source"]) if obj.get("Source") is not None else None,
            "Destinations": obj.get("Destinations"),
            "HasMoreDestinations": obj.get("HasMoreDestinations")
        })
        return _obj


