# coding: utf-8

"""
    Amazon Kinesis Firehose

    <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>

    The version of the OpenAPI document: 2015-08-04
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.destination_description_amazon_open_search_serverless_destination_description import DestinationDescriptionAmazonOpenSearchServerlessDestinationDescription
from openapi_client.models.destination_description_amazonopensearchservice_destination_description import DestinationDescriptionAmazonopensearchserviceDestinationDescription
from openapi_client.models.destination_description_elasticsearch_destination_description import DestinationDescriptionElasticsearchDestinationDescription
from openapi_client.models.destination_description_extended_s3_destination_description import DestinationDescriptionExtendedS3DestinationDescription
from openapi_client.models.destination_description_http_endpoint_destination_description import DestinationDescriptionHttpEndpointDestinationDescription
from openapi_client.models.destination_description_redshift_destination_description import DestinationDescriptionRedshiftDestinationDescription
from openapi_client.models.destination_description_s3_destination_description import DestinationDescriptionS3DestinationDescription
from openapi_client.models.destination_description_splunk_destination_description import DestinationDescriptionSplunkDestinationDescription
from typing import Optional, Set
from typing_extensions import Self

class DestinationDescription(BaseModel):
    """
    Describes the destination for a delivery stream.
    """ # noqa: E501
    destination_id: Any = Field(alias="DestinationId")
    s3_destination_description: Optional[DestinationDescriptionS3DestinationDescription] = Field(default=None, alias="S3DestinationDescription")
    extended_s3_destination_description: Optional[DestinationDescriptionExtendedS3DestinationDescription] = Field(default=None, alias="ExtendedS3DestinationDescription")
    redshift_destination_description: Optional[DestinationDescriptionRedshiftDestinationDescription] = Field(default=None, alias="RedshiftDestinationDescription")
    elasticsearch_destination_description: Optional[DestinationDescriptionElasticsearchDestinationDescription] = Field(default=None, alias="ElasticsearchDestinationDescription")
    amazonopensearchservice_destination_description: Optional[DestinationDescriptionAmazonopensearchserviceDestinationDescription] = Field(default=None, alias="AmazonopensearchserviceDestinationDescription")
    splunk_destination_description: Optional[DestinationDescriptionSplunkDestinationDescription] = Field(default=None, alias="SplunkDestinationDescription")
    http_endpoint_destination_description: Optional[DestinationDescriptionHttpEndpointDestinationDescription] = Field(default=None, alias="HttpEndpointDestinationDescription")
    amazon_open_search_serverless_destination_description: Optional[DestinationDescriptionAmazonOpenSearchServerlessDestinationDescription] = Field(default=None, alias="AmazonOpenSearchServerlessDestinationDescription")
    __properties: ClassVar[List[str]] = ["DestinationId", "S3DestinationDescription", "ExtendedS3DestinationDescription", "RedshiftDestinationDescription", "ElasticsearchDestinationDescription", "AmazonopensearchserviceDestinationDescription", "SplunkDestinationDescription", "HttpEndpointDestinationDescription", "AmazonOpenSearchServerlessDestinationDescription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DestinationDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of s3_destination_description
        if self.s3_destination_description:
            _dict['S3DestinationDescription'] = self.s3_destination_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extended_s3_destination_description
        if self.extended_s3_destination_description:
            _dict['ExtendedS3DestinationDescription'] = self.extended_s3_destination_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redshift_destination_description
        if self.redshift_destination_description:
            _dict['RedshiftDestinationDescription'] = self.redshift_destination_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of elasticsearch_destination_description
        if self.elasticsearch_destination_description:
            _dict['ElasticsearchDestinationDescription'] = self.elasticsearch_destination_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amazonopensearchservice_destination_description
        if self.amazonopensearchservice_destination_description:
            _dict['AmazonopensearchserviceDestinationDescription'] = self.amazonopensearchservice_destination_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of splunk_destination_description
        if self.splunk_destination_description:
            _dict['SplunkDestinationDescription'] = self.splunk_destination_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of http_endpoint_destination_description
        if self.http_endpoint_destination_description:
            _dict['HttpEndpointDestinationDescription'] = self.http_endpoint_destination_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amazon_open_search_serverless_destination_description
        if self.amazon_open_search_serverless_destination_description:
            _dict['AmazonOpenSearchServerlessDestinationDescription'] = self.amazon_open_search_serverless_destination_description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DestinationDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DestinationId": obj.get("DestinationId"),
            "S3DestinationDescription": DestinationDescriptionS3DestinationDescription.from_dict(obj["S3DestinationDescription"]) if obj.get("S3DestinationDescription") is not None else None,
            "ExtendedS3DestinationDescription": DestinationDescriptionExtendedS3DestinationDescription.from_dict(obj["ExtendedS3DestinationDescription"]) if obj.get("ExtendedS3DestinationDescription") is not None else None,
            "RedshiftDestinationDescription": DestinationDescriptionRedshiftDestinationDescription.from_dict(obj["RedshiftDestinationDescription"]) if obj.get("RedshiftDestinationDescription") is not None else None,
            "ElasticsearchDestinationDescription": DestinationDescriptionElasticsearchDestinationDescription.from_dict(obj["ElasticsearchDestinationDescription"]) if obj.get("ElasticsearchDestinationDescription") is not None else None,
            "AmazonopensearchserviceDestinationDescription": DestinationDescriptionAmazonopensearchserviceDestinationDescription.from_dict(obj["AmazonopensearchserviceDestinationDescription"]) if obj.get("AmazonopensearchserviceDestinationDescription") is not None else None,
            "SplunkDestinationDescription": DestinationDescriptionSplunkDestinationDescription.from_dict(obj["SplunkDestinationDescription"]) if obj.get("SplunkDestinationDescription") is not None else None,
            "HttpEndpointDestinationDescription": DestinationDescriptionHttpEndpointDestinationDescription.from_dict(obj["HttpEndpointDestinationDescription"]) if obj.get("HttpEndpointDestinationDescription") is not None else None,
            "AmazonOpenSearchServerlessDestinationDescription": DestinationDescriptionAmazonOpenSearchServerlessDestinationDescription.from_dict(obj["AmazonOpenSearchServerlessDestinationDescription"]) if obj.get("AmazonOpenSearchServerlessDestinationDescription") is not None else None
        })
        return _obj


