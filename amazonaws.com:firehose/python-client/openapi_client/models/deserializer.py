# coding: utf-8

"""
    Amazon Kinesis Firehose

    <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>

    The version of the OpenAPI document: 2015-08-04
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deserializer_hive_json_ser_de import DeserializerHiveJsonSerDe
from openapi_client.models.deserializer_open_x_json_ser_de import DeserializerOpenXJsonSerDe
from typing import Optional, Set
from typing_extensions import Self

class Deserializer(BaseModel):
    """
    The deserializer you want Kinesis Data Firehose to use for converting the input data from JSON. Kinesis Data Firehose then serializes the data to its final format using the <a>Serializer</a>. Kinesis Data Firehose supports two types of deserializers: the <a href=\"https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-JSON\">Apache Hive JSON SerDe</a> and the <a href=\"https://github.com/rcongiu/Hive-JSON-Serde\">OpenX JSON SerDe</a>.
    """ # noqa: E501
    open_x_json_ser_de: Optional[DeserializerOpenXJsonSerDe] = Field(default=None, alias="OpenXJsonSerDe")
    hive_json_ser_de: Optional[DeserializerHiveJsonSerDe] = Field(default=None, alias="HiveJsonSerDe")
    __properties: ClassVar[List[str]] = ["OpenXJsonSerDe", "HiveJsonSerDe"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Deserializer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of open_x_json_ser_de
        if self.open_x_json_ser_de:
            _dict['OpenXJsonSerDe'] = self.open_x_json_ser_de.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hive_json_ser_de
        if self.hive_json_ser_de:
            _dict['HiveJsonSerDe'] = self.hive_json_ser_de.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Deserializer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "OpenXJsonSerDe": DeserializerOpenXJsonSerDe.from_dict(obj["OpenXJsonSerDe"]) if obj.get("OpenXJsonSerDe") is not None else None,
            "HiveJsonSerDe": DeserializerHiveJsonSerDe.from_dict(obj["HiveJsonSerDe"]) if obj.get("HiveJsonSerDe") is not None else None
        })
        return _obj


