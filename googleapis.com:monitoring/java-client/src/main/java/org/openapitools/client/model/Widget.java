/*
 * Cloud Monitoring API
 * Manages your Cloud Monitoring data and configurations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AlertChart;
import org.openapitools.client.model.CollapsibleGroup;
import org.openapitools.client.model.IncidentList;
import org.openapitools.client.model.LogsPanel;
import org.openapitools.client.model.Scorecard;
import org.openapitools.client.model.Text;
import org.openapitools.client.model.TimeSeriesTable;
import org.openapitools.client.model.XyChart;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Widget contains a single dashboard component and configuration of how to present the component in the dashboard.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:01:19.543048-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Widget {
  public static final String SERIALIZED_NAME_ALERT_CHART = "alertChart";
  @SerializedName(SERIALIZED_NAME_ALERT_CHART)
  private AlertChart alertChart;

  public static final String SERIALIZED_NAME_BLANK = "blank";
  @SerializedName(SERIALIZED_NAME_BLANK)
  private Object blank;

  public static final String SERIALIZED_NAME_COLLAPSIBLE_GROUP = "collapsibleGroup";
  @SerializedName(SERIALIZED_NAME_COLLAPSIBLE_GROUP)
  private CollapsibleGroup collapsibleGroup;

  public static final String SERIALIZED_NAME_INCIDENT_LIST = "incidentList";
  @SerializedName(SERIALIZED_NAME_INCIDENT_LIST)
  private IncidentList incidentList;

  public static final String SERIALIZED_NAME_LOGS_PANEL = "logsPanel";
  @SerializedName(SERIALIZED_NAME_LOGS_PANEL)
  private LogsPanel logsPanel;

  public static final String SERIALIZED_NAME_SCORECARD = "scorecard";
  @SerializedName(SERIALIZED_NAME_SCORECARD)
  private Scorecard scorecard;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private Text text;

  public static final String SERIALIZED_NAME_TIME_SERIES_TABLE = "timeSeriesTable";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_TABLE)
  private TimeSeriesTable timeSeriesTable;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_XY_CHART = "xyChart";
  @SerializedName(SERIALIZED_NAME_XY_CHART)
  private XyChart xyChart;

  public Widget() {
  }

  public Widget alertChart(AlertChart alertChart) {
    this.alertChart = alertChart;
    return this;
  }

  /**
   * Get alertChart
   * @return alertChart
   */
  @javax.annotation.Nullable
  public AlertChart getAlertChart() {
    return alertChart;
  }

  public void setAlertChart(AlertChart alertChart) {
    this.alertChart = alertChart;
  }


  public Widget blank(Object blank) {
    this.blank = blank;
    return this;
  }

  /**
   * A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } 
   * @return blank
   */
  @javax.annotation.Nullable
  public Object getBlank() {
    return blank;
  }

  public void setBlank(Object blank) {
    this.blank = blank;
  }


  public Widget collapsibleGroup(CollapsibleGroup collapsibleGroup) {
    this.collapsibleGroup = collapsibleGroup;
    return this;
  }

  /**
   * Get collapsibleGroup
   * @return collapsibleGroup
   */
  @javax.annotation.Nullable
  public CollapsibleGroup getCollapsibleGroup() {
    return collapsibleGroup;
  }

  public void setCollapsibleGroup(CollapsibleGroup collapsibleGroup) {
    this.collapsibleGroup = collapsibleGroup;
  }


  public Widget incidentList(IncidentList incidentList) {
    this.incidentList = incidentList;
    return this;
  }

  /**
   * Get incidentList
   * @return incidentList
   */
  @javax.annotation.Nullable
  public IncidentList getIncidentList() {
    return incidentList;
  }

  public void setIncidentList(IncidentList incidentList) {
    this.incidentList = incidentList;
  }


  public Widget logsPanel(LogsPanel logsPanel) {
    this.logsPanel = logsPanel;
    return this;
  }

  /**
   * Get logsPanel
   * @return logsPanel
   */
  @javax.annotation.Nullable
  public LogsPanel getLogsPanel() {
    return logsPanel;
  }

  public void setLogsPanel(LogsPanel logsPanel) {
    this.logsPanel = logsPanel;
  }


  public Widget scorecard(Scorecard scorecard) {
    this.scorecard = scorecard;
    return this;
  }

  /**
   * Get scorecard
   * @return scorecard
   */
  @javax.annotation.Nullable
  public Scorecard getScorecard() {
    return scorecard;
  }

  public void setScorecard(Scorecard scorecard) {
    this.scorecard = scorecard;
  }


  public Widget text(Text text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public Text getText() {
    return text;
  }

  public void setText(Text text) {
    this.text = text;
  }


  public Widget timeSeriesTable(TimeSeriesTable timeSeriesTable) {
    this.timeSeriesTable = timeSeriesTable;
    return this;
  }

  /**
   * Get timeSeriesTable
   * @return timeSeriesTable
   */
  @javax.annotation.Nullable
  public TimeSeriesTable getTimeSeriesTable() {
    return timeSeriesTable;
  }

  public void setTimeSeriesTable(TimeSeriesTable timeSeriesTable) {
    this.timeSeriesTable = timeSeriesTable;
  }


  public Widget title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Optional. The title of the widget.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Widget xyChart(XyChart xyChart) {
    this.xyChart = xyChart;
    return this;
  }

  /**
   * Get xyChart
   * @return xyChart
   */
  @javax.annotation.Nullable
  public XyChart getXyChart() {
    return xyChart;
  }

  public void setXyChart(XyChart xyChart) {
    this.xyChart = xyChart;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Widget widget = (Widget) o;
    return Objects.equals(this.alertChart, widget.alertChart) &&
        Objects.equals(this.blank, widget.blank) &&
        Objects.equals(this.collapsibleGroup, widget.collapsibleGroup) &&
        Objects.equals(this.incidentList, widget.incidentList) &&
        Objects.equals(this.logsPanel, widget.logsPanel) &&
        Objects.equals(this.scorecard, widget.scorecard) &&
        Objects.equals(this.text, widget.text) &&
        Objects.equals(this.timeSeriesTable, widget.timeSeriesTable) &&
        Objects.equals(this.title, widget.title) &&
        Objects.equals(this.xyChart, widget.xyChart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertChart, blank, collapsibleGroup, incidentList, logsPanel, scorecard, text, timeSeriesTable, title, xyChart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Widget {\n");
    sb.append("    alertChart: ").append(toIndentedString(alertChart)).append("\n");
    sb.append("    blank: ").append(toIndentedString(blank)).append("\n");
    sb.append("    collapsibleGroup: ").append(toIndentedString(collapsibleGroup)).append("\n");
    sb.append("    incidentList: ").append(toIndentedString(incidentList)).append("\n");
    sb.append("    logsPanel: ").append(toIndentedString(logsPanel)).append("\n");
    sb.append("    scorecard: ").append(toIndentedString(scorecard)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    timeSeriesTable: ").append(toIndentedString(timeSeriesTable)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    xyChart: ").append(toIndentedString(xyChart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alertChart");
    openapiFields.add("blank");
    openapiFields.add("collapsibleGroup");
    openapiFields.add("incidentList");
    openapiFields.add("logsPanel");
    openapiFields.add("scorecard");
    openapiFields.add("text");
    openapiFields.add("timeSeriesTable");
    openapiFields.add("title");
    openapiFields.add("xyChart");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Widget
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Widget.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Widget is not found in the empty JSON string", Widget.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Widget.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Widget` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alertChart`
      if (jsonObj.get("alertChart") != null && !jsonObj.get("alertChart").isJsonNull()) {
        AlertChart.validateJsonElement(jsonObj.get("alertChart"));
      }
      // validate the optional field `collapsibleGroup`
      if (jsonObj.get("collapsibleGroup") != null && !jsonObj.get("collapsibleGroup").isJsonNull()) {
        CollapsibleGroup.validateJsonElement(jsonObj.get("collapsibleGroup"));
      }
      // validate the optional field `incidentList`
      if (jsonObj.get("incidentList") != null && !jsonObj.get("incidentList").isJsonNull()) {
        IncidentList.validateJsonElement(jsonObj.get("incidentList"));
      }
      // validate the optional field `logsPanel`
      if (jsonObj.get("logsPanel") != null && !jsonObj.get("logsPanel").isJsonNull()) {
        LogsPanel.validateJsonElement(jsonObj.get("logsPanel"));
      }
      // validate the optional field `scorecard`
      if (jsonObj.get("scorecard") != null && !jsonObj.get("scorecard").isJsonNull()) {
        Scorecard.validateJsonElement(jsonObj.get("scorecard"));
      }
      // validate the optional field `text`
      if (jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) {
        Text.validateJsonElement(jsonObj.get("text"));
      }
      // validate the optional field `timeSeriesTable`
      if (jsonObj.get("timeSeriesTable") != null && !jsonObj.get("timeSeriesTable").isJsonNull()) {
        TimeSeriesTable.validateJsonElement(jsonObj.get("timeSeriesTable"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `xyChart`
      if (jsonObj.get("xyChart") != null && !jsonObj.get("xyChart").isJsonNull()) {
        XyChart.validateJsonElement(jsonObj.get("xyChart"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Widget.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Widget' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Widget> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Widget.class));

       return (TypeAdapter<T>) new TypeAdapter<Widget>() {
           @Override
           public void write(JsonWriter out, Widget value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Widget read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Widget given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Widget
   * @throws IOException if the JSON string is invalid with respect to Widget
   */
  public static Widget fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Widget.class);
  }

  /**
   * Convert an instance of Widget to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

