# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.venue import Venue

class TestVenue(unittest.TestCase):
    """Venue unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Venue:
        """Test Venue
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Venue`
        """
        model = Venue()
        if include_optional:
            return Venue(
                accessible_seating_detail = '',
                additional_info = '',
                address = openapi_client.models.address.Address(
                    line1 = '', 
                    line2 = '', 
                    line3 = '', ),
                box_office_info = openapi_client.models.venue_box_office_info.VenueBoxOfficeInfo(
                    accepted_payment_detail = '', 
                    open_hours_detail = '', 
                    phone_number_detail = '', 
                    will_call_detail = '', ),
                city = openapi_client.models.city.City(
                    name = '', ),
                country = openapi_client.models.country.Country(
                    country_code = '', 
                    name = '', ),
                currency = '',
                description = '',
                distance = 1.337,
                dma = [
                    openapi_client.models.dma.Dma(
                        id = 56, )
                    ],
                external_links = {
                    'key' : [
                        openapi_client.models.external_link.ExternalLink(
                            id = '', 
                            url = '', )
                        ]
                    },
                general_info = openapi_client.models.venue_general_info.VenueGeneralInfo(
                    child_rule = '', 
                    general_rule = '', ),
                id = '',
                images = [
                    openapi_client.models.image.Image(
                        attribution = '', 
                        fallback = True, 
                        height = 56, 
                        ratio = '169', 
                        url = '', 
                        width = 56, )
                    ],
                locale = '',
                location = openapi_client.models.location.Location(
                    latitude = 1.337, 
                    longitude = 1.337, ),
                markets = [
                    openapi_client.models.market.Market(
                        id = '', )
                    ],
                name = '',
                parking_detail = '',
                postal_code = '',
                social = openapi_client.models.social.Social(
                    twitter = openapi_client.models.twitter.Twitter(
                        handle = '@a Twitter handle exampe', 
                        hashtags = #hashtag example #hashtag another example, ), ),
                state = openapi_client.models.state.State(
                    name = '', 
                    state_code = '', ),
                test = True,
                timezone = '',
                type = 'event',
                units = '',
                upcoming_events = {
                    'key' : 56
                    },
                url = ''
            )
        else:
            return Venue(
                id = '',
                type = 'event',
        )
        """

    def testVenue(self):
        """Test Venue"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
