# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.presale import Presale
from openapi_client.models.public_sale_dates import PublicSaleDates
from typing import Optional, Set
from typing_extensions import Self

class EventSalesDates(BaseModel):
    """
    Event's Sales Dates
    """ # noqa: E501
    presales: Optional[List[Presale]] = Field(default=None, description="Presale information on this event")
    public: Optional[PublicSaleDates] = None
    __properties: ClassVar[List[str]] = ["presales", "public"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventSalesDates from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in presales (list)
        _items = []
        if self.presales:
            for _item_presales in self.presales:
                if _item_presales:
                    _items.append(_item_presales.to_dict())
            _dict['presales'] = _items
        # override the default output from pydantic by calling `to_dict()` of public
        if self.public:
            _dict['public'] = self.public.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventSalesDates from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "presales": [Presale.from_dict(_item) for _item in obj["presales"]] if obj.get("presales") is not None else None,
            "public": PublicSaleDates.from_dict(obj["public"]) if obj.get("public") is not None else None
        })
        return _obj


