# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.date_time_field_type import DateTimeFieldType
from openapi_client.models.duration_field import DurationField
from typing import Optional, Set
from typing_extensions import Self

class DateTimeField(BaseModel):
    """
    DateTimeField
    """ # noqa: E501
    duration_field: Optional[DurationField] = Field(default=None, alias="durationField")
    leap_duration_field: Optional[DurationField] = Field(default=None, alias="leapDurationField")
    lenient: Optional[StrictBool] = False
    maximum_value: Optional[StrictInt] = Field(default=None, alias="maximumValue")
    minimum_value: Optional[StrictInt] = Field(default=None, alias="minimumValue")
    name: Optional[StrictStr] = None
    range_duration_field: Optional[DurationField] = Field(default=None, alias="rangeDurationField")
    supported: Optional[StrictBool] = False
    type: Optional[DateTimeFieldType] = None
    __properties: ClassVar[List[str]] = ["durationField", "leapDurationField", "lenient", "maximumValue", "minimumValue", "name", "rangeDurationField", "supported", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DateTimeField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of duration_field
        if self.duration_field:
            _dict['durationField'] = self.duration_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of leap_duration_field
        if self.leap_duration_field:
            _dict['leapDurationField'] = self.leap_duration_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of range_duration_field
        if self.range_duration_field:
            _dict['rangeDurationField'] = self.range_duration_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DateTimeField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "durationField": DurationField.from_dict(obj["durationField"]) if obj.get("durationField") is not None else None,
            "leapDurationField": DurationField.from_dict(obj["leapDurationField"]) if obj.get("leapDurationField") is not None else None,
            "lenient": obj.get("lenient") if obj.get("lenient") is not None else False,
            "maximumValue": obj.get("maximumValue"),
            "minimumValue": obj.get("minimumValue"),
            "name": obj.get("name"),
            "rangeDurationField": DurationField.from_dict(obj["rangeDurationField"]) if obj.get("rangeDurationField") is not None else None,
            "supported": obj.get("supported") if obj.get("supported") is not None else False,
            "type": DateTimeFieldType.from_dict(obj["type"]) if obj.get("type") is not None else None
        })
        return _obj


