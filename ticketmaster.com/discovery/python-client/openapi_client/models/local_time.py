# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.chronology import Chronology
from openapi_client.models.date_time_field import DateTimeField
from openapi_client.models.date_time_field_type import DateTimeFieldType
from typing import Optional, Set
from typing_extensions import Self

class LocalTime(BaseModel):
    """
    LocalTime
    """ # noqa: E501
    chronology: Optional[Chronology] = None
    field_types: Optional[List[DateTimeFieldType]] = Field(default=None, alias="fieldTypes")
    fields: Optional[List[DateTimeField]] = None
    hour_of_day: Optional[StrictInt] = Field(default=None, alias="hourOfDay")
    millis_of_day: Optional[StrictInt] = Field(default=None, alias="millisOfDay")
    millis_of_second: Optional[StrictInt] = Field(default=None, alias="millisOfSecond")
    minute_of_hour: Optional[StrictInt] = Field(default=None, alias="minuteOfHour")
    second_of_minute: Optional[StrictInt] = Field(default=None, alias="secondOfMinute")
    values: Optional[List[StrictInt]] = None
    __properties: ClassVar[List[str]] = ["chronology", "fieldTypes", "fields", "hourOfDay", "millisOfDay", "millisOfSecond", "minuteOfHour", "secondOfMinute", "values"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocalTime from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chronology
        if self.chronology:
            _dict['chronology'] = self.chronology.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in field_types (list)
        _items = []
        if self.field_types:
            for _item_field_types in self.field_types:
                if _item_field_types:
                    _items.append(_item_field_types.to_dict())
            _dict['fieldTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item_fields in self.fields:
                if _item_fields:
                    _items.append(_item_fields.to_dict())
            _dict['fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocalTime from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chronology": Chronology.from_dict(obj["chronology"]) if obj.get("chronology") is not None else None,
            "fieldTypes": [DateTimeFieldType.from_dict(_item) for _item in obj["fieldTypes"]] if obj.get("fieldTypes") is not None else None,
            "fields": [DateTimeField.from_dict(_item) for _item in obj["fields"]] if obj.get("fields") is not None else None,
            "hourOfDay": obj.get("hourOfDay"),
            "millisOfDay": obj.get("millisOfDay"),
            "millisOfSecond": obj.get("millisOfSecond"),
            "minuteOfHour": obj.get("minuteOfHour"),
            "secondOfMinute": obj.get("secondOfMinute"),
            "values": obj.get("values")
        })
        return _obj


