# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.address import Address
from openapi_client.models.city import City
from openapi_client.models.country import Country
from openapi_client.models.dma import Dma
from openapi_client.models.external_link import ExternalLink
from openapi_client.models.image import Image
from openapi_client.models.location import Location
from openapi_client.models.market import Market
from openapi_client.models.social import Social
from openapi_client.models.state import State
from openapi_client.models.venue_box_office_info import VenueBoxOfficeInfo
from openapi_client.models.venue_general_info import VenueGeneralInfo
from typing import Optional, Set
from typing_extensions import Self

class Venue(BaseModel):
    """
    Venue
    """ # noqa: E501
    accessible_seating_detail: Optional[StrictStr] = Field(default=None, description="Venue accessible seating detail", alias="accessibleSeatingDetail")
    additional_info: Optional[StrictStr] = Field(default=None, description="Additional information of the entity", alias="additionalInfo")
    address: Optional[Address] = None
    box_office_info: Optional[VenueBoxOfficeInfo] = Field(default=None, alias="boxOfficeInfo")
    city: Optional[City] = None
    country: Optional[Country] = None
    currency: Optional[StrictStr] = Field(default=None, description="Default currency of ticket prices for events in this venue")
    description: Optional[StrictStr] = Field(default=None, description="Description's of the entity")
    distance: Optional[Union[StrictFloat, StrictInt]] = None
    dma: Optional[List[Dma]] = Field(default=None, description="The list of associated DMAs (Designated Market Areas) of the venue")
    external_links: Optional[Dict[str, List[ExternalLink]]] = Field(default=None, description="List of external links", alias="externalLinks")
    general_info: Optional[VenueGeneralInfo] = Field(default=None, alias="generalInfo")
    id: StrictStr = Field(description="Unique id of the entity in the discovery API")
    images: Optional[List[Image]] = Field(default=None, description="Images of the entity")
    locale: Optional[StrictStr] = Field(default=None, description="Locale in which the content is returned")
    location: Optional[Location] = None
    markets: Optional[List[Market]] = Field(default=None, description="Markets of the venue")
    name: Optional[StrictStr] = Field(default=None, description="Name of the entity")
    parking_detail: Optional[StrictStr] = Field(default=None, description="Venue parking info", alias="parkingDetail")
    postal_code: Optional[StrictStr] = Field(default=None, description="Postal code / zipcode of the venue", alias="postalCode")
    social: Optional[Social] = None
    state: Optional[State] = None
    test: Optional[StrictBool] = Field(default=False, description="Indicate if this is a test entity, by default test entities won't appear in discovery API")
    timezone: Optional[StrictStr] = Field(default=None, description="Timezone of the venue")
    type: StrictStr = Field(description="Type of the entity")
    units: Optional[StrictStr] = None
    upcoming_events: Optional[Dict[str, StrictInt]] = Field(default=None, description="number of upcoming events", alias="upcomingEvents")
    url: Optional[StrictStr] = Field(default=None, description="URL of a web site detail page of the entity")
    __properties: ClassVar[List[str]] = ["accessibleSeatingDetail", "additionalInfo", "address", "boxOfficeInfo", "city", "country", "currency", "description", "distance", "dma", "externalLinks", "generalInfo", "id", "images", "locale", "location", "markets", "name", "parkingDetail", "postalCode", "social", "state", "test", "timezone", "type", "units", "upcomingEvents", "url"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['event', 'venue', 'attraction']):
            raise ValueError("must be one of enum values ('event', 'venue', 'attraction')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Venue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of box_office_info
        if self.box_office_info:
            _dict['boxOfficeInfo'] = self.box_office_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of city
        if self.city:
            _dict['city'] = self.city.to_dict()
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dma (list)
        _items = []
        if self.dma:
            for _item_dma in self.dma:
                if _item_dma:
                    _items.append(_item_dma.to_dict())
            _dict['dma'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in external_links (dict of array)
        _field_dict_of_array = {}
        if self.external_links:
            for _key_external_links in self.external_links:
                if self.external_links[_key_external_links] is not None:
                    _field_dict_of_array[_key_external_links] = [
                        _item.to_dict() for _item in self.external_links[_key_external_links]
                    ]
            _dict['externalLinks'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of general_info
        if self.general_info:
            _dict['generalInfo'] = self.general_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in markets (list)
        _items = []
        if self.markets:
            for _item_markets in self.markets:
                if _item_markets:
                    _items.append(_item_markets.to_dict())
            _dict['markets'] = _items
        # override the default output from pydantic by calling `to_dict()` of social
        if self.social:
            _dict['social'] = self.social.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Venue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessibleSeatingDetail": obj.get("accessibleSeatingDetail"),
            "additionalInfo": obj.get("additionalInfo"),
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "boxOfficeInfo": VenueBoxOfficeInfo.from_dict(obj["boxOfficeInfo"]) if obj.get("boxOfficeInfo") is not None else None,
            "city": City.from_dict(obj["city"]) if obj.get("city") is not None else None,
            "country": Country.from_dict(obj["country"]) if obj.get("country") is not None else None,
            "currency": obj.get("currency"),
            "description": obj.get("description"),
            "distance": obj.get("distance"),
            "dma": [Dma.from_dict(_item) for _item in obj["dma"]] if obj.get("dma") is not None else None,
            "externalLinks": dict(
                (_k,
                        [ExternalLink.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("externalLinks", {}).items()
            ),
            "generalInfo": VenueGeneralInfo.from_dict(obj["generalInfo"]) if obj.get("generalInfo") is not None else None,
            "id": obj.get("id"),
            "images": [Image.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "locale": obj.get("locale"),
            "location": Location.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "markets": [Market.from_dict(_item) for _item in obj["markets"]] if obj.get("markets") is not None else None,
            "name": obj.get("name"),
            "parkingDetail": obj.get("parkingDetail"),
            "postalCode": obj.get("postalCode"),
            "social": Social.from_dict(obj["social"]) if obj.get("social") is not None else None,
            "state": State.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "test": obj.get("test") if obj.get("test") is not None else False,
            "timezone": obj.get("timezone"),
            "type": obj.get("type"),
            "units": obj.get("units"),
            "upcomingEvents": obj.get("upcomingEvents"),
            "url": obj.get("url")
        })
        return _obj


