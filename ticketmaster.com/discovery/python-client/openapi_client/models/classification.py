# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.level import Level
from openapi_client.models.segment import Segment
from typing import Optional, Set
from typing_extensions import Self

class Classification(BaseModel):
    """
    Classification
    """ # noqa: E501
    genre: Optional[Level] = None
    primary: Optional[StrictBool] = Field(default=False, description="True if this is the entity's primary classification")
    segment: Optional[Segment] = None
    sub_genre: Optional[Level] = Field(default=None, alias="subGenre")
    sub_type: Optional[Level] = Field(default=None, alias="subType")
    type: Optional[Level] = None
    __properties: ClassVar[List[str]] = ["genre", "primary", "segment", "subGenre", "subType", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Classification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of genre
        if self.genre:
            _dict['genre'] = self.genre.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segment
        if self.segment:
            _dict['segment'] = self.segment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_genre
        if self.sub_genre:
            _dict['subGenre'] = self.sub_genre.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_type
        if self.sub_type:
            _dict['subType'] = self.sub_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Classification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "genre": Level.from_dict(obj["genre"]) if obj.get("genre") is not None else None,
            "primary": obj.get("primary") if obj.get("primary") is not None else False,
            "segment": Segment.from_dict(obj["segment"]) if obj.get("segment") is not None else None,
            "subGenre": Level.from_dict(obj["subGenre"]) if obj.get("subGenre") is not None else None,
            "subType": Level.from_dict(obj["subType"]) if obj.get("subType") is not None else None,
            "type": Level.from_dict(obj["type"]) if obj.get("type") is not None else None
        })
        return _obj


