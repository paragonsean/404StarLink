# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class V2Api:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def discovery_v2_suggest_get(
        self,
        keyword: Annotated[Optional[StrictStr], Field(description="Keyword to search on")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter entities by its source name")] = None,
        latlong: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead")] = None,
        radius: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Radius of the area in which we want to search for events.")] = None,
        unit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Unit of the radius")] = None,
        size: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Size of every entity returned in the response")] = None,
        include_fuzzy: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="yes, to include fuzzy matches in the search. This has performance impact.")] = None,
        client_visibility: Annotated[Optional[StrictStr], Field(description="Filter events to clientName")] = None,
        country_code: Annotated[Optional[StrictStr], Field(description="Filter suggestions by country code")] = None,
        include_tba: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True, to include events with date to be announce (TBA)")] = None,
        include_tbd: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True, to include event with a date to be defined (TBD)")] = None,
        segment_id: Annotated[Optional[StrictStr], Field(description="Filter suggestions by segment id")] = None,
        geo_point: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="filter events by geoHash")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Yes if you want to display licensed content")] = None,
        include_spellcheck: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="yes, to include spell check suggestions in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Find Suggest

        Find search suggestions and filter your suggestions by location, source, etc.

        :param keyword: Keyword to search on
        :type keyword: str
        :param source: Filter entities by its source name
        :type source: str
        :param latlong: Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
        :type latlong: str
        :param radius: Radius of the area in which we want to search for events.
        :type radius: str
        :param unit: Unit of the radius
        :type unit: str
        :param size: Size of every entity returned in the response
        :type size: str
        :param include_fuzzy: yes, to include fuzzy matches in the search. This has performance impact.
        :type include_fuzzy: str
        :param client_visibility: Filter events to clientName
        :type client_visibility: str
        :param country_code: Filter suggestions by country code
        :type country_code: str
        :param include_tba: True, to include events with date to be announce (TBA)
        :type include_tba: str
        :param include_tbd: True, to include event with a date to be defined (TBD)
        :type include_tbd: str
        :param segment_id: Filter suggestions by segment id
        :type segment_id: str
        :param geo_point: filter events by geoHash
        :type geo_point: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: Yes if you want to display licensed content
        :type include_licensed_content: str
        :param include_spellcheck: yes, to include spell check suggestions in the response.
        :type include_spellcheck: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_suggest_get_serialize(
            keyword=keyword,
            source=source,
            latlong=latlong,
            radius=radius,
            unit=unit,
            size=size,
            include_fuzzy=include_fuzzy,
            client_visibility=client_visibility,
            country_code=country_code,
            include_tba=include_tba,
            include_tbd=include_tbd,
            segment_id=segment_id,
            geo_point=geo_point,
            locale=locale,
            include_licensed_content=include_licensed_content,
            include_spellcheck=include_spellcheck,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def discovery_v2_suggest_get_with_http_info(
        self,
        keyword: Annotated[Optional[StrictStr], Field(description="Keyword to search on")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter entities by its source name")] = None,
        latlong: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead")] = None,
        radius: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Radius of the area in which we want to search for events.")] = None,
        unit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Unit of the radius")] = None,
        size: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Size of every entity returned in the response")] = None,
        include_fuzzy: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="yes, to include fuzzy matches in the search. This has performance impact.")] = None,
        client_visibility: Annotated[Optional[StrictStr], Field(description="Filter events to clientName")] = None,
        country_code: Annotated[Optional[StrictStr], Field(description="Filter suggestions by country code")] = None,
        include_tba: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True, to include events with date to be announce (TBA)")] = None,
        include_tbd: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True, to include event with a date to be defined (TBD)")] = None,
        segment_id: Annotated[Optional[StrictStr], Field(description="Filter suggestions by segment id")] = None,
        geo_point: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="filter events by geoHash")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Yes if you want to display licensed content")] = None,
        include_spellcheck: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="yes, to include spell check suggestions in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Find Suggest

        Find search suggestions and filter your suggestions by location, source, etc.

        :param keyword: Keyword to search on
        :type keyword: str
        :param source: Filter entities by its source name
        :type source: str
        :param latlong: Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
        :type latlong: str
        :param radius: Radius of the area in which we want to search for events.
        :type radius: str
        :param unit: Unit of the radius
        :type unit: str
        :param size: Size of every entity returned in the response
        :type size: str
        :param include_fuzzy: yes, to include fuzzy matches in the search. This has performance impact.
        :type include_fuzzy: str
        :param client_visibility: Filter events to clientName
        :type client_visibility: str
        :param country_code: Filter suggestions by country code
        :type country_code: str
        :param include_tba: True, to include events with date to be announce (TBA)
        :type include_tba: str
        :param include_tbd: True, to include event with a date to be defined (TBD)
        :type include_tbd: str
        :param segment_id: Filter suggestions by segment id
        :type segment_id: str
        :param geo_point: filter events by geoHash
        :type geo_point: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: Yes if you want to display licensed content
        :type include_licensed_content: str
        :param include_spellcheck: yes, to include spell check suggestions in the response.
        :type include_spellcheck: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_suggest_get_serialize(
            keyword=keyword,
            source=source,
            latlong=latlong,
            radius=radius,
            unit=unit,
            size=size,
            include_fuzzy=include_fuzzy,
            client_visibility=client_visibility,
            country_code=country_code,
            include_tba=include_tba,
            include_tbd=include_tbd,
            segment_id=segment_id,
            geo_point=geo_point,
            locale=locale,
            include_licensed_content=include_licensed_content,
            include_spellcheck=include_spellcheck,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def discovery_v2_suggest_get_without_preload_content(
        self,
        keyword: Annotated[Optional[StrictStr], Field(description="Keyword to search on")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter entities by its source name")] = None,
        latlong: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead")] = None,
        radius: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Radius of the area in which we want to search for events.")] = None,
        unit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Unit of the radius")] = None,
        size: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Size of every entity returned in the response")] = None,
        include_fuzzy: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="yes, to include fuzzy matches in the search. This has performance impact.")] = None,
        client_visibility: Annotated[Optional[StrictStr], Field(description="Filter events to clientName")] = None,
        country_code: Annotated[Optional[StrictStr], Field(description="Filter suggestions by country code")] = None,
        include_tba: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True, to include events with date to be announce (TBA)")] = None,
        include_tbd: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True, to include event with a date to be defined (TBD)")] = None,
        segment_id: Annotated[Optional[StrictStr], Field(description="Filter suggestions by segment id")] = None,
        geo_point: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="filter events by geoHash")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Yes if you want to display licensed content")] = None,
        include_spellcheck: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="yes, to include spell check suggestions in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find Suggest

        Find search suggestions and filter your suggestions by location, source, etc.

        :param keyword: Keyword to search on
        :type keyword: str
        :param source: Filter entities by its source name
        :type source: str
        :param latlong: Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
        :type latlong: str
        :param radius: Radius of the area in which we want to search for events.
        :type radius: str
        :param unit: Unit of the radius
        :type unit: str
        :param size: Size of every entity returned in the response
        :type size: str
        :param include_fuzzy: yes, to include fuzzy matches in the search. This has performance impact.
        :type include_fuzzy: str
        :param client_visibility: Filter events to clientName
        :type client_visibility: str
        :param country_code: Filter suggestions by country code
        :type country_code: str
        :param include_tba: True, to include events with date to be announce (TBA)
        :type include_tba: str
        :param include_tbd: True, to include event with a date to be defined (TBD)
        :type include_tbd: str
        :param segment_id: Filter suggestions by segment id
        :type segment_id: str
        :param geo_point: filter events by geoHash
        :type geo_point: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: Yes if you want to display licensed content
        :type include_licensed_content: str
        :param include_spellcheck: yes, to include spell check suggestions in the response.
        :type include_spellcheck: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_suggest_get_serialize(
            keyword=keyword,
            source=source,
            latlong=latlong,
            radius=radius,
            unit=unit,
            size=size,
            include_fuzzy=include_fuzzy,
            client_visibility=client_visibility,
            country_code=country_code,
            include_tba=include_tba,
            include_tbd=include_tbd,
            segment_id=segment_id,
            geo_point=geo_point,
            locale=locale,
            include_licensed_content=include_licensed_content,
            include_spellcheck=include_spellcheck,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _discovery_v2_suggest_get_serialize(
        self,
        keyword,
        source,
        latlong,
        radius,
        unit,
        size,
        include_fuzzy,
        client_visibility,
        country_code,
        include_tba,
        include_tbd,
        segment_id,
        geo_point,
        locale,
        include_licensed_content,
        include_spellcheck,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if keyword is not None:
            
            _query_params.append(('keyword', keyword))
            
        if source is not None:
            
            _query_params.append(('source', source))
            
        if latlong is not None:
            
            _query_params.append(('latlong', latlong))
            
        if radius is not None:
            
            _query_params.append(('radius', radius))
            
        if unit is not None:
            
            _query_params.append(('unit', unit))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        if include_fuzzy is not None:
            
            _query_params.append(('includeFuzzy', include_fuzzy))
            
        if client_visibility is not None:
            
            _query_params.append(('clientVisibility', client_visibility))
            
        if country_code is not None:
            
            _query_params.append(('countryCode', country_code))
            
        if include_tba is not None:
            
            _query_params.append(('includeTBA', include_tba))
            
        if include_tbd is not None:
            
            _query_params.append(('includeTBD', include_tbd))
            
        if segment_id is not None:
            
            _query_params.append(('segmentId', segment_id))
            
        if geo_point is not None:
            
            _query_params.append(('geoPoint', geo_point))
            
        if locale is not None:
            
            _query_params.append(('locale', locale))
            
        if include_licensed_content is not None:
            
            _query_params.append(('includeLicensedContent', include_licensed_content))
            
        if include_spellcheck is not None:
            
            _query_params.append(('includeSpellcheck', include_spellcheck))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/hal+json; charset=utf-8', 
                    'application/json; charset=utf-8'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/discovery/v2/suggest',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


