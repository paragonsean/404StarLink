/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddTagsToResourceMessage;
import org.openapitools.client.model.ApplyPendingMaintenanceActionMessage;
import org.openapitools.client.model.ApplyPendingMaintenanceActionResponse;
import org.openapitools.client.model.BatchStartRecommendationsRequest;
import org.openapitools.client.model.BatchStartRecommendationsResponse;
import org.openapitools.client.model.CancelReplicationTaskAssessmentRunMessage;
import org.openapitools.client.model.CancelReplicationTaskAssessmentRunResponse;
import org.openapitools.client.model.CreateEndpointMessage;
import org.openapitools.client.model.CreateEndpointResponse;
import org.openapitools.client.model.CreateEventSubscriptionMessage;
import org.openapitools.client.model.CreateEventSubscriptionResponse;
import org.openapitools.client.model.CreateFleetAdvisorCollectorRequest;
import org.openapitools.client.model.CreateFleetAdvisorCollectorResponse;
import org.openapitools.client.model.CreateReplicationInstanceMessage;
import org.openapitools.client.model.CreateReplicationInstanceResponse;
import org.openapitools.client.model.CreateReplicationSubnetGroupMessage;
import org.openapitools.client.model.CreateReplicationSubnetGroupResponse;
import org.openapitools.client.model.CreateReplicationTaskMessage;
import org.openapitools.client.model.CreateReplicationTaskResponse;
import org.openapitools.client.model.DeleteCertificateMessage;
import org.openapitools.client.model.DeleteCertificateResponse;
import org.openapitools.client.model.DeleteCollectorRequest;
import org.openapitools.client.model.DeleteConnectionMessage;
import org.openapitools.client.model.DeleteConnectionResponse;
import org.openapitools.client.model.DeleteEndpointMessage;
import org.openapitools.client.model.DeleteEndpointResponse;
import org.openapitools.client.model.DeleteEventSubscriptionMessage;
import org.openapitools.client.model.DeleteEventSubscriptionResponse;
import org.openapitools.client.model.DeleteFleetAdvisorDatabasesRequest;
import org.openapitools.client.model.DeleteFleetAdvisorDatabasesResponse;
import org.openapitools.client.model.DeleteReplicationInstanceMessage;
import org.openapitools.client.model.DeleteReplicationInstanceResponse;
import org.openapitools.client.model.DeleteReplicationSubnetGroupMessage;
import org.openapitools.client.model.DeleteReplicationTaskAssessmentRunMessage;
import org.openapitools.client.model.DeleteReplicationTaskAssessmentRunResponse;
import org.openapitools.client.model.DeleteReplicationTaskMessage;
import org.openapitools.client.model.DeleteReplicationTaskResponse;
import org.openapitools.client.model.DescribeAccountAttributesResponse;
import org.openapitools.client.model.DescribeApplicableIndividualAssessmentsMessage;
import org.openapitools.client.model.DescribeApplicableIndividualAssessmentsResponse;
import org.openapitools.client.model.DescribeCertificatesMessage;
import org.openapitools.client.model.DescribeCertificatesResponse;
import org.openapitools.client.model.DescribeConnectionsMessage;
import org.openapitools.client.model.DescribeConnectionsResponse;
import org.openapitools.client.model.DescribeEndpointSettingsMessage;
import org.openapitools.client.model.DescribeEndpointSettingsResponse;
import org.openapitools.client.model.DescribeEndpointTypesMessage;
import org.openapitools.client.model.DescribeEndpointTypesResponse;
import org.openapitools.client.model.DescribeEndpointsMessage;
import org.openapitools.client.model.DescribeEndpointsResponse;
import org.openapitools.client.model.DescribeEventCategoriesMessage;
import org.openapitools.client.model.DescribeEventCategoriesResponse;
import org.openapitools.client.model.DescribeEventSubscriptionsMessage;
import org.openapitools.client.model.DescribeEventSubscriptionsResponse;
import org.openapitools.client.model.DescribeEventsMessage;
import org.openapitools.client.model.DescribeEventsResponse;
import org.openapitools.client.model.DescribeFleetAdvisorCollectorsRequest;
import org.openapitools.client.model.DescribeFleetAdvisorCollectorsResponse;
import org.openapitools.client.model.DescribeFleetAdvisorDatabasesRequest;
import org.openapitools.client.model.DescribeFleetAdvisorDatabasesResponse;
import org.openapitools.client.model.DescribeFleetAdvisorLsaAnalysisRequest;
import org.openapitools.client.model.DescribeFleetAdvisorLsaAnalysisResponse;
import org.openapitools.client.model.DescribeFleetAdvisorSchemaObjectSummaryRequest;
import org.openapitools.client.model.DescribeFleetAdvisorSchemaObjectSummaryResponse;
import org.openapitools.client.model.DescribeFleetAdvisorSchemasRequest;
import org.openapitools.client.model.DescribeFleetAdvisorSchemasResponse;
import org.openapitools.client.model.DescribeOrderableReplicationInstancesMessage;
import org.openapitools.client.model.DescribeOrderableReplicationInstancesResponse;
import org.openapitools.client.model.DescribePendingMaintenanceActionsMessage;
import org.openapitools.client.model.DescribePendingMaintenanceActionsResponse;
import org.openapitools.client.model.DescribeRecommendationLimitationsRequest;
import org.openapitools.client.model.DescribeRecommendationLimitationsResponse;
import org.openapitools.client.model.DescribeRecommendationsRequest;
import org.openapitools.client.model.DescribeRecommendationsResponse;
import org.openapitools.client.model.DescribeRefreshSchemasStatusMessage;
import org.openapitools.client.model.DescribeRefreshSchemasStatusResponse;
import org.openapitools.client.model.DescribeReplicationInstanceTaskLogsMessage;
import org.openapitools.client.model.DescribeReplicationInstanceTaskLogsResponse;
import org.openapitools.client.model.DescribeReplicationInstancesMessage;
import org.openapitools.client.model.DescribeReplicationInstancesResponse;
import org.openapitools.client.model.DescribeReplicationSubnetGroupsMessage;
import org.openapitools.client.model.DescribeReplicationSubnetGroupsResponse;
import org.openapitools.client.model.DescribeReplicationTaskAssessmentResultsMessage;
import org.openapitools.client.model.DescribeReplicationTaskAssessmentResultsResponse;
import org.openapitools.client.model.DescribeReplicationTaskAssessmentRunsMessage;
import org.openapitools.client.model.DescribeReplicationTaskAssessmentRunsResponse;
import org.openapitools.client.model.DescribeReplicationTaskIndividualAssessmentsMessage;
import org.openapitools.client.model.DescribeReplicationTaskIndividualAssessmentsResponse;
import org.openapitools.client.model.DescribeReplicationTasksMessage;
import org.openapitools.client.model.DescribeReplicationTasksResponse;
import org.openapitools.client.model.DescribeSchemasMessage;
import org.openapitools.client.model.DescribeSchemasResponse;
import org.openapitools.client.model.DescribeTableStatisticsMessage;
import org.openapitools.client.model.DescribeTableStatisticsResponse;
import org.openapitools.client.model.ImportCertificateMessage;
import org.openapitools.client.model.ImportCertificateResponse;
import org.openapitools.client.model.ListTagsForResourceMessage;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ModifyEndpointMessage;
import org.openapitools.client.model.ModifyEndpointResponse;
import org.openapitools.client.model.ModifyEventSubscriptionMessage;
import org.openapitools.client.model.ModifyEventSubscriptionResponse;
import org.openapitools.client.model.ModifyReplicationInstanceMessage;
import org.openapitools.client.model.ModifyReplicationInstanceResponse;
import org.openapitools.client.model.ModifyReplicationSubnetGroupMessage;
import org.openapitools.client.model.ModifyReplicationSubnetGroupResponse;
import org.openapitools.client.model.ModifyReplicationTaskMessage;
import org.openapitools.client.model.ModifyReplicationTaskResponse;
import org.openapitools.client.model.MoveReplicationTaskMessage;
import org.openapitools.client.model.MoveReplicationTaskResponse;
import org.openapitools.client.model.RebootReplicationInstanceMessage;
import org.openapitools.client.model.RebootReplicationInstanceResponse;
import org.openapitools.client.model.RefreshSchemasMessage;
import org.openapitools.client.model.RefreshSchemasResponse;
import org.openapitools.client.model.ReloadTablesMessage;
import org.openapitools.client.model.ReloadTablesResponse;
import org.openapitools.client.model.RemoveTagsFromResourceMessage;
import org.openapitools.client.model.RunFleetAdvisorLsaAnalysisResponse;
import org.openapitools.client.model.StartRecommendationsRequest;
import org.openapitools.client.model.StartReplicationTaskAssessmentMessage;
import org.openapitools.client.model.StartReplicationTaskAssessmentResponse;
import org.openapitools.client.model.StartReplicationTaskAssessmentRunMessage;
import org.openapitools.client.model.StartReplicationTaskAssessmentRunResponse;
import org.openapitools.client.model.StartReplicationTaskMessage;
import org.openapitools.client.model.StartReplicationTaskResponse;
import org.openapitools.client.model.StopReplicationTaskMessage;
import org.openapitools.client.model.StopReplicationTaskResponse;
import org.openapitools.client.model.TestConnectionMessage;
import org.openapitools.client.model.TestConnectionResponse;
import org.openapitools.client.model.UpdateSubscriptionsToEventBridgeMessage;
import org.openapitools.client.model.UpdateSubscriptionsToEventBridgeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addTagsToResource
     * @param xAmzTarget  (required)
     * @param addTagsToResourceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTagsToResourceCall(String xAmzTarget, AddTagsToResourceMessage addTagsToResourceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addTagsToResourceMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.AddTagsToResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTagsToResourceValidateBeforeCall(String xAmzTarget, AddTagsToResourceMessage addTagsToResourceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling addTagsToResource(Async)");
        }

        // verify the required parameter 'addTagsToResourceMessage' is set
        if (addTagsToResourceMessage == null) {
            throw new ApiException("Missing the required parameter 'addTagsToResourceMessage' when calling addTagsToResource(Async)");
        }

        return addTagsToResourceCall(xAmzTarget, addTagsToResourceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Adds metadata tags to an DMS resource, including replication instance, endpoint, subnet group, and migration task. These tags can also be used with cost allocation reporting to track cost associated with DMS resources, or used in a Condition statement in an IAM policy for DMS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html\&quot;&gt; &lt;code&gt;Tag&lt;/code&gt; &lt;/a&gt; data type description.
     * @param xAmzTarget  (required)
     * @param addTagsToResourceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public Object addTagsToResource(String xAmzTarget, AddTagsToResourceMessage addTagsToResourceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = addTagsToResourceWithHttpInfo(xAmzTarget, addTagsToResourceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds metadata tags to an DMS resource, including replication instance, endpoint, subnet group, and migration task. These tags can also be used with cost allocation reporting to track cost associated with DMS resources, or used in a Condition statement in an IAM policy for DMS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html\&quot;&gt; &lt;code&gt;Tag&lt;/code&gt; &lt;/a&gt; data type description.
     * @param xAmzTarget  (required)
     * @param addTagsToResourceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addTagsToResourceWithHttpInfo(String xAmzTarget, AddTagsToResourceMessage addTagsToResourceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = addTagsToResourceValidateBeforeCall(xAmzTarget, addTagsToResourceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds metadata tags to an DMS resource, including replication instance, endpoint, subnet group, and migration task. These tags can also be used with cost allocation reporting to track cost associated with DMS resources, or used in a Condition statement in an IAM policy for DMS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html\&quot;&gt; &lt;code&gt;Tag&lt;/code&gt; &lt;/a&gt; data type description.
     * @param xAmzTarget  (required)
     * @param addTagsToResourceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTagsToResourceAsync(String xAmzTarget, AddTagsToResourceMessage addTagsToResourceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTagsToResourceValidateBeforeCall(xAmzTarget, addTagsToResourceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applyPendingMaintenanceAction
     * @param xAmzTarget  (required)
     * @param applyPendingMaintenanceActionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyPendingMaintenanceActionCall(String xAmzTarget, ApplyPendingMaintenanceActionMessage applyPendingMaintenanceActionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applyPendingMaintenanceActionMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.ApplyPendingMaintenanceAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyPendingMaintenanceActionValidateBeforeCall(String xAmzTarget, ApplyPendingMaintenanceActionMessage applyPendingMaintenanceActionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling applyPendingMaintenanceAction(Async)");
        }

        // verify the required parameter 'applyPendingMaintenanceActionMessage' is set
        if (applyPendingMaintenanceActionMessage == null) {
            throw new ApiException("Missing the required parameter 'applyPendingMaintenanceActionMessage' when calling applyPendingMaintenanceAction(Async)");
        }

        return applyPendingMaintenanceActionCall(xAmzTarget, applyPendingMaintenanceActionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Applies a pending maintenance action to a resource (for example, to a replication instance).
     * @param xAmzTarget  (required)
     * @param applyPendingMaintenanceActionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApplyPendingMaintenanceActionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApplyPendingMaintenanceActionResponse applyPendingMaintenanceAction(String xAmzTarget, ApplyPendingMaintenanceActionMessage applyPendingMaintenanceActionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ApplyPendingMaintenanceActionResponse> localVarResp = applyPendingMaintenanceActionWithHttpInfo(xAmzTarget, applyPendingMaintenanceActionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Applies a pending maintenance action to a resource (for example, to a replication instance).
     * @param xAmzTarget  (required)
     * @param applyPendingMaintenanceActionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ApplyPendingMaintenanceActionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplyPendingMaintenanceActionResponse> applyPendingMaintenanceActionWithHttpInfo(String xAmzTarget, ApplyPendingMaintenanceActionMessage applyPendingMaintenanceActionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = applyPendingMaintenanceActionValidateBeforeCall(xAmzTarget, applyPendingMaintenanceActionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ApplyPendingMaintenanceActionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Applies a pending maintenance action to a resource (for example, to a replication instance).
     * @param xAmzTarget  (required)
     * @param applyPendingMaintenanceActionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyPendingMaintenanceActionAsync(String xAmzTarget, ApplyPendingMaintenanceActionMessage applyPendingMaintenanceActionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ApplyPendingMaintenanceActionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyPendingMaintenanceActionValidateBeforeCall(xAmzTarget, applyPendingMaintenanceActionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ApplyPendingMaintenanceActionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchStartRecommendations
     * @param xAmzTarget  (required)
     * @param batchStartRecommendationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchStartRecommendationsCall(String xAmzTarget, BatchStartRecommendationsRequest batchStartRecommendationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchStartRecommendationsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.BatchStartRecommendations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchStartRecommendationsValidateBeforeCall(String xAmzTarget, BatchStartRecommendationsRequest batchStartRecommendationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling batchStartRecommendations(Async)");
        }

        // verify the required parameter 'batchStartRecommendationsRequest' is set
        if (batchStartRecommendationsRequest == null) {
            throw new ApiException("Missing the required parameter 'batchStartRecommendationsRequest' when calling batchStartRecommendations(Async)");
        }

        return batchStartRecommendationsCall(xAmzTarget, batchStartRecommendationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts the analysis of up to 20 source databases to recommend target engines for each source database. This is a batch version of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_StartRecommendations.html\&quot;&gt;StartRecommendations&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The result of analysis of each source database is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param batchStartRecommendationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchStartRecommendationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public BatchStartRecommendationsResponse batchStartRecommendations(String xAmzTarget, BatchStartRecommendationsRequest batchStartRecommendationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchStartRecommendationsResponse> localVarResp = batchStartRecommendationsWithHttpInfo(xAmzTarget, batchStartRecommendationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts the analysis of up to 20 source databases to recommend target engines for each source database. This is a batch version of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_StartRecommendations.html\&quot;&gt;StartRecommendations&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The result of analysis of each source database is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param batchStartRecommendationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchStartRecommendationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchStartRecommendationsResponse> batchStartRecommendationsWithHttpInfo(String xAmzTarget, BatchStartRecommendationsRequest batchStartRecommendationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchStartRecommendationsValidateBeforeCall(xAmzTarget, batchStartRecommendationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchStartRecommendationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts the analysis of up to 20 source databases to recommend target engines for each source database. This is a batch version of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_StartRecommendations.html\&quot;&gt;StartRecommendations&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The result of analysis of each source database is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param batchStartRecommendationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchStartRecommendationsAsync(String xAmzTarget, BatchStartRecommendationsRequest batchStartRecommendationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchStartRecommendationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchStartRecommendationsValidateBeforeCall(xAmzTarget, batchStartRecommendationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchStartRecommendationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelReplicationTaskAssessmentRun
     * @param xAmzTarget  (required)
     * @param cancelReplicationTaskAssessmentRunMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelReplicationTaskAssessmentRunCall(String xAmzTarget, CancelReplicationTaskAssessmentRunMessage cancelReplicationTaskAssessmentRunMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelReplicationTaskAssessmentRunMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.CancelReplicationTaskAssessmentRun";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelReplicationTaskAssessmentRunValidateBeforeCall(String xAmzTarget, CancelReplicationTaskAssessmentRunMessage cancelReplicationTaskAssessmentRunMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling cancelReplicationTaskAssessmentRun(Async)");
        }

        // verify the required parameter 'cancelReplicationTaskAssessmentRunMessage' is set
        if (cancelReplicationTaskAssessmentRunMessage == null) {
            throw new ApiException("Missing the required parameter 'cancelReplicationTaskAssessmentRunMessage' when calling cancelReplicationTaskAssessmentRun(Async)");
        }

        return cancelReplicationTaskAssessmentRunCall(xAmzTarget, cancelReplicationTaskAssessmentRunMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Cancels a single premigration assessment run.&lt;/p&gt; &lt;p&gt;This operation prevents any individual assessments from running if they haven&#39;t started running. It also attempts to cancel any individual assessments that are currently running.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param cancelReplicationTaskAssessmentRunMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CancelReplicationTaskAssessmentRunResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public CancelReplicationTaskAssessmentRunResponse cancelReplicationTaskAssessmentRun(String xAmzTarget, CancelReplicationTaskAssessmentRunMessage cancelReplicationTaskAssessmentRunMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CancelReplicationTaskAssessmentRunResponse> localVarResp = cancelReplicationTaskAssessmentRunWithHttpInfo(xAmzTarget, cancelReplicationTaskAssessmentRunMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Cancels a single premigration assessment run.&lt;/p&gt; &lt;p&gt;This operation prevents any individual assessments from running if they haven&#39;t started running. It also attempts to cancel any individual assessments that are currently running.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param cancelReplicationTaskAssessmentRunMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CancelReplicationTaskAssessmentRunResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelReplicationTaskAssessmentRunResponse> cancelReplicationTaskAssessmentRunWithHttpInfo(String xAmzTarget, CancelReplicationTaskAssessmentRunMessage cancelReplicationTaskAssessmentRunMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = cancelReplicationTaskAssessmentRunValidateBeforeCall(xAmzTarget, cancelReplicationTaskAssessmentRunMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CancelReplicationTaskAssessmentRunResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Cancels a single premigration assessment run.&lt;/p&gt; &lt;p&gt;This operation prevents any individual assessments from running if they haven&#39;t started running. It also attempts to cancel any individual assessments that are currently running.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param cancelReplicationTaskAssessmentRunMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelReplicationTaskAssessmentRunAsync(String xAmzTarget, CancelReplicationTaskAssessmentRunMessage cancelReplicationTaskAssessmentRunMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CancelReplicationTaskAssessmentRunResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelReplicationTaskAssessmentRunValidateBeforeCall(xAmzTarget, cancelReplicationTaskAssessmentRunMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CancelReplicationTaskAssessmentRunResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEndpoint
     * @param xAmzTarget  (required)
     * @param createEndpointMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> S3AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEndpointCall(String xAmzTarget, CreateEndpointMessage createEndpointMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEndpointMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.CreateEndpoint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEndpointValidateBeforeCall(String xAmzTarget, CreateEndpointMessage createEndpointMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createEndpoint(Async)");
        }

        // verify the required parameter 'createEndpointMessage' is set
        if (createEndpointMessage == null) {
            throw new ApiException("Missing the required parameter 'createEndpointMessage' when calling createEndpoint(Async)");
        }

        return createEndpointCall(xAmzTarget, createEndpointMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an endpoint using the provided settings.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For a MySQL source or target endpoint, don&#39;t explicitly specify the database using the &lt;code&gt;DatabaseName&lt;/code&gt; request parameter on the &lt;code&gt;CreateEndpoint&lt;/code&gt; API call. Specifying &lt;code&gt;DatabaseName&lt;/code&gt; when you create a MySQL endpoint replicates all the task tables to this single database. For MySQL endpoints, you specify the database only when you specify the schema in the table-mapping rules of the DMS task.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createEndpointMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateEndpointResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> S3AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateEndpointResponse createEndpoint(String xAmzTarget, CreateEndpointMessage createEndpointMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateEndpointResponse> localVarResp = createEndpointWithHttpInfo(xAmzTarget, createEndpointMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an endpoint using the provided settings.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For a MySQL source or target endpoint, don&#39;t explicitly specify the database using the &lt;code&gt;DatabaseName&lt;/code&gt; request parameter on the &lt;code&gt;CreateEndpoint&lt;/code&gt; API call. Specifying &lt;code&gt;DatabaseName&lt;/code&gt; when you create a MySQL endpoint replicates all the task tables to this single database. For MySQL endpoints, you specify the database only when you specify the schema in the table-mapping rules of the DMS task.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createEndpointMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateEndpointResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> S3AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateEndpointResponse> createEndpointWithHttpInfo(String xAmzTarget, CreateEndpointMessage createEndpointMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createEndpointValidateBeforeCall(xAmzTarget, createEndpointMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateEndpointResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an endpoint using the provided settings.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For a MySQL source or target endpoint, don&#39;t explicitly specify the database using the &lt;code&gt;DatabaseName&lt;/code&gt; request parameter on the &lt;code&gt;CreateEndpoint&lt;/code&gt; API call. Specifying &lt;code&gt;DatabaseName&lt;/code&gt; when you create a MySQL endpoint replicates all the task tables to this single database. For MySQL endpoints, you specify the database only when you specify the schema in the table-mapping rules of the DMS task.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createEndpointMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> S3AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEndpointAsync(String xAmzTarget, CreateEndpointMessage createEndpointMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateEndpointResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEndpointValidateBeforeCall(xAmzTarget, createEndpointMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateEndpointResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEventSubscription
     * @param xAmzTarget  (required)
     * @param createEventSubscriptionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSAccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSDisabledFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSInvalidStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> KMSThrottlingFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEventSubscriptionCall(String xAmzTarget, CreateEventSubscriptionMessage createEventSubscriptionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEventSubscriptionMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.CreateEventSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEventSubscriptionValidateBeforeCall(String xAmzTarget, CreateEventSubscriptionMessage createEventSubscriptionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createEventSubscription(Async)");
        }

        // verify the required parameter 'createEventSubscriptionMessage' is set
        if (createEventSubscriptionMessage == null) {
            throw new ApiException("Missing the required parameter 'createEventSubscriptionMessage' when calling createEventSubscription(Async)");
        }

        return createEventSubscriptionCall(xAmzTarget, createEventSubscriptionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; Creates an DMS event notification subscription. &lt;/p&gt; &lt;p&gt;You can specify the type of source (&lt;code&gt;SourceType&lt;/code&gt;) you want to be notified of, provide a list of DMS source IDs (&lt;code&gt;SourceIds&lt;/code&gt;) that triggers the events, and provide a list of event categories (&lt;code&gt;EventCategories&lt;/code&gt;) for events you want to be notified of. If you specify both the &lt;code&gt;SourceType&lt;/code&gt; and &lt;code&gt;SourceIds&lt;/code&gt;, such as &lt;code&gt;SourceType &#x3D; replication-instance&lt;/code&gt; and &lt;code&gt;SourceIdentifier &#x3D; my-replinstance&lt;/code&gt;, you will be notified of all the replication instance events for the specified source. If you specify a &lt;code&gt;SourceType&lt;/code&gt; but don&#39;t specify a &lt;code&gt;SourceIdentifier&lt;/code&gt;, you receive notice of the events for that source type for all your DMS sources. If you don&#39;t specify either &lt;code&gt;SourceType&lt;/code&gt; nor &lt;code&gt;SourceIdentifier&lt;/code&gt;, you will be notified of events generated from all DMS sources belonging to your customer account.&lt;/p&gt; &lt;p&gt;For more information about DMS events, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html\&quot;&gt;Working with Events and Notifications&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide.&lt;/i&gt; &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createEventSubscriptionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateEventSubscriptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSAccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSDisabledFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSInvalidStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> KMSThrottlingFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateEventSubscriptionResponse createEventSubscription(String xAmzTarget, CreateEventSubscriptionMessage createEventSubscriptionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateEventSubscriptionResponse> localVarResp = createEventSubscriptionWithHttpInfo(xAmzTarget, createEventSubscriptionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Creates an DMS event notification subscription. &lt;/p&gt; &lt;p&gt;You can specify the type of source (&lt;code&gt;SourceType&lt;/code&gt;) you want to be notified of, provide a list of DMS source IDs (&lt;code&gt;SourceIds&lt;/code&gt;) that triggers the events, and provide a list of event categories (&lt;code&gt;EventCategories&lt;/code&gt;) for events you want to be notified of. If you specify both the &lt;code&gt;SourceType&lt;/code&gt; and &lt;code&gt;SourceIds&lt;/code&gt;, such as &lt;code&gt;SourceType &#x3D; replication-instance&lt;/code&gt; and &lt;code&gt;SourceIdentifier &#x3D; my-replinstance&lt;/code&gt;, you will be notified of all the replication instance events for the specified source. If you specify a &lt;code&gt;SourceType&lt;/code&gt; but don&#39;t specify a &lt;code&gt;SourceIdentifier&lt;/code&gt;, you receive notice of the events for that source type for all your DMS sources. If you don&#39;t specify either &lt;code&gt;SourceType&lt;/code&gt; nor &lt;code&gt;SourceIdentifier&lt;/code&gt;, you will be notified of events generated from all DMS sources belonging to your customer account.&lt;/p&gt; &lt;p&gt;For more information about DMS events, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html\&quot;&gt;Working with Events and Notifications&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide.&lt;/i&gt; &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createEventSubscriptionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateEventSubscriptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSAccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSDisabledFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSInvalidStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> KMSThrottlingFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateEventSubscriptionResponse> createEventSubscriptionWithHttpInfo(String xAmzTarget, CreateEventSubscriptionMessage createEventSubscriptionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createEventSubscriptionValidateBeforeCall(xAmzTarget, createEventSubscriptionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateEventSubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Creates an DMS event notification subscription. &lt;/p&gt; &lt;p&gt;You can specify the type of source (&lt;code&gt;SourceType&lt;/code&gt;) you want to be notified of, provide a list of DMS source IDs (&lt;code&gt;SourceIds&lt;/code&gt;) that triggers the events, and provide a list of event categories (&lt;code&gt;EventCategories&lt;/code&gt;) for events you want to be notified of. If you specify both the &lt;code&gt;SourceType&lt;/code&gt; and &lt;code&gt;SourceIds&lt;/code&gt;, such as &lt;code&gt;SourceType &#x3D; replication-instance&lt;/code&gt; and &lt;code&gt;SourceIdentifier &#x3D; my-replinstance&lt;/code&gt;, you will be notified of all the replication instance events for the specified source. If you specify a &lt;code&gt;SourceType&lt;/code&gt; but don&#39;t specify a &lt;code&gt;SourceIdentifier&lt;/code&gt;, you receive notice of the events for that source type for all your DMS sources. If you don&#39;t specify either &lt;code&gt;SourceType&lt;/code&gt; nor &lt;code&gt;SourceIdentifier&lt;/code&gt;, you will be notified of events generated from all DMS sources belonging to your customer account.&lt;/p&gt; &lt;p&gt;For more information about DMS events, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html\&quot;&gt;Working with Events and Notifications&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide.&lt;/i&gt; &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createEventSubscriptionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSAccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSDisabledFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSInvalidStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> KMSThrottlingFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEventSubscriptionAsync(String xAmzTarget, CreateEventSubscriptionMessage createEventSubscriptionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateEventSubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEventSubscriptionValidateBeforeCall(xAmzTarget, createEventSubscriptionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateEventSubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFleetAdvisorCollector
     * @param xAmzTarget  (required)
     * @param createFleetAdvisorCollectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> S3AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFleetAdvisorCollectorCall(String xAmzTarget, CreateFleetAdvisorCollectorRequest createFleetAdvisorCollectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFleetAdvisorCollectorRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.CreateFleetAdvisorCollector";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFleetAdvisorCollectorValidateBeforeCall(String xAmzTarget, CreateFleetAdvisorCollectorRequest createFleetAdvisorCollectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createFleetAdvisorCollector(Async)");
        }

        // verify the required parameter 'createFleetAdvisorCollectorRequest' is set
        if (createFleetAdvisorCollectorRequest == null) {
            throw new ApiException("Missing the required parameter 'createFleetAdvisorCollectorRequest' when calling createFleetAdvisorCollector(Async)");
        }

        return createFleetAdvisorCollectorCall(xAmzTarget, createFleetAdvisorCollectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a Fleet Advisor collector using the specified parameters.
     * @param xAmzTarget  (required)
     * @param createFleetAdvisorCollectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateFleetAdvisorCollectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> S3AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateFleetAdvisorCollectorResponse createFleetAdvisorCollector(String xAmzTarget, CreateFleetAdvisorCollectorRequest createFleetAdvisorCollectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateFleetAdvisorCollectorResponse> localVarResp = createFleetAdvisorCollectorWithHttpInfo(xAmzTarget, createFleetAdvisorCollectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a Fleet Advisor collector using the specified parameters.
     * @param xAmzTarget  (required)
     * @param createFleetAdvisorCollectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateFleetAdvisorCollectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> S3AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateFleetAdvisorCollectorResponse> createFleetAdvisorCollectorWithHttpInfo(String xAmzTarget, CreateFleetAdvisorCollectorRequest createFleetAdvisorCollectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createFleetAdvisorCollectorValidateBeforeCall(xAmzTarget, createFleetAdvisorCollectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateFleetAdvisorCollectorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a Fleet Advisor collector using the specified parameters.
     * @param xAmzTarget  (required)
     * @param createFleetAdvisorCollectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> S3AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> S3ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFleetAdvisorCollectorAsync(String xAmzTarget, CreateFleetAdvisorCollectorRequest createFleetAdvisorCollectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateFleetAdvisorCollectorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFleetAdvisorCollectorValidateBeforeCall(xAmzTarget, createFleetAdvisorCollectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateFleetAdvisorCollectorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReplicationInstance
     * @param xAmzTarget  (required)
     * @param createReplicationInstanceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientResourceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReplicationSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReplicationInstanceCall(String xAmzTarget, CreateReplicationInstanceMessage createReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createReplicationInstanceMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.CreateReplicationInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReplicationInstanceValidateBeforeCall(String xAmzTarget, CreateReplicationInstanceMessage createReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createReplicationInstance(Async)");
        }

        // verify the required parameter 'createReplicationInstanceMessage' is set
        if (createReplicationInstanceMessage == null) {
            throw new ApiException("Missing the required parameter 'createReplicationInstanceMessage' when calling createReplicationInstance(Async)");
        }

        return createReplicationInstanceCall(xAmzTarget, createReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates the replication instance using the specified parameters.&lt;/p&gt; &lt;p&gt;DMS requires that your account have certain roles with appropriate permissions before you can create a replication instance. For information on the required roles, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#CHAP_Security.APIRole\&quot;&gt;Creating the IAM Roles to Use With the CLI and DMS API&lt;/a&gt;. For information on the required permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#CHAP_Security.IAMPermissions\&quot;&gt;IAM Permissions Needed to Use DMS&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createReplicationInstanceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateReplicationInstanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientResourceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReplicationSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateReplicationInstanceResponse createReplicationInstance(String xAmzTarget, CreateReplicationInstanceMessage createReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateReplicationInstanceResponse> localVarResp = createReplicationInstanceWithHttpInfo(xAmzTarget, createReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates the replication instance using the specified parameters.&lt;/p&gt; &lt;p&gt;DMS requires that your account have certain roles with appropriate permissions before you can create a replication instance. For information on the required roles, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#CHAP_Security.APIRole\&quot;&gt;Creating the IAM Roles to Use With the CLI and DMS API&lt;/a&gt;. For information on the required permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#CHAP_Security.IAMPermissions\&quot;&gt;IAM Permissions Needed to Use DMS&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createReplicationInstanceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateReplicationInstanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientResourceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReplicationSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateReplicationInstanceResponse> createReplicationInstanceWithHttpInfo(String xAmzTarget, CreateReplicationInstanceMessage createReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createReplicationInstanceValidateBeforeCall(xAmzTarget, createReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateReplicationInstanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates the replication instance using the specified parameters.&lt;/p&gt; &lt;p&gt;DMS requires that your account have certain roles with appropriate permissions before you can create a replication instance. For information on the required roles, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#CHAP_Security.APIRole\&quot;&gt;Creating the IAM Roles to Use With the CLI and DMS API&lt;/a&gt;. For information on the required permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#CHAP_Security.IAMPermissions\&quot;&gt;IAM Permissions Needed to Use DMS&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createReplicationInstanceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientResourceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReplicationSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReplicationInstanceAsync(String xAmzTarget, CreateReplicationInstanceMessage createReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateReplicationInstanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReplicationInstanceValidateBeforeCall(xAmzTarget, createReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateReplicationInstanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReplicationSubnetGroup
     * @param xAmzTarget  (required)
     * @param createReplicationSubnetGroupMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReplicationSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReplicationSubnetGroupCall(String xAmzTarget, CreateReplicationSubnetGroupMessage createReplicationSubnetGroupMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createReplicationSubnetGroupMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.CreateReplicationSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReplicationSubnetGroupValidateBeforeCall(String xAmzTarget, CreateReplicationSubnetGroupMessage createReplicationSubnetGroupMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createReplicationSubnetGroup(Async)");
        }

        // verify the required parameter 'createReplicationSubnetGroupMessage' is set
        if (createReplicationSubnetGroupMessage == null) {
            throw new ApiException("Missing the required parameter 'createReplicationSubnetGroupMessage' when calling createReplicationSubnetGroup(Async)");
        }

        return createReplicationSubnetGroupCall(xAmzTarget, createReplicationSubnetGroupMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a replication subnet group given a list of the subnet IDs in a VPC.&lt;/p&gt; &lt;p&gt;The VPC needs to have at least one subnet in at least two availability zones in the Amazon Web Services Region, otherwise the service will throw a &lt;code&gt;ReplicationSubnetGroupDoesNotCoverEnoughAZs&lt;/code&gt; exception.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createReplicationSubnetGroupMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateReplicationSubnetGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReplicationSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public CreateReplicationSubnetGroupResponse createReplicationSubnetGroup(String xAmzTarget, CreateReplicationSubnetGroupMessage createReplicationSubnetGroupMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateReplicationSubnetGroupResponse> localVarResp = createReplicationSubnetGroupWithHttpInfo(xAmzTarget, createReplicationSubnetGroupMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a replication subnet group given a list of the subnet IDs in a VPC.&lt;/p&gt; &lt;p&gt;The VPC needs to have at least one subnet in at least two availability zones in the Amazon Web Services Region, otherwise the service will throw a &lt;code&gt;ReplicationSubnetGroupDoesNotCoverEnoughAZs&lt;/code&gt; exception.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createReplicationSubnetGroupMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateReplicationSubnetGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReplicationSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateReplicationSubnetGroupResponse> createReplicationSubnetGroupWithHttpInfo(String xAmzTarget, CreateReplicationSubnetGroupMessage createReplicationSubnetGroupMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createReplicationSubnetGroupValidateBeforeCall(xAmzTarget, createReplicationSubnetGroupMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateReplicationSubnetGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a replication subnet group given a list of the subnet IDs in a VPC.&lt;/p&gt; &lt;p&gt;The VPC needs to have at least one subnet in at least two availability zones in the Amazon Web Services Region, otherwise the service will throw a &lt;code&gt;ReplicationSubnetGroupDoesNotCoverEnoughAZs&lt;/code&gt; exception.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createReplicationSubnetGroupMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReplicationSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReplicationSubnetGroupAsync(String xAmzTarget, CreateReplicationSubnetGroupMessage createReplicationSubnetGroupMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateReplicationSubnetGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReplicationSubnetGroupValidateBeforeCall(xAmzTarget, createReplicationSubnetGroupMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateReplicationSubnetGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReplicationTask
     * @param xAmzTarget  (required)
     * @param createReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReplicationTaskCall(String xAmzTarget, CreateReplicationTaskMessage createReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createReplicationTaskMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.CreateReplicationTask";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReplicationTaskValidateBeforeCall(String xAmzTarget, CreateReplicationTaskMessage createReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createReplicationTask(Async)");
        }

        // verify the required parameter 'createReplicationTaskMessage' is set
        if (createReplicationTaskMessage == null) {
            throw new ApiException("Missing the required parameter 'createReplicationTaskMessage' when calling createReplicationTask(Async)");
        }

        return createReplicationTaskCall(xAmzTarget, createReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a replication task using the specified parameters.
     * @param xAmzTarget  (required)
     * @param createReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateReplicationTaskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateReplicationTaskResponse createReplicationTask(String xAmzTarget, CreateReplicationTaskMessage createReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateReplicationTaskResponse> localVarResp = createReplicationTaskWithHttpInfo(xAmzTarget, createReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a replication task using the specified parameters.
     * @param xAmzTarget  (required)
     * @param createReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateReplicationTaskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateReplicationTaskResponse> createReplicationTaskWithHttpInfo(String xAmzTarget, CreateReplicationTaskMessage createReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createReplicationTaskValidateBeforeCall(xAmzTarget, createReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateReplicationTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a replication task using the specified parameters.
     * @param xAmzTarget  (required)
     * @param createReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReplicationTaskAsync(String xAmzTarget, CreateReplicationTaskMessage createReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateReplicationTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReplicationTaskValidateBeforeCall(xAmzTarget, createReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateReplicationTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCertificate
     * @param xAmzTarget  (required)
     * @param deleteCertificateMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCertificateCall(String xAmzTarget, DeleteCertificateMessage deleteCertificateMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteCertificateMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DeleteCertificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCertificateValidateBeforeCall(String xAmzTarget, DeleteCertificateMessage deleteCertificateMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteCertificate(Async)");
        }

        // verify the required parameter 'deleteCertificateMessage' is set
        if (deleteCertificateMessage == null) {
            throw new ApiException("Missing the required parameter 'deleteCertificateMessage' when calling deleteCertificate(Async)");
        }

        return deleteCertificateCall(xAmzTarget, deleteCertificateMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes the specified certificate. 
     * @param xAmzTarget  (required)
     * @param deleteCertificateMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteCertificateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCertificateResponse deleteCertificate(String xAmzTarget, DeleteCertificateMessage deleteCertificateMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteCertificateResponse> localVarResp = deleteCertificateWithHttpInfo(xAmzTarget, deleteCertificateMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the specified certificate. 
     * @param xAmzTarget  (required)
     * @param deleteCertificateMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteCertificateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteCertificateResponse> deleteCertificateWithHttpInfo(String xAmzTarget, DeleteCertificateMessage deleteCertificateMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteCertificateValidateBeforeCall(xAmzTarget, deleteCertificateMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteCertificateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the specified certificate. 
     * @param xAmzTarget  (required)
     * @param deleteCertificateMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCertificateAsync(String xAmzTarget, DeleteCertificateMessage deleteCertificateMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteCertificateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCertificateValidateBeforeCall(xAmzTarget, deleteCertificateMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteCertificateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteConnection
     * @param xAmzTarget  (required)
     * @param deleteConnectionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConnectionCall(String xAmzTarget, DeleteConnectionMessage deleteConnectionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteConnectionMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DeleteConnection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConnectionValidateBeforeCall(String xAmzTarget, DeleteConnectionMessage deleteConnectionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteConnection(Async)");
        }

        // verify the required parameter 'deleteConnectionMessage' is set
        if (deleteConnectionMessage == null) {
            throw new ApiException("Missing the required parameter 'deleteConnectionMessage' when calling deleteConnection(Async)");
        }

        return deleteConnectionCall(xAmzTarget, deleteConnectionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes the connection between a replication instance and an endpoint.
     * @param xAmzTarget  (required)
     * @param deleteConnectionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteConnectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteConnectionResponse deleteConnection(String xAmzTarget, DeleteConnectionMessage deleteConnectionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteConnectionResponse> localVarResp = deleteConnectionWithHttpInfo(xAmzTarget, deleteConnectionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the connection between a replication instance and an endpoint.
     * @param xAmzTarget  (required)
     * @param deleteConnectionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteConnectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteConnectionResponse> deleteConnectionWithHttpInfo(String xAmzTarget, DeleteConnectionMessage deleteConnectionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteConnectionValidateBeforeCall(xAmzTarget, deleteConnectionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteConnectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the connection between a replication instance and an endpoint.
     * @param xAmzTarget  (required)
     * @param deleteConnectionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConnectionAsync(String xAmzTarget, DeleteConnectionMessage deleteConnectionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteConnectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConnectionValidateBeforeCall(xAmzTarget, deleteConnectionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteConnectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEndpoint
     * @param xAmzTarget  (required)
     * @param deleteEndpointMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEndpointCall(String xAmzTarget, DeleteEndpointMessage deleteEndpointMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteEndpointMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DeleteEndpoint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEndpointValidateBeforeCall(String xAmzTarget, DeleteEndpointMessage deleteEndpointMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteEndpoint(Async)");
        }

        // verify the required parameter 'deleteEndpointMessage' is set
        if (deleteEndpointMessage == null) {
            throw new ApiException("Missing the required parameter 'deleteEndpointMessage' when calling deleteEndpoint(Async)");
        }

        return deleteEndpointCall(xAmzTarget, deleteEndpointMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified endpoint.&lt;/p&gt; &lt;note&gt; &lt;p&gt;All tasks associated with the endpoint must be deleted before you can delete the endpoint.&lt;/p&gt; &lt;/note&gt; &lt;p/&gt;
     * @param xAmzTarget  (required)
     * @param deleteEndpointMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteEndpointResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEndpointResponse deleteEndpoint(String xAmzTarget, DeleteEndpointMessage deleteEndpointMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteEndpointResponse> localVarResp = deleteEndpointWithHttpInfo(xAmzTarget, deleteEndpointMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified endpoint.&lt;/p&gt; &lt;note&gt; &lt;p&gt;All tasks associated with the endpoint must be deleted before you can delete the endpoint.&lt;/p&gt; &lt;/note&gt; &lt;p/&gt;
     * @param xAmzTarget  (required)
     * @param deleteEndpointMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteEndpointResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteEndpointResponse> deleteEndpointWithHttpInfo(String xAmzTarget, DeleteEndpointMessage deleteEndpointMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteEndpointValidateBeforeCall(xAmzTarget, deleteEndpointMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteEndpointResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified endpoint.&lt;/p&gt; &lt;note&gt; &lt;p&gt;All tasks associated with the endpoint must be deleted before you can delete the endpoint.&lt;/p&gt; &lt;/note&gt; &lt;p/&gt;
     * @param xAmzTarget  (required)
     * @param deleteEndpointMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEndpointAsync(String xAmzTarget, DeleteEndpointMessage deleteEndpointMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteEndpointResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEndpointValidateBeforeCall(xAmzTarget, deleteEndpointMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteEndpointResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEventSubscription
     * @param xAmzTarget  (required)
     * @param deleteEventSubscriptionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventSubscriptionCall(String xAmzTarget, DeleteEventSubscriptionMessage deleteEventSubscriptionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteEventSubscriptionMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DeleteEventSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEventSubscriptionValidateBeforeCall(String xAmzTarget, DeleteEventSubscriptionMessage deleteEventSubscriptionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteEventSubscription(Async)");
        }

        // verify the required parameter 'deleteEventSubscriptionMessage' is set
        if (deleteEventSubscriptionMessage == null) {
            throw new ApiException("Missing the required parameter 'deleteEventSubscriptionMessage' when calling deleteEventSubscription(Async)");
        }

        return deleteEventSubscriptionCall(xAmzTarget, deleteEventSubscriptionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     *  Deletes an DMS event subscription. 
     * @param xAmzTarget  (required)
     * @param deleteEventSubscriptionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteEventSubscriptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEventSubscriptionResponse deleteEventSubscription(String xAmzTarget, DeleteEventSubscriptionMessage deleteEventSubscriptionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteEventSubscriptionResponse> localVarResp = deleteEventSubscriptionWithHttpInfo(xAmzTarget, deleteEventSubscriptionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     *  Deletes an DMS event subscription. 
     * @param xAmzTarget  (required)
     * @param deleteEventSubscriptionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteEventSubscriptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteEventSubscriptionResponse> deleteEventSubscriptionWithHttpInfo(String xAmzTarget, DeleteEventSubscriptionMessage deleteEventSubscriptionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteEventSubscriptionValidateBeforeCall(xAmzTarget, deleteEventSubscriptionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteEventSubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Deletes an DMS event subscription. 
     * @param xAmzTarget  (required)
     * @param deleteEventSubscriptionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventSubscriptionAsync(String xAmzTarget, DeleteEventSubscriptionMessage deleteEventSubscriptionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteEventSubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEventSubscriptionValidateBeforeCall(xAmzTarget, deleteEventSubscriptionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteEventSubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFleetAdvisorCollector
     * @param xAmzTarget  (required)
     * @param deleteCollectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CollectorNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFleetAdvisorCollectorCall(String xAmzTarget, DeleteCollectorRequest deleteCollectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteCollectorRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DeleteFleetAdvisorCollector";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFleetAdvisorCollectorValidateBeforeCall(String xAmzTarget, DeleteCollectorRequest deleteCollectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteFleetAdvisorCollector(Async)");
        }

        // verify the required parameter 'deleteCollectorRequest' is set
        if (deleteCollectorRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteCollectorRequest' when calling deleteFleetAdvisorCollector(Async)");
        }

        return deleteFleetAdvisorCollectorCall(xAmzTarget, deleteCollectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes the specified Fleet Advisor collector.
     * @param xAmzTarget  (required)
     * @param deleteCollectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CollectorNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFleetAdvisorCollector(String xAmzTarget, DeleteCollectorRequest deleteCollectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteFleetAdvisorCollectorWithHttpInfo(xAmzTarget, deleteCollectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Deletes the specified Fleet Advisor collector.
     * @param xAmzTarget  (required)
     * @param deleteCollectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CollectorNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFleetAdvisorCollectorWithHttpInfo(String xAmzTarget, DeleteCollectorRequest deleteCollectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteFleetAdvisorCollectorValidateBeforeCall(xAmzTarget, deleteCollectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified Fleet Advisor collector.
     * @param xAmzTarget  (required)
     * @param deleteCollectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CollectorNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFleetAdvisorCollectorAsync(String xAmzTarget, DeleteCollectorRequest deleteCollectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFleetAdvisorCollectorValidateBeforeCall(xAmzTarget, deleteCollectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFleetAdvisorDatabases
     * @param xAmzTarget  (required)
     * @param deleteFleetAdvisorDatabasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFleetAdvisorDatabasesCall(String xAmzTarget, DeleteFleetAdvisorDatabasesRequest deleteFleetAdvisorDatabasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteFleetAdvisorDatabasesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DeleteFleetAdvisorDatabases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFleetAdvisorDatabasesValidateBeforeCall(String xAmzTarget, DeleteFleetAdvisorDatabasesRequest deleteFleetAdvisorDatabasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteFleetAdvisorDatabases(Async)");
        }

        // verify the required parameter 'deleteFleetAdvisorDatabasesRequest' is set
        if (deleteFleetAdvisorDatabasesRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteFleetAdvisorDatabasesRequest' when calling deleteFleetAdvisorDatabases(Async)");
        }

        return deleteFleetAdvisorDatabasesCall(xAmzTarget, deleteFleetAdvisorDatabasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes the specified Fleet Advisor collector databases.
     * @param xAmzTarget  (required)
     * @param deleteFleetAdvisorDatabasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteFleetAdvisorDatabasesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFleetAdvisorDatabasesResponse deleteFleetAdvisorDatabases(String xAmzTarget, DeleteFleetAdvisorDatabasesRequest deleteFleetAdvisorDatabasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteFleetAdvisorDatabasesResponse> localVarResp = deleteFleetAdvisorDatabasesWithHttpInfo(xAmzTarget, deleteFleetAdvisorDatabasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the specified Fleet Advisor collector databases.
     * @param xAmzTarget  (required)
     * @param deleteFleetAdvisorDatabasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteFleetAdvisorDatabasesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteFleetAdvisorDatabasesResponse> deleteFleetAdvisorDatabasesWithHttpInfo(String xAmzTarget, DeleteFleetAdvisorDatabasesRequest deleteFleetAdvisorDatabasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteFleetAdvisorDatabasesValidateBeforeCall(xAmzTarget, deleteFleetAdvisorDatabasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteFleetAdvisorDatabasesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the specified Fleet Advisor collector databases.
     * @param xAmzTarget  (required)
     * @param deleteFleetAdvisorDatabasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidOperationFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFleetAdvisorDatabasesAsync(String xAmzTarget, DeleteFleetAdvisorDatabasesRequest deleteFleetAdvisorDatabasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteFleetAdvisorDatabasesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFleetAdvisorDatabasesValidateBeforeCall(xAmzTarget, deleteFleetAdvisorDatabasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteFleetAdvisorDatabasesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReplicationInstance
     * @param xAmzTarget  (required)
     * @param deleteReplicationInstanceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReplicationInstanceCall(String xAmzTarget, DeleteReplicationInstanceMessage deleteReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteReplicationInstanceMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DeleteReplicationInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReplicationInstanceValidateBeforeCall(String xAmzTarget, DeleteReplicationInstanceMessage deleteReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteReplicationInstance(Async)");
        }

        // verify the required parameter 'deleteReplicationInstanceMessage' is set
        if (deleteReplicationInstanceMessage == null) {
            throw new ApiException("Missing the required parameter 'deleteReplicationInstanceMessage' when calling deleteReplicationInstance(Async)");
        }

        return deleteReplicationInstanceCall(xAmzTarget, deleteReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified replication instance.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You must delete any migration tasks that are associated with the replication instance before you can delete it.&lt;/p&gt; &lt;/note&gt; &lt;p/&gt;
     * @param xAmzTarget  (required)
     * @param deleteReplicationInstanceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteReplicationInstanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteReplicationInstanceResponse deleteReplicationInstance(String xAmzTarget, DeleteReplicationInstanceMessage deleteReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteReplicationInstanceResponse> localVarResp = deleteReplicationInstanceWithHttpInfo(xAmzTarget, deleteReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified replication instance.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You must delete any migration tasks that are associated with the replication instance before you can delete it.&lt;/p&gt; &lt;/note&gt; &lt;p/&gt;
     * @param xAmzTarget  (required)
     * @param deleteReplicationInstanceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteReplicationInstanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteReplicationInstanceResponse> deleteReplicationInstanceWithHttpInfo(String xAmzTarget, DeleteReplicationInstanceMessage deleteReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteReplicationInstanceValidateBeforeCall(xAmzTarget, deleteReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteReplicationInstanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified replication instance.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You must delete any migration tasks that are associated with the replication instance before you can delete it.&lt;/p&gt; &lt;/note&gt; &lt;p/&gt;
     * @param xAmzTarget  (required)
     * @param deleteReplicationInstanceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReplicationInstanceAsync(String xAmzTarget, DeleteReplicationInstanceMessage deleteReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteReplicationInstanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReplicationInstanceValidateBeforeCall(xAmzTarget, deleteReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteReplicationInstanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReplicationSubnetGroup
     * @param xAmzTarget  (required)
     * @param deleteReplicationSubnetGroupMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReplicationSubnetGroupCall(String xAmzTarget, DeleteReplicationSubnetGroupMessage deleteReplicationSubnetGroupMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteReplicationSubnetGroupMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DeleteReplicationSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReplicationSubnetGroupValidateBeforeCall(String xAmzTarget, DeleteReplicationSubnetGroupMessage deleteReplicationSubnetGroupMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteReplicationSubnetGroup(Async)");
        }

        // verify the required parameter 'deleteReplicationSubnetGroupMessage' is set
        if (deleteReplicationSubnetGroupMessage == null) {
            throw new ApiException("Missing the required parameter 'deleteReplicationSubnetGroupMessage' when calling deleteReplicationSubnetGroup(Async)");
        }

        return deleteReplicationSubnetGroupCall(xAmzTarget, deleteReplicationSubnetGroupMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a subnet group.
     * @param xAmzTarget  (required)
     * @param deleteReplicationSubnetGroupMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteReplicationSubnetGroup(String xAmzTarget, DeleteReplicationSubnetGroupMessage deleteReplicationSubnetGroupMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteReplicationSubnetGroupWithHttpInfo(xAmzTarget, deleteReplicationSubnetGroupMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a subnet group.
     * @param xAmzTarget  (required)
     * @param deleteReplicationSubnetGroupMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteReplicationSubnetGroupWithHttpInfo(String xAmzTarget, DeleteReplicationSubnetGroupMessage deleteReplicationSubnetGroupMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteReplicationSubnetGroupValidateBeforeCall(xAmzTarget, deleteReplicationSubnetGroupMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a subnet group.
     * @param xAmzTarget  (required)
     * @param deleteReplicationSubnetGroupMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReplicationSubnetGroupAsync(String xAmzTarget, DeleteReplicationSubnetGroupMessage deleteReplicationSubnetGroupMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReplicationSubnetGroupValidateBeforeCall(xAmzTarget, deleteReplicationSubnetGroupMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReplicationTask
     * @param xAmzTarget  (required)
     * @param deleteReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReplicationTaskCall(String xAmzTarget, DeleteReplicationTaskMessage deleteReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteReplicationTaskMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DeleteReplicationTask";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReplicationTaskValidateBeforeCall(String xAmzTarget, DeleteReplicationTaskMessage deleteReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteReplicationTask(Async)");
        }

        // verify the required parameter 'deleteReplicationTaskMessage' is set
        if (deleteReplicationTaskMessage == null) {
            throw new ApiException("Missing the required parameter 'deleteReplicationTaskMessage' when calling deleteReplicationTask(Async)");
        }

        return deleteReplicationTaskCall(xAmzTarget, deleteReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes the specified replication task.
     * @param xAmzTarget  (required)
     * @param deleteReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteReplicationTaskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteReplicationTaskResponse deleteReplicationTask(String xAmzTarget, DeleteReplicationTaskMessage deleteReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteReplicationTaskResponse> localVarResp = deleteReplicationTaskWithHttpInfo(xAmzTarget, deleteReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the specified replication task.
     * @param xAmzTarget  (required)
     * @param deleteReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteReplicationTaskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteReplicationTaskResponse> deleteReplicationTaskWithHttpInfo(String xAmzTarget, DeleteReplicationTaskMessage deleteReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteReplicationTaskValidateBeforeCall(xAmzTarget, deleteReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteReplicationTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the specified replication task.
     * @param xAmzTarget  (required)
     * @param deleteReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReplicationTaskAsync(String xAmzTarget, DeleteReplicationTaskMessage deleteReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteReplicationTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReplicationTaskValidateBeforeCall(xAmzTarget, deleteReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteReplicationTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReplicationTaskAssessmentRun
     * @param xAmzTarget  (required)
     * @param deleteReplicationTaskAssessmentRunMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReplicationTaskAssessmentRunCall(String xAmzTarget, DeleteReplicationTaskAssessmentRunMessage deleteReplicationTaskAssessmentRunMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteReplicationTaskAssessmentRunMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DeleteReplicationTaskAssessmentRun";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReplicationTaskAssessmentRunValidateBeforeCall(String xAmzTarget, DeleteReplicationTaskAssessmentRunMessage deleteReplicationTaskAssessmentRunMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteReplicationTaskAssessmentRun(Async)");
        }

        // verify the required parameter 'deleteReplicationTaskAssessmentRunMessage' is set
        if (deleteReplicationTaskAssessmentRunMessage == null) {
            throw new ApiException("Missing the required parameter 'deleteReplicationTaskAssessmentRunMessage' when calling deleteReplicationTaskAssessmentRun(Async)");
        }

        return deleteReplicationTaskAssessmentRunCall(xAmzTarget, deleteReplicationTaskAssessmentRunMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the record of a single premigration assessment run.&lt;/p&gt; &lt;p&gt;This operation removes all metadata that DMS maintains about this assessment run. However, the operation leaves untouched all information about this assessment run that is stored in your Amazon S3 bucket.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteReplicationTaskAssessmentRunMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteReplicationTaskAssessmentRunResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DeleteReplicationTaskAssessmentRunResponse deleteReplicationTaskAssessmentRun(String xAmzTarget, DeleteReplicationTaskAssessmentRunMessage deleteReplicationTaskAssessmentRunMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteReplicationTaskAssessmentRunResponse> localVarResp = deleteReplicationTaskAssessmentRunWithHttpInfo(xAmzTarget, deleteReplicationTaskAssessmentRunMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the record of a single premigration assessment run.&lt;/p&gt; &lt;p&gt;This operation removes all metadata that DMS maintains about this assessment run. However, the operation leaves untouched all information about this assessment run that is stored in your Amazon S3 bucket.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteReplicationTaskAssessmentRunMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteReplicationTaskAssessmentRunResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteReplicationTaskAssessmentRunResponse> deleteReplicationTaskAssessmentRunWithHttpInfo(String xAmzTarget, DeleteReplicationTaskAssessmentRunMessage deleteReplicationTaskAssessmentRunMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteReplicationTaskAssessmentRunValidateBeforeCall(xAmzTarget, deleteReplicationTaskAssessmentRunMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteReplicationTaskAssessmentRunResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the record of a single premigration assessment run.&lt;/p&gt; &lt;p&gt;This operation removes all metadata that DMS maintains about this assessment run. However, the operation leaves untouched all information about this assessment run that is stored in your Amazon S3 bucket.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteReplicationTaskAssessmentRunMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReplicationTaskAssessmentRunAsync(String xAmzTarget, DeleteReplicationTaskAssessmentRunMessage deleteReplicationTaskAssessmentRunMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteReplicationTaskAssessmentRunResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReplicationTaskAssessmentRunValidateBeforeCall(xAmzTarget, deleteReplicationTaskAssessmentRunMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteReplicationTaskAssessmentRunResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeAccountAttributes
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeAccountAttributesCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeAccountAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeAccountAttributesValidateBeforeCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeAccountAttributes(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling describeAccountAttributes(Async)");
        }

        return describeAccountAttributesCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all of the DMS attributes for a customer account. These attributes include DMS quotas for the account and a unique account identifier in a particular DMS region. DMS quotas include a list of resource quotas supported by the account, such as the number of replication instances allowed. The description for each resource quota, includes the quota name, current usage toward that quota, and the quota&#39;s maximum value. DMS uses the unique account identifier to name each artifact used by DMS in the given region.&lt;/p&gt; &lt;p&gt;This command does not take any parameters.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeAccountAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAccountAttributesResponse describeAccountAttributes(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeAccountAttributesResponse> localVarResp = describeAccountAttributesWithHttpInfo(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all of the DMS attributes for a customer account. These attributes include DMS quotas for the account and a unique account identifier in a particular DMS region. DMS quotas include a list of resource quotas supported by the account, such as the number of replication instances allowed. The description for each resource quota, includes the quota name, current usage toward that quota, and the quota&#39;s maximum value. DMS uses the unique account identifier to name each artifact used by DMS in the given region.&lt;/p&gt; &lt;p&gt;This command does not take any parameters.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeAccountAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAccountAttributesResponse> describeAccountAttributesWithHttpInfo(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeAccountAttributesValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeAccountAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all of the DMS attributes for a customer account. These attributes include DMS quotas for the account and a unique account identifier in a particular DMS region. DMS quotas include a list of resource quotas supported by the account, such as the number of replication instances allowed. The description for each resource quota, includes the quota name, current usage toward that quota, and the quota&#39;s maximum value. DMS uses the unique account identifier to name each artifact used by DMS in the given region.&lt;/p&gt; &lt;p&gt;This command does not take any parameters.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeAccountAttributesAsync(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeAccountAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeAccountAttributesValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeAccountAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeApplicableIndividualAssessments
     * @param xAmzTarget  (required)
     * @param describeApplicableIndividualAssessmentsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeApplicableIndividualAssessmentsCall(String xAmzTarget, DescribeApplicableIndividualAssessmentsMessage describeApplicableIndividualAssessmentsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeApplicableIndividualAssessmentsMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeApplicableIndividualAssessments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeApplicableIndividualAssessmentsValidateBeforeCall(String xAmzTarget, DescribeApplicableIndividualAssessmentsMessage describeApplicableIndividualAssessmentsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeApplicableIndividualAssessments(Async)");
        }

        // verify the required parameter 'describeApplicableIndividualAssessmentsMessage' is set
        if (describeApplicableIndividualAssessmentsMessage == null) {
            throw new ApiException("Missing the required parameter 'describeApplicableIndividualAssessmentsMessage' when calling describeApplicableIndividualAssessments(Async)");
        }

        return describeApplicableIndividualAssessmentsCall(xAmzTarget, describeApplicableIndividualAssessmentsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Provides a list of individual assessments that you can specify for a new premigration assessment run, given one or more parameters.&lt;/p&gt; &lt;p&gt;If you specify an existing migration task, this operation provides the default individual assessments you can specify for that task. Otherwise, the specified parameters model elements of a possible migration task on which to base a premigration assessment run.&lt;/p&gt; &lt;p&gt;To use these migration task modeling parameters, you must specify an existing replication instance, a source database engine, a target database engine, and a migration type. This combination of parameters potentially limits the default individual assessments available for an assessment run created for a corresponding migration task.&lt;/p&gt; &lt;p&gt;If you specify no parameters, this operation provides a list of all possible individual assessments that you can specify for an assessment run. If you specify any one of the task modeling parameters, you must specify all of them or the operation cannot provide a list of individual assessments. The only parameter that you can specify alone is for an existing migration task. The specified task definition then determines the default list of individual assessments that you can specify in an assessment run for the task.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeApplicableIndividualAssessmentsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribeApplicableIndividualAssessmentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeApplicableIndividualAssessmentsResponse describeApplicableIndividualAssessments(String xAmzTarget, DescribeApplicableIndividualAssessmentsMessage describeApplicableIndividualAssessmentsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeApplicableIndividualAssessmentsResponse> localVarResp = describeApplicableIndividualAssessmentsWithHttpInfo(xAmzTarget, describeApplicableIndividualAssessmentsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Provides a list of individual assessments that you can specify for a new premigration assessment run, given one or more parameters.&lt;/p&gt; &lt;p&gt;If you specify an existing migration task, this operation provides the default individual assessments you can specify for that task. Otherwise, the specified parameters model elements of a possible migration task on which to base a premigration assessment run.&lt;/p&gt; &lt;p&gt;To use these migration task modeling parameters, you must specify an existing replication instance, a source database engine, a target database engine, and a migration type. This combination of parameters potentially limits the default individual assessments available for an assessment run created for a corresponding migration task.&lt;/p&gt; &lt;p&gt;If you specify no parameters, this operation provides a list of all possible individual assessments that you can specify for an assessment run. If you specify any one of the task modeling parameters, you must specify all of them or the operation cannot provide a list of individual assessments. The only parameter that you can specify alone is for an existing migration task. The specified task definition then determines the default list of individual assessments that you can specify in an assessment run for the task.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeApplicableIndividualAssessmentsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribeApplicableIndividualAssessmentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeApplicableIndividualAssessmentsResponse> describeApplicableIndividualAssessmentsWithHttpInfo(String xAmzTarget, DescribeApplicableIndividualAssessmentsMessage describeApplicableIndividualAssessmentsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describeApplicableIndividualAssessmentsValidateBeforeCall(xAmzTarget, describeApplicableIndividualAssessmentsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeApplicableIndividualAssessmentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Provides a list of individual assessments that you can specify for a new premigration assessment run, given one or more parameters.&lt;/p&gt; &lt;p&gt;If you specify an existing migration task, this operation provides the default individual assessments you can specify for that task. Otherwise, the specified parameters model elements of a possible migration task on which to base a premigration assessment run.&lt;/p&gt; &lt;p&gt;To use these migration task modeling parameters, you must specify an existing replication instance, a source database engine, a target database engine, and a migration type. This combination of parameters potentially limits the default individual assessments available for an assessment run created for a corresponding migration task.&lt;/p&gt; &lt;p&gt;If you specify no parameters, this operation provides a list of all possible individual assessments that you can specify for an assessment run. If you specify any one of the task modeling parameters, you must specify all of them or the operation cannot provide a list of individual assessments. The only parameter that you can specify alone is for an existing migration task. The specified task definition then determines the default list of individual assessments that you can specify in an assessment run for the task.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeApplicableIndividualAssessmentsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeApplicableIndividualAssessmentsAsync(String xAmzTarget, DescribeApplicableIndividualAssessmentsMessage describeApplicableIndividualAssessmentsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribeApplicableIndividualAssessmentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeApplicableIndividualAssessmentsValidateBeforeCall(xAmzTarget, describeApplicableIndividualAssessmentsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeApplicableIndividualAssessmentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeCertificates
     * @param xAmzTarget  (required)
     * @param describeCertificatesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeCertificatesCall(String xAmzTarget, DescribeCertificatesMessage describeCertificatesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeCertificatesMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeCertificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeCertificatesValidateBeforeCall(String xAmzTarget, DescribeCertificatesMessage describeCertificatesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeCertificates(Async)");
        }

        // verify the required parameter 'describeCertificatesMessage' is set
        if (describeCertificatesMessage == null) {
            throw new ApiException("Missing the required parameter 'describeCertificatesMessage' when calling describeCertificates(Async)");
        }

        return describeCertificatesCall(xAmzTarget, describeCertificatesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * Provides a description of the certificate.
     * @param xAmzTarget  (required)
     * @param describeCertificatesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribeCertificatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeCertificatesResponse describeCertificates(String xAmzTarget, DescribeCertificatesMessage describeCertificatesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeCertificatesResponse> localVarResp = describeCertificatesWithHttpInfo(xAmzTarget, describeCertificatesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Provides a description of the certificate.
     * @param xAmzTarget  (required)
     * @param describeCertificatesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribeCertificatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeCertificatesResponse> describeCertificatesWithHttpInfo(String xAmzTarget, DescribeCertificatesMessage describeCertificatesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describeCertificatesValidateBeforeCall(xAmzTarget, describeCertificatesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeCertificatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provides a description of the certificate.
     * @param xAmzTarget  (required)
     * @param describeCertificatesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeCertificatesAsync(String xAmzTarget, DescribeCertificatesMessage describeCertificatesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribeCertificatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeCertificatesValidateBeforeCall(xAmzTarget, describeCertificatesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeCertificatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeConnections
     * @param xAmzTarget  (required)
     * @param describeConnectionsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeConnectionsCall(String xAmzTarget, DescribeConnectionsMessage describeConnectionsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeConnectionsMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeConnections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeConnectionsValidateBeforeCall(String xAmzTarget, DescribeConnectionsMessage describeConnectionsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeConnections(Async)");
        }

        // verify the required parameter 'describeConnectionsMessage' is set
        if (describeConnectionsMessage == null) {
            throw new ApiException("Missing the required parameter 'describeConnectionsMessage' when calling describeConnections(Async)");
        }

        return describeConnectionsCall(xAmzTarget, describeConnectionsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * Describes the status of the connections that have been made between the replication instance and an endpoint. Connections are created when you test an endpoint.
     * @param xAmzTarget  (required)
     * @param describeConnectionsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribeConnectionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeConnectionsResponse describeConnections(String xAmzTarget, DescribeConnectionsMessage describeConnectionsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeConnectionsResponse> localVarResp = describeConnectionsWithHttpInfo(xAmzTarget, describeConnectionsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the status of the connections that have been made between the replication instance and an endpoint. Connections are created when you test an endpoint.
     * @param xAmzTarget  (required)
     * @param describeConnectionsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribeConnectionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeConnectionsResponse> describeConnectionsWithHttpInfo(String xAmzTarget, DescribeConnectionsMessage describeConnectionsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describeConnectionsValidateBeforeCall(xAmzTarget, describeConnectionsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeConnectionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the status of the connections that have been made between the replication instance and an endpoint. Connections are created when you test an endpoint.
     * @param xAmzTarget  (required)
     * @param describeConnectionsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeConnectionsAsync(String xAmzTarget, DescribeConnectionsMessage describeConnectionsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribeConnectionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeConnectionsValidateBeforeCall(xAmzTarget, describeConnectionsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeConnectionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeEndpointSettings
     * @param xAmzTarget  (required)
     * @param describeEndpointSettingsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEndpointSettingsCall(String xAmzTarget, DescribeEndpointSettingsMessage describeEndpointSettingsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEndpointSettingsMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeEndpointSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeEndpointSettingsValidateBeforeCall(String xAmzTarget, DescribeEndpointSettingsMessage describeEndpointSettingsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeEndpointSettings(Async)");
        }

        // verify the required parameter 'describeEndpointSettingsMessage' is set
        if (describeEndpointSettingsMessage == null) {
            throw new ApiException("Missing the required parameter 'describeEndpointSettingsMessage' when calling describeEndpointSettings(Async)");
        }

        return describeEndpointSettingsCall(xAmzTarget, describeEndpointSettingsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns information about the possible endpoint settings available when you create an endpoint for a specific database engine.
     * @param xAmzTarget  (required)
     * @param describeEndpointSettingsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribeEndpointSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEndpointSettingsResponse describeEndpointSettings(String xAmzTarget, DescribeEndpointSettingsMessage describeEndpointSettingsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeEndpointSettingsResponse> localVarResp = describeEndpointSettingsWithHttpInfo(xAmzTarget, describeEndpointSettingsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about the possible endpoint settings available when you create an endpoint for a specific database engine.
     * @param xAmzTarget  (required)
     * @param describeEndpointSettingsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribeEndpointSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEndpointSettingsResponse> describeEndpointSettingsWithHttpInfo(String xAmzTarget, DescribeEndpointSettingsMessage describeEndpointSettingsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describeEndpointSettingsValidateBeforeCall(xAmzTarget, describeEndpointSettingsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeEndpointSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about the possible endpoint settings available when you create an endpoint for a specific database engine.
     * @param xAmzTarget  (required)
     * @param describeEndpointSettingsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEndpointSettingsAsync(String xAmzTarget, DescribeEndpointSettingsMessage describeEndpointSettingsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribeEndpointSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeEndpointSettingsValidateBeforeCall(xAmzTarget, describeEndpointSettingsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeEndpointSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeEndpointTypes
     * @param xAmzTarget  (required)
     * @param describeEndpointTypesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEndpointTypesCall(String xAmzTarget, DescribeEndpointTypesMessage describeEndpointTypesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEndpointTypesMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeEndpointTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeEndpointTypesValidateBeforeCall(String xAmzTarget, DescribeEndpointTypesMessage describeEndpointTypesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeEndpointTypes(Async)");
        }

        // verify the required parameter 'describeEndpointTypesMessage' is set
        if (describeEndpointTypesMessage == null) {
            throw new ApiException("Missing the required parameter 'describeEndpointTypesMessage' when calling describeEndpointTypes(Async)");
        }

        return describeEndpointTypesCall(xAmzTarget, describeEndpointTypesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns information about the type of endpoints available.
     * @param xAmzTarget  (required)
     * @param describeEndpointTypesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribeEndpointTypesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEndpointTypesResponse describeEndpointTypes(String xAmzTarget, DescribeEndpointTypesMessage describeEndpointTypesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeEndpointTypesResponse> localVarResp = describeEndpointTypesWithHttpInfo(xAmzTarget, describeEndpointTypesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about the type of endpoints available.
     * @param xAmzTarget  (required)
     * @param describeEndpointTypesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribeEndpointTypesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEndpointTypesResponse> describeEndpointTypesWithHttpInfo(String xAmzTarget, DescribeEndpointTypesMessage describeEndpointTypesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describeEndpointTypesValidateBeforeCall(xAmzTarget, describeEndpointTypesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeEndpointTypesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about the type of endpoints available.
     * @param xAmzTarget  (required)
     * @param describeEndpointTypesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEndpointTypesAsync(String xAmzTarget, DescribeEndpointTypesMessage describeEndpointTypesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribeEndpointTypesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeEndpointTypesValidateBeforeCall(xAmzTarget, describeEndpointTypesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeEndpointTypesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeEndpoints
     * @param xAmzTarget  (required)
     * @param describeEndpointsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEndpointsCall(String xAmzTarget, DescribeEndpointsMessage describeEndpointsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEndpointsMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeEndpoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeEndpointsValidateBeforeCall(String xAmzTarget, DescribeEndpointsMessage describeEndpointsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeEndpoints(Async)");
        }

        // verify the required parameter 'describeEndpointsMessage' is set
        if (describeEndpointsMessage == null) {
            throw new ApiException("Missing the required parameter 'describeEndpointsMessage' when calling describeEndpoints(Async)");
        }

        return describeEndpointsCall(xAmzTarget, describeEndpointsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns information about the endpoints for your account in the current region.
     * @param xAmzTarget  (required)
     * @param describeEndpointsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribeEndpointsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEndpointsResponse describeEndpoints(String xAmzTarget, DescribeEndpointsMessage describeEndpointsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeEndpointsResponse> localVarResp = describeEndpointsWithHttpInfo(xAmzTarget, describeEndpointsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about the endpoints for your account in the current region.
     * @param xAmzTarget  (required)
     * @param describeEndpointsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribeEndpointsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEndpointsResponse> describeEndpointsWithHttpInfo(String xAmzTarget, DescribeEndpointsMessage describeEndpointsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describeEndpointsValidateBeforeCall(xAmzTarget, describeEndpointsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeEndpointsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about the endpoints for your account in the current region.
     * @param xAmzTarget  (required)
     * @param describeEndpointsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEndpointsAsync(String xAmzTarget, DescribeEndpointsMessage describeEndpointsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribeEndpointsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeEndpointsValidateBeforeCall(xAmzTarget, describeEndpointsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeEndpointsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeEventCategories
     * @param xAmzTarget  (required)
     * @param describeEventCategoriesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEventCategoriesCall(String xAmzTarget, DescribeEventCategoriesMessage describeEventCategoriesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEventCategoriesMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeEventCategories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeEventCategoriesValidateBeforeCall(String xAmzTarget, DescribeEventCategoriesMessage describeEventCategoriesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeEventCategories(Async)");
        }

        // verify the required parameter 'describeEventCategoriesMessage' is set
        if (describeEventCategoriesMessage == null) {
            throw new ApiException("Missing the required parameter 'describeEventCategoriesMessage' when calling describeEventCategories(Async)");
        }

        return describeEventCategoriesCall(xAmzTarget, describeEventCategoriesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Lists categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html\&quot;&gt;Working with Events and Notifications&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide.&lt;/i&gt; 
     * @param xAmzTarget  (required)
     * @param describeEventCategoriesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeEventCategoriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEventCategoriesResponse describeEventCategories(String xAmzTarget, DescribeEventCategoriesMessage describeEventCategoriesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeEventCategoriesResponse> localVarResp = describeEventCategoriesWithHttpInfo(xAmzTarget, describeEventCategoriesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html\&quot;&gt;Working with Events and Notifications&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide.&lt;/i&gt; 
     * @param xAmzTarget  (required)
     * @param describeEventCategoriesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeEventCategoriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEventCategoriesResponse> describeEventCategoriesWithHttpInfo(String xAmzTarget, DescribeEventCategoriesMessage describeEventCategoriesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeEventCategoriesValidateBeforeCall(xAmzTarget, describeEventCategoriesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeEventCategoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html\&quot;&gt;Working with Events and Notifications&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide.&lt;/i&gt; 
     * @param xAmzTarget  (required)
     * @param describeEventCategoriesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEventCategoriesAsync(String xAmzTarget, DescribeEventCategoriesMessage describeEventCategoriesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeEventCategoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeEventCategoriesValidateBeforeCall(xAmzTarget, describeEventCategoriesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeEventCategoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeEventSubscriptions
     * @param xAmzTarget  (required)
     * @param describeEventSubscriptionsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEventSubscriptionsCall(String xAmzTarget, DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEventSubscriptionsMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeEventSubscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeEventSubscriptionsValidateBeforeCall(String xAmzTarget, DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeEventSubscriptions(Async)");
        }

        // verify the required parameter 'describeEventSubscriptionsMessage' is set
        if (describeEventSubscriptionsMessage == null) {
            throw new ApiException("Missing the required parameter 'describeEventSubscriptionsMessage' when calling describeEventSubscriptions(Async)");
        }

        return describeEventSubscriptionsCall(xAmzTarget, describeEventSubscriptionsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all the event subscriptions for a customer account. The description of a subscription includes &lt;code&gt;SubscriptionName&lt;/code&gt;, &lt;code&gt;SNSTopicARN&lt;/code&gt;, &lt;code&gt;CustomerID&lt;/code&gt;, &lt;code&gt;SourceType&lt;/code&gt;, &lt;code&gt;SourceID&lt;/code&gt;, &lt;code&gt;CreationTime&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;SubscriptionName&lt;/code&gt;, this action lists the description for that subscription.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeEventSubscriptionsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribeEventSubscriptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEventSubscriptionsResponse describeEventSubscriptions(String xAmzTarget, DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeEventSubscriptionsResponse> localVarResp = describeEventSubscriptionsWithHttpInfo(xAmzTarget, describeEventSubscriptionsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all the event subscriptions for a customer account. The description of a subscription includes &lt;code&gt;SubscriptionName&lt;/code&gt;, &lt;code&gt;SNSTopicARN&lt;/code&gt;, &lt;code&gt;CustomerID&lt;/code&gt;, &lt;code&gt;SourceType&lt;/code&gt;, &lt;code&gt;SourceID&lt;/code&gt;, &lt;code&gt;CreationTime&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;SubscriptionName&lt;/code&gt;, this action lists the description for that subscription.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeEventSubscriptionsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribeEventSubscriptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEventSubscriptionsResponse> describeEventSubscriptionsWithHttpInfo(String xAmzTarget, DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describeEventSubscriptionsValidateBeforeCall(xAmzTarget, describeEventSubscriptionsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeEventSubscriptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all the event subscriptions for a customer account. The description of a subscription includes &lt;code&gt;SubscriptionName&lt;/code&gt;, &lt;code&gt;SNSTopicARN&lt;/code&gt;, &lt;code&gt;CustomerID&lt;/code&gt;, &lt;code&gt;SourceType&lt;/code&gt;, &lt;code&gt;SourceID&lt;/code&gt;, &lt;code&gt;CreationTime&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;SubscriptionName&lt;/code&gt;, this action lists the description for that subscription.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeEventSubscriptionsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEventSubscriptionsAsync(String xAmzTarget, DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribeEventSubscriptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeEventSubscriptionsValidateBeforeCall(xAmzTarget, describeEventSubscriptionsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeEventSubscriptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeEvents
     * @param xAmzTarget  (required)
     * @param describeEventsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEventsCall(String xAmzTarget, DescribeEventsMessage describeEventsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEventsMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeEventsValidateBeforeCall(String xAmzTarget, DescribeEventsMessage describeEventsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeEvents(Async)");
        }

        // verify the required parameter 'describeEventsMessage' is set
        if (describeEventsMessage == null) {
            throw new ApiException("Missing the required parameter 'describeEventsMessage' when calling describeEvents(Async)");
        }

        return describeEventsCall(xAmzTarget, describeEventsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     *  Lists events for a given source identifier and source type. You can also specify a start and end time. For more information on DMS events, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html\&quot;&gt;Working with Events and Notifications&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide.&lt;/i&gt; 
     * @param xAmzTarget  (required)
     * @param describeEventsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribeEventsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEventsResponse describeEvents(String xAmzTarget, DescribeEventsMessage describeEventsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeEventsResponse> localVarResp = describeEventsWithHttpInfo(xAmzTarget, describeEventsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     *  Lists events for a given source identifier and source type. You can also specify a start and end time. For more information on DMS events, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html\&quot;&gt;Working with Events and Notifications&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide.&lt;/i&gt; 
     * @param xAmzTarget  (required)
     * @param describeEventsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribeEventsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEventsResponse> describeEventsWithHttpInfo(String xAmzTarget, DescribeEventsMessage describeEventsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describeEventsValidateBeforeCall(xAmzTarget, describeEventsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Lists events for a given source identifier and source type. You can also specify a start and end time. For more information on DMS events, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html\&quot;&gt;Working with Events and Notifications&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide.&lt;/i&gt; 
     * @param xAmzTarget  (required)
     * @param describeEventsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeEventsAsync(String xAmzTarget, DescribeEventsMessage describeEventsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribeEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeEventsValidateBeforeCall(xAmzTarget, describeEventsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeFleetAdvisorCollectors
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorCollectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeFleetAdvisorCollectorsCall(String xAmzTarget, DescribeFleetAdvisorCollectorsRequest describeFleetAdvisorCollectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeFleetAdvisorCollectorsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeFleetAdvisorCollectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeFleetAdvisorCollectorsValidateBeforeCall(String xAmzTarget, DescribeFleetAdvisorCollectorsRequest describeFleetAdvisorCollectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeFleetAdvisorCollectors(Async)");
        }

        // verify the required parameter 'describeFleetAdvisorCollectorsRequest' is set
        if (describeFleetAdvisorCollectorsRequest == null) {
            throw new ApiException("Missing the required parameter 'describeFleetAdvisorCollectorsRequest' when calling describeFleetAdvisorCollectors(Async)");
        }

        return describeFleetAdvisorCollectorsCall(xAmzTarget, describeFleetAdvisorCollectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of the Fleet Advisor collectors in your account.
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorCollectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeFleetAdvisorCollectorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeFleetAdvisorCollectorsResponse describeFleetAdvisorCollectors(String xAmzTarget, DescribeFleetAdvisorCollectorsRequest describeFleetAdvisorCollectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken) throws ApiException {
        ApiResponse<DescribeFleetAdvisorCollectorsResponse> localVarResp = describeFleetAdvisorCollectorsWithHttpInfo(xAmzTarget, describeFleetAdvisorCollectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of the Fleet Advisor collectors in your account.
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorCollectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeFleetAdvisorCollectorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeFleetAdvisorCollectorsResponse> describeFleetAdvisorCollectorsWithHttpInfo(String xAmzTarget, DescribeFleetAdvisorCollectorsRequest describeFleetAdvisorCollectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeFleetAdvisorCollectorsValidateBeforeCall(xAmzTarget, describeFleetAdvisorCollectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeFleetAdvisorCollectorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of the Fleet Advisor collectors in your account.
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorCollectorsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeFleetAdvisorCollectorsAsync(String xAmzTarget, DescribeFleetAdvisorCollectorsRequest describeFleetAdvisorCollectorsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback<DescribeFleetAdvisorCollectorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeFleetAdvisorCollectorsValidateBeforeCall(xAmzTarget, describeFleetAdvisorCollectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeFleetAdvisorCollectorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeFleetAdvisorDatabases
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorDatabasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeFleetAdvisorDatabasesCall(String xAmzTarget, DescribeFleetAdvisorDatabasesRequest describeFleetAdvisorDatabasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeFleetAdvisorDatabasesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeFleetAdvisorDatabases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeFleetAdvisorDatabasesValidateBeforeCall(String xAmzTarget, DescribeFleetAdvisorDatabasesRequest describeFleetAdvisorDatabasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeFleetAdvisorDatabases(Async)");
        }

        // verify the required parameter 'describeFleetAdvisorDatabasesRequest' is set
        if (describeFleetAdvisorDatabasesRequest == null) {
            throw new ApiException("Missing the required parameter 'describeFleetAdvisorDatabasesRequest' when calling describeFleetAdvisorDatabases(Async)");
        }

        return describeFleetAdvisorDatabasesCall(xAmzTarget, describeFleetAdvisorDatabasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of Fleet Advisor databases in your account.
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorDatabasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeFleetAdvisorDatabasesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeFleetAdvisorDatabasesResponse describeFleetAdvisorDatabases(String xAmzTarget, DescribeFleetAdvisorDatabasesRequest describeFleetAdvisorDatabasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken) throws ApiException {
        ApiResponse<DescribeFleetAdvisorDatabasesResponse> localVarResp = describeFleetAdvisorDatabasesWithHttpInfo(xAmzTarget, describeFleetAdvisorDatabasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of Fleet Advisor databases in your account.
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorDatabasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeFleetAdvisorDatabasesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeFleetAdvisorDatabasesResponse> describeFleetAdvisorDatabasesWithHttpInfo(String xAmzTarget, DescribeFleetAdvisorDatabasesRequest describeFleetAdvisorDatabasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeFleetAdvisorDatabasesValidateBeforeCall(xAmzTarget, describeFleetAdvisorDatabasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeFleetAdvisorDatabasesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of Fleet Advisor databases in your account.
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorDatabasesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeFleetAdvisorDatabasesAsync(String xAmzTarget, DescribeFleetAdvisorDatabasesRequest describeFleetAdvisorDatabasesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback<DescribeFleetAdvisorDatabasesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeFleetAdvisorDatabasesValidateBeforeCall(xAmzTarget, describeFleetAdvisorDatabasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeFleetAdvisorDatabasesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeFleetAdvisorLsaAnalysis
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorLsaAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeFleetAdvisorLsaAnalysisCall(String xAmzTarget, DescribeFleetAdvisorLsaAnalysisRequest describeFleetAdvisorLsaAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeFleetAdvisorLsaAnalysisRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeFleetAdvisorLsaAnalysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeFleetAdvisorLsaAnalysisValidateBeforeCall(String xAmzTarget, DescribeFleetAdvisorLsaAnalysisRequest describeFleetAdvisorLsaAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeFleetAdvisorLsaAnalysis(Async)");
        }

        // verify the required parameter 'describeFleetAdvisorLsaAnalysisRequest' is set
        if (describeFleetAdvisorLsaAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'describeFleetAdvisorLsaAnalysisRequest' when calling describeFleetAdvisorLsaAnalysis(Async)");
        }

        return describeFleetAdvisorLsaAnalysisCall(xAmzTarget, describeFleetAdvisorLsaAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, _callback);

    }

    /**
     * 
     * Provides descriptions of large-scale assessment (LSA) analyses produced by your Fleet Advisor collectors. 
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorLsaAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeFleetAdvisorLsaAnalysisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeFleetAdvisorLsaAnalysisResponse describeFleetAdvisorLsaAnalysis(String xAmzTarget, DescribeFleetAdvisorLsaAnalysisRequest describeFleetAdvisorLsaAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken) throws ApiException {
        ApiResponse<DescribeFleetAdvisorLsaAnalysisResponse> localVarResp = describeFleetAdvisorLsaAnalysisWithHttpInfo(xAmzTarget, describeFleetAdvisorLsaAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Provides descriptions of large-scale assessment (LSA) analyses produced by your Fleet Advisor collectors. 
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorLsaAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeFleetAdvisorLsaAnalysisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeFleetAdvisorLsaAnalysisResponse> describeFleetAdvisorLsaAnalysisWithHttpInfo(String xAmzTarget, DescribeFleetAdvisorLsaAnalysisRequest describeFleetAdvisorLsaAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeFleetAdvisorLsaAnalysisValidateBeforeCall(xAmzTarget, describeFleetAdvisorLsaAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeFleetAdvisorLsaAnalysisResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provides descriptions of large-scale assessment (LSA) analyses produced by your Fleet Advisor collectors. 
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorLsaAnalysisRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeFleetAdvisorLsaAnalysisAsync(String xAmzTarget, DescribeFleetAdvisorLsaAnalysisRequest describeFleetAdvisorLsaAnalysisRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback<DescribeFleetAdvisorLsaAnalysisResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeFleetAdvisorLsaAnalysisValidateBeforeCall(xAmzTarget, describeFleetAdvisorLsaAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeFleetAdvisorLsaAnalysisResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeFleetAdvisorSchemaObjectSummary
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorSchemaObjectSummaryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeFleetAdvisorSchemaObjectSummaryCall(String xAmzTarget, DescribeFleetAdvisorSchemaObjectSummaryRequest describeFleetAdvisorSchemaObjectSummaryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeFleetAdvisorSchemaObjectSummaryRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeFleetAdvisorSchemaObjectSummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeFleetAdvisorSchemaObjectSummaryValidateBeforeCall(String xAmzTarget, DescribeFleetAdvisorSchemaObjectSummaryRequest describeFleetAdvisorSchemaObjectSummaryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeFleetAdvisorSchemaObjectSummary(Async)");
        }

        // verify the required parameter 'describeFleetAdvisorSchemaObjectSummaryRequest' is set
        if (describeFleetAdvisorSchemaObjectSummaryRequest == null) {
            throw new ApiException("Missing the required parameter 'describeFleetAdvisorSchemaObjectSummaryRequest' when calling describeFleetAdvisorSchemaObjectSummary(Async)");
        }

        return describeFleetAdvisorSchemaObjectSummaryCall(xAmzTarget, describeFleetAdvisorSchemaObjectSummaryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, _callback);

    }

    /**
     * 
     * Provides descriptions of the schemas discovered by your Fleet Advisor collectors.
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorSchemaObjectSummaryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeFleetAdvisorSchemaObjectSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeFleetAdvisorSchemaObjectSummaryResponse describeFleetAdvisorSchemaObjectSummary(String xAmzTarget, DescribeFleetAdvisorSchemaObjectSummaryRequest describeFleetAdvisorSchemaObjectSummaryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken) throws ApiException {
        ApiResponse<DescribeFleetAdvisorSchemaObjectSummaryResponse> localVarResp = describeFleetAdvisorSchemaObjectSummaryWithHttpInfo(xAmzTarget, describeFleetAdvisorSchemaObjectSummaryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Provides descriptions of the schemas discovered by your Fleet Advisor collectors.
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorSchemaObjectSummaryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeFleetAdvisorSchemaObjectSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeFleetAdvisorSchemaObjectSummaryResponse> describeFleetAdvisorSchemaObjectSummaryWithHttpInfo(String xAmzTarget, DescribeFleetAdvisorSchemaObjectSummaryRequest describeFleetAdvisorSchemaObjectSummaryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeFleetAdvisorSchemaObjectSummaryValidateBeforeCall(xAmzTarget, describeFleetAdvisorSchemaObjectSummaryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeFleetAdvisorSchemaObjectSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provides descriptions of the schemas discovered by your Fleet Advisor collectors.
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorSchemaObjectSummaryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeFleetAdvisorSchemaObjectSummaryAsync(String xAmzTarget, DescribeFleetAdvisorSchemaObjectSummaryRequest describeFleetAdvisorSchemaObjectSummaryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback<DescribeFleetAdvisorSchemaObjectSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeFleetAdvisorSchemaObjectSummaryValidateBeforeCall(xAmzTarget, describeFleetAdvisorSchemaObjectSummaryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeFleetAdvisorSchemaObjectSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeFleetAdvisorSchemas
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorSchemasRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeFleetAdvisorSchemasCall(String xAmzTarget, DescribeFleetAdvisorSchemasRequest describeFleetAdvisorSchemasRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeFleetAdvisorSchemasRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeFleetAdvisorSchemas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeFleetAdvisorSchemasValidateBeforeCall(String xAmzTarget, DescribeFleetAdvisorSchemasRequest describeFleetAdvisorSchemasRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeFleetAdvisorSchemas(Async)");
        }

        // verify the required parameter 'describeFleetAdvisorSchemasRequest' is set
        if (describeFleetAdvisorSchemasRequest == null) {
            throw new ApiException("Missing the required parameter 'describeFleetAdvisorSchemasRequest' when calling describeFleetAdvisorSchemas(Async)");
        }

        return describeFleetAdvisorSchemasCall(xAmzTarget, describeFleetAdvisorSchemasRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of schemas detected by Fleet Advisor Collectors in your account.
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorSchemasRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeFleetAdvisorSchemasResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeFleetAdvisorSchemasResponse describeFleetAdvisorSchemas(String xAmzTarget, DescribeFleetAdvisorSchemasRequest describeFleetAdvisorSchemasRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken) throws ApiException {
        ApiResponse<DescribeFleetAdvisorSchemasResponse> localVarResp = describeFleetAdvisorSchemasWithHttpInfo(xAmzTarget, describeFleetAdvisorSchemasRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of schemas detected by Fleet Advisor Collectors in your account.
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorSchemasRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeFleetAdvisorSchemasResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeFleetAdvisorSchemasResponse> describeFleetAdvisorSchemasWithHttpInfo(String xAmzTarget, DescribeFleetAdvisorSchemasRequest describeFleetAdvisorSchemasRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeFleetAdvisorSchemasValidateBeforeCall(xAmzTarget, describeFleetAdvisorSchemasRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeFleetAdvisorSchemasResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of schemas detected by Fleet Advisor Collectors in your account.
     * @param xAmzTarget  (required)
     * @param describeFleetAdvisorSchemasRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeFleetAdvisorSchemasAsync(String xAmzTarget, DescribeFleetAdvisorSchemasRequest describeFleetAdvisorSchemasRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback<DescribeFleetAdvisorSchemasResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeFleetAdvisorSchemasValidateBeforeCall(xAmzTarget, describeFleetAdvisorSchemasRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeFleetAdvisorSchemasResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeOrderableReplicationInstances
     * @param xAmzTarget  (required)
     * @param describeOrderableReplicationInstancesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeOrderableReplicationInstancesCall(String xAmzTarget, DescribeOrderableReplicationInstancesMessage describeOrderableReplicationInstancesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeOrderableReplicationInstancesMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeOrderableReplicationInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeOrderableReplicationInstancesValidateBeforeCall(String xAmzTarget, DescribeOrderableReplicationInstancesMessage describeOrderableReplicationInstancesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeOrderableReplicationInstances(Async)");
        }

        // verify the required parameter 'describeOrderableReplicationInstancesMessage' is set
        if (describeOrderableReplicationInstancesMessage == null) {
            throw new ApiException("Missing the required parameter 'describeOrderableReplicationInstancesMessage' when calling describeOrderableReplicationInstances(Async)");
        }

        return describeOrderableReplicationInstancesCall(xAmzTarget, describeOrderableReplicationInstancesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns information about the replication instance types that can be created in the specified region.
     * @param xAmzTarget  (required)
     * @param describeOrderableReplicationInstancesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribeOrderableReplicationInstancesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeOrderableReplicationInstancesResponse describeOrderableReplicationInstances(String xAmzTarget, DescribeOrderableReplicationInstancesMessage describeOrderableReplicationInstancesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeOrderableReplicationInstancesResponse> localVarResp = describeOrderableReplicationInstancesWithHttpInfo(xAmzTarget, describeOrderableReplicationInstancesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about the replication instance types that can be created in the specified region.
     * @param xAmzTarget  (required)
     * @param describeOrderableReplicationInstancesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribeOrderableReplicationInstancesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeOrderableReplicationInstancesResponse> describeOrderableReplicationInstancesWithHttpInfo(String xAmzTarget, DescribeOrderableReplicationInstancesMessage describeOrderableReplicationInstancesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describeOrderableReplicationInstancesValidateBeforeCall(xAmzTarget, describeOrderableReplicationInstancesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeOrderableReplicationInstancesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about the replication instance types that can be created in the specified region.
     * @param xAmzTarget  (required)
     * @param describeOrderableReplicationInstancesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeOrderableReplicationInstancesAsync(String xAmzTarget, DescribeOrderableReplicationInstancesMessage describeOrderableReplicationInstancesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribeOrderableReplicationInstancesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeOrderableReplicationInstancesValidateBeforeCall(xAmzTarget, describeOrderableReplicationInstancesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeOrderableReplicationInstancesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describePendingMaintenanceActions
     * @param xAmzTarget  (required)
     * @param describePendingMaintenanceActionsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describePendingMaintenanceActionsCall(String xAmzTarget, DescribePendingMaintenanceActionsMessage describePendingMaintenanceActionsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describePendingMaintenanceActionsMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribePendingMaintenanceActions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describePendingMaintenanceActionsValidateBeforeCall(String xAmzTarget, DescribePendingMaintenanceActionsMessage describePendingMaintenanceActionsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describePendingMaintenanceActions(Async)");
        }

        // verify the required parameter 'describePendingMaintenanceActionsMessage' is set
        if (describePendingMaintenanceActionsMessage == null) {
            throw new ApiException("Missing the required parameter 'describePendingMaintenanceActionsMessage' when calling describePendingMaintenanceActions(Async)");
        }

        return describePendingMaintenanceActionsCall(xAmzTarget, describePendingMaintenanceActionsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * For internal use only
     * @param xAmzTarget  (required)
     * @param describePendingMaintenanceActionsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribePendingMaintenanceActionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribePendingMaintenanceActionsResponse describePendingMaintenanceActions(String xAmzTarget, DescribePendingMaintenanceActionsMessage describePendingMaintenanceActionsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribePendingMaintenanceActionsResponse> localVarResp = describePendingMaintenanceActionsWithHttpInfo(xAmzTarget, describePendingMaintenanceActionsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * For internal use only
     * @param xAmzTarget  (required)
     * @param describePendingMaintenanceActionsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribePendingMaintenanceActionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribePendingMaintenanceActionsResponse> describePendingMaintenanceActionsWithHttpInfo(String xAmzTarget, DescribePendingMaintenanceActionsMessage describePendingMaintenanceActionsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describePendingMaintenanceActionsValidateBeforeCall(xAmzTarget, describePendingMaintenanceActionsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribePendingMaintenanceActionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * For internal use only
     * @param xAmzTarget  (required)
     * @param describePendingMaintenanceActionsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describePendingMaintenanceActionsAsync(String xAmzTarget, DescribePendingMaintenanceActionsMessage describePendingMaintenanceActionsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribePendingMaintenanceActionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describePendingMaintenanceActionsValidateBeforeCall(xAmzTarget, describePendingMaintenanceActionsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribePendingMaintenanceActionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeRecommendationLimitations
     * @param xAmzTarget  (required)
     * @param describeRecommendationLimitationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeRecommendationLimitationsCall(String xAmzTarget, DescribeRecommendationLimitationsRequest describeRecommendationLimitationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeRecommendationLimitationsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeRecommendationLimitations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeRecommendationLimitationsValidateBeforeCall(String xAmzTarget, DescribeRecommendationLimitationsRequest describeRecommendationLimitationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeRecommendationLimitations(Async)");
        }

        // verify the required parameter 'describeRecommendationLimitationsRequest' is set
        if (describeRecommendationLimitationsRequest == null) {
            throw new ApiException("Missing the required parameter 'describeRecommendationLimitationsRequest' when calling describeRecommendationLimitations(Async)");
        }

        return describeRecommendationLimitationsCall(xAmzTarget, describeRecommendationLimitationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, _callback);

    }

    /**
     * 
     * Returns a paginated list of limitations for recommendations of target Amazon Web Services engines.
     * @param xAmzTarget  (required)
     * @param describeRecommendationLimitationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeRecommendationLimitationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeRecommendationLimitationsResponse describeRecommendationLimitations(String xAmzTarget, DescribeRecommendationLimitationsRequest describeRecommendationLimitationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken) throws ApiException {
        ApiResponse<DescribeRecommendationLimitationsResponse> localVarResp = describeRecommendationLimitationsWithHttpInfo(xAmzTarget, describeRecommendationLimitationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a paginated list of limitations for recommendations of target Amazon Web Services engines.
     * @param xAmzTarget  (required)
     * @param describeRecommendationLimitationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeRecommendationLimitationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeRecommendationLimitationsResponse> describeRecommendationLimitationsWithHttpInfo(String xAmzTarget, DescribeRecommendationLimitationsRequest describeRecommendationLimitationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeRecommendationLimitationsValidateBeforeCall(xAmzTarget, describeRecommendationLimitationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeRecommendationLimitationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a paginated list of limitations for recommendations of target Amazon Web Services engines.
     * @param xAmzTarget  (required)
     * @param describeRecommendationLimitationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeRecommendationLimitationsAsync(String xAmzTarget, DescribeRecommendationLimitationsRequest describeRecommendationLimitationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback<DescribeRecommendationLimitationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeRecommendationLimitationsValidateBeforeCall(xAmzTarget, describeRecommendationLimitationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeRecommendationLimitationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeRecommendations
     * @param xAmzTarget  (required)
     * @param describeRecommendationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeRecommendationsCall(String xAmzTarget, DescribeRecommendationsRequest describeRecommendationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeRecommendationsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeRecommendations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeRecommendationsValidateBeforeCall(String xAmzTarget, DescribeRecommendationsRequest describeRecommendationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeRecommendations(Async)");
        }

        // verify the required parameter 'describeRecommendationsRequest' is set
        if (describeRecommendationsRequest == null) {
            throw new ApiException("Missing the required parameter 'describeRecommendationsRequest' when calling describeRecommendations(Async)");
        }

        return describeRecommendationsCall(xAmzTarget, describeRecommendationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, _callback);

    }

    /**
     * 
     * Returns a paginated list of target engine recommendations for your source databases.
     * @param xAmzTarget  (required)
     * @param describeRecommendationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeRecommendationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeRecommendationsResponse describeRecommendations(String xAmzTarget, DescribeRecommendationsRequest describeRecommendationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken) throws ApiException {
        ApiResponse<DescribeRecommendationsResponse> localVarResp = describeRecommendationsWithHttpInfo(xAmzTarget, describeRecommendationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a paginated list of target engine recommendations for your source databases.
     * @param xAmzTarget  (required)
     * @param describeRecommendationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeRecommendationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeRecommendationsResponse> describeRecommendationsWithHttpInfo(String xAmzTarget, DescribeRecommendationsRequest describeRecommendationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeRecommendationsValidateBeforeCall(xAmzTarget, describeRecommendationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeRecommendationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a paginated list of target engine recommendations for your source databases.
     * @param xAmzTarget  (required)
     * @param describeRecommendationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeRecommendationsAsync(String xAmzTarget, DescribeRecommendationsRequest describeRecommendationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, final ApiCallback<DescribeRecommendationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeRecommendationsValidateBeforeCall(xAmzTarget, describeRecommendationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeRecommendationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeRefreshSchemasStatus
     * @param xAmzTarget  (required)
     * @param describeRefreshSchemasStatusMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeRefreshSchemasStatusCall(String xAmzTarget, DescribeRefreshSchemasStatusMessage describeRefreshSchemasStatusMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeRefreshSchemasStatusMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeRefreshSchemasStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeRefreshSchemasStatusValidateBeforeCall(String xAmzTarget, DescribeRefreshSchemasStatusMessage describeRefreshSchemasStatusMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeRefreshSchemasStatus(Async)");
        }

        // verify the required parameter 'describeRefreshSchemasStatusMessage' is set
        if (describeRefreshSchemasStatusMessage == null) {
            throw new ApiException("Missing the required parameter 'describeRefreshSchemasStatusMessage' when calling describeRefreshSchemasStatus(Async)");
        }

        return describeRefreshSchemasStatusCall(xAmzTarget, describeRefreshSchemasStatusMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns the status of the RefreshSchemas operation.
     * @param xAmzTarget  (required)
     * @param describeRefreshSchemasStatusMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeRefreshSchemasStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeRefreshSchemasStatusResponse describeRefreshSchemasStatus(String xAmzTarget, DescribeRefreshSchemasStatusMessage describeRefreshSchemasStatusMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeRefreshSchemasStatusResponse> localVarResp = describeRefreshSchemasStatusWithHttpInfo(xAmzTarget, describeRefreshSchemasStatusMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the status of the RefreshSchemas operation.
     * @param xAmzTarget  (required)
     * @param describeRefreshSchemasStatusMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeRefreshSchemasStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeRefreshSchemasStatusResponse> describeRefreshSchemasStatusWithHttpInfo(String xAmzTarget, DescribeRefreshSchemasStatusMessage describeRefreshSchemasStatusMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeRefreshSchemasStatusValidateBeforeCall(xAmzTarget, describeRefreshSchemasStatusMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeRefreshSchemasStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the status of the RefreshSchemas operation.
     * @param xAmzTarget  (required)
     * @param describeRefreshSchemasStatusMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeRefreshSchemasStatusAsync(String xAmzTarget, DescribeRefreshSchemasStatusMessage describeRefreshSchemasStatusMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeRefreshSchemasStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeRefreshSchemasStatusValidateBeforeCall(xAmzTarget, describeRefreshSchemasStatusMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeRefreshSchemasStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeReplicationInstanceTaskLogs
     * @param xAmzTarget  (required)
     * @param describeReplicationInstanceTaskLogsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeReplicationInstanceTaskLogsCall(String xAmzTarget, DescribeReplicationInstanceTaskLogsMessage describeReplicationInstanceTaskLogsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeReplicationInstanceTaskLogsMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeReplicationInstanceTaskLogs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeReplicationInstanceTaskLogsValidateBeforeCall(String xAmzTarget, DescribeReplicationInstanceTaskLogsMessage describeReplicationInstanceTaskLogsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeReplicationInstanceTaskLogs(Async)");
        }

        // verify the required parameter 'describeReplicationInstanceTaskLogsMessage' is set
        if (describeReplicationInstanceTaskLogsMessage == null) {
            throw new ApiException("Missing the required parameter 'describeReplicationInstanceTaskLogsMessage' when calling describeReplicationInstanceTaskLogs(Async)");
        }

        return describeReplicationInstanceTaskLogsCall(xAmzTarget, describeReplicationInstanceTaskLogsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns information about the task logs for the specified task.
     * @param xAmzTarget  (required)
     * @param describeReplicationInstanceTaskLogsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribeReplicationInstanceTaskLogsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeReplicationInstanceTaskLogsResponse describeReplicationInstanceTaskLogs(String xAmzTarget, DescribeReplicationInstanceTaskLogsMessage describeReplicationInstanceTaskLogsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeReplicationInstanceTaskLogsResponse> localVarResp = describeReplicationInstanceTaskLogsWithHttpInfo(xAmzTarget, describeReplicationInstanceTaskLogsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about the task logs for the specified task.
     * @param xAmzTarget  (required)
     * @param describeReplicationInstanceTaskLogsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribeReplicationInstanceTaskLogsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeReplicationInstanceTaskLogsResponse> describeReplicationInstanceTaskLogsWithHttpInfo(String xAmzTarget, DescribeReplicationInstanceTaskLogsMessage describeReplicationInstanceTaskLogsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describeReplicationInstanceTaskLogsValidateBeforeCall(xAmzTarget, describeReplicationInstanceTaskLogsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeReplicationInstanceTaskLogsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about the task logs for the specified task.
     * @param xAmzTarget  (required)
     * @param describeReplicationInstanceTaskLogsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeReplicationInstanceTaskLogsAsync(String xAmzTarget, DescribeReplicationInstanceTaskLogsMessage describeReplicationInstanceTaskLogsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribeReplicationInstanceTaskLogsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeReplicationInstanceTaskLogsValidateBeforeCall(xAmzTarget, describeReplicationInstanceTaskLogsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeReplicationInstanceTaskLogsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeReplicationInstances
     * @param xAmzTarget  (required)
     * @param describeReplicationInstancesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeReplicationInstancesCall(String xAmzTarget, DescribeReplicationInstancesMessage describeReplicationInstancesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeReplicationInstancesMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeReplicationInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeReplicationInstancesValidateBeforeCall(String xAmzTarget, DescribeReplicationInstancesMessage describeReplicationInstancesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeReplicationInstances(Async)");
        }

        // verify the required parameter 'describeReplicationInstancesMessage' is set
        if (describeReplicationInstancesMessage == null) {
            throw new ApiException("Missing the required parameter 'describeReplicationInstancesMessage' when calling describeReplicationInstances(Async)");
        }

        return describeReplicationInstancesCall(xAmzTarget, describeReplicationInstancesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns information about replication instances for your account in the current region.
     * @param xAmzTarget  (required)
     * @param describeReplicationInstancesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribeReplicationInstancesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeReplicationInstancesResponse describeReplicationInstances(String xAmzTarget, DescribeReplicationInstancesMessage describeReplicationInstancesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeReplicationInstancesResponse> localVarResp = describeReplicationInstancesWithHttpInfo(xAmzTarget, describeReplicationInstancesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about replication instances for your account in the current region.
     * @param xAmzTarget  (required)
     * @param describeReplicationInstancesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribeReplicationInstancesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeReplicationInstancesResponse> describeReplicationInstancesWithHttpInfo(String xAmzTarget, DescribeReplicationInstancesMessage describeReplicationInstancesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describeReplicationInstancesValidateBeforeCall(xAmzTarget, describeReplicationInstancesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeReplicationInstancesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about replication instances for your account in the current region.
     * @param xAmzTarget  (required)
     * @param describeReplicationInstancesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeReplicationInstancesAsync(String xAmzTarget, DescribeReplicationInstancesMessage describeReplicationInstancesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribeReplicationInstancesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeReplicationInstancesValidateBeforeCall(xAmzTarget, describeReplicationInstancesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeReplicationInstancesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeReplicationSubnetGroups
     * @param xAmzTarget  (required)
     * @param describeReplicationSubnetGroupsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeReplicationSubnetGroupsCall(String xAmzTarget, DescribeReplicationSubnetGroupsMessage describeReplicationSubnetGroupsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeReplicationSubnetGroupsMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeReplicationSubnetGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeReplicationSubnetGroupsValidateBeforeCall(String xAmzTarget, DescribeReplicationSubnetGroupsMessage describeReplicationSubnetGroupsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeReplicationSubnetGroups(Async)");
        }

        // verify the required parameter 'describeReplicationSubnetGroupsMessage' is set
        if (describeReplicationSubnetGroupsMessage == null) {
            throw new ApiException("Missing the required parameter 'describeReplicationSubnetGroupsMessage' when calling describeReplicationSubnetGroups(Async)");
        }

        return describeReplicationSubnetGroupsCall(xAmzTarget, describeReplicationSubnetGroupsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns information about the replication subnet groups.
     * @param xAmzTarget  (required)
     * @param describeReplicationSubnetGroupsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribeReplicationSubnetGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeReplicationSubnetGroupsResponse describeReplicationSubnetGroups(String xAmzTarget, DescribeReplicationSubnetGroupsMessage describeReplicationSubnetGroupsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeReplicationSubnetGroupsResponse> localVarResp = describeReplicationSubnetGroupsWithHttpInfo(xAmzTarget, describeReplicationSubnetGroupsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about the replication subnet groups.
     * @param xAmzTarget  (required)
     * @param describeReplicationSubnetGroupsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribeReplicationSubnetGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeReplicationSubnetGroupsResponse> describeReplicationSubnetGroupsWithHttpInfo(String xAmzTarget, DescribeReplicationSubnetGroupsMessage describeReplicationSubnetGroupsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describeReplicationSubnetGroupsValidateBeforeCall(xAmzTarget, describeReplicationSubnetGroupsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeReplicationSubnetGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about the replication subnet groups.
     * @param xAmzTarget  (required)
     * @param describeReplicationSubnetGroupsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeReplicationSubnetGroupsAsync(String xAmzTarget, DescribeReplicationSubnetGroupsMessage describeReplicationSubnetGroupsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribeReplicationSubnetGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeReplicationSubnetGroupsValidateBeforeCall(xAmzTarget, describeReplicationSubnetGroupsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeReplicationSubnetGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeReplicationTaskAssessmentResults
     * @param xAmzTarget  (required)
     * @param describeReplicationTaskAssessmentResultsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeReplicationTaskAssessmentResultsCall(String xAmzTarget, DescribeReplicationTaskAssessmentResultsMessage describeReplicationTaskAssessmentResultsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeReplicationTaskAssessmentResultsMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeReplicationTaskAssessmentResults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeReplicationTaskAssessmentResultsValidateBeforeCall(String xAmzTarget, DescribeReplicationTaskAssessmentResultsMessage describeReplicationTaskAssessmentResultsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeReplicationTaskAssessmentResults(Async)");
        }

        // verify the required parameter 'describeReplicationTaskAssessmentResultsMessage' is set
        if (describeReplicationTaskAssessmentResultsMessage == null) {
            throw new ApiException("Missing the required parameter 'describeReplicationTaskAssessmentResultsMessage' when calling describeReplicationTaskAssessmentResults(Async)");
        }

        return describeReplicationTaskAssessmentResultsCall(xAmzTarget, describeReplicationTaskAssessmentResultsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the task assessment results from the Amazon S3 bucket that DMS creates in your Amazon Web Services account. This action always returns the latest results.&lt;/p&gt; &lt;p&gt;For more information about DMS task assessments, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html\&quot;&gt;Creating a task assessment report&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeReplicationTaskAssessmentResultsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribeReplicationTaskAssessmentResultsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeReplicationTaskAssessmentResultsResponse describeReplicationTaskAssessmentResults(String xAmzTarget, DescribeReplicationTaskAssessmentResultsMessage describeReplicationTaskAssessmentResultsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeReplicationTaskAssessmentResultsResponse> localVarResp = describeReplicationTaskAssessmentResultsWithHttpInfo(xAmzTarget, describeReplicationTaskAssessmentResultsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the task assessment results from the Amazon S3 bucket that DMS creates in your Amazon Web Services account. This action always returns the latest results.&lt;/p&gt; &lt;p&gt;For more information about DMS task assessments, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html\&quot;&gt;Creating a task assessment report&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeReplicationTaskAssessmentResultsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribeReplicationTaskAssessmentResultsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeReplicationTaskAssessmentResultsResponse> describeReplicationTaskAssessmentResultsWithHttpInfo(String xAmzTarget, DescribeReplicationTaskAssessmentResultsMessage describeReplicationTaskAssessmentResultsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describeReplicationTaskAssessmentResultsValidateBeforeCall(xAmzTarget, describeReplicationTaskAssessmentResultsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeReplicationTaskAssessmentResultsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the task assessment results from the Amazon S3 bucket that DMS creates in your Amazon Web Services account. This action always returns the latest results.&lt;/p&gt; &lt;p&gt;For more information about DMS task assessments, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html\&quot;&gt;Creating a task assessment report&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeReplicationTaskAssessmentResultsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeReplicationTaskAssessmentResultsAsync(String xAmzTarget, DescribeReplicationTaskAssessmentResultsMessage describeReplicationTaskAssessmentResultsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribeReplicationTaskAssessmentResultsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeReplicationTaskAssessmentResultsValidateBeforeCall(xAmzTarget, describeReplicationTaskAssessmentResultsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeReplicationTaskAssessmentResultsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeReplicationTaskAssessmentRuns
     * @param xAmzTarget  (required)
     * @param describeReplicationTaskAssessmentRunsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeReplicationTaskAssessmentRunsCall(String xAmzTarget, DescribeReplicationTaskAssessmentRunsMessage describeReplicationTaskAssessmentRunsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeReplicationTaskAssessmentRunsMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeReplicationTaskAssessmentRuns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeReplicationTaskAssessmentRunsValidateBeforeCall(String xAmzTarget, DescribeReplicationTaskAssessmentRunsMessage describeReplicationTaskAssessmentRunsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeReplicationTaskAssessmentRuns(Async)");
        }

        // verify the required parameter 'describeReplicationTaskAssessmentRunsMessage' is set
        if (describeReplicationTaskAssessmentRunsMessage == null) {
            throw new ApiException("Missing the required parameter 'describeReplicationTaskAssessmentRunsMessage' when calling describeReplicationTaskAssessmentRuns(Async)");
        }

        return describeReplicationTaskAssessmentRunsCall(xAmzTarget, describeReplicationTaskAssessmentRunsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a paginated list of premigration assessment runs based on filter settings.&lt;/p&gt; &lt;p&gt;These filter settings can specify a combination of premigration assessment runs, migration tasks, replication instances, and assessment run status values.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation doesn&#39;t return information about individual assessments. For this information, see the &lt;code&gt;DescribeReplicationTaskIndividualAssessments&lt;/code&gt; operation. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeReplicationTaskAssessmentRunsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribeReplicationTaskAssessmentRunsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeReplicationTaskAssessmentRunsResponse describeReplicationTaskAssessmentRuns(String xAmzTarget, DescribeReplicationTaskAssessmentRunsMessage describeReplicationTaskAssessmentRunsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeReplicationTaskAssessmentRunsResponse> localVarResp = describeReplicationTaskAssessmentRunsWithHttpInfo(xAmzTarget, describeReplicationTaskAssessmentRunsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a paginated list of premigration assessment runs based on filter settings.&lt;/p&gt; &lt;p&gt;These filter settings can specify a combination of premigration assessment runs, migration tasks, replication instances, and assessment run status values.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation doesn&#39;t return information about individual assessments. For this information, see the &lt;code&gt;DescribeReplicationTaskIndividualAssessments&lt;/code&gt; operation. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeReplicationTaskAssessmentRunsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribeReplicationTaskAssessmentRunsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeReplicationTaskAssessmentRunsResponse> describeReplicationTaskAssessmentRunsWithHttpInfo(String xAmzTarget, DescribeReplicationTaskAssessmentRunsMessage describeReplicationTaskAssessmentRunsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describeReplicationTaskAssessmentRunsValidateBeforeCall(xAmzTarget, describeReplicationTaskAssessmentRunsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeReplicationTaskAssessmentRunsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a paginated list of premigration assessment runs based on filter settings.&lt;/p&gt; &lt;p&gt;These filter settings can specify a combination of premigration assessment runs, migration tasks, replication instances, and assessment run status values.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation doesn&#39;t return information about individual assessments. For this information, see the &lt;code&gt;DescribeReplicationTaskIndividualAssessments&lt;/code&gt; operation. &lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeReplicationTaskAssessmentRunsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeReplicationTaskAssessmentRunsAsync(String xAmzTarget, DescribeReplicationTaskAssessmentRunsMessage describeReplicationTaskAssessmentRunsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribeReplicationTaskAssessmentRunsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeReplicationTaskAssessmentRunsValidateBeforeCall(xAmzTarget, describeReplicationTaskAssessmentRunsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeReplicationTaskAssessmentRunsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeReplicationTaskIndividualAssessments
     * @param xAmzTarget  (required)
     * @param describeReplicationTaskIndividualAssessmentsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeReplicationTaskIndividualAssessmentsCall(String xAmzTarget, DescribeReplicationTaskIndividualAssessmentsMessage describeReplicationTaskIndividualAssessmentsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeReplicationTaskIndividualAssessmentsMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeReplicationTaskIndividualAssessments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeReplicationTaskIndividualAssessmentsValidateBeforeCall(String xAmzTarget, DescribeReplicationTaskIndividualAssessmentsMessage describeReplicationTaskIndividualAssessmentsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeReplicationTaskIndividualAssessments(Async)");
        }

        // verify the required parameter 'describeReplicationTaskIndividualAssessmentsMessage' is set
        if (describeReplicationTaskIndividualAssessmentsMessage == null) {
            throw new ApiException("Missing the required parameter 'describeReplicationTaskIndividualAssessmentsMessage' when calling describeReplicationTaskIndividualAssessments(Async)");
        }

        return describeReplicationTaskIndividualAssessmentsCall(xAmzTarget, describeReplicationTaskIndividualAssessmentsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a paginated list of individual assessments based on filter settings.&lt;/p&gt; &lt;p&gt;These filter settings can specify a combination of premigration assessment runs, migration tasks, and assessment status values.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeReplicationTaskIndividualAssessmentsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribeReplicationTaskIndividualAssessmentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeReplicationTaskIndividualAssessmentsResponse describeReplicationTaskIndividualAssessments(String xAmzTarget, DescribeReplicationTaskIndividualAssessmentsMessage describeReplicationTaskIndividualAssessmentsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeReplicationTaskIndividualAssessmentsResponse> localVarResp = describeReplicationTaskIndividualAssessmentsWithHttpInfo(xAmzTarget, describeReplicationTaskIndividualAssessmentsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a paginated list of individual assessments based on filter settings.&lt;/p&gt; &lt;p&gt;These filter settings can specify a combination of premigration assessment runs, migration tasks, and assessment status values.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeReplicationTaskIndividualAssessmentsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribeReplicationTaskIndividualAssessmentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeReplicationTaskIndividualAssessmentsResponse> describeReplicationTaskIndividualAssessmentsWithHttpInfo(String xAmzTarget, DescribeReplicationTaskIndividualAssessmentsMessage describeReplicationTaskIndividualAssessmentsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describeReplicationTaskIndividualAssessmentsValidateBeforeCall(xAmzTarget, describeReplicationTaskIndividualAssessmentsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeReplicationTaskIndividualAssessmentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a paginated list of individual assessments based on filter settings.&lt;/p&gt; &lt;p&gt;These filter settings can specify a combination of premigration assessment runs, migration tasks, and assessment status values.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeReplicationTaskIndividualAssessmentsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeReplicationTaskIndividualAssessmentsAsync(String xAmzTarget, DescribeReplicationTaskIndividualAssessmentsMessage describeReplicationTaskIndividualAssessmentsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribeReplicationTaskIndividualAssessmentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeReplicationTaskIndividualAssessmentsValidateBeforeCall(xAmzTarget, describeReplicationTaskIndividualAssessmentsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeReplicationTaskIndividualAssessmentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeReplicationTasks
     * @param xAmzTarget  (required)
     * @param describeReplicationTasksMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeReplicationTasksCall(String xAmzTarget, DescribeReplicationTasksMessage describeReplicationTasksMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeReplicationTasksMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeReplicationTasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeReplicationTasksValidateBeforeCall(String xAmzTarget, DescribeReplicationTasksMessage describeReplicationTasksMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeReplicationTasks(Async)");
        }

        // verify the required parameter 'describeReplicationTasksMessage' is set
        if (describeReplicationTasksMessage == null) {
            throw new ApiException("Missing the required parameter 'describeReplicationTasksMessage' when calling describeReplicationTasks(Async)");
        }

        return describeReplicationTasksCall(xAmzTarget, describeReplicationTasksMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns information about replication tasks for your account in the current region.
     * @param xAmzTarget  (required)
     * @param describeReplicationTasksMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribeReplicationTasksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeReplicationTasksResponse describeReplicationTasks(String xAmzTarget, DescribeReplicationTasksMessage describeReplicationTasksMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeReplicationTasksResponse> localVarResp = describeReplicationTasksWithHttpInfo(xAmzTarget, describeReplicationTasksMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about replication tasks for your account in the current region.
     * @param xAmzTarget  (required)
     * @param describeReplicationTasksMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribeReplicationTasksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeReplicationTasksResponse> describeReplicationTasksWithHttpInfo(String xAmzTarget, DescribeReplicationTasksMessage describeReplicationTasksMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describeReplicationTasksValidateBeforeCall(xAmzTarget, describeReplicationTasksMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeReplicationTasksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about replication tasks for your account in the current region.
     * @param xAmzTarget  (required)
     * @param describeReplicationTasksMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeReplicationTasksAsync(String xAmzTarget, DescribeReplicationTasksMessage describeReplicationTasksMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribeReplicationTasksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeReplicationTasksValidateBeforeCall(xAmzTarget, describeReplicationTasksMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeReplicationTasksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeSchemas
     * @param xAmzTarget  (required)
     * @param describeSchemasMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeSchemasCall(String xAmzTarget, DescribeSchemasMessage describeSchemasMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeSchemasMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeSchemas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeSchemasValidateBeforeCall(String xAmzTarget, DescribeSchemasMessage describeSchemasMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeSchemas(Async)");
        }

        // verify the required parameter 'describeSchemasMessage' is set
        if (describeSchemasMessage == null) {
            throw new ApiException("Missing the required parameter 'describeSchemasMessage' when calling describeSchemas(Async)");
        }

        return describeSchemasCall(xAmzTarget, describeSchemasMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about the schema for the specified endpoint.&lt;/p&gt; &lt;p/&gt;
     * @param xAmzTarget  (required)
     * @param describeSchemasMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribeSchemasResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeSchemasResponse describeSchemas(String xAmzTarget, DescribeSchemasMessage describeSchemasMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeSchemasResponse> localVarResp = describeSchemasWithHttpInfo(xAmzTarget, describeSchemasMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about the schema for the specified endpoint.&lt;/p&gt; &lt;p/&gt;
     * @param xAmzTarget  (required)
     * @param describeSchemasMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribeSchemasResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeSchemasResponse> describeSchemasWithHttpInfo(String xAmzTarget, DescribeSchemasMessage describeSchemasMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describeSchemasValidateBeforeCall(xAmzTarget, describeSchemasMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeSchemasResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about the schema for the specified endpoint.&lt;/p&gt; &lt;p/&gt;
     * @param xAmzTarget  (required)
     * @param describeSchemasMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeSchemasAsync(String xAmzTarget, DescribeSchemasMessage describeSchemasMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribeSchemasResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeSchemasValidateBeforeCall(xAmzTarget, describeSchemasMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeSchemasResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeTableStatistics
     * @param xAmzTarget  (required)
     * @param describeTableStatisticsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeTableStatisticsCall(String xAmzTarget, DescribeTableStatisticsMessage describeTableStatisticsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeTableStatisticsMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.DescribeTableStatistics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeTableStatisticsValidateBeforeCall(String xAmzTarget, DescribeTableStatisticsMessage describeTableStatisticsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeTableStatistics(Async)");
        }

        // verify the required parameter 'describeTableStatisticsMessage' is set
        if (describeTableStatisticsMessage == null) {
            throw new ApiException("Missing the required parameter 'describeTableStatisticsMessage' when calling describeTableStatistics(Async)");
        }

        return describeTableStatisticsCall(xAmzTarget, describeTableStatisticsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns table statistics on the database migration task, including table name, rows inserted, rows updated, and rows deleted.&lt;/p&gt; &lt;p&gt;Note that the \&quot;last updated\&quot; column the DMS console only indicates the time that DMS last updated the table statistics record for a table. It does not indicate the time of the last update to the table.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeTableStatisticsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return DescribeTableStatisticsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTableStatisticsResponse describeTableStatistics(String xAmzTarget, DescribeTableStatisticsMessage describeTableStatisticsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeTableStatisticsResponse> localVarResp = describeTableStatisticsWithHttpInfo(xAmzTarget, describeTableStatisticsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns table statistics on the database migration task, including table name, rows inserted, rows updated, and rows deleted.&lt;/p&gt; &lt;p&gt;Note that the \&quot;last updated\&quot; column the DMS console only indicates the time that DMS last updated the table statistics record for a table. It does not indicate the time of the last update to the table.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeTableStatisticsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;DescribeTableStatisticsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTableStatisticsResponse> describeTableStatisticsWithHttpInfo(String xAmzTarget, DescribeTableStatisticsMessage describeTableStatisticsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = describeTableStatisticsValidateBeforeCall(xAmzTarget, describeTableStatisticsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeTableStatisticsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns table statistics on the database migration task, including table name, rows inserted, rows updated, and rows deleted.&lt;/p&gt; &lt;p&gt;Note that the \&quot;last updated\&quot; column the DMS console only indicates the time that DMS last updated the table statistics record for a table. It does not indicate the time of the last update to the table.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param describeTableStatisticsMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeTableStatisticsAsync(String xAmzTarget, DescribeTableStatisticsMessage describeTableStatisticsMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, final ApiCallback<DescribeTableStatisticsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeTableStatisticsValidateBeforeCall(xAmzTarget, describeTableStatisticsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeTableStatisticsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importCertificate
     * @param xAmzTarget  (required)
     * @param importCertificateMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCertificateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importCertificateCall(String xAmzTarget, ImportCertificateMessage importCertificateMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = importCertificateMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.ImportCertificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importCertificateValidateBeforeCall(String xAmzTarget, ImportCertificateMessage importCertificateMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling importCertificate(Async)");
        }

        // verify the required parameter 'importCertificateMessage' is set
        if (importCertificateMessage == null) {
            throw new ApiException("Missing the required parameter 'importCertificateMessage' when calling importCertificate(Async)");
        }

        return importCertificateCall(xAmzTarget, importCertificateMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Uploads the specified certificate.
     * @param xAmzTarget  (required)
     * @param importCertificateMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ImportCertificateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCertificateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ImportCertificateResponse importCertificate(String xAmzTarget, ImportCertificateMessage importCertificateMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ImportCertificateResponse> localVarResp = importCertificateWithHttpInfo(xAmzTarget, importCertificateMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Uploads the specified certificate.
     * @param xAmzTarget  (required)
     * @param importCertificateMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ImportCertificateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCertificateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportCertificateResponse> importCertificateWithHttpInfo(String xAmzTarget, ImportCertificateMessage importCertificateMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = importCertificateValidateBeforeCall(xAmzTarget, importCertificateMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ImportCertificateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Uploads the specified certificate.
     * @param xAmzTarget  (required)
     * @param importCertificateMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCertificateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importCertificateAsync(String xAmzTarget, ImportCertificateMessage importCertificateMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ImportCertificateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = importCertificateValidateBeforeCall(xAmzTarget, importCertificateMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ImportCertificateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource
     * @param xAmzTarget  (required)
     * @param listTagsForResourceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceCall(String xAmzTarget, ListTagsForResourceMessage listTagsForResourceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForResourceMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResourceValidateBeforeCall(String xAmzTarget, ListTagsForResourceMessage listTagsForResourceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTagsForResource(Async)");
        }

        // verify the required parameter 'listTagsForResourceMessage' is set
        if (listTagsForResourceMessage == null) {
            throw new ApiException("Missing the required parameter 'listTagsForResourceMessage' when calling listTagsForResource(Async)");
        }

        return listTagsForResourceCall(xAmzTarget, listTagsForResourceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Lists all metadata tags attached to an DMS resource, including replication instance, endpoint, subnet group, and migration task. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html\&quot;&gt; &lt;code&gt;Tag&lt;/code&gt; &lt;/a&gt; data type description.
     * @param xAmzTarget  (required)
     * @param listTagsForResourceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceResponse listTagsForResource(String xAmzTarget, ListTagsForResourceMessage listTagsForResourceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForResourceResponse> localVarResp = listTagsForResourceWithHttpInfo(xAmzTarget, listTagsForResourceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all metadata tags attached to an DMS resource, including replication instance, endpoint, subnet group, and migration task. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html\&quot;&gt; &lt;code&gt;Tag&lt;/code&gt; &lt;/a&gt; data type description.
     * @param xAmzTarget  (required)
     * @param listTagsForResourceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceResponse> listTagsForResourceWithHttpInfo(String xAmzTarget, ListTagsForResourceMessage listTagsForResourceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all metadata tags attached to an DMS resource, including replication instance, endpoint, subnet group, and migration task. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html\&quot;&gt; &lt;code&gt;Tag&lt;/code&gt; &lt;/a&gt; data type description.
     * @param xAmzTarget  (required)
     * @param listTagsForResourceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceAsync(String xAmzTarget, ListTagsForResourceMessage listTagsForResourceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyEndpoint
     * @param xAmzTarget  (required)
     * @param modifyEndpointMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyEndpointCall(String xAmzTarget, ModifyEndpointMessage modifyEndpointMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyEndpointMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.ModifyEndpoint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyEndpointValidateBeforeCall(String xAmzTarget, ModifyEndpointMessage modifyEndpointMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling modifyEndpoint(Async)");
        }

        // verify the required parameter 'modifyEndpointMessage' is set
        if (modifyEndpointMessage == null) {
            throw new ApiException("Missing the required parameter 'modifyEndpointMessage' when calling modifyEndpoint(Async)");
        }

        return modifyEndpointCall(xAmzTarget, modifyEndpointMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modifies the specified endpoint.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For a MySQL source or target endpoint, don&#39;t explicitly specify the database using the &lt;code&gt;DatabaseName&lt;/code&gt; request parameter on the &lt;code&gt;ModifyEndpoint&lt;/code&gt; API call. Specifying &lt;code&gt;DatabaseName&lt;/code&gt; when you modify a MySQL endpoint replicates all the task tables to this single database. For MySQL endpoints, you specify the database only when you specify the schema in the table-mapping rules of the DMS task.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param modifyEndpointMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ModifyEndpointResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyEndpointResponse modifyEndpoint(String xAmzTarget, ModifyEndpointMessage modifyEndpointMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ModifyEndpointResponse> localVarResp = modifyEndpointWithHttpInfo(xAmzTarget, modifyEndpointMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modifies the specified endpoint.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For a MySQL source or target endpoint, don&#39;t explicitly specify the database using the &lt;code&gt;DatabaseName&lt;/code&gt; request parameter on the &lt;code&gt;ModifyEndpoint&lt;/code&gt; API call. Specifying &lt;code&gt;DatabaseName&lt;/code&gt; when you modify a MySQL endpoint replicates all the task tables to this single database. For MySQL endpoints, you specify the database only when you specify the schema in the table-mapping rules of the DMS task.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param modifyEndpointMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ModifyEndpointResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyEndpointResponse> modifyEndpointWithHttpInfo(String xAmzTarget, ModifyEndpointMessage modifyEndpointMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = modifyEndpointValidateBeforeCall(xAmzTarget, modifyEndpointMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ModifyEndpointResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modifies the specified endpoint.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For a MySQL source or target endpoint, don&#39;t explicitly specify the database using the &lt;code&gt;DatabaseName&lt;/code&gt; request parameter on the &lt;code&gt;ModifyEndpoint&lt;/code&gt; API call. Specifying &lt;code&gt;DatabaseName&lt;/code&gt; when you modify a MySQL endpoint replicates all the task tables to this single database. For MySQL endpoints, you specify the database only when you specify the schema in the table-mapping rules of the DMS task.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param modifyEndpointMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyEndpointAsync(String xAmzTarget, ModifyEndpointMessage modifyEndpointMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ModifyEndpointResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyEndpointValidateBeforeCall(xAmzTarget, modifyEndpointMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ModifyEndpointResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyEventSubscription
     * @param xAmzTarget  (required)
     * @param modifyEventSubscriptionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> KMSAccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSDisabledFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSThrottlingFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyEventSubscriptionCall(String xAmzTarget, ModifyEventSubscriptionMessage modifyEventSubscriptionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyEventSubscriptionMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.ModifyEventSubscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyEventSubscriptionValidateBeforeCall(String xAmzTarget, ModifyEventSubscriptionMessage modifyEventSubscriptionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling modifyEventSubscription(Async)");
        }

        // verify the required parameter 'modifyEventSubscriptionMessage' is set
        if (modifyEventSubscriptionMessage == null) {
            throw new ApiException("Missing the required parameter 'modifyEventSubscriptionMessage' when calling modifyEventSubscription(Async)");
        }

        return modifyEventSubscriptionCall(xAmzTarget, modifyEventSubscriptionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Modifies an existing DMS event notification subscription. 
     * @param xAmzTarget  (required)
     * @param modifyEventSubscriptionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ModifyEventSubscriptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> KMSAccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSDisabledFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSThrottlingFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyEventSubscriptionResponse modifyEventSubscription(String xAmzTarget, ModifyEventSubscriptionMessage modifyEventSubscriptionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ModifyEventSubscriptionResponse> localVarResp = modifyEventSubscriptionWithHttpInfo(xAmzTarget, modifyEventSubscriptionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies an existing DMS event notification subscription. 
     * @param xAmzTarget  (required)
     * @param modifyEventSubscriptionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ModifyEventSubscriptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> KMSAccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSDisabledFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSThrottlingFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyEventSubscriptionResponse> modifyEventSubscriptionWithHttpInfo(String xAmzTarget, ModifyEventSubscriptionMessage modifyEventSubscriptionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = modifyEventSubscriptionValidateBeforeCall(xAmzTarget, modifyEventSubscriptionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ModifyEventSubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies an existing DMS event notification subscription. 
     * @param xAmzTarget  (required)
     * @param modifyEventSubscriptionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SNSInvalidTopicFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SNSNoAuthorizationFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> KMSAccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSDisabledFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSThrottlingFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyEventSubscriptionAsync(String xAmzTarget, ModifyEventSubscriptionMessage modifyEventSubscriptionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ModifyEventSubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyEventSubscriptionValidateBeforeCall(xAmzTarget, modifyEventSubscriptionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ModifyEventSubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyReplicationInstance
     * @param xAmzTarget  (required)
     * @param modifyReplicationInstanceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientResourceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UpgradeDependencyFailureFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyReplicationInstanceCall(String xAmzTarget, ModifyReplicationInstanceMessage modifyReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyReplicationInstanceMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.ModifyReplicationInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyReplicationInstanceValidateBeforeCall(String xAmzTarget, ModifyReplicationInstanceMessage modifyReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling modifyReplicationInstance(Async)");
        }

        // verify the required parameter 'modifyReplicationInstanceMessage' is set
        if (modifyReplicationInstanceMessage == null) {
            throw new ApiException("Missing the required parameter 'modifyReplicationInstanceMessage' when calling modifyReplicationInstance(Async)");
        }

        return modifyReplicationInstanceCall(xAmzTarget, modifyReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modifies the replication instance to apply new settings. You can change one or more parameters by specifying these parameters and the new values in the request.&lt;/p&gt; &lt;p&gt;Some settings are applied during the maintenance window.&lt;/p&gt; &lt;p/&gt;
     * @param xAmzTarget  (required)
     * @param modifyReplicationInstanceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ModifyReplicationInstanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientResourceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UpgradeDependencyFailureFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyReplicationInstanceResponse modifyReplicationInstance(String xAmzTarget, ModifyReplicationInstanceMessage modifyReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ModifyReplicationInstanceResponse> localVarResp = modifyReplicationInstanceWithHttpInfo(xAmzTarget, modifyReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modifies the replication instance to apply new settings. You can change one or more parameters by specifying these parameters and the new values in the request.&lt;/p&gt; &lt;p&gt;Some settings are applied during the maintenance window.&lt;/p&gt; &lt;p/&gt;
     * @param xAmzTarget  (required)
     * @param modifyReplicationInstanceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ModifyReplicationInstanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientResourceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UpgradeDependencyFailureFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyReplicationInstanceResponse> modifyReplicationInstanceWithHttpInfo(String xAmzTarget, ModifyReplicationInstanceMessage modifyReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = modifyReplicationInstanceValidateBeforeCall(xAmzTarget, modifyReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ModifyReplicationInstanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modifies the replication instance to apply new settings. You can change one or more parameters by specifying these parameters and the new values in the request.&lt;/p&gt; &lt;p&gt;Some settings are applied during the maintenance window.&lt;/p&gt; &lt;p/&gt;
     * @param xAmzTarget  (required)
     * @param modifyReplicationInstanceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientResourceCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StorageQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UpgradeDependencyFailureFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyReplicationInstanceAsync(String xAmzTarget, ModifyReplicationInstanceMessage modifyReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ModifyReplicationInstanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyReplicationInstanceValidateBeforeCall(xAmzTarget, modifyReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ModifyReplicationInstanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyReplicationSubnetGroup
     * @param xAmzTarget  (required)
     * @param modifyReplicationSubnetGroupMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReplicationSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyReplicationSubnetGroupCall(String xAmzTarget, ModifyReplicationSubnetGroupMessage modifyReplicationSubnetGroupMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyReplicationSubnetGroupMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.ModifyReplicationSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyReplicationSubnetGroupValidateBeforeCall(String xAmzTarget, ModifyReplicationSubnetGroupMessage modifyReplicationSubnetGroupMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling modifyReplicationSubnetGroup(Async)");
        }

        // verify the required parameter 'modifyReplicationSubnetGroupMessage' is set
        if (modifyReplicationSubnetGroupMessage == null) {
            throw new ApiException("Missing the required parameter 'modifyReplicationSubnetGroupMessage' when calling modifyReplicationSubnetGroup(Async)");
        }

        return modifyReplicationSubnetGroupCall(xAmzTarget, modifyReplicationSubnetGroupMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Modifies the settings for the specified replication subnet group.
     * @param xAmzTarget  (required)
     * @param modifyReplicationSubnetGroupMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ModifyReplicationSubnetGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReplicationSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public ModifyReplicationSubnetGroupResponse modifyReplicationSubnetGroup(String xAmzTarget, ModifyReplicationSubnetGroupMessage modifyReplicationSubnetGroupMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ModifyReplicationSubnetGroupResponse> localVarResp = modifyReplicationSubnetGroupWithHttpInfo(xAmzTarget, modifyReplicationSubnetGroupMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the settings for the specified replication subnet group.
     * @param xAmzTarget  (required)
     * @param modifyReplicationSubnetGroupMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ModifyReplicationSubnetGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReplicationSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyReplicationSubnetGroupResponse> modifyReplicationSubnetGroupWithHttpInfo(String xAmzTarget, ModifyReplicationSubnetGroupMessage modifyReplicationSubnetGroupMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = modifyReplicationSubnetGroupValidateBeforeCall(xAmzTarget, modifyReplicationSubnetGroupMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ModifyReplicationSubnetGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the settings for the specified replication subnet group.
     * @param xAmzTarget  (required)
     * @param modifyReplicationSubnetGroupMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SubnetAlreadyInUse </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReplicationSubnetGroupDoesNotCoverEnoughAZs </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidSubnet </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyReplicationSubnetGroupAsync(String xAmzTarget, ModifyReplicationSubnetGroupMessage modifyReplicationSubnetGroupMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ModifyReplicationSubnetGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyReplicationSubnetGroupValidateBeforeCall(xAmzTarget, modifyReplicationSubnetGroupMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ModifyReplicationSubnetGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyReplicationTask
     * @param xAmzTarget  (required)
     * @param modifyReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyReplicationTaskCall(String xAmzTarget, ModifyReplicationTaskMessage modifyReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyReplicationTaskMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.ModifyReplicationTask";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyReplicationTaskValidateBeforeCall(String xAmzTarget, ModifyReplicationTaskMessage modifyReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling modifyReplicationTask(Async)");
        }

        // verify the required parameter 'modifyReplicationTaskMessage' is set
        if (modifyReplicationTaskMessage == null) {
            throw new ApiException("Missing the required parameter 'modifyReplicationTaskMessage' when calling modifyReplicationTask(Async)");
        }

        return modifyReplicationTaskCall(xAmzTarget, modifyReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modifies the specified replication task.&lt;/p&gt; &lt;p&gt;You can&#39;t modify the task endpoints. The task must be stopped before you can modify it. &lt;/p&gt; &lt;p&gt;For more information about DMS tasks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.html\&quot;&gt;Working with Migration Tasks&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param modifyReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ModifyReplicationTaskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyReplicationTaskResponse modifyReplicationTask(String xAmzTarget, ModifyReplicationTaskMessage modifyReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ModifyReplicationTaskResponse> localVarResp = modifyReplicationTaskWithHttpInfo(xAmzTarget, modifyReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modifies the specified replication task.&lt;/p&gt; &lt;p&gt;You can&#39;t modify the task endpoints. The task must be stopped before you can modify it. &lt;/p&gt; &lt;p&gt;For more information about DMS tasks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.html\&quot;&gt;Working with Migration Tasks&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param modifyReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ModifyReplicationTaskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyReplicationTaskResponse> modifyReplicationTaskWithHttpInfo(String xAmzTarget, ModifyReplicationTaskMessage modifyReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = modifyReplicationTaskValidateBeforeCall(xAmzTarget, modifyReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ModifyReplicationTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modifies the specified replication task.&lt;/p&gt; &lt;p&gt;You can&#39;t modify the task endpoints. The task must be stopped before you can modify it. &lt;/p&gt; &lt;p&gt;For more information about DMS tasks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.html\&quot;&gt;Working with Migration Tasks&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param modifyReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyReplicationTaskAsync(String xAmzTarget, ModifyReplicationTaskMessage modifyReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ModifyReplicationTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyReplicationTaskValidateBeforeCall(xAmzTarget, modifyReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ModifyReplicationTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveReplicationTask
     * @param xAmzTarget  (required)
     * @param moveReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveReplicationTaskCall(String xAmzTarget, MoveReplicationTaskMessage moveReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveReplicationTaskMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.MoveReplicationTask";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveReplicationTaskValidateBeforeCall(String xAmzTarget, MoveReplicationTaskMessage moveReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling moveReplicationTask(Async)");
        }

        // verify the required parameter 'moveReplicationTaskMessage' is set
        if (moveReplicationTaskMessage == null) {
            throw new ApiException("Missing the required parameter 'moveReplicationTaskMessage' when calling moveReplicationTask(Async)");
        }

        return moveReplicationTaskCall(xAmzTarget, moveReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Moves a replication task from its current replication instance to a different target replication instance using the specified parameters. The target replication instance must be created with the same or later DMS version as the current replication instance.
     * @param xAmzTarget  (required)
     * @param moveReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return MoveReplicationTaskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public MoveReplicationTaskResponse moveReplicationTask(String xAmzTarget, MoveReplicationTaskMessage moveReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<MoveReplicationTaskResponse> localVarResp = moveReplicationTaskWithHttpInfo(xAmzTarget, moveReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Moves a replication task from its current replication instance to a different target replication instance using the specified parameters. The target replication instance must be created with the same or later DMS version as the current replication instance.
     * @param xAmzTarget  (required)
     * @param moveReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;MoveReplicationTaskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MoveReplicationTaskResponse> moveReplicationTaskWithHttpInfo(String xAmzTarget, MoveReplicationTaskMessage moveReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = moveReplicationTaskValidateBeforeCall(xAmzTarget, moveReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<MoveReplicationTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Moves a replication task from its current replication instance to a different target replication instance using the specified parameters. The target replication instance must be created with the same or later DMS version as the current replication instance.
     * @param xAmzTarget  (required)
     * @param moveReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveReplicationTaskAsync(String xAmzTarget, MoveReplicationTaskMessage moveReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<MoveReplicationTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveReplicationTaskValidateBeforeCall(xAmzTarget, moveReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<MoveReplicationTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rebootReplicationInstance
     * @param xAmzTarget  (required)
     * @param rebootReplicationInstanceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rebootReplicationInstanceCall(String xAmzTarget, RebootReplicationInstanceMessage rebootReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rebootReplicationInstanceMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.RebootReplicationInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rebootReplicationInstanceValidateBeforeCall(String xAmzTarget, RebootReplicationInstanceMessage rebootReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling rebootReplicationInstance(Async)");
        }

        // verify the required parameter 'rebootReplicationInstanceMessage' is set
        if (rebootReplicationInstanceMessage == null) {
            throw new ApiException("Missing the required parameter 'rebootReplicationInstanceMessage' when calling rebootReplicationInstance(Async)");
        }

        return rebootReplicationInstanceCall(xAmzTarget, rebootReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Reboots a replication instance. Rebooting results in a momentary outage, until the replication instance becomes available again.
     * @param xAmzTarget  (required)
     * @param rebootReplicationInstanceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RebootReplicationInstanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public RebootReplicationInstanceResponse rebootReplicationInstance(String xAmzTarget, RebootReplicationInstanceMessage rebootReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RebootReplicationInstanceResponse> localVarResp = rebootReplicationInstanceWithHttpInfo(xAmzTarget, rebootReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Reboots a replication instance. Rebooting results in a momentary outage, until the replication instance becomes available again.
     * @param xAmzTarget  (required)
     * @param rebootReplicationInstanceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RebootReplicationInstanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RebootReplicationInstanceResponse> rebootReplicationInstanceWithHttpInfo(String xAmzTarget, RebootReplicationInstanceMessage rebootReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = rebootReplicationInstanceValidateBeforeCall(xAmzTarget, rebootReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RebootReplicationInstanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reboots a replication instance. Rebooting results in a momentary outage, until the replication instance becomes available again.
     * @param xAmzTarget  (required)
     * @param rebootReplicationInstanceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rebootReplicationInstanceAsync(String xAmzTarget, RebootReplicationInstanceMessage rebootReplicationInstanceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RebootReplicationInstanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rebootReplicationInstanceValidateBeforeCall(xAmzTarget, rebootReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RebootReplicationInstanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refreshSchemas
     * @param xAmzTarget  (required)
     * @param refreshSchemasMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshSchemasCall(String xAmzTarget, RefreshSchemasMessage refreshSchemasMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refreshSchemasMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.RefreshSchemas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshSchemasValidateBeforeCall(String xAmzTarget, RefreshSchemasMessage refreshSchemasMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling refreshSchemas(Async)");
        }

        // verify the required parameter 'refreshSchemasMessage' is set
        if (refreshSchemasMessage == null) {
            throw new ApiException("Missing the required parameter 'refreshSchemasMessage' when calling refreshSchemas(Async)");
        }

        return refreshSchemasCall(xAmzTarget, refreshSchemasMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Populates the schema for the specified endpoint. This is an asynchronous operation and can take several minutes. You can check the status of this operation by calling the DescribeRefreshSchemasStatus operation.
     * @param xAmzTarget  (required)
     * @param refreshSchemasMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RefreshSchemasResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public RefreshSchemasResponse refreshSchemas(String xAmzTarget, RefreshSchemasMessage refreshSchemasMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RefreshSchemasResponse> localVarResp = refreshSchemasWithHttpInfo(xAmzTarget, refreshSchemasMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Populates the schema for the specified endpoint. This is an asynchronous operation and can take several minutes. You can check the status of this operation by calling the DescribeRefreshSchemasStatus operation.
     * @param xAmzTarget  (required)
     * @param refreshSchemasMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RefreshSchemasResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefreshSchemasResponse> refreshSchemasWithHttpInfo(String xAmzTarget, RefreshSchemasMessage refreshSchemasMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = refreshSchemasValidateBeforeCall(xAmzTarget, refreshSchemasMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RefreshSchemasResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Populates the schema for the specified endpoint. This is an asynchronous operation and can take several minutes. You can check the status of this operation by calling the DescribeRefreshSchemasStatus operation.
     * @param xAmzTarget  (required)
     * @param refreshSchemasMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshSchemasAsync(String xAmzTarget, RefreshSchemasMessage refreshSchemasMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RefreshSchemasResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshSchemasValidateBeforeCall(xAmzTarget, refreshSchemasMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RefreshSchemasResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reloadTables
     * @param xAmzTarget  (required)
     * @param reloadTablesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reloadTablesCall(String xAmzTarget, ReloadTablesMessage reloadTablesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reloadTablesMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.ReloadTables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reloadTablesValidateBeforeCall(String xAmzTarget, ReloadTablesMessage reloadTablesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling reloadTables(Async)");
        }

        // verify the required parameter 'reloadTablesMessage' is set
        if (reloadTablesMessage == null) {
            throw new ApiException("Missing the required parameter 'reloadTablesMessage' when calling reloadTables(Async)");
        }

        return reloadTablesCall(xAmzTarget, reloadTablesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Reloads the target database table with the source data. &lt;/p&gt; &lt;p&gt;You can only use this operation with a task in the &lt;code&gt;RUNNING&lt;/code&gt; state, otherwise the service will throw an &lt;code&gt;InvalidResourceStateFault&lt;/code&gt; exception.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param reloadTablesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ReloadTablesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ReloadTablesResponse reloadTables(String xAmzTarget, ReloadTablesMessage reloadTablesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ReloadTablesResponse> localVarResp = reloadTablesWithHttpInfo(xAmzTarget, reloadTablesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Reloads the target database table with the source data. &lt;/p&gt; &lt;p&gt;You can only use this operation with a task in the &lt;code&gt;RUNNING&lt;/code&gt; state, otherwise the service will throw an &lt;code&gt;InvalidResourceStateFault&lt;/code&gt; exception.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param reloadTablesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ReloadTablesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReloadTablesResponse> reloadTablesWithHttpInfo(String xAmzTarget, ReloadTablesMessage reloadTablesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = reloadTablesValidateBeforeCall(xAmzTarget, reloadTablesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ReloadTablesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Reloads the target database table with the source data. &lt;/p&gt; &lt;p&gt;You can only use this operation with a task in the &lt;code&gt;RUNNING&lt;/code&gt; state, otherwise the service will throw an &lt;code&gt;InvalidResourceStateFault&lt;/code&gt; exception.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param reloadTablesMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reloadTablesAsync(String xAmzTarget, ReloadTablesMessage reloadTablesMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ReloadTablesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reloadTablesValidateBeforeCall(xAmzTarget, reloadTablesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ReloadTablesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeTagsFromResource
     * @param xAmzTarget  (required)
     * @param removeTagsFromResourceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTagsFromResourceCall(String xAmzTarget, RemoveTagsFromResourceMessage removeTagsFromResourceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeTagsFromResourceMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.RemoveTagsFromResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTagsFromResourceValidateBeforeCall(String xAmzTarget, RemoveTagsFromResourceMessage removeTagsFromResourceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling removeTagsFromResource(Async)");
        }

        // verify the required parameter 'removeTagsFromResourceMessage' is set
        if (removeTagsFromResourceMessage == null) {
            throw new ApiException("Missing the required parameter 'removeTagsFromResourceMessage' when calling removeTagsFromResource(Async)");
        }

        return removeTagsFromResourceCall(xAmzTarget, removeTagsFromResourceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes metadata tags from an DMS resource, including replication instance, endpoint, subnet group, and migration task. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html\&quot;&gt; &lt;code&gt;Tag&lt;/code&gt; &lt;/a&gt; data type description.
     * @param xAmzTarget  (required)
     * @param removeTagsFromResourceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public Object removeTagsFromResource(String xAmzTarget, RemoveTagsFromResourceMessage removeTagsFromResourceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = removeTagsFromResourceWithHttpInfo(xAmzTarget, removeTagsFromResourceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes metadata tags from an DMS resource, including replication instance, endpoint, subnet group, and migration task. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html\&quot;&gt; &lt;code&gt;Tag&lt;/code&gt; &lt;/a&gt; data type description.
     * @param xAmzTarget  (required)
     * @param removeTagsFromResourceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> removeTagsFromResourceWithHttpInfo(String xAmzTarget, RemoveTagsFromResourceMessage removeTagsFromResourceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = removeTagsFromResourceValidateBeforeCall(xAmzTarget, removeTagsFromResourceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes metadata tags from an DMS resource, including replication instance, endpoint, subnet group, and migration task. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html\&quot;&gt; &lt;code&gt;Tag&lt;/code&gt; &lt;/a&gt; data type description.
     * @param xAmzTarget  (required)
     * @param removeTagsFromResourceMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeTagsFromResourceAsync(String xAmzTarget, RemoveTagsFromResourceMessage removeTagsFromResourceMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTagsFromResourceValidateBeforeCall(xAmzTarget, removeTagsFromResourceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for runFleetAdvisorLsaAnalysis
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runFleetAdvisorLsaAnalysisCall(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.RunFleetAdvisorLsaAnalysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runFleetAdvisorLsaAnalysisValidateBeforeCall(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling runFleetAdvisorLsaAnalysis(Async)");
        }

        return runFleetAdvisorLsaAnalysisCall(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Runs large-scale assessment (LSA) analysis on every Fleet Advisor collector in your account.
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RunFleetAdvisorLsaAnalysisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RunFleetAdvisorLsaAnalysisResponse runFleetAdvisorLsaAnalysis(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RunFleetAdvisorLsaAnalysisResponse> localVarResp = runFleetAdvisorLsaAnalysisWithHttpInfo(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Runs large-scale assessment (LSA) analysis on every Fleet Advisor collector in your account.
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RunFleetAdvisorLsaAnalysisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RunFleetAdvisorLsaAnalysisResponse> runFleetAdvisorLsaAnalysisWithHttpInfo(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = runFleetAdvisorLsaAnalysisValidateBeforeCall(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RunFleetAdvisorLsaAnalysisResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Runs large-scale assessment (LSA) analysis on every Fleet Advisor collector in your account.
     * @param xAmzTarget  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runFleetAdvisorLsaAnalysisAsync(String xAmzTarget, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RunFleetAdvisorLsaAnalysisResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = runFleetAdvisorLsaAnalysisValidateBeforeCall(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RunFleetAdvisorLsaAnalysisResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startRecommendations
     * @param xAmzTarget  (required)
     * @param startRecommendationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startRecommendationsCall(String xAmzTarget, StartRecommendationsRequest startRecommendationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startRecommendationsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.StartRecommendations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startRecommendationsValidateBeforeCall(String xAmzTarget, StartRecommendationsRequest startRecommendationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling startRecommendations(Async)");
        }

        // verify the required parameter 'startRecommendationsRequest' is set
        if (startRecommendationsRequest == null) {
            throw new ApiException("Missing the required parameter 'startRecommendationsRequest' when calling startRecommendations(Async)");
        }

        return startRecommendationsCall(xAmzTarget, startRecommendationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts the analysis of your source database to provide recommendations of target engines.&lt;/p&gt; &lt;p&gt;You can create recommendations for multiple source databases using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_BatchStartRecommendations.html\&quot;&gt;BatchStartRecommendations&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startRecommendationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void startRecommendations(String xAmzTarget, StartRecommendationsRequest startRecommendationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        startRecommendationsWithHttpInfo(xAmzTarget, startRecommendationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Starts the analysis of your source database to provide recommendations of target engines.&lt;/p&gt; &lt;p&gt;You can create recommendations for multiple source databases using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_BatchStartRecommendations.html\&quot;&gt;BatchStartRecommendations&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startRecommendationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> startRecommendationsWithHttpInfo(String xAmzTarget, StartRecommendationsRequest startRecommendationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startRecommendationsValidateBeforeCall(xAmzTarget, startRecommendationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts the analysis of your source database to provide recommendations of target engines.&lt;/p&gt; &lt;p&gt;You can create recommendations for multiple source databases using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_BatchStartRecommendations.html\&quot;&gt;BatchStartRecommendations&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startRecommendationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startRecommendationsAsync(String xAmzTarget, StartRecommendationsRequest startRecommendationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = startRecommendationsValidateBeforeCall(xAmzTarget, startRecommendationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for startReplicationTask
     * @param xAmzTarget  (required)
     * @param startReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startReplicationTaskCall(String xAmzTarget, StartReplicationTaskMessage startReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startReplicationTaskMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.StartReplicationTask";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startReplicationTaskValidateBeforeCall(String xAmzTarget, StartReplicationTaskMessage startReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling startReplicationTask(Async)");
        }

        // verify the required parameter 'startReplicationTaskMessage' is set
        if (startReplicationTaskMessage == null) {
            throw new ApiException("Missing the required parameter 'startReplicationTaskMessage' when calling startReplicationTask(Async)");
        }

        return startReplicationTaskCall(xAmzTarget, startReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts the replication task.&lt;/p&gt; &lt;p&gt;For more information about DMS tasks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.html\&quot;&gt;Working with Migration Tasks &lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide.&lt;/i&gt; &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StartReplicationTaskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public StartReplicationTaskResponse startReplicationTask(String xAmzTarget, StartReplicationTaskMessage startReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StartReplicationTaskResponse> localVarResp = startReplicationTaskWithHttpInfo(xAmzTarget, startReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts the replication task.&lt;/p&gt; &lt;p&gt;For more information about DMS tasks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.html\&quot;&gt;Working with Migration Tasks &lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide.&lt;/i&gt; &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StartReplicationTaskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartReplicationTaskResponse> startReplicationTaskWithHttpInfo(String xAmzTarget, StartReplicationTaskMessage startReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startReplicationTaskValidateBeforeCall(xAmzTarget, startReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StartReplicationTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts the replication task.&lt;/p&gt; &lt;p&gt;For more information about DMS tasks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.html\&quot;&gt;Working with Migration Tasks &lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide.&lt;/i&gt; &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startReplicationTaskAsync(String xAmzTarget, StartReplicationTaskMessage startReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StartReplicationTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startReplicationTaskValidateBeforeCall(xAmzTarget, startReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StartReplicationTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startReplicationTaskAssessment
     * @param xAmzTarget  (required)
     * @param startReplicationTaskAssessmentMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startReplicationTaskAssessmentCall(String xAmzTarget, StartReplicationTaskAssessmentMessage startReplicationTaskAssessmentMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startReplicationTaskAssessmentMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.StartReplicationTaskAssessment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startReplicationTaskAssessmentValidateBeforeCall(String xAmzTarget, StartReplicationTaskAssessmentMessage startReplicationTaskAssessmentMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling startReplicationTaskAssessment(Async)");
        }

        // verify the required parameter 'startReplicationTaskAssessmentMessage' is set
        if (startReplicationTaskAssessmentMessage == null) {
            throw new ApiException("Missing the required parameter 'startReplicationTaskAssessmentMessage' when calling startReplicationTaskAssessment(Async)");
        }

        return startReplicationTaskAssessmentCall(xAmzTarget, startReplicationTaskAssessmentMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; Starts the replication task assessment for unsupported data types in the source database. &lt;/p&gt; &lt;p&gt;You can only use this operation for a task if the following conditions are true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The task must be in the &lt;code&gt;stopped&lt;/code&gt; state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The task must have successful connections to the source and target.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If either of these conditions are not met, an &lt;code&gt;InvalidResourceStateFault&lt;/code&gt; error will result. &lt;/p&gt; &lt;p&gt;For information about DMS task assessments, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html\&quot;&gt;Creating a task assessment report&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startReplicationTaskAssessmentMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StartReplicationTaskAssessmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public StartReplicationTaskAssessmentResponse startReplicationTaskAssessment(String xAmzTarget, StartReplicationTaskAssessmentMessage startReplicationTaskAssessmentMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StartReplicationTaskAssessmentResponse> localVarResp = startReplicationTaskAssessmentWithHttpInfo(xAmzTarget, startReplicationTaskAssessmentMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Starts the replication task assessment for unsupported data types in the source database. &lt;/p&gt; &lt;p&gt;You can only use this operation for a task if the following conditions are true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The task must be in the &lt;code&gt;stopped&lt;/code&gt; state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The task must have successful connections to the source and target.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If either of these conditions are not met, an &lt;code&gt;InvalidResourceStateFault&lt;/code&gt; error will result. &lt;/p&gt; &lt;p&gt;For information about DMS task assessments, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html\&quot;&gt;Creating a task assessment report&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startReplicationTaskAssessmentMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StartReplicationTaskAssessmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartReplicationTaskAssessmentResponse> startReplicationTaskAssessmentWithHttpInfo(String xAmzTarget, StartReplicationTaskAssessmentMessage startReplicationTaskAssessmentMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startReplicationTaskAssessmentValidateBeforeCall(xAmzTarget, startReplicationTaskAssessmentMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StartReplicationTaskAssessmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Starts the replication task assessment for unsupported data types in the source database. &lt;/p&gt; &lt;p&gt;You can only use this operation for a task if the following conditions are true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The task must be in the &lt;code&gt;stopped&lt;/code&gt; state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The task must have successful connections to the source and target.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If either of these conditions are not met, an &lt;code&gt;InvalidResourceStateFault&lt;/code&gt; error will result. &lt;/p&gt; &lt;p&gt;For information about DMS task assessments, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html\&quot;&gt;Creating a task assessment report&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startReplicationTaskAssessmentMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startReplicationTaskAssessmentAsync(String xAmzTarget, StartReplicationTaskAssessmentMessage startReplicationTaskAssessmentMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StartReplicationTaskAssessmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startReplicationTaskAssessmentValidateBeforeCall(xAmzTarget, startReplicationTaskAssessmentMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StartReplicationTaskAssessmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startReplicationTaskAssessmentRun
     * @param xAmzTarget  (required)
     * @param startReplicationTaskAssessmentRunMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KMSAccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> KMSDisabledFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> S3AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> S3ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startReplicationTaskAssessmentRunCall(String xAmzTarget, StartReplicationTaskAssessmentRunMessage startReplicationTaskAssessmentRunMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startReplicationTaskAssessmentRunMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.StartReplicationTaskAssessmentRun";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startReplicationTaskAssessmentRunValidateBeforeCall(String xAmzTarget, StartReplicationTaskAssessmentRunMessage startReplicationTaskAssessmentRunMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling startReplicationTaskAssessmentRun(Async)");
        }

        // verify the required parameter 'startReplicationTaskAssessmentRunMessage' is set
        if (startReplicationTaskAssessmentRunMessage == null) {
            throw new ApiException("Missing the required parameter 'startReplicationTaskAssessmentRunMessage' when calling startReplicationTaskAssessmentRun(Async)");
        }

        return startReplicationTaskAssessmentRunCall(xAmzTarget, startReplicationTaskAssessmentRunMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts a new premigration assessment run for one or more individual assessments of a migration task.&lt;/p&gt; &lt;p&gt;The assessments that you can specify depend on the source and target database engine and the migration type defined for the given task. To run this operation, your migration task must already be created. After you run this operation, you can review the status of each individual assessment. You can also run the migration task manually after the assessment run and its individual assessments complete.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startReplicationTaskAssessmentRunMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StartReplicationTaskAssessmentRunResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KMSAccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> KMSDisabledFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> S3AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> S3ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public StartReplicationTaskAssessmentRunResponse startReplicationTaskAssessmentRun(String xAmzTarget, StartReplicationTaskAssessmentRunMessage startReplicationTaskAssessmentRunMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StartReplicationTaskAssessmentRunResponse> localVarResp = startReplicationTaskAssessmentRunWithHttpInfo(xAmzTarget, startReplicationTaskAssessmentRunMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts a new premigration assessment run for one or more individual assessments of a migration task.&lt;/p&gt; &lt;p&gt;The assessments that you can specify depend on the source and target database engine and the migration type defined for the given task. To run this operation, your migration task must already be created. After you run this operation, you can review the status of each individual assessment. You can also run the migration task manually after the assessment run and its individual assessments complete.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startReplicationTaskAssessmentRunMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StartReplicationTaskAssessmentRunResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KMSAccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> KMSDisabledFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> S3AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> S3ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartReplicationTaskAssessmentRunResponse> startReplicationTaskAssessmentRunWithHttpInfo(String xAmzTarget, StartReplicationTaskAssessmentRunMessage startReplicationTaskAssessmentRunMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startReplicationTaskAssessmentRunValidateBeforeCall(xAmzTarget, startReplicationTaskAssessmentRunMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StartReplicationTaskAssessmentRunResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts a new premigration assessment run for one or more individual assessments of a migration task.&lt;/p&gt; &lt;p&gt;The assessments that you can specify depend on the source and target database engine and the migration type defined for the given task. To run this operation, your migration task must already be created. After you run this operation, you can review the status of each individual assessment. You can also run the migration task manually after the assessment run and its individual assessments complete.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param startReplicationTaskAssessmentRunMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> KMSAccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> KMSDisabledFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidStateFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> KMSNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> S3AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> S3ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> ResourceAlreadyExistsFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startReplicationTaskAssessmentRunAsync(String xAmzTarget, StartReplicationTaskAssessmentRunMessage startReplicationTaskAssessmentRunMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StartReplicationTaskAssessmentRunResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startReplicationTaskAssessmentRunValidateBeforeCall(xAmzTarget, startReplicationTaskAssessmentRunMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StartReplicationTaskAssessmentRunResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopReplicationTask
     * @param xAmzTarget  (required)
     * @param stopReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopReplicationTaskCall(String xAmzTarget, StopReplicationTaskMessage stopReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stopReplicationTaskMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.StopReplicationTask";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopReplicationTaskValidateBeforeCall(String xAmzTarget, StopReplicationTaskMessage stopReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling stopReplicationTask(Async)");
        }

        // verify the required parameter 'stopReplicationTaskMessage' is set
        if (stopReplicationTaskMessage == null) {
            throw new ApiException("Missing the required parameter 'stopReplicationTaskMessage' when calling stopReplicationTask(Async)");
        }

        return stopReplicationTaskCall(xAmzTarget, stopReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Stops the replication task.
     * @param xAmzTarget  (required)
     * @param stopReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StopReplicationTaskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public StopReplicationTaskResponse stopReplicationTask(String xAmzTarget, StopReplicationTaskMessage stopReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StopReplicationTaskResponse> localVarResp = stopReplicationTaskWithHttpInfo(xAmzTarget, stopReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Stops the replication task.
     * @param xAmzTarget  (required)
     * @param stopReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StopReplicationTaskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StopReplicationTaskResponse> stopReplicationTaskWithHttpInfo(String xAmzTarget, StopReplicationTaskMessage stopReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = stopReplicationTaskValidateBeforeCall(xAmzTarget, stopReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StopReplicationTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stops the replication task.
     * @param xAmzTarget  (required)
     * @param stopReplicationTaskMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopReplicationTaskAsync(String xAmzTarget, StopReplicationTaskMessage stopReplicationTaskMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StopReplicationTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopReplicationTaskValidateBeforeCall(xAmzTarget, stopReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StopReplicationTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testConnection
     * @param xAmzTarget  (required)
     * @param testConnectionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testConnectionCall(String xAmzTarget, TestConnectionMessage testConnectionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testConnectionMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.TestConnection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testConnectionValidateBeforeCall(String xAmzTarget, TestConnectionMessage testConnectionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling testConnection(Async)");
        }

        // verify the required parameter 'testConnectionMessage' is set
        if (testConnectionMessage == null) {
            throw new ApiException("Missing the required parameter 'testConnectionMessage' when calling testConnection(Async)");
        }

        return testConnectionCall(xAmzTarget, testConnectionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Tests the connection between the replication instance and the endpoint.
     * @param xAmzTarget  (required)
     * @param testConnectionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return TestConnectionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public TestConnectionResponse testConnection(String xAmzTarget, TestConnectionMessage testConnectionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<TestConnectionResponse> localVarResp = testConnectionWithHttpInfo(xAmzTarget, testConnectionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Tests the connection between the replication instance and the endpoint.
     * @param xAmzTarget  (required)
     * @param testConnectionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;TestConnectionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestConnectionResponse> testConnectionWithHttpInfo(String xAmzTarget, TestConnectionMessage testConnectionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = testConnectionValidateBeforeCall(xAmzTarget, testConnectionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<TestConnectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Tests the connection between the replication instance and the endpoint.
     * @param xAmzTarget  (required)
     * @param testConnectionMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> KMSKeyNotAccessibleFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testConnectionAsync(String xAmzTarget, TestConnectionMessage testConnectionMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<TestConnectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testConnectionValidateBeforeCall(xAmzTarget, testConnectionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<TestConnectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSubscriptionsToEventBridge
     * @param xAmzTarget  (required)
     * @param updateSubscriptionsToEventBridgeMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionsToEventBridgeCall(String xAmzTarget, UpdateSubscriptionsToEventBridgeMessage updateSubscriptionsToEventBridgeMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSubscriptionsToEventBridgeMessage;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AmazonDMSv20160101.UpdateSubscriptionsToEventBridge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionsToEventBridgeValidateBeforeCall(String xAmzTarget, UpdateSubscriptionsToEventBridgeMessage updateSubscriptionsToEventBridgeMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateSubscriptionsToEventBridge(Async)");
        }

        // verify the required parameter 'updateSubscriptionsToEventBridgeMessage' is set
        if (updateSubscriptionsToEventBridgeMessage == null) {
            throw new ApiException("Missing the required parameter 'updateSubscriptionsToEventBridgeMessage' when calling updateSubscriptionsToEventBridge(Async)");
        }

        return updateSubscriptionsToEventBridgeCall(xAmzTarget, updateSubscriptionsToEventBridgeMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Migrates 10 active and enabled Amazon SNS subscriptions at a time and converts them to corresponding Amazon EventBridge rules. By default, this operation migrates subscriptions only when all your replication instance versions are 3.4.6 or higher. If any replication instances are from versions earlier than 3.4.6, the operation raises an error and tells you to upgrade these instances to version 3.4.6 or higher. To enable migration regardless of version, set the &lt;code&gt;Force&lt;/code&gt; option to true. However, if you don&#39;t upgrade instances earlier than version 3.4.6, some types of events might not be available when you use Amazon EventBridge.&lt;/p&gt; &lt;p&gt;To call this operation, make sure that you have certain permissions added to your user account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html#CHAP_Events-migrate-to-eventbridge\&quot;&gt;Migrating event subscriptions to Amazon EventBridge&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Database Migration Service User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateSubscriptionsToEventBridgeMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateSubscriptionsToEventBridgeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSubscriptionsToEventBridgeResponse updateSubscriptionsToEventBridge(String xAmzTarget, UpdateSubscriptionsToEventBridgeMessage updateSubscriptionsToEventBridgeMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateSubscriptionsToEventBridgeResponse> localVarResp = updateSubscriptionsToEventBridgeWithHttpInfo(xAmzTarget, updateSubscriptionsToEventBridgeMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Migrates 10 active and enabled Amazon SNS subscriptions at a time and converts them to corresponding Amazon EventBridge rules. By default, this operation migrates subscriptions only when all your replication instance versions are 3.4.6 or higher. If any replication instances are from versions earlier than 3.4.6, the operation raises an error and tells you to upgrade these instances to version 3.4.6 or higher. To enable migration regardless of version, set the &lt;code&gt;Force&lt;/code&gt; option to true. However, if you don&#39;t upgrade instances earlier than version 3.4.6, some types of events might not be available when you use Amazon EventBridge.&lt;/p&gt; &lt;p&gt;To call this operation, make sure that you have certain permissions added to your user account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html#CHAP_Events-migrate-to-eventbridge\&quot;&gt;Migrating event subscriptions to Amazon EventBridge&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Database Migration Service User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateSubscriptionsToEventBridgeMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateSubscriptionsToEventBridgeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSubscriptionsToEventBridgeResponse> updateSubscriptionsToEventBridgeWithHttpInfo(String xAmzTarget, UpdateSubscriptionsToEventBridgeMessage updateSubscriptionsToEventBridgeMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionsToEventBridgeValidateBeforeCall(xAmzTarget, updateSubscriptionsToEventBridgeMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateSubscriptionsToEventBridgeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Migrates 10 active and enabled Amazon SNS subscriptions at a time and converts them to corresponding Amazon EventBridge rules. By default, this operation migrates subscriptions only when all your replication instance versions are 3.4.6 or higher. If any replication instances are from versions earlier than 3.4.6, the operation raises an error and tells you to upgrade these instances to version 3.4.6 or higher. To enable migration regardless of version, set the &lt;code&gt;Force&lt;/code&gt; option to true. However, if you don&#39;t upgrade instances earlier than version 3.4.6, some types of events might not be available when you use Amazon EventBridge.&lt;/p&gt; &lt;p&gt;To call this operation, make sure that you have certain permissions added to your user account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html#CHAP_Events-migrate-to-eventbridge\&quot;&gt;Migrating event subscriptions to Amazon EventBridge&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Database Migration Service User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateSubscriptionsToEventBridgeMessage  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidResourceStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSubscriptionsToEventBridgeAsync(String xAmzTarget, UpdateSubscriptionsToEventBridgeMessage updateSubscriptionsToEventBridgeMessage, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateSubscriptionsToEventBridgeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionsToEventBridgeValidateBeforeCall(xAmzTarget, updateSubscriptionsToEventBridgeMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateSubscriptionsToEventBridgeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
