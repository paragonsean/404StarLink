/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p/&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:28.765689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModifyReplicationInstanceMessage {
  public static final String SERIALIZED_NAME_REPLICATION_INSTANCE_ARN = "ReplicationInstanceArn";
  @SerializedName(SERIALIZED_NAME_REPLICATION_INSTANCE_ARN)
  private String replicationInstanceArn;

  public static final String SERIALIZED_NAME_ALLOCATED_STORAGE = "AllocatedStorage";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_STORAGE)
  private Integer allocatedStorage;

  public static final String SERIALIZED_NAME_APPLY_IMMEDIATELY = "ApplyImmediately";
  @SerializedName(SERIALIZED_NAME_APPLY_IMMEDIATELY)
  private Boolean applyImmediately;

  public static final String SERIALIZED_NAME_REPLICATION_INSTANCE_CLASS = "ReplicationInstanceClass";
  @SerializedName(SERIALIZED_NAME_REPLICATION_INSTANCE_CLASS)
  private String replicationInstanceClass;

  public static final String SERIALIZED_NAME_VPC_SECURITY_GROUP_IDS = "VpcSecurityGroupIds";
  @SerializedName(SERIALIZED_NAME_VPC_SECURITY_GROUP_IDS)
  private List vpcSecurityGroupIds;

  public static final String SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW = "PreferredMaintenanceWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW)
  private String preferredMaintenanceWindow;

  public static final String SERIALIZED_NAME_MULTI_A_Z = "MultiAZ";
  @SerializedName(SERIALIZED_NAME_MULTI_A_Z)
  private Boolean multiAZ;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_ALLOW_MAJOR_VERSION_UPGRADE = "AllowMajorVersionUpgrade";
  @SerializedName(SERIALIZED_NAME_ALLOW_MAJOR_VERSION_UPGRADE)
  private Boolean allowMajorVersionUpgrade;

  public static final String SERIALIZED_NAME_AUTO_MINOR_VERSION_UPGRADE = "AutoMinorVersionUpgrade";
  @SerializedName(SERIALIZED_NAME_AUTO_MINOR_VERSION_UPGRADE)
  private Boolean autoMinorVersionUpgrade;

  public static final String SERIALIZED_NAME_REPLICATION_INSTANCE_IDENTIFIER = "ReplicationInstanceIdentifier";
  @SerializedName(SERIALIZED_NAME_REPLICATION_INSTANCE_IDENTIFIER)
  private String replicationInstanceIdentifier;

  public static final String SERIALIZED_NAME_NETWORK_TYPE = "NetworkType";
  @SerializedName(SERIALIZED_NAME_NETWORK_TYPE)
  private String networkType;

  public ModifyReplicationInstanceMessage() {
  }

  public ModifyReplicationInstanceMessage replicationInstanceArn(String replicationInstanceArn) {
    this.replicationInstanceArn = replicationInstanceArn;
    return this;
  }

  /**
   * Get replicationInstanceArn
   * @return replicationInstanceArn
   */
  @javax.annotation.Nonnull
  public String getReplicationInstanceArn() {
    return replicationInstanceArn;
  }

  public void setReplicationInstanceArn(String replicationInstanceArn) {
    this.replicationInstanceArn = replicationInstanceArn;
  }


  public ModifyReplicationInstanceMessage allocatedStorage(Integer allocatedStorage) {
    this.allocatedStorage = allocatedStorage;
    return this;
  }

  /**
   * Get allocatedStorage
   * @return allocatedStorage
   */
  @javax.annotation.Nullable
  public Integer getAllocatedStorage() {
    return allocatedStorage;
  }

  public void setAllocatedStorage(Integer allocatedStorage) {
    this.allocatedStorage = allocatedStorage;
  }


  public ModifyReplicationInstanceMessage applyImmediately(Boolean applyImmediately) {
    this.applyImmediately = applyImmediately;
    return this;
  }

  /**
   * Get applyImmediately
   * @return applyImmediately
   */
  @javax.annotation.Nullable
  public Boolean getApplyImmediately() {
    return applyImmediately;
  }

  public void setApplyImmediately(Boolean applyImmediately) {
    this.applyImmediately = applyImmediately;
  }


  public ModifyReplicationInstanceMessage replicationInstanceClass(String replicationInstanceClass) {
    this.replicationInstanceClass = replicationInstanceClass;
    return this;
  }

  /**
   * Get replicationInstanceClass
   * @return replicationInstanceClass
   */
  @javax.annotation.Nullable
  public String getReplicationInstanceClass() {
    return replicationInstanceClass;
  }

  public void setReplicationInstanceClass(String replicationInstanceClass) {
    this.replicationInstanceClass = replicationInstanceClass;
  }


  public ModifyReplicationInstanceMessage vpcSecurityGroupIds(List vpcSecurityGroupIds) {
    this.vpcSecurityGroupIds = vpcSecurityGroupIds;
    return this;
  }

  /**
   * Get vpcSecurityGroupIds
   * @return vpcSecurityGroupIds
   */
  @javax.annotation.Nullable
  public List getVpcSecurityGroupIds() {
    return vpcSecurityGroupIds;
  }

  public void setVpcSecurityGroupIds(List vpcSecurityGroupIds) {
    this.vpcSecurityGroupIds = vpcSecurityGroupIds;
  }


  public ModifyReplicationInstanceMessage preferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
    return this;
  }

  /**
   * Get preferredMaintenanceWindow
   * @return preferredMaintenanceWindow
   */
  @javax.annotation.Nullable
  public String getPreferredMaintenanceWindow() {
    return preferredMaintenanceWindow;
  }

  public void setPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
  }


  public ModifyReplicationInstanceMessage multiAZ(Boolean multiAZ) {
    this.multiAZ = multiAZ;
    return this;
  }

  /**
   * Get multiAZ
   * @return multiAZ
   */
  @javax.annotation.Nullable
  public Boolean getMultiAZ() {
    return multiAZ;
  }

  public void setMultiAZ(Boolean multiAZ) {
    this.multiAZ = multiAZ;
  }


  public ModifyReplicationInstanceMessage engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public ModifyReplicationInstanceMessage allowMajorVersionUpgrade(Boolean allowMajorVersionUpgrade) {
    this.allowMajorVersionUpgrade = allowMajorVersionUpgrade;
    return this;
  }

  /**
   * Get allowMajorVersionUpgrade
   * @return allowMajorVersionUpgrade
   */
  @javax.annotation.Nullable
  public Boolean getAllowMajorVersionUpgrade() {
    return allowMajorVersionUpgrade;
  }

  public void setAllowMajorVersionUpgrade(Boolean allowMajorVersionUpgrade) {
    this.allowMajorVersionUpgrade = allowMajorVersionUpgrade;
  }


  public ModifyReplicationInstanceMessage autoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
    this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
    return this;
  }

  /**
   * Get autoMinorVersionUpgrade
   * @return autoMinorVersionUpgrade
   */
  @javax.annotation.Nullable
  public Boolean getAutoMinorVersionUpgrade() {
    return autoMinorVersionUpgrade;
  }

  public void setAutoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
    this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
  }


  public ModifyReplicationInstanceMessage replicationInstanceIdentifier(String replicationInstanceIdentifier) {
    this.replicationInstanceIdentifier = replicationInstanceIdentifier;
    return this;
  }

  /**
   * Get replicationInstanceIdentifier
   * @return replicationInstanceIdentifier
   */
  @javax.annotation.Nullable
  public String getReplicationInstanceIdentifier() {
    return replicationInstanceIdentifier;
  }

  public void setReplicationInstanceIdentifier(String replicationInstanceIdentifier) {
    this.replicationInstanceIdentifier = replicationInstanceIdentifier;
  }


  public ModifyReplicationInstanceMessage networkType(String networkType) {
    this.networkType = networkType;
    return this;
  }

  /**
   * Get networkType
   * @return networkType
   */
  @javax.annotation.Nullable
  public String getNetworkType() {
    return networkType;
  }

  public void setNetworkType(String networkType) {
    this.networkType = networkType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModifyReplicationInstanceMessage modifyReplicationInstanceMessage = (ModifyReplicationInstanceMessage) o;
    return Objects.equals(this.replicationInstanceArn, modifyReplicationInstanceMessage.replicationInstanceArn) &&
        Objects.equals(this.allocatedStorage, modifyReplicationInstanceMessage.allocatedStorage) &&
        Objects.equals(this.applyImmediately, modifyReplicationInstanceMessage.applyImmediately) &&
        Objects.equals(this.replicationInstanceClass, modifyReplicationInstanceMessage.replicationInstanceClass) &&
        Objects.equals(this.vpcSecurityGroupIds, modifyReplicationInstanceMessage.vpcSecurityGroupIds) &&
        Objects.equals(this.preferredMaintenanceWindow, modifyReplicationInstanceMessage.preferredMaintenanceWindow) &&
        Objects.equals(this.multiAZ, modifyReplicationInstanceMessage.multiAZ) &&
        Objects.equals(this.engineVersion, modifyReplicationInstanceMessage.engineVersion) &&
        Objects.equals(this.allowMajorVersionUpgrade, modifyReplicationInstanceMessage.allowMajorVersionUpgrade) &&
        Objects.equals(this.autoMinorVersionUpgrade, modifyReplicationInstanceMessage.autoMinorVersionUpgrade) &&
        Objects.equals(this.replicationInstanceIdentifier, modifyReplicationInstanceMessage.replicationInstanceIdentifier) &&
        Objects.equals(this.networkType, modifyReplicationInstanceMessage.networkType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(replicationInstanceArn, allocatedStorage, applyImmediately, replicationInstanceClass, vpcSecurityGroupIds, preferredMaintenanceWindow, multiAZ, engineVersion, allowMajorVersionUpgrade, autoMinorVersionUpgrade, replicationInstanceIdentifier, networkType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModifyReplicationInstanceMessage {\n");
    sb.append("    replicationInstanceArn: ").append(toIndentedString(replicationInstanceArn)).append("\n");
    sb.append("    allocatedStorage: ").append(toIndentedString(allocatedStorage)).append("\n");
    sb.append("    applyImmediately: ").append(toIndentedString(applyImmediately)).append("\n");
    sb.append("    replicationInstanceClass: ").append(toIndentedString(replicationInstanceClass)).append("\n");
    sb.append("    vpcSecurityGroupIds: ").append(toIndentedString(vpcSecurityGroupIds)).append("\n");
    sb.append("    preferredMaintenanceWindow: ").append(toIndentedString(preferredMaintenanceWindow)).append("\n");
    sb.append("    multiAZ: ").append(toIndentedString(multiAZ)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    allowMajorVersionUpgrade: ").append(toIndentedString(allowMajorVersionUpgrade)).append("\n");
    sb.append("    autoMinorVersionUpgrade: ").append(toIndentedString(autoMinorVersionUpgrade)).append("\n");
    sb.append("    replicationInstanceIdentifier: ").append(toIndentedString(replicationInstanceIdentifier)).append("\n");
    sb.append("    networkType: ").append(toIndentedString(networkType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReplicationInstanceArn");
    openapiFields.add("AllocatedStorage");
    openapiFields.add("ApplyImmediately");
    openapiFields.add("ReplicationInstanceClass");
    openapiFields.add("VpcSecurityGroupIds");
    openapiFields.add("PreferredMaintenanceWindow");
    openapiFields.add("MultiAZ");
    openapiFields.add("EngineVersion");
    openapiFields.add("AllowMajorVersionUpgrade");
    openapiFields.add("AutoMinorVersionUpgrade");
    openapiFields.add("ReplicationInstanceIdentifier");
    openapiFields.add("NetworkType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ReplicationInstanceArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModifyReplicationInstanceMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModifyReplicationInstanceMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModifyReplicationInstanceMessage is not found in the empty JSON string", ModifyReplicationInstanceMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModifyReplicationInstanceMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModifyReplicationInstanceMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModifyReplicationInstanceMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ReplicationInstanceArn`
      String.validateJsonElement(jsonObj.get("ReplicationInstanceArn"));
      // validate the optional field `AllocatedStorage`
      if (jsonObj.get("AllocatedStorage") != null && !jsonObj.get("AllocatedStorage").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AllocatedStorage"));
      }
      // validate the optional field `ApplyImmediately`
      if (jsonObj.get("ApplyImmediately") != null && !jsonObj.get("ApplyImmediately").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ApplyImmediately"));
      }
      // validate the optional field `ReplicationInstanceClass`
      if (jsonObj.get("ReplicationInstanceClass") != null && !jsonObj.get("ReplicationInstanceClass").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationInstanceClass"));
      }
      // validate the optional field `VpcSecurityGroupIds`
      if (jsonObj.get("VpcSecurityGroupIds") != null && !jsonObj.get("VpcSecurityGroupIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("VpcSecurityGroupIds"));
      }
      // validate the optional field `PreferredMaintenanceWindow`
      if (jsonObj.get("PreferredMaintenanceWindow") != null && !jsonObj.get("PreferredMaintenanceWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreferredMaintenanceWindow"));
      }
      // validate the optional field `MultiAZ`
      if (jsonObj.get("MultiAZ") != null && !jsonObj.get("MultiAZ").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("MultiAZ"));
      }
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `AllowMajorVersionUpgrade`
      if (jsonObj.get("AllowMajorVersionUpgrade") != null && !jsonObj.get("AllowMajorVersionUpgrade").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AllowMajorVersionUpgrade"));
      }
      // validate the optional field `AutoMinorVersionUpgrade`
      if (jsonObj.get("AutoMinorVersionUpgrade") != null && !jsonObj.get("AutoMinorVersionUpgrade").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AutoMinorVersionUpgrade"));
      }
      // validate the optional field `ReplicationInstanceIdentifier`
      if (jsonObj.get("ReplicationInstanceIdentifier") != null && !jsonObj.get("ReplicationInstanceIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationInstanceIdentifier"));
      }
      // validate the optional field `NetworkType`
      if (jsonObj.get("NetworkType") != null && !jsonObj.get("NetworkType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NetworkType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModifyReplicationInstanceMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModifyReplicationInstanceMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModifyReplicationInstanceMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModifyReplicationInstanceMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<ModifyReplicationInstanceMessage>() {
           @Override
           public void write(JsonWriter out, ModifyReplicationInstanceMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModifyReplicationInstanceMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModifyReplicationInstanceMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModifyReplicationInstanceMessage
   * @throws IOException if the JSON string is invalid with respect to ModifyReplicationInstanceMessage
   */
  public static ModifyReplicationInstanceMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModifyReplicationInstanceMessage.class);
  }

  /**
   * Convert an instance of ModifyReplicationInstanceMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

