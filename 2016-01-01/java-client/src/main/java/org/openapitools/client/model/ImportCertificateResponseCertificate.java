/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImportCertificateResponseCertificate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:28.765689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportCertificateResponseCertificate {
  public static final String SERIALIZED_NAME_CERTIFICATE_IDENTIFIER = "CertificateIdentifier";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_IDENTIFIER)
  private String certificateIdentifier;

  public static final String SERIALIZED_NAME_CERTIFICATE_CREATION_DATE = "CertificateCreationDate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_CREATION_DATE)
  private OffsetDateTime certificateCreationDate;

  public static final String SERIALIZED_NAME_CERTIFICATE_PEM = "CertificatePem";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_PEM)
  private String certificatePem;

  public static final String SERIALIZED_NAME_CERTIFICATE_WALLET = "CertificateWallet";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_WALLET)
  private String certificateWallet;

  public static final String SERIALIZED_NAME_CERTIFICATE_ARN = "CertificateArn";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ARN)
  private String certificateArn;

  public static final String SERIALIZED_NAME_CERTIFICATE_OWNER = "CertificateOwner";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_OWNER)
  private String certificateOwner;

  public static final String SERIALIZED_NAME_VALID_FROM_DATE = "ValidFromDate";
  @SerializedName(SERIALIZED_NAME_VALID_FROM_DATE)
  private OffsetDateTime validFromDate;

  public static final String SERIALIZED_NAME_VALID_TO_DATE = "ValidToDate";
  @SerializedName(SERIALIZED_NAME_VALID_TO_DATE)
  private OffsetDateTime validToDate;

  public static final String SERIALIZED_NAME_SIGNING_ALGORITHM = "SigningAlgorithm";
  @SerializedName(SERIALIZED_NAME_SIGNING_ALGORITHM)
  private String signingAlgorithm;

  public static final String SERIALIZED_NAME_KEY_LENGTH = "KeyLength";
  @SerializedName(SERIALIZED_NAME_KEY_LENGTH)
  private Integer keyLength;

  public ImportCertificateResponseCertificate() {
  }

  public ImportCertificateResponseCertificate certificateIdentifier(String certificateIdentifier) {
    this.certificateIdentifier = certificateIdentifier;
    return this;
  }

  /**
   * Get certificateIdentifier
   * @return certificateIdentifier
   */
  @javax.annotation.Nullable
  public String getCertificateIdentifier() {
    return certificateIdentifier;
  }

  public void setCertificateIdentifier(String certificateIdentifier) {
    this.certificateIdentifier = certificateIdentifier;
  }


  public ImportCertificateResponseCertificate certificateCreationDate(OffsetDateTime certificateCreationDate) {
    this.certificateCreationDate = certificateCreationDate;
    return this;
  }

  /**
   * Get certificateCreationDate
   * @return certificateCreationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCertificateCreationDate() {
    return certificateCreationDate;
  }

  public void setCertificateCreationDate(OffsetDateTime certificateCreationDate) {
    this.certificateCreationDate = certificateCreationDate;
  }


  public ImportCertificateResponseCertificate certificatePem(String certificatePem) {
    this.certificatePem = certificatePem;
    return this;
  }

  /**
   * Get certificatePem
   * @return certificatePem
   */
  @javax.annotation.Nullable
  public String getCertificatePem() {
    return certificatePem;
  }

  public void setCertificatePem(String certificatePem) {
    this.certificatePem = certificatePem;
  }


  public ImportCertificateResponseCertificate certificateWallet(String certificateWallet) {
    this.certificateWallet = certificateWallet;
    return this;
  }

  /**
   * Get certificateWallet
   * @return certificateWallet
   */
  @javax.annotation.Nullable
  public String getCertificateWallet() {
    return certificateWallet;
  }

  public void setCertificateWallet(String certificateWallet) {
    this.certificateWallet = certificateWallet;
  }


  public ImportCertificateResponseCertificate certificateArn(String certificateArn) {
    this.certificateArn = certificateArn;
    return this;
  }

  /**
   * Get certificateArn
   * @return certificateArn
   */
  @javax.annotation.Nullable
  public String getCertificateArn() {
    return certificateArn;
  }

  public void setCertificateArn(String certificateArn) {
    this.certificateArn = certificateArn;
  }


  public ImportCertificateResponseCertificate certificateOwner(String certificateOwner) {
    this.certificateOwner = certificateOwner;
    return this;
  }

  /**
   * Get certificateOwner
   * @return certificateOwner
   */
  @javax.annotation.Nullable
  public String getCertificateOwner() {
    return certificateOwner;
  }

  public void setCertificateOwner(String certificateOwner) {
    this.certificateOwner = certificateOwner;
  }


  public ImportCertificateResponseCertificate validFromDate(OffsetDateTime validFromDate) {
    this.validFromDate = validFromDate;
    return this;
  }

  /**
   * Get validFromDate
   * @return validFromDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidFromDate() {
    return validFromDate;
  }

  public void setValidFromDate(OffsetDateTime validFromDate) {
    this.validFromDate = validFromDate;
  }


  public ImportCertificateResponseCertificate validToDate(OffsetDateTime validToDate) {
    this.validToDate = validToDate;
    return this;
  }

  /**
   * Get validToDate
   * @return validToDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidToDate() {
    return validToDate;
  }

  public void setValidToDate(OffsetDateTime validToDate) {
    this.validToDate = validToDate;
  }


  public ImportCertificateResponseCertificate signingAlgorithm(String signingAlgorithm) {
    this.signingAlgorithm = signingAlgorithm;
    return this;
  }

  /**
   * Get signingAlgorithm
   * @return signingAlgorithm
   */
  @javax.annotation.Nullable
  public String getSigningAlgorithm() {
    return signingAlgorithm;
  }

  public void setSigningAlgorithm(String signingAlgorithm) {
    this.signingAlgorithm = signingAlgorithm;
  }


  public ImportCertificateResponseCertificate keyLength(Integer keyLength) {
    this.keyLength = keyLength;
    return this;
  }

  /**
   * Get keyLength
   * @return keyLength
   */
  @javax.annotation.Nullable
  public Integer getKeyLength() {
    return keyLength;
  }

  public void setKeyLength(Integer keyLength) {
    this.keyLength = keyLength;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportCertificateResponseCertificate importCertificateResponseCertificate = (ImportCertificateResponseCertificate) o;
    return Objects.equals(this.certificateIdentifier, importCertificateResponseCertificate.certificateIdentifier) &&
        Objects.equals(this.certificateCreationDate, importCertificateResponseCertificate.certificateCreationDate) &&
        Objects.equals(this.certificatePem, importCertificateResponseCertificate.certificatePem) &&
        Objects.equals(this.certificateWallet, importCertificateResponseCertificate.certificateWallet) &&
        Objects.equals(this.certificateArn, importCertificateResponseCertificate.certificateArn) &&
        Objects.equals(this.certificateOwner, importCertificateResponseCertificate.certificateOwner) &&
        Objects.equals(this.validFromDate, importCertificateResponseCertificate.validFromDate) &&
        Objects.equals(this.validToDate, importCertificateResponseCertificate.validToDate) &&
        Objects.equals(this.signingAlgorithm, importCertificateResponseCertificate.signingAlgorithm) &&
        Objects.equals(this.keyLength, importCertificateResponseCertificate.keyLength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateIdentifier, certificateCreationDate, certificatePem, certificateWallet, certificateArn, certificateOwner, validFromDate, validToDate, signingAlgorithm, keyLength);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportCertificateResponseCertificate {\n");
    sb.append("    certificateIdentifier: ").append(toIndentedString(certificateIdentifier)).append("\n");
    sb.append("    certificateCreationDate: ").append(toIndentedString(certificateCreationDate)).append("\n");
    sb.append("    certificatePem: ").append(toIndentedString(certificatePem)).append("\n");
    sb.append("    certificateWallet: ").append(toIndentedString(certificateWallet)).append("\n");
    sb.append("    certificateArn: ").append(toIndentedString(certificateArn)).append("\n");
    sb.append("    certificateOwner: ").append(toIndentedString(certificateOwner)).append("\n");
    sb.append("    validFromDate: ").append(toIndentedString(validFromDate)).append("\n");
    sb.append("    validToDate: ").append(toIndentedString(validToDate)).append("\n");
    sb.append("    signingAlgorithm: ").append(toIndentedString(signingAlgorithm)).append("\n");
    sb.append("    keyLength: ").append(toIndentedString(keyLength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CertificateIdentifier");
    openapiFields.add("CertificateCreationDate");
    openapiFields.add("CertificatePem");
    openapiFields.add("CertificateWallet");
    openapiFields.add("CertificateArn");
    openapiFields.add("CertificateOwner");
    openapiFields.add("ValidFromDate");
    openapiFields.add("ValidToDate");
    openapiFields.add("SigningAlgorithm");
    openapiFields.add("KeyLength");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportCertificateResponseCertificate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportCertificateResponseCertificate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportCertificateResponseCertificate is not found in the empty JSON string", ImportCertificateResponseCertificate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportCertificateResponseCertificate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportCertificateResponseCertificate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CertificateIdentifier`
      if (jsonObj.get("CertificateIdentifier") != null && !jsonObj.get("CertificateIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CertificateIdentifier"));
      }
      // validate the optional field `CertificateCreationDate`
      if (jsonObj.get("CertificateCreationDate") != null && !jsonObj.get("CertificateCreationDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CertificateCreationDate"));
      }
      // validate the optional field `CertificatePem`
      if (jsonObj.get("CertificatePem") != null && !jsonObj.get("CertificatePem").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CertificatePem"));
      }
      // validate the optional field `CertificateWallet`
      if (jsonObj.get("CertificateWallet") != null && !jsonObj.get("CertificateWallet").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CertificateWallet"));
      }
      // validate the optional field `CertificateArn`
      if (jsonObj.get("CertificateArn") != null && !jsonObj.get("CertificateArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CertificateArn"));
      }
      // validate the optional field `CertificateOwner`
      if (jsonObj.get("CertificateOwner") != null && !jsonObj.get("CertificateOwner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CertificateOwner"));
      }
      // validate the optional field `ValidFromDate`
      if (jsonObj.get("ValidFromDate") != null && !jsonObj.get("ValidFromDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ValidFromDate"));
      }
      // validate the optional field `ValidToDate`
      if (jsonObj.get("ValidToDate") != null && !jsonObj.get("ValidToDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ValidToDate"));
      }
      // validate the optional field `SigningAlgorithm`
      if (jsonObj.get("SigningAlgorithm") != null && !jsonObj.get("SigningAlgorithm").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SigningAlgorithm"));
      }
      // validate the optional field `KeyLength`
      if (jsonObj.get("KeyLength") != null && !jsonObj.get("KeyLength").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("KeyLength"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportCertificateResponseCertificate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportCertificateResponseCertificate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportCertificateResponseCertificate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportCertificateResponseCertificate.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportCertificateResponseCertificate>() {
           @Override
           public void write(JsonWriter out, ImportCertificateResponseCertificate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportCertificateResponseCertificate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportCertificateResponseCertificate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportCertificateResponseCertificate
   * @throws IOException if the JSON string is invalid with respect to ImportCertificateResponseCertificate
   */
  public static ImportCertificateResponseCertificate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportCertificateResponseCertificate.class);
  }

  /**
   * Convert an instance of ImportCertificateResponseCertificate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

