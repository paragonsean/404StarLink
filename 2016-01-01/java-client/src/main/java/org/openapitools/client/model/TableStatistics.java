/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides a collection of table statistics in response to a request by the &lt;code&gt;DescribeTableStatistics&lt;/code&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:28.765689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableStatistics {
  public static final String SERIALIZED_NAME_SCHEMA_NAME = "SchemaName";
  @SerializedName(SERIALIZED_NAME_SCHEMA_NAME)
  private String schemaName;

  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_INSERTS = "Inserts";
  @SerializedName(SERIALIZED_NAME_INSERTS)
  private Integer inserts;

  public static final String SERIALIZED_NAME_DELETES = "Deletes";
  @SerializedName(SERIALIZED_NAME_DELETES)
  private Integer deletes;

  public static final String SERIALIZED_NAME_UPDATES = "Updates";
  @SerializedName(SERIALIZED_NAME_UPDATES)
  private Integer updates;

  public static final String SERIALIZED_NAME_DDLS = "Ddls";
  @SerializedName(SERIALIZED_NAME_DDLS)
  private Integer ddls;

  public static final String SERIALIZED_NAME_APPLIED_INSERTS = "AppliedInserts";
  @SerializedName(SERIALIZED_NAME_APPLIED_INSERTS)
  private Integer appliedInserts;

  public static final String SERIALIZED_NAME_APPLIED_DELETES = "AppliedDeletes";
  @SerializedName(SERIALIZED_NAME_APPLIED_DELETES)
  private Integer appliedDeletes;

  public static final String SERIALIZED_NAME_APPLIED_UPDATES = "AppliedUpdates";
  @SerializedName(SERIALIZED_NAME_APPLIED_UPDATES)
  private Integer appliedUpdates;

  public static final String SERIALIZED_NAME_APPLIED_DDLS = "AppliedDdls";
  @SerializedName(SERIALIZED_NAME_APPLIED_DDLS)
  private Integer appliedDdls;

  public static final String SERIALIZED_NAME_FULL_LOAD_ROWS = "FullLoadRows";
  @SerializedName(SERIALIZED_NAME_FULL_LOAD_ROWS)
  private Integer fullLoadRows;

  public static final String SERIALIZED_NAME_FULL_LOAD_CONDTNL_CHK_FAILED_ROWS = "FullLoadCondtnlChkFailedRows";
  @SerializedName(SERIALIZED_NAME_FULL_LOAD_CONDTNL_CHK_FAILED_ROWS)
  private Integer fullLoadCondtnlChkFailedRows;

  public static final String SERIALIZED_NAME_FULL_LOAD_ERROR_ROWS = "FullLoadErrorRows";
  @SerializedName(SERIALIZED_NAME_FULL_LOAD_ERROR_ROWS)
  private Integer fullLoadErrorRows;

  public static final String SERIALIZED_NAME_FULL_LOAD_START_TIME = "FullLoadStartTime";
  @SerializedName(SERIALIZED_NAME_FULL_LOAD_START_TIME)
  private OffsetDateTime fullLoadStartTime;

  public static final String SERIALIZED_NAME_FULL_LOAD_END_TIME = "FullLoadEndTime";
  @SerializedName(SERIALIZED_NAME_FULL_LOAD_END_TIME)
  private OffsetDateTime fullLoadEndTime;

  public static final String SERIALIZED_NAME_FULL_LOAD_RELOADED = "FullLoadReloaded";
  @SerializedName(SERIALIZED_NAME_FULL_LOAD_RELOADED)
  private Boolean fullLoadReloaded;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIME = "LastUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIME)
  private OffsetDateTime lastUpdateTime;

  public static final String SERIALIZED_NAME_TABLE_STATE = "TableState";
  @SerializedName(SERIALIZED_NAME_TABLE_STATE)
  private String tableState;

  public static final String SERIALIZED_NAME_VALIDATION_PENDING_RECORDS = "ValidationPendingRecords";
  @SerializedName(SERIALIZED_NAME_VALIDATION_PENDING_RECORDS)
  private Integer validationPendingRecords;

  public static final String SERIALIZED_NAME_VALIDATION_FAILED_RECORDS = "ValidationFailedRecords";
  @SerializedName(SERIALIZED_NAME_VALIDATION_FAILED_RECORDS)
  private Integer validationFailedRecords;

  public static final String SERIALIZED_NAME_VALIDATION_SUSPENDED_RECORDS = "ValidationSuspendedRecords";
  @SerializedName(SERIALIZED_NAME_VALIDATION_SUSPENDED_RECORDS)
  private Integer validationSuspendedRecords;

  public static final String SERIALIZED_NAME_VALIDATION_STATE = "ValidationState";
  @SerializedName(SERIALIZED_NAME_VALIDATION_STATE)
  private String validationState;

  public static final String SERIALIZED_NAME_VALIDATION_STATE_DETAILS = "ValidationStateDetails";
  @SerializedName(SERIALIZED_NAME_VALIDATION_STATE_DETAILS)
  private String validationStateDetails;

  public TableStatistics() {
  }

  public TableStatistics schemaName(String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

  /**
   * Get schemaName
   * @return schemaName
   */
  @javax.annotation.Nullable
  public String getSchemaName() {
    return schemaName;
  }

  public void setSchemaName(String schemaName) {
    this.schemaName = schemaName;
  }


  public TableStatistics tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nullable
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public TableStatistics inserts(Integer inserts) {
    this.inserts = inserts;
    return this;
  }

  /**
   * Get inserts
   * @return inserts
   */
  @javax.annotation.Nullable
  public Integer getInserts() {
    return inserts;
  }

  public void setInserts(Integer inserts) {
    this.inserts = inserts;
  }


  public TableStatistics deletes(Integer deletes) {
    this.deletes = deletes;
    return this;
  }

  /**
   * Get deletes
   * @return deletes
   */
  @javax.annotation.Nullable
  public Integer getDeletes() {
    return deletes;
  }

  public void setDeletes(Integer deletes) {
    this.deletes = deletes;
  }


  public TableStatistics updates(Integer updates) {
    this.updates = updates;
    return this;
  }

  /**
   * Get updates
   * @return updates
   */
  @javax.annotation.Nullable
  public Integer getUpdates() {
    return updates;
  }

  public void setUpdates(Integer updates) {
    this.updates = updates;
  }


  public TableStatistics ddls(Integer ddls) {
    this.ddls = ddls;
    return this;
  }

  /**
   * Get ddls
   * @return ddls
   */
  @javax.annotation.Nullable
  public Integer getDdls() {
    return ddls;
  }

  public void setDdls(Integer ddls) {
    this.ddls = ddls;
  }


  public TableStatistics appliedInserts(Integer appliedInserts) {
    this.appliedInserts = appliedInserts;
    return this;
  }

  /**
   * Get appliedInserts
   * @return appliedInserts
   */
  @javax.annotation.Nullable
  public Integer getAppliedInserts() {
    return appliedInserts;
  }

  public void setAppliedInserts(Integer appliedInserts) {
    this.appliedInserts = appliedInserts;
  }


  public TableStatistics appliedDeletes(Integer appliedDeletes) {
    this.appliedDeletes = appliedDeletes;
    return this;
  }

  /**
   * Get appliedDeletes
   * @return appliedDeletes
   */
  @javax.annotation.Nullable
  public Integer getAppliedDeletes() {
    return appliedDeletes;
  }

  public void setAppliedDeletes(Integer appliedDeletes) {
    this.appliedDeletes = appliedDeletes;
  }


  public TableStatistics appliedUpdates(Integer appliedUpdates) {
    this.appliedUpdates = appliedUpdates;
    return this;
  }

  /**
   * Get appliedUpdates
   * @return appliedUpdates
   */
  @javax.annotation.Nullable
  public Integer getAppliedUpdates() {
    return appliedUpdates;
  }

  public void setAppliedUpdates(Integer appliedUpdates) {
    this.appliedUpdates = appliedUpdates;
  }


  public TableStatistics appliedDdls(Integer appliedDdls) {
    this.appliedDdls = appliedDdls;
    return this;
  }

  /**
   * Get appliedDdls
   * @return appliedDdls
   */
  @javax.annotation.Nullable
  public Integer getAppliedDdls() {
    return appliedDdls;
  }

  public void setAppliedDdls(Integer appliedDdls) {
    this.appliedDdls = appliedDdls;
  }


  public TableStatistics fullLoadRows(Integer fullLoadRows) {
    this.fullLoadRows = fullLoadRows;
    return this;
  }

  /**
   * Get fullLoadRows
   * @return fullLoadRows
   */
  @javax.annotation.Nullable
  public Integer getFullLoadRows() {
    return fullLoadRows;
  }

  public void setFullLoadRows(Integer fullLoadRows) {
    this.fullLoadRows = fullLoadRows;
  }


  public TableStatistics fullLoadCondtnlChkFailedRows(Integer fullLoadCondtnlChkFailedRows) {
    this.fullLoadCondtnlChkFailedRows = fullLoadCondtnlChkFailedRows;
    return this;
  }

  /**
   * Get fullLoadCondtnlChkFailedRows
   * @return fullLoadCondtnlChkFailedRows
   */
  @javax.annotation.Nullable
  public Integer getFullLoadCondtnlChkFailedRows() {
    return fullLoadCondtnlChkFailedRows;
  }

  public void setFullLoadCondtnlChkFailedRows(Integer fullLoadCondtnlChkFailedRows) {
    this.fullLoadCondtnlChkFailedRows = fullLoadCondtnlChkFailedRows;
  }


  public TableStatistics fullLoadErrorRows(Integer fullLoadErrorRows) {
    this.fullLoadErrorRows = fullLoadErrorRows;
    return this;
  }

  /**
   * Get fullLoadErrorRows
   * @return fullLoadErrorRows
   */
  @javax.annotation.Nullable
  public Integer getFullLoadErrorRows() {
    return fullLoadErrorRows;
  }

  public void setFullLoadErrorRows(Integer fullLoadErrorRows) {
    this.fullLoadErrorRows = fullLoadErrorRows;
  }


  public TableStatistics fullLoadStartTime(OffsetDateTime fullLoadStartTime) {
    this.fullLoadStartTime = fullLoadStartTime;
    return this;
  }

  /**
   * Get fullLoadStartTime
   * @return fullLoadStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFullLoadStartTime() {
    return fullLoadStartTime;
  }

  public void setFullLoadStartTime(OffsetDateTime fullLoadStartTime) {
    this.fullLoadStartTime = fullLoadStartTime;
  }


  public TableStatistics fullLoadEndTime(OffsetDateTime fullLoadEndTime) {
    this.fullLoadEndTime = fullLoadEndTime;
    return this;
  }

  /**
   * Get fullLoadEndTime
   * @return fullLoadEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFullLoadEndTime() {
    return fullLoadEndTime;
  }

  public void setFullLoadEndTime(OffsetDateTime fullLoadEndTime) {
    this.fullLoadEndTime = fullLoadEndTime;
  }


  public TableStatistics fullLoadReloaded(Boolean fullLoadReloaded) {
    this.fullLoadReloaded = fullLoadReloaded;
    return this;
  }

  /**
   * Get fullLoadReloaded
   * @return fullLoadReloaded
   */
  @javax.annotation.Nullable
  public Boolean getFullLoadReloaded() {
    return fullLoadReloaded;
  }

  public void setFullLoadReloaded(Boolean fullLoadReloaded) {
    this.fullLoadReloaded = fullLoadReloaded;
  }


  public TableStatistics lastUpdateTime(OffsetDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  /**
   * Get lastUpdateTime
   * @return lastUpdateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdateTime() {
    return lastUpdateTime;
  }

  public void setLastUpdateTime(OffsetDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
  }


  public TableStatistics tableState(String tableState) {
    this.tableState = tableState;
    return this;
  }

  /**
   * Get tableState
   * @return tableState
   */
  @javax.annotation.Nullable
  public String getTableState() {
    return tableState;
  }

  public void setTableState(String tableState) {
    this.tableState = tableState;
  }


  public TableStatistics validationPendingRecords(Integer validationPendingRecords) {
    this.validationPendingRecords = validationPendingRecords;
    return this;
  }

  /**
   * Get validationPendingRecords
   * @return validationPendingRecords
   */
  @javax.annotation.Nullable
  public Integer getValidationPendingRecords() {
    return validationPendingRecords;
  }

  public void setValidationPendingRecords(Integer validationPendingRecords) {
    this.validationPendingRecords = validationPendingRecords;
  }


  public TableStatistics validationFailedRecords(Integer validationFailedRecords) {
    this.validationFailedRecords = validationFailedRecords;
    return this;
  }

  /**
   * Get validationFailedRecords
   * @return validationFailedRecords
   */
  @javax.annotation.Nullable
  public Integer getValidationFailedRecords() {
    return validationFailedRecords;
  }

  public void setValidationFailedRecords(Integer validationFailedRecords) {
    this.validationFailedRecords = validationFailedRecords;
  }


  public TableStatistics validationSuspendedRecords(Integer validationSuspendedRecords) {
    this.validationSuspendedRecords = validationSuspendedRecords;
    return this;
  }

  /**
   * Get validationSuspendedRecords
   * @return validationSuspendedRecords
   */
  @javax.annotation.Nullable
  public Integer getValidationSuspendedRecords() {
    return validationSuspendedRecords;
  }

  public void setValidationSuspendedRecords(Integer validationSuspendedRecords) {
    this.validationSuspendedRecords = validationSuspendedRecords;
  }


  public TableStatistics validationState(String validationState) {
    this.validationState = validationState;
    return this;
  }

  /**
   * Get validationState
   * @return validationState
   */
  @javax.annotation.Nullable
  public String getValidationState() {
    return validationState;
  }

  public void setValidationState(String validationState) {
    this.validationState = validationState;
  }


  public TableStatistics validationStateDetails(String validationStateDetails) {
    this.validationStateDetails = validationStateDetails;
    return this;
  }

  /**
   * Get validationStateDetails
   * @return validationStateDetails
   */
  @javax.annotation.Nullable
  public String getValidationStateDetails() {
    return validationStateDetails;
  }

  public void setValidationStateDetails(String validationStateDetails) {
    this.validationStateDetails = validationStateDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableStatistics tableStatistics = (TableStatistics) o;
    return Objects.equals(this.schemaName, tableStatistics.schemaName) &&
        Objects.equals(this.tableName, tableStatistics.tableName) &&
        Objects.equals(this.inserts, tableStatistics.inserts) &&
        Objects.equals(this.deletes, tableStatistics.deletes) &&
        Objects.equals(this.updates, tableStatistics.updates) &&
        Objects.equals(this.ddls, tableStatistics.ddls) &&
        Objects.equals(this.appliedInserts, tableStatistics.appliedInserts) &&
        Objects.equals(this.appliedDeletes, tableStatistics.appliedDeletes) &&
        Objects.equals(this.appliedUpdates, tableStatistics.appliedUpdates) &&
        Objects.equals(this.appliedDdls, tableStatistics.appliedDdls) &&
        Objects.equals(this.fullLoadRows, tableStatistics.fullLoadRows) &&
        Objects.equals(this.fullLoadCondtnlChkFailedRows, tableStatistics.fullLoadCondtnlChkFailedRows) &&
        Objects.equals(this.fullLoadErrorRows, tableStatistics.fullLoadErrorRows) &&
        Objects.equals(this.fullLoadStartTime, tableStatistics.fullLoadStartTime) &&
        Objects.equals(this.fullLoadEndTime, tableStatistics.fullLoadEndTime) &&
        Objects.equals(this.fullLoadReloaded, tableStatistics.fullLoadReloaded) &&
        Objects.equals(this.lastUpdateTime, tableStatistics.lastUpdateTime) &&
        Objects.equals(this.tableState, tableStatistics.tableState) &&
        Objects.equals(this.validationPendingRecords, tableStatistics.validationPendingRecords) &&
        Objects.equals(this.validationFailedRecords, tableStatistics.validationFailedRecords) &&
        Objects.equals(this.validationSuspendedRecords, tableStatistics.validationSuspendedRecords) &&
        Objects.equals(this.validationState, tableStatistics.validationState) &&
        Objects.equals(this.validationStateDetails, tableStatistics.validationStateDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaName, tableName, inserts, deletes, updates, ddls, appliedInserts, appliedDeletes, appliedUpdates, appliedDdls, fullLoadRows, fullLoadCondtnlChkFailedRows, fullLoadErrorRows, fullLoadStartTime, fullLoadEndTime, fullLoadReloaded, lastUpdateTime, tableState, validationPendingRecords, validationFailedRecords, validationSuspendedRecords, validationState, validationStateDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableStatistics {\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    inserts: ").append(toIndentedString(inserts)).append("\n");
    sb.append("    deletes: ").append(toIndentedString(deletes)).append("\n");
    sb.append("    updates: ").append(toIndentedString(updates)).append("\n");
    sb.append("    ddls: ").append(toIndentedString(ddls)).append("\n");
    sb.append("    appliedInserts: ").append(toIndentedString(appliedInserts)).append("\n");
    sb.append("    appliedDeletes: ").append(toIndentedString(appliedDeletes)).append("\n");
    sb.append("    appliedUpdates: ").append(toIndentedString(appliedUpdates)).append("\n");
    sb.append("    appliedDdls: ").append(toIndentedString(appliedDdls)).append("\n");
    sb.append("    fullLoadRows: ").append(toIndentedString(fullLoadRows)).append("\n");
    sb.append("    fullLoadCondtnlChkFailedRows: ").append(toIndentedString(fullLoadCondtnlChkFailedRows)).append("\n");
    sb.append("    fullLoadErrorRows: ").append(toIndentedString(fullLoadErrorRows)).append("\n");
    sb.append("    fullLoadStartTime: ").append(toIndentedString(fullLoadStartTime)).append("\n");
    sb.append("    fullLoadEndTime: ").append(toIndentedString(fullLoadEndTime)).append("\n");
    sb.append("    fullLoadReloaded: ").append(toIndentedString(fullLoadReloaded)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    tableState: ").append(toIndentedString(tableState)).append("\n");
    sb.append("    validationPendingRecords: ").append(toIndentedString(validationPendingRecords)).append("\n");
    sb.append("    validationFailedRecords: ").append(toIndentedString(validationFailedRecords)).append("\n");
    sb.append("    validationSuspendedRecords: ").append(toIndentedString(validationSuspendedRecords)).append("\n");
    sb.append("    validationState: ").append(toIndentedString(validationState)).append("\n");
    sb.append("    validationStateDetails: ").append(toIndentedString(validationStateDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SchemaName");
    openapiFields.add("TableName");
    openapiFields.add("Inserts");
    openapiFields.add("Deletes");
    openapiFields.add("Updates");
    openapiFields.add("Ddls");
    openapiFields.add("AppliedInserts");
    openapiFields.add("AppliedDeletes");
    openapiFields.add("AppliedUpdates");
    openapiFields.add("AppliedDdls");
    openapiFields.add("FullLoadRows");
    openapiFields.add("FullLoadCondtnlChkFailedRows");
    openapiFields.add("FullLoadErrorRows");
    openapiFields.add("FullLoadStartTime");
    openapiFields.add("FullLoadEndTime");
    openapiFields.add("FullLoadReloaded");
    openapiFields.add("LastUpdateTime");
    openapiFields.add("TableState");
    openapiFields.add("ValidationPendingRecords");
    openapiFields.add("ValidationFailedRecords");
    openapiFields.add("ValidationSuspendedRecords");
    openapiFields.add("ValidationState");
    openapiFields.add("ValidationStateDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableStatistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableStatistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableStatistics is not found in the empty JSON string", TableStatistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableStatistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableStatistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SchemaName`
      if (jsonObj.get("SchemaName") != null && !jsonObj.get("SchemaName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SchemaName"));
      }
      // validate the optional field `TableName`
      if (jsonObj.get("TableName") != null && !jsonObj.get("TableName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TableName"));
      }
      // validate the optional field `Inserts`
      if (jsonObj.get("Inserts") != null && !jsonObj.get("Inserts").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Inserts"));
      }
      // validate the optional field `Deletes`
      if (jsonObj.get("Deletes") != null && !jsonObj.get("Deletes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Deletes"));
      }
      // validate the optional field `Updates`
      if (jsonObj.get("Updates") != null && !jsonObj.get("Updates").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Updates"));
      }
      // validate the optional field `Ddls`
      if (jsonObj.get("Ddls") != null && !jsonObj.get("Ddls").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Ddls"));
      }
      // validate the optional field `AppliedInserts`
      if (jsonObj.get("AppliedInserts") != null && !jsonObj.get("AppliedInserts").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AppliedInserts"));
      }
      // validate the optional field `AppliedDeletes`
      if (jsonObj.get("AppliedDeletes") != null && !jsonObj.get("AppliedDeletes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AppliedDeletes"));
      }
      // validate the optional field `AppliedUpdates`
      if (jsonObj.get("AppliedUpdates") != null && !jsonObj.get("AppliedUpdates").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AppliedUpdates"));
      }
      // validate the optional field `AppliedDdls`
      if (jsonObj.get("AppliedDdls") != null && !jsonObj.get("AppliedDdls").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AppliedDdls"));
      }
      // validate the optional field `FullLoadRows`
      if (jsonObj.get("FullLoadRows") != null && !jsonObj.get("FullLoadRows").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FullLoadRows"));
      }
      // validate the optional field `FullLoadCondtnlChkFailedRows`
      if (jsonObj.get("FullLoadCondtnlChkFailedRows") != null && !jsonObj.get("FullLoadCondtnlChkFailedRows").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FullLoadCondtnlChkFailedRows"));
      }
      // validate the optional field `FullLoadErrorRows`
      if (jsonObj.get("FullLoadErrorRows") != null && !jsonObj.get("FullLoadErrorRows").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FullLoadErrorRows"));
      }
      // validate the optional field `FullLoadStartTime`
      if (jsonObj.get("FullLoadStartTime") != null && !jsonObj.get("FullLoadStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("FullLoadStartTime"));
      }
      // validate the optional field `FullLoadEndTime`
      if (jsonObj.get("FullLoadEndTime") != null && !jsonObj.get("FullLoadEndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("FullLoadEndTime"));
      }
      // validate the optional field `FullLoadReloaded`
      if (jsonObj.get("FullLoadReloaded") != null && !jsonObj.get("FullLoadReloaded").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("FullLoadReloaded"));
      }
      // validate the optional field `LastUpdateTime`
      if (jsonObj.get("LastUpdateTime") != null && !jsonObj.get("LastUpdateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdateTime"));
      }
      // validate the optional field `TableState`
      if (jsonObj.get("TableState") != null && !jsonObj.get("TableState").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TableState"));
      }
      // validate the optional field `ValidationPendingRecords`
      if (jsonObj.get("ValidationPendingRecords") != null && !jsonObj.get("ValidationPendingRecords").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ValidationPendingRecords"));
      }
      // validate the optional field `ValidationFailedRecords`
      if (jsonObj.get("ValidationFailedRecords") != null && !jsonObj.get("ValidationFailedRecords").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ValidationFailedRecords"));
      }
      // validate the optional field `ValidationSuspendedRecords`
      if (jsonObj.get("ValidationSuspendedRecords") != null && !jsonObj.get("ValidationSuspendedRecords").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ValidationSuspendedRecords"));
      }
      // validate the optional field `ValidationState`
      if (jsonObj.get("ValidationState") != null && !jsonObj.get("ValidationState").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ValidationState"));
      }
      // validate the optional field `ValidationStateDetails`
      if (jsonObj.get("ValidationStateDetails") != null && !jsonObj.get("ValidationStateDetails").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ValidationStateDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableStatistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableStatistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableStatistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableStatistics.class));

       return (TypeAdapter<T>) new TypeAdapter<TableStatistics>() {
           @Override
           public void write(JsonWriter out, TableStatistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableStatistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableStatistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableStatistics
   * @throws IOException if the JSON string is invalid with respect to TableStatistics
   */
  public static TableStatistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableStatistics.class);
  }

  /**
   * Convert an instance of TableStatistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

