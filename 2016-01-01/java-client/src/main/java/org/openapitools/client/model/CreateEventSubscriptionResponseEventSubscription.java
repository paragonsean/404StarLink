/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateEventSubscriptionResponseEventSubscription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:28.765689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateEventSubscriptionResponseEventSubscription {
  public static final String SERIALIZED_NAME_CUSTOMER_AWS_ID = "CustomerAwsId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_AWS_ID)
  private String customerAwsId;

  public static final String SERIALIZED_NAME_CUST_SUBSCRIPTION_ID = "CustSubscriptionId";
  @SerializedName(SERIALIZED_NAME_CUST_SUBSCRIPTION_ID)
  private String custSubscriptionId;

  public static final String SERIALIZED_NAME_SNS_TOPIC_ARN = "SnsTopicArn";
  @SerializedName(SERIALIZED_NAME_SNS_TOPIC_ARN)
  private String snsTopicArn;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_CREATION_TIME = "SubscriptionCreationTime";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_CREATION_TIME)
  private String subscriptionCreationTime;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "SourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private String sourceType;

  public static final String SERIALIZED_NAME_SOURCE_IDS_LIST = "SourceIdsList";
  @SerializedName(SERIALIZED_NAME_SOURCE_IDS_LIST)
  private List sourceIdsList;

  public static final String SERIALIZED_NAME_EVENT_CATEGORIES_LIST = "EventCategoriesList";
  @SerializedName(SERIALIZED_NAME_EVENT_CATEGORIES_LIST)
  private List eventCategoriesList;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public CreateEventSubscriptionResponseEventSubscription() {
  }

  public CreateEventSubscriptionResponseEventSubscription customerAwsId(String customerAwsId) {
    this.customerAwsId = customerAwsId;
    return this;
  }

  /**
   * Get customerAwsId
   * @return customerAwsId
   */
  @javax.annotation.Nullable
  public String getCustomerAwsId() {
    return customerAwsId;
  }

  public void setCustomerAwsId(String customerAwsId) {
    this.customerAwsId = customerAwsId;
  }


  public CreateEventSubscriptionResponseEventSubscription custSubscriptionId(String custSubscriptionId) {
    this.custSubscriptionId = custSubscriptionId;
    return this;
  }

  /**
   * Get custSubscriptionId
   * @return custSubscriptionId
   */
  @javax.annotation.Nullable
  public String getCustSubscriptionId() {
    return custSubscriptionId;
  }

  public void setCustSubscriptionId(String custSubscriptionId) {
    this.custSubscriptionId = custSubscriptionId;
  }


  public CreateEventSubscriptionResponseEventSubscription snsTopicArn(String snsTopicArn) {
    this.snsTopicArn = snsTopicArn;
    return this;
  }

  /**
   * Get snsTopicArn
   * @return snsTopicArn
   */
  @javax.annotation.Nullable
  public String getSnsTopicArn() {
    return snsTopicArn;
  }

  public void setSnsTopicArn(String snsTopicArn) {
    this.snsTopicArn = snsTopicArn;
  }


  public CreateEventSubscriptionResponseEventSubscription status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public CreateEventSubscriptionResponseEventSubscription subscriptionCreationTime(String subscriptionCreationTime) {
    this.subscriptionCreationTime = subscriptionCreationTime;
    return this;
  }

  /**
   * Get subscriptionCreationTime
   * @return subscriptionCreationTime
   */
  @javax.annotation.Nullable
  public String getSubscriptionCreationTime() {
    return subscriptionCreationTime;
  }

  public void setSubscriptionCreationTime(String subscriptionCreationTime) {
    this.subscriptionCreationTime = subscriptionCreationTime;
  }


  public CreateEventSubscriptionResponseEventSubscription sourceType(String sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Get sourceType
   * @return sourceType
   */
  @javax.annotation.Nullable
  public String getSourceType() {
    return sourceType;
  }

  public void setSourceType(String sourceType) {
    this.sourceType = sourceType;
  }


  public CreateEventSubscriptionResponseEventSubscription sourceIdsList(List sourceIdsList) {
    this.sourceIdsList = sourceIdsList;
    return this;
  }

  /**
   * Get sourceIdsList
   * @return sourceIdsList
   */
  @javax.annotation.Nullable
  public List getSourceIdsList() {
    return sourceIdsList;
  }

  public void setSourceIdsList(List sourceIdsList) {
    this.sourceIdsList = sourceIdsList;
  }


  public CreateEventSubscriptionResponseEventSubscription eventCategoriesList(List eventCategoriesList) {
    this.eventCategoriesList = eventCategoriesList;
    return this;
  }

  /**
   * Get eventCategoriesList
   * @return eventCategoriesList
   */
  @javax.annotation.Nullable
  public List getEventCategoriesList() {
    return eventCategoriesList;
  }

  public void setEventCategoriesList(List eventCategoriesList) {
    this.eventCategoriesList = eventCategoriesList;
  }


  public CreateEventSubscriptionResponseEventSubscription enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEventSubscriptionResponseEventSubscription createEventSubscriptionResponseEventSubscription = (CreateEventSubscriptionResponseEventSubscription) o;
    return Objects.equals(this.customerAwsId, createEventSubscriptionResponseEventSubscription.customerAwsId) &&
        Objects.equals(this.custSubscriptionId, createEventSubscriptionResponseEventSubscription.custSubscriptionId) &&
        Objects.equals(this.snsTopicArn, createEventSubscriptionResponseEventSubscription.snsTopicArn) &&
        Objects.equals(this.status, createEventSubscriptionResponseEventSubscription.status) &&
        Objects.equals(this.subscriptionCreationTime, createEventSubscriptionResponseEventSubscription.subscriptionCreationTime) &&
        Objects.equals(this.sourceType, createEventSubscriptionResponseEventSubscription.sourceType) &&
        Objects.equals(this.sourceIdsList, createEventSubscriptionResponseEventSubscription.sourceIdsList) &&
        Objects.equals(this.eventCategoriesList, createEventSubscriptionResponseEventSubscription.eventCategoriesList) &&
        Objects.equals(this.enabled, createEventSubscriptionResponseEventSubscription.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerAwsId, custSubscriptionId, snsTopicArn, status, subscriptionCreationTime, sourceType, sourceIdsList, eventCategoriesList, enabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateEventSubscriptionResponseEventSubscription {\n");
    sb.append("    customerAwsId: ").append(toIndentedString(customerAwsId)).append("\n");
    sb.append("    custSubscriptionId: ").append(toIndentedString(custSubscriptionId)).append("\n");
    sb.append("    snsTopicArn: ").append(toIndentedString(snsTopicArn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subscriptionCreationTime: ").append(toIndentedString(subscriptionCreationTime)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    sourceIdsList: ").append(toIndentedString(sourceIdsList)).append("\n");
    sb.append("    eventCategoriesList: ").append(toIndentedString(eventCategoriesList)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CustomerAwsId");
    openapiFields.add("CustSubscriptionId");
    openapiFields.add("SnsTopicArn");
    openapiFields.add("Status");
    openapiFields.add("SubscriptionCreationTime");
    openapiFields.add("SourceType");
    openapiFields.add("SourceIdsList");
    openapiFields.add("EventCategoriesList");
    openapiFields.add("Enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateEventSubscriptionResponseEventSubscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateEventSubscriptionResponseEventSubscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateEventSubscriptionResponseEventSubscription is not found in the empty JSON string", CreateEventSubscriptionResponseEventSubscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateEventSubscriptionResponseEventSubscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateEventSubscriptionResponseEventSubscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CustomerAwsId`
      if (jsonObj.get("CustomerAwsId") != null && !jsonObj.get("CustomerAwsId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CustomerAwsId"));
      }
      // validate the optional field `CustSubscriptionId`
      if (jsonObj.get("CustSubscriptionId") != null && !jsonObj.get("CustSubscriptionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CustSubscriptionId"));
      }
      // validate the optional field `SnsTopicArn`
      if (jsonObj.get("SnsTopicArn") != null && !jsonObj.get("SnsTopicArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnsTopicArn"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `SubscriptionCreationTime`
      if (jsonObj.get("SubscriptionCreationTime") != null && !jsonObj.get("SubscriptionCreationTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubscriptionCreationTime"));
      }
      // validate the optional field `SourceType`
      if (jsonObj.get("SourceType") != null && !jsonObj.get("SourceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceType"));
      }
      // validate the optional field `SourceIdsList`
      if (jsonObj.get("SourceIdsList") != null && !jsonObj.get("SourceIdsList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SourceIdsList"));
      }
      // validate the optional field `EventCategoriesList`
      if (jsonObj.get("EventCategoriesList") != null && !jsonObj.get("EventCategoriesList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("EventCategoriesList"));
      }
      // validate the optional field `Enabled`
      if (jsonObj.get("Enabled") != null && !jsonObj.get("Enabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Enabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateEventSubscriptionResponseEventSubscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateEventSubscriptionResponseEventSubscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateEventSubscriptionResponseEventSubscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateEventSubscriptionResponseEventSubscription.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateEventSubscriptionResponseEventSubscription>() {
           @Override
           public void write(JsonWriter out, CreateEventSubscriptionResponseEventSubscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateEventSubscriptionResponseEventSubscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateEventSubscriptionResponseEventSubscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateEventSubscriptionResponseEventSubscription
   * @throws IOException if the JSON string is invalid with respect to CreateEventSubscriptionResponseEventSubscription
   */
  public static CreateEventSubscriptionResponseEventSubscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateEventSubscriptionResponseEventSubscription.class);
  }

  /**
   * Convert an instance of CreateEventSubscriptionResponseEventSubscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

