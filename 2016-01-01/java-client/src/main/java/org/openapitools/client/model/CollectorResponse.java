/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CollectorHealthCheck;
import org.openapitools.client.model.InventoryData;
import org.openapitools.client.model.VersionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a Fleet Advisor collector.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:28.765689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CollectorResponse {
  public static final String SERIALIZED_NAME_COLLECTOR_REFERENCED_ID = "CollectorReferencedId";
  @SerializedName(SERIALIZED_NAME_COLLECTOR_REFERENCED_ID)
  private String collectorReferencedId;

  public static final String SERIALIZED_NAME_COLLECTOR_NAME = "CollectorName";
  @SerializedName(SERIALIZED_NAME_COLLECTOR_NAME)
  private String collectorName;

  public static final String SERIALIZED_NAME_COLLECTOR_VERSION = "CollectorVersion";
  @SerializedName(SERIALIZED_NAME_COLLECTOR_VERSION)
  private String collectorVersion;

  public static final String SERIALIZED_NAME_VERSION_STATUS = "VersionStatus";
  @SerializedName(SERIALIZED_NAME_VERSION_STATUS)
  private VersionStatus versionStatus;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_S3_BUCKET_NAME = "S3BucketName";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_NAME)
  private String s3BucketName;

  public static final String SERIALIZED_NAME_SERVICE_ACCESS_ROLE_ARN = "ServiceAccessRoleArn";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCESS_ROLE_ARN)
  private String serviceAccessRoleArn;

  public static final String SERIALIZED_NAME_COLLECTOR_HEALTH_CHECK = "CollectorHealthCheck";
  @SerializedName(SERIALIZED_NAME_COLLECTOR_HEALTH_CHECK)
  private CollectorHealthCheck collectorHealthCheck;

  public static final String SERIALIZED_NAME_LAST_DATA_RECEIVED = "LastDataReceived";
  @SerializedName(SERIALIZED_NAME_LAST_DATA_RECEIVED)
  private String lastDataReceived;

  public static final String SERIALIZED_NAME_REGISTERED_DATE = "RegisteredDate";
  @SerializedName(SERIALIZED_NAME_REGISTERED_DATE)
  private String registeredDate;

  public static final String SERIALIZED_NAME_CREATED_DATE = "CreatedDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "ModifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private String modifiedDate;

  public static final String SERIALIZED_NAME_INVENTORY_DATA = "InventoryData";
  @SerializedName(SERIALIZED_NAME_INVENTORY_DATA)
  private InventoryData inventoryData;

  public CollectorResponse() {
  }

  public CollectorResponse collectorReferencedId(String collectorReferencedId) {
    this.collectorReferencedId = collectorReferencedId;
    return this;
  }

  /**
   * Get collectorReferencedId
   * @return collectorReferencedId
   */
  @javax.annotation.Nullable
  public String getCollectorReferencedId() {
    return collectorReferencedId;
  }

  public void setCollectorReferencedId(String collectorReferencedId) {
    this.collectorReferencedId = collectorReferencedId;
  }


  public CollectorResponse collectorName(String collectorName) {
    this.collectorName = collectorName;
    return this;
  }

  /**
   * Get collectorName
   * @return collectorName
   */
  @javax.annotation.Nullable
  public String getCollectorName() {
    return collectorName;
  }

  public void setCollectorName(String collectorName) {
    this.collectorName = collectorName;
  }


  public CollectorResponse collectorVersion(String collectorVersion) {
    this.collectorVersion = collectorVersion;
    return this;
  }

  /**
   * Get collectorVersion
   * @return collectorVersion
   */
  @javax.annotation.Nullable
  public String getCollectorVersion() {
    return collectorVersion;
  }

  public void setCollectorVersion(String collectorVersion) {
    this.collectorVersion = collectorVersion;
  }


  public CollectorResponse versionStatus(VersionStatus versionStatus) {
    this.versionStatus = versionStatus;
    return this;
  }

  /**
   * Get versionStatus
   * @return versionStatus
   */
  @javax.annotation.Nullable
  public VersionStatus getVersionStatus() {
    return versionStatus;
  }

  public void setVersionStatus(VersionStatus versionStatus) {
    this.versionStatus = versionStatus;
  }


  public CollectorResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CollectorResponse s3BucketName(String s3BucketName) {
    this.s3BucketName = s3BucketName;
    return this;
  }

  /**
   * Get s3BucketName
   * @return s3BucketName
   */
  @javax.annotation.Nullable
  public String getS3BucketName() {
    return s3BucketName;
  }

  public void setS3BucketName(String s3BucketName) {
    this.s3BucketName = s3BucketName;
  }


  public CollectorResponse serviceAccessRoleArn(String serviceAccessRoleArn) {
    this.serviceAccessRoleArn = serviceAccessRoleArn;
    return this;
  }

  /**
   * Get serviceAccessRoleArn
   * @return serviceAccessRoleArn
   */
  @javax.annotation.Nullable
  public String getServiceAccessRoleArn() {
    return serviceAccessRoleArn;
  }

  public void setServiceAccessRoleArn(String serviceAccessRoleArn) {
    this.serviceAccessRoleArn = serviceAccessRoleArn;
  }


  public CollectorResponse collectorHealthCheck(CollectorHealthCheck collectorHealthCheck) {
    this.collectorHealthCheck = collectorHealthCheck;
    return this;
  }

  /**
   * Get collectorHealthCheck
   * @return collectorHealthCheck
   */
  @javax.annotation.Nullable
  public CollectorHealthCheck getCollectorHealthCheck() {
    return collectorHealthCheck;
  }

  public void setCollectorHealthCheck(CollectorHealthCheck collectorHealthCheck) {
    this.collectorHealthCheck = collectorHealthCheck;
  }


  public CollectorResponse lastDataReceived(String lastDataReceived) {
    this.lastDataReceived = lastDataReceived;
    return this;
  }

  /**
   * Get lastDataReceived
   * @return lastDataReceived
   */
  @javax.annotation.Nullable
  public String getLastDataReceived() {
    return lastDataReceived;
  }

  public void setLastDataReceived(String lastDataReceived) {
    this.lastDataReceived = lastDataReceived;
  }


  public CollectorResponse registeredDate(String registeredDate) {
    this.registeredDate = registeredDate;
    return this;
  }

  /**
   * Get registeredDate
   * @return registeredDate
   */
  @javax.annotation.Nullable
  public String getRegisteredDate() {
    return registeredDate;
  }

  public void setRegisteredDate(String registeredDate) {
    this.registeredDate = registeredDate;
  }


  public CollectorResponse createdDate(String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }


  public CollectorResponse modifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Get modifiedDate
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public String getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public CollectorResponse inventoryData(InventoryData inventoryData) {
    this.inventoryData = inventoryData;
    return this;
  }

  /**
   * Get inventoryData
   * @return inventoryData
   */
  @javax.annotation.Nullable
  public InventoryData getInventoryData() {
    return inventoryData;
  }

  public void setInventoryData(InventoryData inventoryData) {
    this.inventoryData = inventoryData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectorResponse collectorResponse = (CollectorResponse) o;
    return Objects.equals(this.collectorReferencedId, collectorResponse.collectorReferencedId) &&
        Objects.equals(this.collectorName, collectorResponse.collectorName) &&
        Objects.equals(this.collectorVersion, collectorResponse.collectorVersion) &&
        Objects.equals(this.versionStatus, collectorResponse.versionStatus) &&
        Objects.equals(this.description, collectorResponse.description) &&
        Objects.equals(this.s3BucketName, collectorResponse.s3BucketName) &&
        Objects.equals(this.serviceAccessRoleArn, collectorResponse.serviceAccessRoleArn) &&
        Objects.equals(this.collectorHealthCheck, collectorResponse.collectorHealthCheck) &&
        Objects.equals(this.lastDataReceived, collectorResponse.lastDataReceived) &&
        Objects.equals(this.registeredDate, collectorResponse.registeredDate) &&
        Objects.equals(this.createdDate, collectorResponse.createdDate) &&
        Objects.equals(this.modifiedDate, collectorResponse.modifiedDate) &&
        Objects.equals(this.inventoryData, collectorResponse.inventoryData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectorReferencedId, collectorName, collectorVersion, versionStatus, description, s3BucketName, serviceAccessRoleArn, collectorHealthCheck, lastDataReceived, registeredDate, createdDate, modifiedDate, inventoryData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectorResponse {\n");
    sb.append("    collectorReferencedId: ").append(toIndentedString(collectorReferencedId)).append("\n");
    sb.append("    collectorName: ").append(toIndentedString(collectorName)).append("\n");
    sb.append("    collectorVersion: ").append(toIndentedString(collectorVersion)).append("\n");
    sb.append("    versionStatus: ").append(toIndentedString(versionStatus)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    s3BucketName: ").append(toIndentedString(s3BucketName)).append("\n");
    sb.append("    serviceAccessRoleArn: ").append(toIndentedString(serviceAccessRoleArn)).append("\n");
    sb.append("    collectorHealthCheck: ").append(toIndentedString(collectorHealthCheck)).append("\n");
    sb.append("    lastDataReceived: ").append(toIndentedString(lastDataReceived)).append("\n");
    sb.append("    registeredDate: ").append(toIndentedString(registeredDate)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    inventoryData: ").append(toIndentedString(inventoryData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CollectorReferencedId");
    openapiFields.add("CollectorName");
    openapiFields.add("CollectorVersion");
    openapiFields.add("VersionStatus");
    openapiFields.add("Description");
    openapiFields.add("S3BucketName");
    openapiFields.add("ServiceAccessRoleArn");
    openapiFields.add("CollectorHealthCheck");
    openapiFields.add("LastDataReceived");
    openapiFields.add("RegisteredDate");
    openapiFields.add("CreatedDate");
    openapiFields.add("ModifiedDate");
    openapiFields.add("InventoryData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CollectorResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CollectorResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CollectorResponse is not found in the empty JSON string", CollectorResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CollectorResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CollectorResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CollectorReferencedId`
      if (jsonObj.get("CollectorReferencedId") != null && !jsonObj.get("CollectorReferencedId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CollectorReferencedId"));
      }
      // validate the optional field `CollectorName`
      if (jsonObj.get("CollectorName") != null && !jsonObj.get("CollectorName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CollectorName"));
      }
      // validate the optional field `CollectorVersion`
      if (jsonObj.get("CollectorVersion") != null && !jsonObj.get("CollectorVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CollectorVersion"));
      }
      // validate the optional field `VersionStatus`
      if (jsonObj.get("VersionStatus") != null && !jsonObj.get("VersionStatus").isJsonNull()) {
        VersionStatus.validateJsonElement(jsonObj.get("VersionStatus"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `S3BucketName`
      if (jsonObj.get("S3BucketName") != null && !jsonObj.get("S3BucketName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("S3BucketName"));
      }
      // validate the optional field `ServiceAccessRoleArn`
      if (jsonObj.get("ServiceAccessRoleArn") != null && !jsonObj.get("ServiceAccessRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServiceAccessRoleArn"));
      }
      // validate the optional field `CollectorHealthCheck`
      if (jsonObj.get("CollectorHealthCheck") != null && !jsonObj.get("CollectorHealthCheck").isJsonNull()) {
        CollectorHealthCheck.validateJsonElement(jsonObj.get("CollectorHealthCheck"));
      }
      // validate the optional field `LastDataReceived`
      if (jsonObj.get("LastDataReceived") != null && !jsonObj.get("LastDataReceived").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LastDataReceived"));
      }
      // validate the optional field `RegisteredDate`
      if (jsonObj.get("RegisteredDate") != null && !jsonObj.get("RegisteredDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RegisteredDate"));
      }
      // validate the optional field `CreatedDate`
      if (jsonObj.get("CreatedDate") != null && !jsonObj.get("CreatedDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CreatedDate"));
      }
      // validate the optional field `ModifiedDate`
      if (jsonObj.get("ModifiedDate") != null && !jsonObj.get("ModifiedDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ModifiedDate"));
      }
      // validate the optional field `InventoryData`
      if (jsonObj.get("InventoryData") != null && !jsonObj.get("InventoryData").isJsonNull()) {
        InventoryData.validateJsonElement(jsonObj.get("InventoryData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CollectorResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CollectorResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CollectorResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CollectorResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CollectorResponse>() {
           @Override
           public void write(JsonWriter out, CollectorResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CollectorResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CollectorResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CollectorResponse
   * @throws IOException if the JSON string is invalid with respect to CollectorResponse
   */
  public static CollectorResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CollectorResponse.class);
  }

  /**
   * Convert an instance of CollectorResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

