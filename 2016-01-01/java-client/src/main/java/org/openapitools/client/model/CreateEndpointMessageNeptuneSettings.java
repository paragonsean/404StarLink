/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateEndpointMessageNeptuneSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:28.765689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateEndpointMessageNeptuneSettings {
  public static final String SERIALIZED_NAME_SERVICE_ACCESS_ROLE_ARN = "ServiceAccessRoleArn";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCESS_ROLE_ARN)
  private String serviceAccessRoleArn;

  public static final String SERIALIZED_NAME_S3_BUCKET_NAME = "S3BucketName";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_NAME)
  private String s3BucketName;

  public static final String SERIALIZED_NAME_S3_BUCKET_FOLDER = "S3BucketFolder";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_FOLDER)
  private String s3BucketFolder;

  public static final String SERIALIZED_NAME_ERROR_RETRY_DURATION = "ErrorRetryDuration";
  @SerializedName(SERIALIZED_NAME_ERROR_RETRY_DURATION)
  private Integer errorRetryDuration;

  public static final String SERIALIZED_NAME_MAX_FILE_SIZE = "MaxFileSize";
  @SerializedName(SERIALIZED_NAME_MAX_FILE_SIZE)
  private Integer maxFileSize;

  public static final String SERIALIZED_NAME_MAX_RETRY_COUNT = "MaxRetryCount";
  @SerializedName(SERIALIZED_NAME_MAX_RETRY_COUNT)
  private Integer maxRetryCount;

  public static final String SERIALIZED_NAME_IAM_AUTH_ENABLED = "IamAuthEnabled";
  @SerializedName(SERIALIZED_NAME_IAM_AUTH_ENABLED)
  private Boolean iamAuthEnabled;

  public CreateEndpointMessageNeptuneSettings() {
  }

  public CreateEndpointMessageNeptuneSettings serviceAccessRoleArn(String serviceAccessRoleArn) {
    this.serviceAccessRoleArn = serviceAccessRoleArn;
    return this;
  }

  /**
   * Get serviceAccessRoleArn
   * @return serviceAccessRoleArn
   */
  @javax.annotation.Nullable
  public String getServiceAccessRoleArn() {
    return serviceAccessRoleArn;
  }

  public void setServiceAccessRoleArn(String serviceAccessRoleArn) {
    this.serviceAccessRoleArn = serviceAccessRoleArn;
  }


  public CreateEndpointMessageNeptuneSettings s3BucketName(String s3BucketName) {
    this.s3BucketName = s3BucketName;
    return this;
  }

  /**
   * Get s3BucketName
   * @return s3BucketName
   */
  @javax.annotation.Nonnull
  public String getS3BucketName() {
    return s3BucketName;
  }

  public void setS3BucketName(String s3BucketName) {
    this.s3BucketName = s3BucketName;
  }


  public CreateEndpointMessageNeptuneSettings s3BucketFolder(String s3BucketFolder) {
    this.s3BucketFolder = s3BucketFolder;
    return this;
  }

  /**
   * Get s3BucketFolder
   * @return s3BucketFolder
   */
  @javax.annotation.Nonnull
  public String getS3BucketFolder() {
    return s3BucketFolder;
  }

  public void setS3BucketFolder(String s3BucketFolder) {
    this.s3BucketFolder = s3BucketFolder;
  }


  public CreateEndpointMessageNeptuneSettings errorRetryDuration(Integer errorRetryDuration) {
    this.errorRetryDuration = errorRetryDuration;
    return this;
  }

  /**
   * Get errorRetryDuration
   * @return errorRetryDuration
   */
  @javax.annotation.Nullable
  public Integer getErrorRetryDuration() {
    return errorRetryDuration;
  }

  public void setErrorRetryDuration(Integer errorRetryDuration) {
    this.errorRetryDuration = errorRetryDuration;
  }


  public CreateEndpointMessageNeptuneSettings maxFileSize(Integer maxFileSize) {
    this.maxFileSize = maxFileSize;
    return this;
  }

  /**
   * Get maxFileSize
   * @return maxFileSize
   */
  @javax.annotation.Nullable
  public Integer getMaxFileSize() {
    return maxFileSize;
  }

  public void setMaxFileSize(Integer maxFileSize) {
    this.maxFileSize = maxFileSize;
  }


  public CreateEndpointMessageNeptuneSettings maxRetryCount(Integer maxRetryCount) {
    this.maxRetryCount = maxRetryCount;
    return this;
  }

  /**
   * Get maxRetryCount
   * @return maxRetryCount
   */
  @javax.annotation.Nullable
  public Integer getMaxRetryCount() {
    return maxRetryCount;
  }

  public void setMaxRetryCount(Integer maxRetryCount) {
    this.maxRetryCount = maxRetryCount;
  }


  public CreateEndpointMessageNeptuneSettings iamAuthEnabled(Boolean iamAuthEnabled) {
    this.iamAuthEnabled = iamAuthEnabled;
    return this;
  }

  /**
   * Get iamAuthEnabled
   * @return iamAuthEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIamAuthEnabled() {
    return iamAuthEnabled;
  }

  public void setIamAuthEnabled(Boolean iamAuthEnabled) {
    this.iamAuthEnabled = iamAuthEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEndpointMessageNeptuneSettings createEndpointMessageNeptuneSettings = (CreateEndpointMessageNeptuneSettings) o;
    return Objects.equals(this.serviceAccessRoleArn, createEndpointMessageNeptuneSettings.serviceAccessRoleArn) &&
        Objects.equals(this.s3BucketName, createEndpointMessageNeptuneSettings.s3BucketName) &&
        Objects.equals(this.s3BucketFolder, createEndpointMessageNeptuneSettings.s3BucketFolder) &&
        Objects.equals(this.errorRetryDuration, createEndpointMessageNeptuneSettings.errorRetryDuration) &&
        Objects.equals(this.maxFileSize, createEndpointMessageNeptuneSettings.maxFileSize) &&
        Objects.equals(this.maxRetryCount, createEndpointMessageNeptuneSettings.maxRetryCount) &&
        Objects.equals(this.iamAuthEnabled, createEndpointMessageNeptuneSettings.iamAuthEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serviceAccessRoleArn, s3BucketName, s3BucketFolder, errorRetryDuration, maxFileSize, maxRetryCount, iamAuthEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateEndpointMessageNeptuneSettings {\n");
    sb.append("    serviceAccessRoleArn: ").append(toIndentedString(serviceAccessRoleArn)).append("\n");
    sb.append("    s3BucketName: ").append(toIndentedString(s3BucketName)).append("\n");
    sb.append("    s3BucketFolder: ").append(toIndentedString(s3BucketFolder)).append("\n");
    sb.append("    errorRetryDuration: ").append(toIndentedString(errorRetryDuration)).append("\n");
    sb.append("    maxFileSize: ").append(toIndentedString(maxFileSize)).append("\n");
    sb.append("    maxRetryCount: ").append(toIndentedString(maxRetryCount)).append("\n");
    sb.append("    iamAuthEnabled: ").append(toIndentedString(iamAuthEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ServiceAccessRoleArn");
    openapiFields.add("S3BucketName");
    openapiFields.add("S3BucketFolder");
    openapiFields.add("ErrorRetryDuration");
    openapiFields.add("MaxFileSize");
    openapiFields.add("MaxRetryCount");
    openapiFields.add("IamAuthEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("S3BucketName");
    openapiRequiredFields.add("S3BucketFolder");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateEndpointMessageNeptuneSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateEndpointMessageNeptuneSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateEndpointMessageNeptuneSettings is not found in the empty JSON string", CreateEndpointMessageNeptuneSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateEndpointMessageNeptuneSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateEndpointMessageNeptuneSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateEndpointMessageNeptuneSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ServiceAccessRoleArn`
      if (jsonObj.get("ServiceAccessRoleArn") != null && !jsonObj.get("ServiceAccessRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServiceAccessRoleArn"));
      }
      // validate the required field `S3BucketName`
      String.validateJsonElement(jsonObj.get("S3BucketName"));
      // validate the required field `S3BucketFolder`
      String.validateJsonElement(jsonObj.get("S3BucketFolder"));
      // validate the optional field `ErrorRetryDuration`
      if (jsonObj.get("ErrorRetryDuration") != null && !jsonObj.get("ErrorRetryDuration").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ErrorRetryDuration"));
      }
      // validate the optional field `MaxFileSize`
      if (jsonObj.get("MaxFileSize") != null && !jsonObj.get("MaxFileSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxFileSize"));
      }
      // validate the optional field `MaxRetryCount`
      if (jsonObj.get("MaxRetryCount") != null && !jsonObj.get("MaxRetryCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxRetryCount"));
      }
      // validate the optional field `IamAuthEnabled`
      if (jsonObj.get("IamAuthEnabled") != null && !jsonObj.get("IamAuthEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IamAuthEnabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateEndpointMessageNeptuneSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateEndpointMessageNeptuneSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateEndpointMessageNeptuneSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateEndpointMessageNeptuneSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateEndpointMessageNeptuneSettings>() {
           @Override
           public void write(JsonWriter out, CreateEndpointMessageNeptuneSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateEndpointMessageNeptuneSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateEndpointMessageNeptuneSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateEndpointMessageNeptuneSettings
   * @throws IOException if the JSON string is invalid with respect to CreateEndpointMessageNeptuneSettings
   */
  public static CreateEndpointMessageNeptuneSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateEndpointMessageNeptuneSettings.class);
  }

  /**
   * Convert an instance of CreateEndpointMessageNeptuneSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

