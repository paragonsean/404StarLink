/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EndpointSettingTypeValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Endpoint settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:28.765689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EndpointSetting {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private EndpointSettingTypeValue type;

  public static final String SERIALIZED_NAME_ENUM_VALUES = "EnumValues";
  @SerializedName(SERIALIZED_NAME_ENUM_VALUES)
  private List enumValues;

  public static final String SERIALIZED_NAME_SENSITIVE = "Sensitive";
  @SerializedName(SERIALIZED_NAME_SENSITIVE)
  private Boolean sensitive;

  public static final String SERIALIZED_NAME_UNITS = "Units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private String units;

  public static final String SERIALIZED_NAME_APPLICABILITY = "Applicability";
  @SerializedName(SERIALIZED_NAME_APPLICABILITY)
  private String applicability;

  public static final String SERIALIZED_NAME_INT_VALUE_MIN = "IntValueMin";
  @SerializedName(SERIALIZED_NAME_INT_VALUE_MIN)
  private Integer intValueMin;

  public static final String SERIALIZED_NAME_INT_VALUE_MAX = "IntValueMax";
  @SerializedName(SERIALIZED_NAME_INT_VALUE_MAX)
  private Integer intValueMax;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "DefaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private String defaultValue;

  public EndpointSetting() {
  }

  public EndpointSetting name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EndpointSetting type(EndpointSettingTypeValue type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public EndpointSettingTypeValue getType() {
    return type;
  }

  public void setType(EndpointSettingTypeValue type) {
    this.type = type;
  }


  public EndpointSetting enumValues(List enumValues) {
    this.enumValues = enumValues;
    return this;
  }

  /**
   * Get enumValues
   * @return enumValues
   */
  @javax.annotation.Nullable
  public List getEnumValues() {
    return enumValues;
  }

  public void setEnumValues(List enumValues) {
    this.enumValues = enumValues;
  }


  public EndpointSetting sensitive(Boolean sensitive) {
    this.sensitive = sensitive;
    return this;
  }

  /**
   * Get sensitive
   * @return sensitive
   */
  @javax.annotation.Nullable
  public Boolean getSensitive() {
    return sensitive;
  }

  public void setSensitive(Boolean sensitive) {
    this.sensitive = sensitive;
  }


  public EndpointSetting units(String units) {
    this.units = units;
    return this;
  }

  /**
   * Get units
   * @return units
   */
  @javax.annotation.Nullable
  public String getUnits() {
    return units;
  }

  public void setUnits(String units) {
    this.units = units;
  }


  public EndpointSetting applicability(String applicability) {
    this.applicability = applicability;
    return this;
  }

  /**
   * Get applicability
   * @return applicability
   */
  @javax.annotation.Nullable
  public String getApplicability() {
    return applicability;
  }

  public void setApplicability(String applicability) {
    this.applicability = applicability;
  }


  public EndpointSetting intValueMin(Integer intValueMin) {
    this.intValueMin = intValueMin;
    return this;
  }

  /**
   * Get intValueMin
   * @return intValueMin
   */
  @javax.annotation.Nullable
  public Integer getIntValueMin() {
    return intValueMin;
  }

  public void setIntValueMin(Integer intValueMin) {
    this.intValueMin = intValueMin;
  }


  public EndpointSetting intValueMax(Integer intValueMax) {
    this.intValueMax = intValueMax;
    return this;
  }

  /**
   * Get intValueMax
   * @return intValueMax
   */
  @javax.annotation.Nullable
  public Integer getIntValueMax() {
    return intValueMax;
  }

  public void setIntValueMax(Integer intValueMax) {
    this.intValueMax = intValueMax;
  }


  public EndpointSetting defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Get defaultValue
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointSetting endpointSetting = (EndpointSetting) o;
    return Objects.equals(this.name, endpointSetting.name) &&
        Objects.equals(this.type, endpointSetting.type) &&
        Objects.equals(this.enumValues, endpointSetting.enumValues) &&
        Objects.equals(this.sensitive, endpointSetting.sensitive) &&
        Objects.equals(this.units, endpointSetting.units) &&
        Objects.equals(this.applicability, endpointSetting.applicability) &&
        Objects.equals(this.intValueMin, endpointSetting.intValueMin) &&
        Objects.equals(this.intValueMax, endpointSetting.intValueMax) &&
        Objects.equals(this.defaultValue, endpointSetting.defaultValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, enumValues, sensitive, units, applicability, intValueMin, intValueMax, defaultValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointSetting {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    enumValues: ").append(toIndentedString(enumValues)).append("\n");
    sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    applicability: ").append(toIndentedString(applicability)).append("\n");
    sb.append("    intValueMin: ").append(toIndentedString(intValueMin)).append("\n");
    sb.append("    intValueMax: ").append(toIndentedString(intValueMax)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Type");
    openapiFields.add("EnumValues");
    openapiFields.add("Sensitive");
    openapiFields.add("Units");
    openapiFields.add("Applicability");
    openapiFields.add("IntValueMin");
    openapiFields.add("IntValueMax");
    openapiFields.add("DefaultValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EndpointSetting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointSetting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointSetting is not found in the empty JSON string", EndpointSetting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndpointSetting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointSetting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        EndpointSettingTypeValue.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `EnumValues`
      if (jsonObj.get("EnumValues") != null && !jsonObj.get("EnumValues").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("EnumValues"));
      }
      // validate the optional field `Sensitive`
      if (jsonObj.get("Sensitive") != null && !jsonObj.get("Sensitive").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Sensitive"));
      }
      // validate the optional field `Units`
      if (jsonObj.get("Units") != null && !jsonObj.get("Units").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Units"));
      }
      // validate the optional field `Applicability`
      if (jsonObj.get("Applicability") != null && !jsonObj.get("Applicability").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Applicability"));
      }
      // validate the optional field `IntValueMin`
      if (jsonObj.get("IntValueMin") != null && !jsonObj.get("IntValueMin").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("IntValueMin"));
      }
      // validate the optional field `IntValueMax`
      if (jsonObj.get("IntValueMax") != null && !jsonObj.get("IntValueMax").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("IntValueMax"));
      }
      // validate the optional field `DefaultValue`
      if (jsonObj.get("DefaultValue") != null && !jsonObj.get("DefaultValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DefaultValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointSetting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointSetting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointSetting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointSetting.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointSetting>() {
           @Override
           public void write(JsonWriter out, EndpointSetting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointSetting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EndpointSetting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EndpointSetting
   * @throws IOException if the JSON string is invalid with respect to EndpointSetting
   */
  public static EndpointSetting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointSetting.class);
  }

  /**
   * Convert an instance of EndpointSetting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

