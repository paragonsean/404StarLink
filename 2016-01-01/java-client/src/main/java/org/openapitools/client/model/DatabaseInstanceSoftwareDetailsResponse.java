/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an inventory database instance for a Fleet Advisor collector.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:28.765689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseInstanceSoftwareDetailsResponse {
  public static final String SERIALIZED_NAME_ENGINE = "Engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_ENGINE_EDITION = "EngineEdition";
  @SerializedName(SERIALIZED_NAME_ENGINE_EDITION)
  private String engineEdition;

  public static final String SERIALIZED_NAME_SERVICE_PACK = "ServicePack";
  @SerializedName(SERIALIZED_NAME_SERVICE_PACK)
  private String servicePack;

  public static final String SERIALIZED_NAME_SUPPORT_LEVEL = "SupportLevel";
  @SerializedName(SERIALIZED_NAME_SUPPORT_LEVEL)
  private String supportLevel;

  public static final String SERIALIZED_NAME_OS_ARCHITECTURE = "OsArchitecture";
  @SerializedName(SERIALIZED_NAME_OS_ARCHITECTURE)
  private Integer osArchitecture;

  public static final String SERIALIZED_NAME_TOOLTIP = "Tooltip";
  @SerializedName(SERIALIZED_NAME_TOOLTIP)
  private String tooltip;

  public DatabaseInstanceSoftwareDetailsResponse() {
  }

  public DatabaseInstanceSoftwareDetailsResponse engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public DatabaseInstanceSoftwareDetailsResponse engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public DatabaseInstanceSoftwareDetailsResponse engineEdition(String engineEdition) {
    this.engineEdition = engineEdition;
    return this;
  }

  /**
   * Get engineEdition
   * @return engineEdition
   */
  @javax.annotation.Nullable
  public String getEngineEdition() {
    return engineEdition;
  }

  public void setEngineEdition(String engineEdition) {
    this.engineEdition = engineEdition;
  }


  public DatabaseInstanceSoftwareDetailsResponse servicePack(String servicePack) {
    this.servicePack = servicePack;
    return this;
  }

  /**
   * Get servicePack
   * @return servicePack
   */
  @javax.annotation.Nullable
  public String getServicePack() {
    return servicePack;
  }

  public void setServicePack(String servicePack) {
    this.servicePack = servicePack;
  }


  public DatabaseInstanceSoftwareDetailsResponse supportLevel(String supportLevel) {
    this.supportLevel = supportLevel;
    return this;
  }

  /**
   * Get supportLevel
   * @return supportLevel
   */
  @javax.annotation.Nullable
  public String getSupportLevel() {
    return supportLevel;
  }

  public void setSupportLevel(String supportLevel) {
    this.supportLevel = supportLevel;
  }


  public DatabaseInstanceSoftwareDetailsResponse osArchitecture(Integer osArchitecture) {
    this.osArchitecture = osArchitecture;
    return this;
  }

  /**
   * Get osArchitecture
   * @return osArchitecture
   */
  @javax.annotation.Nullable
  public Integer getOsArchitecture() {
    return osArchitecture;
  }

  public void setOsArchitecture(Integer osArchitecture) {
    this.osArchitecture = osArchitecture;
  }


  public DatabaseInstanceSoftwareDetailsResponse tooltip(String tooltip) {
    this.tooltip = tooltip;
    return this;
  }

  /**
   * Get tooltip
   * @return tooltip
   */
  @javax.annotation.Nullable
  public String getTooltip() {
    return tooltip;
  }

  public void setTooltip(String tooltip) {
    this.tooltip = tooltip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseInstanceSoftwareDetailsResponse databaseInstanceSoftwareDetailsResponse = (DatabaseInstanceSoftwareDetailsResponse) o;
    return Objects.equals(this.engine, databaseInstanceSoftwareDetailsResponse.engine) &&
        Objects.equals(this.engineVersion, databaseInstanceSoftwareDetailsResponse.engineVersion) &&
        Objects.equals(this.engineEdition, databaseInstanceSoftwareDetailsResponse.engineEdition) &&
        Objects.equals(this.servicePack, databaseInstanceSoftwareDetailsResponse.servicePack) &&
        Objects.equals(this.supportLevel, databaseInstanceSoftwareDetailsResponse.supportLevel) &&
        Objects.equals(this.osArchitecture, databaseInstanceSoftwareDetailsResponse.osArchitecture) &&
        Objects.equals(this.tooltip, databaseInstanceSoftwareDetailsResponse.tooltip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(engine, engineVersion, engineEdition, servicePack, supportLevel, osArchitecture, tooltip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseInstanceSoftwareDetailsResponse {\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    engineEdition: ").append(toIndentedString(engineEdition)).append("\n");
    sb.append("    servicePack: ").append(toIndentedString(servicePack)).append("\n");
    sb.append("    supportLevel: ").append(toIndentedString(supportLevel)).append("\n");
    sb.append("    osArchitecture: ").append(toIndentedString(osArchitecture)).append("\n");
    sb.append("    tooltip: ").append(toIndentedString(tooltip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Engine");
    openapiFields.add("EngineVersion");
    openapiFields.add("EngineEdition");
    openapiFields.add("ServicePack");
    openapiFields.add("SupportLevel");
    openapiFields.add("OsArchitecture");
    openapiFields.add("Tooltip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseInstanceSoftwareDetailsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseInstanceSoftwareDetailsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseInstanceSoftwareDetailsResponse is not found in the empty JSON string", DatabaseInstanceSoftwareDetailsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseInstanceSoftwareDetailsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseInstanceSoftwareDetailsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Engine`
      if (jsonObj.get("Engine") != null && !jsonObj.get("Engine").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Engine"));
      }
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `EngineEdition`
      if (jsonObj.get("EngineEdition") != null && !jsonObj.get("EngineEdition").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineEdition"));
      }
      // validate the optional field `ServicePack`
      if (jsonObj.get("ServicePack") != null && !jsonObj.get("ServicePack").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServicePack"));
      }
      // validate the optional field `SupportLevel`
      if (jsonObj.get("SupportLevel") != null && !jsonObj.get("SupportLevel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SupportLevel"));
      }
      // validate the optional field `OsArchitecture`
      if (jsonObj.get("OsArchitecture") != null && !jsonObj.get("OsArchitecture").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("OsArchitecture"));
      }
      // validate the optional field `Tooltip`
      if (jsonObj.get("Tooltip") != null && !jsonObj.get("Tooltip").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Tooltip"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseInstanceSoftwareDetailsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseInstanceSoftwareDetailsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseInstanceSoftwareDetailsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseInstanceSoftwareDetailsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseInstanceSoftwareDetailsResponse>() {
           @Override
           public void write(JsonWriter out, DatabaseInstanceSoftwareDetailsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseInstanceSoftwareDetailsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseInstanceSoftwareDetailsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseInstanceSoftwareDetailsResponse
   * @throws IOException if the JSON string is invalid with respect to DatabaseInstanceSoftwareDetailsResponse
   */
  public static DatabaseInstanceSoftwareDetailsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseInstanceSoftwareDetailsResponse.class);
  }

  /**
   * Convert an instance of DatabaseInstanceSoftwareDetailsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

