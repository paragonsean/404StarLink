/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EncryptionModeValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EndpointRedshiftSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:28.765689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EndpointRedshiftSettings {
  public static final String SERIALIZED_NAME_ACCEPT_ANY_DATE = "AcceptAnyDate";
  @SerializedName(SERIALIZED_NAME_ACCEPT_ANY_DATE)
  private Boolean acceptAnyDate;

  public static final String SERIALIZED_NAME_AFTER_CONNECT_SCRIPT = "AfterConnectScript";
  @SerializedName(SERIALIZED_NAME_AFTER_CONNECT_SCRIPT)
  private String afterConnectScript;

  public static final String SERIALIZED_NAME_BUCKET_FOLDER = "BucketFolder";
  @SerializedName(SERIALIZED_NAME_BUCKET_FOLDER)
  private String bucketFolder;

  public static final String SERIALIZED_NAME_BUCKET_NAME = "BucketName";
  @SerializedName(SERIALIZED_NAME_BUCKET_NAME)
  private String bucketName;

  public static final String SERIALIZED_NAME_CASE_SENSITIVE_NAMES = "CaseSensitiveNames";
  @SerializedName(SERIALIZED_NAME_CASE_SENSITIVE_NAMES)
  private Boolean caseSensitiveNames;

  public static final String SERIALIZED_NAME_COMP_UPDATE = "CompUpdate";
  @SerializedName(SERIALIZED_NAME_COMP_UPDATE)
  private Boolean compUpdate;

  public static final String SERIALIZED_NAME_CONNECTION_TIMEOUT = "ConnectionTimeout";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TIMEOUT)
  private Integer connectionTimeout;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "DatabaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_DATE_FORMAT = "DateFormat";
  @SerializedName(SERIALIZED_NAME_DATE_FORMAT)
  private String dateFormat;

  public static final String SERIALIZED_NAME_EMPTY_AS_NULL = "EmptyAsNull";
  @SerializedName(SERIALIZED_NAME_EMPTY_AS_NULL)
  private Boolean emptyAsNull;

  public static final String SERIALIZED_NAME_ENCRYPTION_MODE = "EncryptionMode";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_MODE)
  private EncryptionModeValue encryptionMode;

  public static final String SERIALIZED_NAME_EXPLICIT_IDS = "ExplicitIds";
  @SerializedName(SERIALIZED_NAME_EXPLICIT_IDS)
  private Boolean explicitIds;

  public static final String SERIALIZED_NAME_FILE_TRANSFER_UPLOAD_STREAMS = "FileTransferUploadStreams";
  @SerializedName(SERIALIZED_NAME_FILE_TRANSFER_UPLOAD_STREAMS)
  private Integer fileTransferUploadStreams;

  public static final String SERIALIZED_NAME_LOAD_TIMEOUT = "LoadTimeout";
  @SerializedName(SERIALIZED_NAME_LOAD_TIMEOUT)
  private Integer loadTimeout;

  public static final String SERIALIZED_NAME_MAX_FILE_SIZE = "MaxFileSize";
  @SerializedName(SERIALIZED_NAME_MAX_FILE_SIZE)
  private Integer maxFileSize;

  public static final String SERIALIZED_NAME_PASSWORD = "Password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_REMOVE_QUOTES = "RemoveQuotes";
  @SerializedName(SERIALIZED_NAME_REMOVE_QUOTES)
  private Boolean removeQuotes;

  public static final String SERIALIZED_NAME_REPLACE_INVALID_CHARS = "ReplaceInvalidChars";
  @SerializedName(SERIALIZED_NAME_REPLACE_INVALID_CHARS)
  private String replaceInvalidChars;

  public static final String SERIALIZED_NAME_REPLACE_CHARS = "ReplaceChars";
  @SerializedName(SERIALIZED_NAME_REPLACE_CHARS)
  private String replaceChars;

  public static final String SERIALIZED_NAME_SERVER_NAME = "ServerName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  private String serverName;

  public static final String SERIALIZED_NAME_SERVICE_ACCESS_ROLE_ARN = "ServiceAccessRoleArn";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCESS_ROLE_ARN)
  private String serviceAccessRoleArn;

  public static final String SERIALIZED_NAME_SERVER_SIDE_ENCRYPTION_KMS_KEY_ID = "ServerSideEncryptionKmsKeyId";
  @SerializedName(SERIALIZED_NAME_SERVER_SIDE_ENCRYPTION_KMS_KEY_ID)
  private String serverSideEncryptionKmsKeyId;

  public static final String SERIALIZED_NAME_TIME_FORMAT = "TimeFormat";
  @SerializedName(SERIALIZED_NAME_TIME_FORMAT)
  private String timeFormat;

  public static final String SERIALIZED_NAME_TRIM_BLANKS = "TrimBlanks";
  @SerializedName(SERIALIZED_NAME_TRIM_BLANKS)
  private Boolean trimBlanks;

  public static final String SERIALIZED_NAME_TRUNCATE_COLUMNS = "TruncateColumns";
  @SerializedName(SERIALIZED_NAME_TRUNCATE_COLUMNS)
  private Boolean truncateColumns;

  public static final String SERIALIZED_NAME_USERNAME = "Username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_WRITE_BUFFER_SIZE = "WriteBufferSize";
  @SerializedName(SERIALIZED_NAME_WRITE_BUFFER_SIZE)
  private Integer writeBufferSize;

  public static final String SERIALIZED_NAME_SECRETS_MANAGER_ACCESS_ROLE_ARN = "SecretsManagerAccessRoleArn";
  @SerializedName(SERIALIZED_NAME_SECRETS_MANAGER_ACCESS_ROLE_ARN)
  private String secretsManagerAccessRoleArn;

  public static final String SERIALIZED_NAME_SECRETS_MANAGER_SECRET_ID = "SecretsManagerSecretId";
  @SerializedName(SERIALIZED_NAME_SECRETS_MANAGER_SECRET_ID)
  private String secretsManagerSecretId;

  public static final String SERIALIZED_NAME_MAP_BOOLEAN_AS_BOOLEAN = "MapBooleanAsBoolean";
  @SerializedName(SERIALIZED_NAME_MAP_BOOLEAN_AS_BOOLEAN)
  private Boolean mapBooleanAsBoolean;

  public EndpointRedshiftSettings() {
  }

  public EndpointRedshiftSettings acceptAnyDate(Boolean acceptAnyDate) {
    this.acceptAnyDate = acceptAnyDate;
    return this;
  }

  /**
   * Get acceptAnyDate
   * @return acceptAnyDate
   */
  @javax.annotation.Nullable
  public Boolean getAcceptAnyDate() {
    return acceptAnyDate;
  }

  public void setAcceptAnyDate(Boolean acceptAnyDate) {
    this.acceptAnyDate = acceptAnyDate;
  }


  public EndpointRedshiftSettings afterConnectScript(String afterConnectScript) {
    this.afterConnectScript = afterConnectScript;
    return this;
  }

  /**
   * Get afterConnectScript
   * @return afterConnectScript
   */
  @javax.annotation.Nullable
  public String getAfterConnectScript() {
    return afterConnectScript;
  }

  public void setAfterConnectScript(String afterConnectScript) {
    this.afterConnectScript = afterConnectScript;
  }


  public EndpointRedshiftSettings bucketFolder(String bucketFolder) {
    this.bucketFolder = bucketFolder;
    return this;
  }

  /**
   * Get bucketFolder
   * @return bucketFolder
   */
  @javax.annotation.Nullable
  public String getBucketFolder() {
    return bucketFolder;
  }

  public void setBucketFolder(String bucketFolder) {
    this.bucketFolder = bucketFolder;
  }


  public EndpointRedshiftSettings bucketName(String bucketName) {
    this.bucketName = bucketName;
    return this;
  }

  /**
   * Get bucketName
   * @return bucketName
   */
  @javax.annotation.Nullable
  public String getBucketName() {
    return bucketName;
  }

  public void setBucketName(String bucketName) {
    this.bucketName = bucketName;
  }


  public EndpointRedshiftSettings caseSensitiveNames(Boolean caseSensitiveNames) {
    this.caseSensitiveNames = caseSensitiveNames;
    return this;
  }

  /**
   * Get caseSensitiveNames
   * @return caseSensitiveNames
   */
  @javax.annotation.Nullable
  public Boolean getCaseSensitiveNames() {
    return caseSensitiveNames;
  }

  public void setCaseSensitiveNames(Boolean caseSensitiveNames) {
    this.caseSensitiveNames = caseSensitiveNames;
  }


  public EndpointRedshiftSettings compUpdate(Boolean compUpdate) {
    this.compUpdate = compUpdate;
    return this;
  }

  /**
   * Get compUpdate
   * @return compUpdate
   */
  @javax.annotation.Nullable
  public Boolean getCompUpdate() {
    return compUpdate;
  }

  public void setCompUpdate(Boolean compUpdate) {
    this.compUpdate = compUpdate;
  }


  public EndpointRedshiftSettings connectionTimeout(Integer connectionTimeout) {
    this.connectionTimeout = connectionTimeout;
    return this;
  }

  /**
   * Get connectionTimeout
   * @return connectionTimeout
   */
  @javax.annotation.Nullable
  public Integer getConnectionTimeout() {
    return connectionTimeout;
  }

  public void setConnectionTimeout(Integer connectionTimeout) {
    this.connectionTimeout = connectionTimeout;
  }


  public EndpointRedshiftSettings databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * Get databaseName
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public EndpointRedshiftSettings dateFormat(String dateFormat) {
    this.dateFormat = dateFormat;
    return this;
  }

  /**
   * Get dateFormat
   * @return dateFormat
   */
  @javax.annotation.Nullable
  public String getDateFormat() {
    return dateFormat;
  }

  public void setDateFormat(String dateFormat) {
    this.dateFormat = dateFormat;
  }


  public EndpointRedshiftSettings emptyAsNull(Boolean emptyAsNull) {
    this.emptyAsNull = emptyAsNull;
    return this;
  }

  /**
   * Get emptyAsNull
   * @return emptyAsNull
   */
  @javax.annotation.Nullable
  public Boolean getEmptyAsNull() {
    return emptyAsNull;
  }

  public void setEmptyAsNull(Boolean emptyAsNull) {
    this.emptyAsNull = emptyAsNull;
  }


  public EndpointRedshiftSettings encryptionMode(EncryptionModeValue encryptionMode) {
    this.encryptionMode = encryptionMode;
    return this;
  }

  /**
   * Get encryptionMode
   * @return encryptionMode
   */
  @javax.annotation.Nullable
  public EncryptionModeValue getEncryptionMode() {
    return encryptionMode;
  }

  public void setEncryptionMode(EncryptionModeValue encryptionMode) {
    this.encryptionMode = encryptionMode;
  }


  public EndpointRedshiftSettings explicitIds(Boolean explicitIds) {
    this.explicitIds = explicitIds;
    return this;
  }

  /**
   * Get explicitIds
   * @return explicitIds
   */
  @javax.annotation.Nullable
  public Boolean getExplicitIds() {
    return explicitIds;
  }

  public void setExplicitIds(Boolean explicitIds) {
    this.explicitIds = explicitIds;
  }


  public EndpointRedshiftSettings fileTransferUploadStreams(Integer fileTransferUploadStreams) {
    this.fileTransferUploadStreams = fileTransferUploadStreams;
    return this;
  }

  /**
   * Get fileTransferUploadStreams
   * @return fileTransferUploadStreams
   */
  @javax.annotation.Nullable
  public Integer getFileTransferUploadStreams() {
    return fileTransferUploadStreams;
  }

  public void setFileTransferUploadStreams(Integer fileTransferUploadStreams) {
    this.fileTransferUploadStreams = fileTransferUploadStreams;
  }


  public EndpointRedshiftSettings loadTimeout(Integer loadTimeout) {
    this.loadTimeout = loadTimeout;
    return this;
  }

  /**
   * Get loadTimeout
   * @return loadTimeout
   */
  @javax.annotation.Nullable
  public Integer getLoadTimeout() {
    return loadTimeout;
  }

  public void setLoadTimeout(Integer loadTimeout) {
    this.loadTimeout = loadTimeout;
  }


  public EndpointRedshiftSettings maxFileSize(Integer maxFileSize) {
    this.maxFileSize = maxFileSize;
    return this;
  }

  /**
   * Get maxFileSize
   * @return maxFileSize
   */
  @javax.annotation.Nullable
  public Integer getMaxFileSize() {
    return maxFileSize;
  }

  public void setMaxFileSize(Integer maxFileSize) {
    this.maxFileSize = maxFileSize;
  }


  public EndpointRedshiftSettings password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public EndpointRedshiftSettings port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public EndpointRedshiftSettings removeQuotes(Boolean removeQuotes) {
    this.removeQuotes = removeQuotes;
    return this;
  }

  /**
   * Get removeQuotes
   * @return removeQuotes
   */
  @javax.annotation.Nullable
  public Boolean getRemoveQuotes() {
    return removeQuotes;
  }

  public void setRemoveQuotes(Boolean removeQuotes) {
    this.removeQuotes = removeQuotes;
  }


  public EndpointRedshiftSettings replaceInvalidChars(String replaceInvalidChars) {
    this.replaceInvalidChars = replaceInvalidChars;
    return this;
  }

  /**
   * Get replaceInvalidChars
   * @return replaceInvalidChars
   */
  @javax.annotation.Nullable
  public String getReplaceInvalidChars() {
    return replaceInvalidChars;
  }

  public void setReplaceInvalidChars(String replaceInvalidChars) {
    this.replaceInvalidChars = replaceInvalidChars;
  }


  public EndpointRedshiftSettings replaceChars(String replaceChars) {
    this.replaceChars = replaceChars;
    return this;
  }

  /**
   * Get replaceChars
   * @return replaceChars
   */
  @javax.annotation.Nullable
  public String getReplaceChars() {
    return replaceChars;
  }

  public void setReplaceChars(String replaceChars) {
    this.replaceChars = replaceChars;
  }


  public EndpointRedshiftSettings serverName(String serverName) {
    this.serverName = serverName;
    return this;
  }

  /**
   * Get serverName
   * @return serverName
   */
  @javax.annotation.Nullable
  public String getServerName() {
    return serverName;
  }

  public void setServerName(String serverName) {
    this.serverName = serverName;
  }


  public EndpointRedshiftSettings serviceAccessRoleArn(String serviceAccessRoleArn) {
    this.serviceAccessRoleArn = serviceAccessRoleArn;
    return this;
  }

  /**
   * Get serviceAccessRoleArn
   * @return serviceAccessRoleArn
   */
  @javax.annotation.Nullable
  public String getServiceAccessRoleArn() {
    return serviceAccessRoleArn;
  }

  public void setServiceAccessRoleArn(String serviceAccessRoleArn) {
    this.serviceAccessRoleArn = serviceAccessRoleArn;
  }


  public EndpointRedshiftSettings serverSideEncryptionKmsKeyId(String serverSideEncryptionKmsKeyId) {
    this.serverSideEncryptionKmsKeyId = serverSideEncryptionKmsKeyId;
    return this;
  }

  /**
   * Get serverSideEncryptionKmsKeyId
   * @return serverSideEncryptionKmsKeyId
   */
  @javax.annotation.Nullable
  public String getServerSideEncryptionKmsKeyId() {
    return serverSideEncryptionKmsKeyId;
  }

  public void setServerSideEncryptionKmsKeyId(String serverSideEncryptionKmsKeyId) {
    this.serverSideEncryptionKmsKeyId = serverSideEncryptionKmsKeyId;
  }


  public EndpointRedshiftSettings timeFormat(String timeFormat) {
    this.timeFormat = timeFormat;
    return this;
  }

  /**
   * Get timeFormat
   * @return timeFormat
   */
  @javax.annotation.Nullable
  public String getTimeFormat() {
    return timeFormat;
  }

  public void setTimeFormat(String timeFormat) {
    this.timeFormat = timeFormat;
  }


  public EndpointRedshiftSettings trimBlanks(Boolean trimBlanks) {
    this.trimBlanks = trimBlanks;
    return this;
  }

  /**
   * Get trimBlanks
   * @return trimBlanks
   */
  @javax.annotation.Nullable
  public Boolean getTrimBlanks() {
    return trimBlanks;
  }

  public void setTrimBlanks(Boolean trimBlanks) {
    this.trimBlanks = trimBlanks;
  }


  public EndpointRedshiftSettings truncateColumns(Boolean truncateColumns) {
    this.truncateColumns = truncateColumns;
    return this;
  }

  /**
   * Get truncateColumns
   * @return truncateColumns
   */
  @javax.annotation.Nullable
  public Boolean getTruncateColumns() {
    return truncateColumns;
  }

  public void setTruncateColumns(Boolean truncateColumns) {
    this.truncateColumns = truncateColumns;
  }


  public EndpointRedshiftSettings username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public EndpointRedshiftSettings writeBufferSize(Integer writeBufferSize) {
    this.writeBufferSize = writeBufferSize;
    return this;
  }

  /**
   * Get writeBufferSize
   * @return writeBufferSize
   */
  @javax.annotation.Nullable
  public Integer getWriteBufferSize() {
    return writeBufferSize;
  }

  public void setWriteBufferSize(Integer writeBufferSize) {
    this.writeBufferSize = writeBufferSize;
  }


  public EndpointRedshiftSettings secretsManagerAccessRoleArn(String secretsManagerAccessRoleArn) {
    this.secretsManagerAccessRoleArn = secretsManagerAccessRoleArn;
    return this;
  }

  /**
   * Get secretsManagerAccessRoleArn
   * @return secretsManagerAccessRoleArn
   */
  @javax.annotation.Nullable
  public String getSecretsManagerAccessRoleArn() {
    return secretsManagerAccessRoleArn;
  }

  public void setSecretsManagerAccessRoleArn(String secretsManagerAccessRoleArn) {
    this.secretsManagerAccessRoleArn = secretsManagerAccessRoleArn;
  }


  public EndpointRedshiftSettings secretsManagerSecretId(String secretsManagerSecretId) {
    this.secretsManagerSecretId = secretsManagerSecretId;
    return this;
  }

  /**
   * Get secretsManagerSecretId
   * @return secretsManagerSecretId
   */
  @javax.annotation.Nullable
  public String getSecretsManagerSecretId() {
    return secretsManagerSecretId;
  }

  public void setSecretsManagerSecretId(String secretsManagerSecretId) {
    this.secretsManagerSecretId = secretsManagerSecretId;
  }


  public EndpointRedshiftSettings mapBooleanAsBoolean(Boolean mapBooleanAsBoolean) {
    this.mapBooleanAsBoolean = mapBooleanAsBoolean;
    return this;
  }

  /**
   * Get mapBooleanAsBoolean
   * @return mapBooleanAsBoolean
   */
  @javax.annotation.Nullable
  public Boolean getMapBooleanAsBoolean() {
    return mapBooleanAsBoolean;
  }

  public void setMapBooleanAsBoolean(Boolean mapBooleanAsBoolean) {
    this.mapBooleanAsBoolean = mapBooleanAsBoolean;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointRedshiftSettings endpointRedshiftSettings = (EndpointRedshiftSettings) o;
    return Objects.equals(this.acceptAnyDate, endpointRedshiftSettings.acceptAnyDate) &&
        Objects.equals(this.afterConnectScript, endpointRedshiftSettings.afterConnectScript) &&
        Objects.equals(this.bucketFolder, endpointRedshiftSettings.bucketFolder) &&
        Objects.equals(this.bucketName, endpointRedshiftSettings.bucketName) &&
        Objects.equals(this.caseSensitiveNames, endpointRedshiftSettings.caseSensitiveNames) &&
        Objects.equals(this.compUpdate, endpointRedshiftSettings.compUpdate) &&
        Objects.equals(this.connectionTimeout, endpointRedshiftSettings.connectionTimeout) &&
        Objects.equals(this.databaseName, endpointRedshiftSettings.databaseName) &&
        Objects.equals(this.dateFormat, endpointRedshiftSettings.dateFormat) &&
        Objects.equals(this.emptyAsNull, endpointRedshiftSettings.emptyAsNull) &&
        Objects.equals(this.encryptionMode, endpointRedshiftSettings.encryptionMode) &&
        Objects.equals(this.explicitIds, endpointRedshiftSettings.explicitIds) &&
        Objects.equals(this.fileTransferUploadStreams, endpointRedshiftSettings.fileTransferUploadStreams) &&
        Objects.equals(this.loadTimeout, endpointRedshiftSettings.loadTimeout) &&
        Objects.equals(this.maxFileSize, endpointRedshiftSettings.maxFileSize) &&
        Objects.equals(this.password, endpointRedshiftSettings.password) &&
        Objects.equals(this.port, endpointRedshiftSettings.port) &&
        Objects.equals(this.removeQuotes, endpointRedshiftSettings.removeQuotes) &&
        Objects.equals(this.replaceInvalidChars, endpointRedshiftSettings.replaceInvalidChars) &&
        Objects.equals(this.replaceChars, endpointRedshiftSettings.replaceChars) &&
        Objects.equals(this.serverName, endpointRedshiftSettings.serverName) &&
        Objects.equals(this.serviceAccessRoleArn, endpointRedshiftSettings.serviceAccessRoleArn) &&
        Objects.equals(this.serverSideEncryptionKmsKeyId, endpointRedshiftSettings.serverSideEncryptionKmsKeyId) &&
        Objects.equals(this.timeFormat, endpointRedshiftSettings.timeFormat) &&
        Objects.equals(this.trimBlanks, endpointRedshiftSettings.trimBlanks) &&
        Objects.equals(this.truncateColumns, endpointRedshiftSettings.truncateColumns) &&
        Objects.equals(this.username, endpointRedshiftSettings.username) &&
        Objects.equals(this.writeBufferSize, endpointRedshiftSettings.writeBufferSize) &&
        Objects.equals(this.secretsManagerAccessRoleArn, endpointRedshiftSettings.secretsManagerAccessRoleArn) &&
        Objects.equals(this.secretsManagerSecretId, endpointRedshiftSettings.secretsManagerSecretId) &&
        Objects.equals(this.mapBooleanAsBoolean, endpointRedshiftSettings.mapBooleanAsBoolean);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptAnyDate, afterConnectScript, bucketFolder, bucketName, caseSensitiveNames, compUpdate, connectionTimeout, databaseName, dateFormat, emptyAsNull, encryptionMode, explicitIds, fileTransferUploadStreams, loadTimeout, maxFileSize, password, port, removeQuotes, replaceInvalidChars, replaceChars, serverName, serviceAccessRoleArn, serverSideEncryptionKmsKeyId, timeFormat, trimBlanks, truncateColumns, username, writeBufferSize, secretsManagerAccessRoleArn, secretsManagerSecretId, mapBooleanAsBoolean);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointRedshiftSettings {\n");
    sb.append("    acceptAnyDate: ").append(toIndentedString(acceptAnyDate)).append("\n");
    sb.append("    afterConnectScript: ").append(toIndentedString(afterConnectScript)).append("\n");
    sb.append("    bucketFolder: ").append(toIndentedString(bucketFolder)).append("\n");
    sb.append("    bucketName: ").append(toIndentedString(bucketName)).append("\n");
    sb.append("    caseSensitiveNames: ").append(toIndentedString(caseSensitiveNames)).append("\n");
    sb.append("    compUpdate: ").append(toIndentedString(compUpdate)).append("\n");
    sb.append("    connectionTimeout: ").append(toIndentedString(connectionTimeout)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    dateFormat: ").append(toIndentedString(dateFormat)).append("\n");
    sb.append("    emptyAsNull: ").append(toIndentedString(emptyAsNull)).append("\n");
    sb.append("    encryptionMode: ").append(toIndentedString(encryptionMode)).append("\n");
    sb.append("    explicitIds: ").append(toIndentedString(explicitIds)).append("\n");
    sb.append("    fileTransferUploadStreams: ").append(toIndentedString(fileTransferUploadStreams)).append("\n");
    sb.append("    loadTimeout: ").append(toIndentedString(loadTimeout)).append("\n");
    sb.append("    maxFileSize: ").append(toIndentedString(maxFileSize)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    removeQuotes: ").append(toIndentedString(removeQuotes)).append("\n");
    sb.append("    replaceInvalidChars: ").append(toIndentedString(replaceInvalidChars)).append("\n");
    sb.append("    replaceChars: ").append(toIndentedString(replaceChars)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    serviceAccessRoleArn: ").append(toIndentedString(serviceAccessRoleArn)).append("\n");
    sb.append("    serverSideEncryptionKmsKeyId: ").append(toIndentedString(serverSideEncryptionKmsKeyId)).append("\n");
    sb.append("    timeFormat: ").append(toIndentedString(timeFormat)).append("\n");
    sb.append("    trimBlanks: ").append(toIndentedString(trimBlanks)).append("\n");
    sb.append("    truncateColumns: ").append(toIndentedString(truncateColumns)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    writeBufferSize: ").append(toIndentedString(writeBufferSize)).append("\n");
    sb.append("    secretsManagerAccessRoleArn: ").append(toIndentedString(secretsManagerAccessRoleArn)).append("\n");
    sb.append("    secretsManagerSecretId: ").append(toIndentedString(secretsManagerSecretId)).append("\n");
    sb.append("    mapBooleanAsBoolean: ").append(toIndentedString(mapBooleanAsBoolean)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AcceptAnyDate");
    openapiFields.add("AfterConnectScript");
    openapiFields.add("BucketFolder");
    openapiFields.add("BucketName");
    openapiFields.add("CaseSensitiveNames");
    openapiFields.add("CompUpdate");
    openapiFields.add("ConnectionTimeout");
    openapiFields.add("DatabaseName");
    openapiFields.add("DateFormat");
    openapiFields.add("EmptyAsNull");
    openapiFields.add("EncryptionMode");
    openapiFields.add("ExplicitIds");
    openapiFields.add("FileTransferUploadStreams");
    openapiFields.add("LoadTimeout");
    openapiFields.add("MaxFileSize");
    openapiFields.add("Password");
    openapiFields.add("Port");
    openapiFields.add("RemoveQuotes");
    openapiFields.add("ReplaceInvalidChars");
    openapiFields.add("ReplaceChars");
    openapiFields.add("ServerName");
    openapiFields.add("ServiceAccessRoleArn");
    openapiFields.add("ServerSideEncryptionKmsKeyId");
    openapiFields.add("TimeFormat");
    openapiFields.add("TrimBlanks");
    openapiFields.add("TruncateColumns");
    openapiFields.add("Username");
    openapiFields.add("WriteBufferSize");
    openapiFields.add("SecretsManagerAccessRoleArn");
    openapiFields.add("SecretsManagerSecretId");
    openapiFields.add("MapBooleanAsBoolean");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EndpointRedshiftSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointRedshiftSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointRedshiftSettings is not found in the empty JSON string", EndpointRedshiftSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndpointRedshiftSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointRedshiftSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AcceptAnyDate`
      if (jsonObj.get("AcceptAnyDate") != null && !jsonObj.get("AcceptAnyDate").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AcceptAnyDate"));
      }
      // validate the optional field `AfterConnectScript`
      if (jsonObj.get("AfterConnectScript") != null && !jsonObj.get("AfterConnectScript").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AfterConnectScript"));
      }
      // validate the optional field `BucketFolder`
      if (jsonObj.get("BucketFolder") != null && !jsonObj.get("BucketFolder").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BucketFolder"));
      }
      // validate the optional field `BucketName`
      if (jsonObj.get("BucketName") != null && !jsonObj.get("BucketName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BucketName"));
      }
      // validate the optional field `CaseSensitiveNames`
      if (jsonObj.get("CaseSensitiveNames") != null && !jsonObj.get("CaseSensitiveNames").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CaseSensitiveNames"));
      }
      // validate the optional field `CompUpdate`
      if (jsonObj.get("CompUpdate") != null && !jsonObj.get("CompUpdate").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CompUpdate"));
      }
      // validate the optional field `ConnectionTimeout`
      if (jsonObj.get("ConnectionTimeout") != null && !jsonObj.get("ConnectionTimeout").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ConnectionTimeout"));
      }
      // validate the optional field `DatabaseName`
      if (jsonObj.get("DatabaseName") != null && !jsonObj.get("DatabaseName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatabaseName"));
      }
      // validate the optional field `DateFormat`
      if (jsonObj.get("DateFormat") != null && !jsonObj.get("DateFormat").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DateFormat"));
      }
      // validate the optional field `EmptyAsNull`
      if (jsonObj.get("EmptyAsNull") != null && !jsonObj.get("EmptyAsNull").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EmptyAsNull"));
      }
      // validate the optional field `EncryptionMode`
      if (jsonObj.get("EncryptionMode") != null && !jsonObj.get("EncryptionMode").isJsonNull()) {
        EncryptionModeValue.validateJsonElement(jsonObj.get("EncryptionMode"));
      }
      // validate the optional field `ExplicitIds`
      if (jsonObj.get("ExplicitIds") != null && !jsonObj.get("ExplicitIds").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ExplicitIds"));
      }
      // validate the optional field `FileTransferUploadStreams`
      if (jsonObj.get("FileTransferUploadStreams") != null && !jsonObj.get("FileTransferUploadStreams").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FileTransferUploadStreams"));
      }
      // validate the optional field `LoadTimeout`
      if (jsonObj.get("LoadTimeout") != null && !jsonObj.get("LoadTimeout").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("LoadTimeout"));
      }
      // validate the optional field `MaxFileSize`
      if (jsonObj.get("MaxFileSize") != null && !jsonObj.get("MaxFileSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxFileSize"));
      }
      // validate the optional field `Password`
      if (jsonObj.get("Password") != null && !jsonObj.get("Password").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Password"));
      }
      // validate the optional field `Port`
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Port"));
      }
      // validate the optional field `RemoveQuotes`
      if (jsonObj.get("RemoveQuotes") != null && !jsonObj.get("RemoveQuotes").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RemoveQuotes"));
      }
      // validate the optional field `ReplaceInvalidChars`
      if (jsonObj.get("ReplaceInvalidChars") != null && !jsonObj.get("ReplaceInvalidChars").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplaceInvalidChars"));
      }
      // validate the optional field `ReplaceChars`
      if (jsonObj.get("ReplaceChars") != null && !jsonObj.get("ReplaceChars").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplaceChars"));
      }
      // validate the optional field `ServerName`
      if (jsonObj.get("ServerName") != null && !jsonObj.get("ServerName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServerName"));
      }
      // validate the optional field `ServiceAccessRoleArn`
      if (jsonObj.get("ServiceAccessRoleArn") != null && !jsonObj.get("ServiceAccessRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServiceAccessRoleArn"));
      }
      // validate the optional field `ServerSideEncryptionKmsKeyId`
      if (jsonObj.get("ServerSideEncryptionKmsKeyId") != null && !jsonObj.get("ServerSideEncryptionKmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServerSideEncryptionKmsKeyId"));
      }
      // validate the optional field `TimeFormat`
      if (jsonObj.get("TimeFormat") != null && !jsonObj.get("TimeFormat").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TimeFormat"));
      }
      // validate the optional field `TrimBlanks`
      if (jsonObj.get("TrimBlanks") != null && !jsonObj.get("TrimBlanks").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("TrimBlanks"));
      }
      // validate the optional field `TruncateColumns`
      if (jsonObj.get("TruncateColumns") != null && !jsonObj.get("TruncateColumns").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("TruncateColumns"));
      }
      // validate the optional field `Username`
      if (jsonObj.get("Username") != null && !jsonObj.get("Username").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Username"));
      }
      // validate the optional field `WriteBufferSize`
      if (jsonObj.get("WriteBufferSize") != null && !jsonObj.get("WriteBufferSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("WriteBufferSize"));
      }
      // validate the optional field `SecretsManagerAccessRoleArn`
      if (jsonObj.get("SecretsManagerAccessRoleArn") != null && !jsonObj.get("SecretsManagerAccessRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecretsManagerAccessRoleArn"));
      }
      // validate the optional field `SecretsManagerSecretId`
      if (jsonObj.get("SecretsManagerSecretId") != null && !jsonObj.get("SecretsManagerSecretId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecretsManagerSecretId"));
      }
      // validate the optional field `MapBooleanAsBoolean`
      if (jsonObj.get("MapBooleanAsBoolean") != null && !jsonObj.get("MapBooleanAsBoolean").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("MapBooleanAsBoolean"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointRedshiftSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointRedshiftSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointRedshiftSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointRedshiftSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointRedshiftSettings>() {
           @Override
           public void write(JsonWriter out, EndpointRedshiftSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointRedshiftSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EndpointRedshiftSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EndpointRedshiftSettings
   * @throws IOException if the JSON string is invalid with respect to EndpointRedshiftSettings
   */
  public static EndpointRedshiftSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointRedshiftSettings.class);
  }

  /**
   * Convert an instance of EndpointRedshiftSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

