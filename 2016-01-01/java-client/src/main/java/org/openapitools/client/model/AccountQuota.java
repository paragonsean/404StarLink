/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a quota for an Amazon Web Services account, for example the number of replication instances allowed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:28.765689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountQuota {
  public static final String SERIALIZED_NAME_ACCOUNT_QUOTA_NAME = "AccountQuotaName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_QUOTA_NAME)
  private String accountQuotaName;

  public static final String SERIALIZED_NAME_USED = "Used";
  @SerializedName(SERIALIZED_NAME_USED)
  private Integer used;

  public static final String SERIALIZED_NAME_MAX = "Max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Integer max;

  public AccountQuota() {
  }

  public AccountQuota accountQuotaName(String accountQuotaName) {
    this.accountQuotaName = accountQuotaName;
    return this;
  }

  /**
   * Get accountQuotaName
   * @return accountQuotaName
   */
  @javax.annotation.Nullable
  public String getAccountQuotaName() {
    return accountQuotaName;
  }

  public void setAccountQuotaName(String accountQuotaName) {
    this.accountQuotaName = accountQuotaName;
  }


  public AccountQuota used(Integer used) {
    this.used = used;
    return this;
  }

  /**
   * Get used
   * @return used
   */
  @javax.annotation.Nullable
  public Integer getUsed() {
    return used;
  }

  public void setUsed(Integer used) {
    this.used = used;
  }


  public AccountQuota max(Integer max) {
    this.max = max;
    return this;
  }

  /**
   * Get max
   * @return max
   */
  @javax.annotation.Nullable
  public Integer getMax() {
    return max;
  }

  public void setMax(Integer max) {
    this.max = max;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountQuota accountQuota = (AccountQuota) o;
    return Objects.equals(this.accountQuotaName, accountQuota.accountQuotaName) &&
        Objects.equals(this.used, accountQuota.used) &&
        Objects.equals(this.max, accountQuota.max);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountQuotaName, used, max);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountQuota {\n");
    sb.append("    accountQuotaName: ").append(toIndentedString(accountQuotaName)).append("\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountQuotaName");
    openapiFields.add("Used");
    openapiFields.add("Max");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountQuota
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountQuota.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountQuota is not found in the empty JSON string", AccountQuota.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountQuota.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountQuota` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AccountQuotaName`
      if (jsonObj.get("AccountQuotaName") != null && !jsonObj.get("AccountQuotaName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AccountQuotaName"));
      }
      // validate the optional field `Used`
      if (jsonObj.get("Used") != null && !jsonObj.get("Used").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Used"));
      }
      // validate the optional field `Max`
      if (jsonObj.get("Max") != null && !jsonObj.get("Max").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Max"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountQuota.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountQuota' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountQuota> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountQuota.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountQuota>() {
           @Override
           public void write(JsonWriter out, AccountQuota value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountQuota read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountQuota given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountQuota
   * @throws IOException if the JSON string is invalid with respect to AccountQuota
   */
  public static AccountQuota fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountQuota.class);
  }

  /**
   * Convert an instance of AccountQuota to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

