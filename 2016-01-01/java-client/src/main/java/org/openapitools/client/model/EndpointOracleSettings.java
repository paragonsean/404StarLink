/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CharLengthSemantics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EndpointOracleSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:28.765689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EndpointOracleSettings {
  public static final String SERIALIZED_NAME_ADD_SUPPLEMENTAL_LOGGING = "AddSupplementalLogging";
  @SerializedName(SERIALIZED_NAME_ADD_SUPPLEMENTAL_LOGGING)
  private Boolean addSupplementalLogging;

  public static final String SERIALIZED_NAME_ARCHIVED_LOG_DEST_ID = "ArchivedLogDestId";
  @SerializedName(SERIALIZED_NAME_ARCHIVED_LOG_DEST_ID)
  private Integer archivedLogDestId;

  public static final String SERIALIZED_NAME_ADDITIONAL_ARCHIVED_LOG_DEST_ID = "AdditionalArchivedLogDestId";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ARCHIVED_LOG_DEST_ID)
  private Integer additionalArchivedLogDestId;

  public static final String SERIALIZED_NAME_EXTRA_ARCHIVED_LOG_DEST_IDS = "ExtraArchivedLogDestIds";
  @SerializedName(SERIALIZED_NAME_EXTRA_ARCHIVED_LOG_DEST_IDS)
  private List extraArchivedLogDestIds;

  public static final String SERIALIZED_NAME_ALLOW_SELECT_NESTED_TABLES = "AllowSelectNestedTables";
  @SerializedName(SERIALIZED_NAME_ALLOW_SELECT_NESTED_TABLES)
  private Boolean allowSelectNestedTables;

  public static final String SERIALIZED_NAME_PARALLEL_ASM_READ_THREADS = "ParallelAsmReadThreads";
  @SerializedName(SERIALIZED_NAME_PARALLEL_ASM_READ_THREADS)
  private Integer parallelAsmReadThreads;

  public static final String SERIALIZED_NAME_READ_AHEAD_BLOCKS = "ReadAheadBlocks";
  @SerializedName(SERIALIZED_NAME_READ_AHEAD_BLOCKS)
  private Integer readAheadBlocks;

  public static final String SERIALIZED_NAME_ACCESS_ALTERNATE_DIRECTLY = "AccessAlternateDirectly";
  @SerializedName(SERIALIZED_NAME_ACCESS_ALTERNATE_DIRECTLY)
  private Boolean accessAlternateDirectly;

  public static final String SERIALIZED_NAME_USE_ALTERNATE_FOLDER_FOR_ONLINE = "UseAlternateFolderForOnline";
  @SerializedName(SERIALIZED_NAME_USE_ALTERNATE_FOLDER_FOR_ONLINE)
  private Boolean useAlternateFolderForOnline;

  public static final String SERIALIZED_NAME_ORACLE_PATH_PREFIX = "OraclePathPrefix";
  @SerializedName(SERIALIZED_NAME_ORACLE_PATH_PREFIX)
  private String oraclePathPrefix;

  public static final String SERIALIZED_NAME_USE_PATH_PREFIX = "UsePathPrefix";
  @SerializedName(SERIALIZED_NAME_USE_PATH_PREFIX)
  private String usePathPrefix;

  public static final String SERIALIZED_NAME_REPLACE_PATH_PREFIX = "ReplacePathPrefix";
  @SerializedName(SERIALIZED_NAME_REPLACE_PATH_PREFIX)
  private Boolean replacePathPrefix;

  public static final String SERIALIZED_NAME_ENABLE_HOMOGENOUS_TABLESPACE = "EnableHomogenousTablespace";
  @SerializedName(SERIALIZED_NAME_ENABLE_HOMOGENOUS_TABLESPACE)
  private Boolean enableHomogenousTablespace;

  public static final String SERIALIZED_NAME_DIRECT_PATH_NO_LOG = "DirectPathNoLog";
  @SerializedName(SERIALIZED_NAME_DIRECT_PATH_NO_LOG)
  private Boolean directPathNoLog;

  public static final String SERIALIZED_NAME_ARCHIVED_LOGS_ONLY = "ArchivedLogsOnly";
  @SerializedName(SERIALIZED_NAME_ARCHIVED_LOGS_ONLY)
  private Boolean archivedLogsOnly;

  public static final String SERIALIZED_NAME_ASM_PASSWORD = "AsmPassword";
  @SerializedName(SERIALIZED_NAME_ASM_PASSWORD)
  private String asmPassword;

  public static final String SERIALIZED_NAME_ASM_SERVER = "AsmServer";
  @SerializedName(SERIALIZED_NAME_ASM_SERVER)
  private String asmServer;

  public static final String SERIALIZED_NAME_ASM_USER = "AsmUser";
  @SerializedName(SERIALIZED_NAME_ASM_USER)
  private String asmUser;

  public static final String SERIALIZED_NAME_CHAR_LENGTH_SEMANTICS = "CharLengthSemantics";
  @SerializedName(SERIALIZED_NAME_CHAR_LENGTH_SEMANTICS)
  private CharLengthSemantics charLengthSemantics;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "DatabaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_DIRECT_PATH_PARALLEL_LOAD = "DirectPathParallelLoad";
  @SerializedName(SERIALIZED_NAME_DIRECT_PATH_PARALLEL_LOAD)
  private Boolean directPathParallelLoad;

  public static final String SERIALIZED_NAME_FAIL_TASKS_ON_LOB_TRUNCATION = "FailTasksOnLobTruncation";
  @SerializedName(SERIALIZED_NAME_FAIL_TASKS_ON_LOB_TRUNCATION)
  private Boolean failTasksOnLobTruncation;

  public static final String SERIALIZED_NAME_NUMBER_DATATYPE_SCALE = "NumberDatatypeScale";
  @SerializedName(SERIALIZED_NAME_NUMBER_DATATYPE_SCALE)
  private Integer numberDatatypeScale;

  public static final String SERIALIZED_NAME_PASSWORD = "Password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_READ_TABLE_SPACE_NAME = "ReadTableSpaceName";
  @SerializedName(SERIALIZED_NAME_READ_TABLE_SPACE_NAME)
  private Boolean readTableSpaceName;

  public static final String SERIALIZED_NAME_RETRY_INTERVAL = "RetryInterval";
  @SerializedName(SERIALIZED_NAME_RETRY_INTERVAL)
  private Integer retryInterval;

  public static final String SERIALIZED_NAME_SECURITY_DB_ENCRYPTION = "SecurityDbEncryption";
  @SerializedName(SERIALIZED_NAME_SECURITY_DB_ENCRYPTION)
  private String securityDbEncryption;

  public static final String SERIALIZED_NAME_SECURITY_DB_ENCRYPTION_NAME = "SecurityDbEncryptionName";
  @SerializedName(SERIALIZED_NAME_SECURITY_DB_ENCRYPTION_NAME)
  private String securityDbEncryptionName;

  public static final String SERIALIZED_NAME_SERVER_NAME = "ServerName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  private String serverName;

  public static final String SERIALIZED_NAME_SPATIAL_DATA_OPTION_TO_GEO_JSON_FUNCTION_NAME = "SpatialDataOptionToGeoJsonFunctionName";
  @SerializedName(SERIALIZED_NAME_SPATIAL_DATA_OPTION_TO_GEO_JSON_FUNCTION_NAME)
  private String spatialDataOptionToGeoJsonFunctionName;

  public static final String SERIALIZED_NAME_STANDBY_DELAY_TIME = "StandbyDelayTime";
  @SerializedName(SERIALIZED_NAME_STANDBY_DELAY_TIME)
  private Integer standbyDelayTime;

  public static final String SERIALIZED_NAME_USERNAME = "Username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_USE_B_FILE = "UseBFile";
  @SerializedName(SERIALIZED_NAME_USE_B_FILE)
  private Boolean useBFile;

  public static final String SERIALIZED_NAME_USE_DIRECT_PATH_FULL_LOAD = "UseDirectPathFullLoad";
  @SerializedName(SERIALIZED_NAME_USE_DIRECT_PATH_FULL_LOAD)
  private Boolean useDirectPathFullLoad;

  public static final String SERIALIZED_NAME_USE_LOGMINER_READER = "UseLogminerReader";
  @SerializedName(SERIALIZED_NAME_USE_LOGMINER_READER)
  private Boolean useLogminerReader;

  public static final String SERIALIZED_NAME_SECRETS_MANAGER_ACCESS_ROLE_ARN = "SecretsManagerAccessRoleArn";
  @SerializedName(SERIALIZED_NAME_SECRETS_MANAGER_ACCESS_ROLE_ARN)
  private String secretsManagerAccessRoleArn;

  public static final String SERIALIZED_NAME_SECRETS_MANAGER_SECRET_ID = "SecretsManagerSecretId";
  @SerializedName(SERIALIZED_NAME_SECRETS_MANAGER_SECRET_ID)
  private String secretsManagerSecretId;

  public static final String SERIALIZED_NAME_SECRETS_MANAGER_ORACLE_ASM_ACCESS_ROLE_ARN = "SecretsManagerOracleAsmAccessRoleArn";
  @SerializedName(SERIALIZED_NAME_SECRETS_MANAGER_ORACLE_ASM_ACCESS_ROLE_ARN)
  private String secretsManagerOracleAsmAccessRoleArn;

  public static final String SERIALIZED_NAME_SECRETS_MANAGER_ORACLE_ASM_SECRET_ID = "SecretsManagerOracleAsmSecretId";
  @SerializedName(SERIALIZED_NAME_SECRETS_MANAGER_ORACLE_ASM_SECRET_ID)
  private String secretsManagerOracleAsmSecretId;

  public static final String SERIALIZED_NAME_TRIM_SPACE_IN_CHAR = "TrimSpaceInChar";
  @SerializedName(SERIALIZED_NAME_TRIM_SPACE_IN_CHAR)
  private Boolean trimSpaceInChar;

  public static final String SERIALIZED_NAME_CONVERT_TIMESTAMP_WITH_ZONE_TO_U_T_C = "ConvertTimestampWithZoneToUTC";
  @SerializedName(SERIALIZED_NAME_CONVERT_TIMESTAMP_WITH_ZONE_TO_U_T_C)
  private Boolean convertTimestampWithZoneToUTC;

  public EndpointOracleSettings() {
  }

  public EndpointOracleSettings addSupplementalLogging(Boolean addSupplementalLogging) {
    this.addSupplementalLogging = addSupplementalLogging;
    return this;
  }

  /**
   * Get addSupplementalLogging
   * @return addSupplementalLogging
   */
  @javax.annotation.Nullable
  public Boolean getAddSupplementalLogging() {
    return addSupplementalLogging;
  }

  public void setAddSupplementalLogging(Boolean addSupplementalLogging) {
    this.addSupplementalLogging = addSupplementalLogging;
  }


  public EndpointOracleSettings archivedLogDestId(Integer archivedLogDestId) {
    this.archivedLogDestId = archivedLogDestId;
    return this;
  }

  /**
   * Get archivedLogDestId
   * @return archivedLogDestId
   */
  @javax.annotation.Nullable
  public Integer getArchivedLogDestId() {
    return archivedLogDestId;
  }

  public void setArchivedLogDestId(Integer archivedLogDestId) {
    this.archivedLogDestId = archivedLogDestId;
  }


  public EndpointOracleSettings additionalArchivedLogDestId(Integer additionalArchivedLogDestId) {
    this.additionalArchivedLogDestId = additionalArchivedLogDestId;
    return this;
  }

  /**
   * Get additionalArchivedLogDestId
   * @return additionalArchivedLogDestId
   */
  @javax.annotation.Nullable
  public Integer getAdditionalArchivedLogDestId() {
    return additionalArchivedLogDestId;
  }

  public void setAdditionalArchivedLogDestId(Integer additionalArchivedLogDestId) {
    this.additionalArchivedLogDestId = additionalArchivedLogDestId;
  }


  public EndpointOracleSettings extraArchivedLogDestIds(List extraArchivedLogDestIds) {
    this.extraArchivedLogDestIds = extraArchivedLogDestIds;
    return this;
  }

  /**
   * Get extraArchivedLogDestIds
   * @return extraArchivedLogDestIds
   */
  @javax.annotation.Nullable
  public List getExtraArchivedLogDestIds() {
    return extraArchivedLogDestIds;
  }

  public void setExtraArchivedLogDestIds(List extraArchivedLogDestIds) {
    this.extraArchivedLogDestIds = extraArchivedLogDestIds;
  }


  public EndpointOracleSettings allowSelectNestedTables(Boolean allowSelectNestedTables) {
    this.allowSelectNestedTables = allowSelectNestedTables;
    return this;
  }

  /**
   * Get allowSelectNestedTables
   * @return allowSelectNestedTables
   */
  @javax.annotation.Nullable
  public Boolean getAllowSelectNestedTables() {
    return allowSelectNestedTables;
  }

  public void setAllowSelectNestedTables(Boolean allowSelectNestedTables) {
    this.allowSelectNestedTables = allowSelectNestedTables;
  }


  public EndpointOracleSettings parallelAsmReadThreads(Integer parallelAsmReadThreads) {
    this.parallelAsmReadThreads = parallelAsmReadThreads;
    return this;
  }

  /**
   * Get parallelAsmReadThreads
   * @return parallelAsmReadThreads
   */
  @javax.annotation.Nullable
  public Integer getParallelAsmReadThreads() {
    return parallelAsmReadThreads;
  }

  public void setParallelAsmReadThreads(Integer parallelAsmReadThreads) {
    this.parallelAsmReadThreads = parallelAsmReadThreads;
  }


  public EndpointOracleSettings readAheadBlocks(Integer readAheadBlocks) {
    this.readAheadBlocks = readAheadBlocks;
    return this;
  }

  /**
   * Get readAheadBlocks
   * @return readAheadBlocks
   */
  @javax.annotation.Nullable
  public Integer getReadAheadBlocks() {
    return readAheadBlocks;
  }

  public void setReadAheadBlocks(Integer readAheadBlocks) {
    this.readAheadBlocks = readAheadBlocks;
  }


  public EndpointOracleSettings accessAlternateDirectly(Boolean accessAlternateDirectly) {
    this.accessAlternateDirectly = accessAlternateDirectly;
    return this;
  }

  /**
   * Get accessAlternateDirectly
   * @return accessAlternateDirectly
   */
  @javax.annotation.Nullable
  public Boolean getAccessAlternateDirectly() {
    return accessAlternateDirectly;
  }

  public void setAccessAlternateDirectly(Boolean accessAlternateDirectly) {
    this.accessAlternateDirectly = accessAlternateDirectly;
  }


  public EndpointOracleSettings useAlternateFolderForOnline(Boolean useAlternateFolderForOnline) {
    this.useAlternateFolderForOnline = useAlternateFolderForOnline;
    return this;
  }

  /**
   * Get useAlternateFolderForOnline
   * @return useAlternateFolderForOnline
   */
  @javax.annotation.Nullable
  public Boolean getUseAlternateFolderForOnline() {
    return useAlternateFolderForOnline;
  }

  public void setUseAlternateFolderForOnline(Boolean useAlternateFolderForOnline) {
    this.useAlternateFolderForOnline = useAlternateFolderForOnline;
  }


  public EndpointOracleSettings oraclePathPrefix(String oraclePathPrefix) {
    this.oraclePathPrefix = oraclePathPrefix;
    return this;
  }

  /**
   * Get oraclePathPrefix
   * @return oraclePathPrefix
   */
  @javax.annotation.Nullable
  public String getOraclePathPrefix() {
    return oraclePathPrefix;
  }

  public void setOraclePathPrefix(String oraclePathPrefix) {
    this.oraclePathPrefix = oraclePathPrefix;
  }


  public EndpointOracleSettings usePathPrefix(String usePathPrefix) {
    this.usePathPrefix = usePathPrefix;
    return this;
  }

  /**
   * Get usePathPrefix
   * @return usePathPrefix
   */
  @javax.annotation.Nullable
  public String getUsePathPrefix() {
    return usePathPrefix;
  }

  public void setUsePathPrefix(String usePathPrefix) {
    this.usePathPrefix = usePathPrefix;
  }


  public EndpointOracleSettings replacePathPrefix(Boolean replacePathPrefix) {
    this.replacePathPrefix = replacePathPrefix;
    return this;
  }

  /**
   * Get replacePathPrefix
   * @return replacePathPrefix
   */
  @javax.annotation.Nullable
  public Boolean getReplacePathPrefix() {
    return replacePathPrefix;
  }

  public void setReplacePathPrefix(Boolean replacePathPrefix) {
    this.replacePathPrefix = replacePathPrefix;
  }


  public EndpointOracleSettings enableHomogenousTablespace(Boolean enableHomogenousTablespace) {
    this.enableHomogenousTablespace = enableHomogenousTablespace;
    return this;
  }

  /**
   * Get enableHomogenousTablespace
   * @return enableHomogenousTablespace
   */
  @javax.annotation.Nullable
  public Boolean getEnableHomogenousTablespace() {
    return enableHomogenousTablespace;
  }

  public void setEnableHomogenousTablespace(Boolean enableHomogenousTablespace) {
    this.enableHomogenousTablespace = enableHomogenousTablespace;
  }


  public EndpointOracleSettings directPathNoLog(Boolean directPathNoLog) {
    this.directPathNoLog = directPathNoLog;
    return this;
  }

  /**
   * Get directPathNoLog
   * @return directPathNoLog
   */
  @javax.annotation.Nullable
  public Boolean getDirectPathNoLog() {
    return directPathNoLog;
  }

  public void setDirectPathNoLog(Boolean directPathNoLog) {
    this.directPathNoLog = directPathNoLog;
  }


  public EndpointOracleSettings archivedLogsOnly(Boolean archivedLogsOnly) {
    this.archivedLogsOnly = archivedLogsOnly;
    return this;
  }

  /**
   * Get archivedLogsOnly
   * @return archivedLogsOnly
   */
  @javax.annotation.Nullable
  public Boolean getArchivedLogsOnly() {
    return archivedLogsOnly;
  }

  public void setArchivedLogsOnly(Boolean archivedLogsOnly) {
    this.archivedLogsOnly = archivedLogsOnly;
  }


  public EndpointOracleSettings asmPassword(String asmPassword) {
    this.asmPassword = asmPassword;
    return this;
  }

  /**
   * Get asmPassword
   * @return asmPassword
   */
  @javax.annotation.Nullable
  public String getAsmPassword() {
    return asmPassword;
  }

  public void setAsmPassword(String asmPassword) {
    this.asmPassword = asmPassword;
  }


  public EndpointOracleSettings asmServer(String asmServer) {
    this.asmServer = asmServer;
    return this;
  }

  /**
   * Get asmServer
   * @return asmServer
   */
  @javax.annotation.Nullable
  public String getAsmServer() {
    return asmServer;
  }

  public void setAsmServer(String asmServer) {
    this.asmServer = asmServer;
  }


  public EndpointOracleSettings asmUser(String asmUser) {
    this.asmUser = asmUser;
    return this;
  }

  /**
   * Get asmUser
   * @return asmUser
   */
  @javax.annotation.Nullable
  public String getAsmUser() {
    return asmUser;
  }

  public void setAsmUser(String asmUser) {
    this.asmUser = asmUser;
  }


  public EndpointOracleSettings charLengthSemantics(CharLengthSemantics charLengthSemantics) {
    this.charLengthSemantics = charLengthSemantics;
    return this;
  }

  /**
   * Get charLengthSemantics
   * @return charLengthSemantics
   */
  @javax.annotation.Nullable
  public CharLengthSemantics getCharLengthSemantics() {
    return charLengthSemantics;
  }

  public void setCharLengthSemantics(CharLengthSemantics charLengthSemantics) {
    this.charLengthSemantics = charLengthSemantics;
  }


  public EndpointOracleSettings databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * Get databaseName
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public EndpointOracleSettings directPathParallelLoad(Boolean directPathParallelLoad) {
    this.directPathParallelLoad = directPathParallelLoad;
    return this;
  }

  /**
   * Get directPathParallelLoad
   * @return directPathParallelLoad
   */
  @javax.annotation.Nullable
  public Boolean getDirectPathParallelLoad() {
    return directPathParallelLoad;
  }

  public void setDirectPathParallelLoad(Boolean directPathParallelLoad) {
    this.directPathParallelLoad = directPathParallelLoad;
  }


  public EndpointOracleSettings failTasksOnLobTruncation(Boolean failTasksOnLobTruncation) {
    this.failTasksOnLobTruncation = failTasksOnLobTruncation;
    return this;
  }

  /**
   * Get failTasksOnLobTruncation
   * @return failTasksOnLobTruncation
   */
  @javax.annotation.Nullable
  public Boolean getFailTasksOnLobTruncation() {
    return failTasksOnLobTruncation;
  }

  public void setFailTasksOnLobTruncation(Boolean failTasksOnLobTruncation) {
    this.failTasksOnLobTruncation = failTasksOnLobTruncation;
  }


  public EndpointOracleSettings numberDatatypeScale(Integer numberDatatypeScale) {
    this.numberDatatypeScale = numberDatatypeScale;
    return this;
  }

  /**
   * Get numberDatatypeScale
   * @return numberDatatypeScale
   */
  @javax.annotation.Nullable
  public Integer getNumberDatatypeScale() {
    return numberDatatypeScale;
  }

  public void setNumberDatatypeScale(Integer numberDatatypeScale) {
    this.numberDatatypeScale = numberDatatypeScale;
  }


  public EndpointOracleSettings password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public EndpointOracleSettings port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public EndpointOracleSettings readTableSpaceName(Boolean readTableSpaceName) {
    this.readTableSpaceName = readTableSpaceName;
    return this;
  }

  /**
   * Get readTableSpaceName
   * @return readTableSpaceName
   */
  @javax.annotation.Nullable
  public Boolean getReadTableSpaceName() {
    return readTableSpaceName;
  }

  public void setReadTableSpaceName(Boolean readTableSpaceName) {
    this.readTableSpaceName = readTableSpaceName;
  }


  public EndpointOracleSettings retryInterval(Integer retryInterval) {
    this.retryInterval = retryInterval;
    return this;
  }

  /**
   * Get retryInterval
   * @return retryInterval
   */
  @javax.annotation.Nullable
  public Integer getRetryInterval() {
    return retryInterval;
  }

  public void setRetryInterval(Integer retryInterval) {
    this.retryInterval = retryInterval;
  }


  public EndpointOracleSettings securityDbEncryption(String securityDbEncryption) {
    this.securityDbEncryption = securityDbEncryption;
    return this;
  }

  /**
   * Get securityDbEncryption
   * @return securityDbEncryption
   */
  @javax.annotation.Nullable
  public String getSecurityDbEncryption() {
    return securityDbEncryption;
  }

  public void setSecurityDbEncryption(String securityDbEncryption) {
    this.securityDbEncryption = securityDbEncryption;
  }


  public EndpointOracleSettings securityDbEncryptionName(String securityDbEncryptionName) {
    this.securityDbEncryptionName = securityDbEncryptionName;
    return this;
  }

  /**
   * Get securityDbEncryptionName
   * @return securityDbEncryptionName
   */
  @javax.annotation.Nullable
  public String getSecurityDbEncryptionName() {
    return securityDbEncryptionName;
  }

  public void setSecurityDbEncryptionName(String securityDbEncryptionName) {
    this.securityDbEncryptionName = securityDbEncryptionName;
  }


  public EndpointOracleSettings serverName(String serverName) {
    this.serverName = serverName;
    return this;
  }

  /**
   * Get serverName
   * @return serverName
   */
  @javax.annotation.Nullable
  public String getServerName() {
    return serverName;
  }

  public void setServerName(String serverName) {
    this.serverName = serverName;
  }


  public EndpointOracleSettings spatialDataOptionToGeoJsonFunctionName(String spatialDataOptionToGeoJsonFunctionName) {
    this.spatialDataOptionToGeoJsonFunctionName = spatialDataOptionToGeoJsonFunctionName;
    return this;
  }

  /**
   * Get spatialDataOptionToGeoJsonFunctionName
   * @return spatialDataOptionToGeoJsonFunctionName
   */
  @javax.annotation.Nullable
  public String getSpatialDataOptionToGeoJsonFunctionName() {
    return spatialDataOptionToGeoJsonFunctionName;
  }

  public void setSpatialDataOptionToGeoJsonFunctionName(String spatialDataOptionToGeoJsonFunctionName) {
    this.spatialDataOptionToGeoJsonFunctionName = spatialDataOptionToGeoJsonFunctionName;
  }


  public EndpointOracleSettings standbyDelayTime(Integer standbyDelayTime) {
    this.standbyDelayTime = standbyDelayTime;
    return this;
  }

  /**
   * Get standbyDelayTime
   * @return standbyDelayTime
   */
  @javax.annotation.Nullable
  public Integer getStandbyDelayTime() {
    return standbyDelayTime;
  }

  public void setStandbyDelayTime(Integer standbyDelayTime) {
    this.standbyDelayTime = standbyDelayTime;
  }


  public EndpointOracleSettings username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public EndpointOracleSettings useBFile(Boolean useBFile) {
    this.useBFile = useBFile;
    return this;
  }

  /**
   * Get useBFile
   * @return useBFile
   */
  @javax.annotation.Nullable
  public Boolean getUseBFile() {
    return useBFile;
  }

  public void setUseBFile(Boolean useBFile) {
    this.useBFile = useBFile;
  }


  public EndpointOracleSettings useDirectPathFullLoad(Boolean useDirectPathFullLoad) {
    this.useDirectPathFullLoad = useDirectPathFullLoad;
    return this;
  }

  /**
   * Get useDirectPathFullLoad
   * @return useDirectPathFullLoad
   */
  @javax.annotation.Nullable
  public Boolean getUseDirectPathFullLoad() {
    return useDirectPathFullLoad;
  }

  public void setUseDirectPathFullLoad(Boolean useDirectPathFullLoad) {
    this.useDirectPathFullLoad = useDirectPathFullLoad;
  }


  public EndpointOracleSettings useLogminerReader(Boolean useLogminerReader) {
    this.useLogminerReader = useLogminerReader;
    return this;
  }

  /**
   * Get useLogminerReader
   * @return useLogminerReader
   */
  @javax.annotation.Nullable
  public Boolean getUseLogminerReader() {
    return useLogminerReader;
  }

  public void setUseLogminerReader(Boolean useLogminerReader) {
    this.useLogminerReader = useLogminerReader;
  }


  public EndpointOracleSettings secretsManagerAccessRoleArn(String secretsManagerAccessRoleArn) {
    this.secretsManagerAccessRoleArn = secretsManagerAccessRoleArn;
    return this;
  }

  /**
   * Get secretsManagerAccessRoleArn
   * @return secretsManagerAccessRoleArn
   */
  @javax.annotation.Nullable
  public String getSecretsManagerAccessRoleArn() {
    return secretsManagerAccessRoleArn;
  }

  public void setSecretsManagerAccessRoleArn(String secretsManagerAccessRoleArn) {
    this.secretsManagerAccessRoleArn = secretsManagerAccessRoleArn;
  }


  public EndpointOracleSettings secretsManagerSecretId(String secretsManagerSecretId) {
    this.secretsManagerSecretId = secretsManagerSecretId;
    return this;
  }

  /**
   * Get secretsManagerSecretId
   * @return secretsManagerSecretId
   */
  @javax.annotation.Nullable
  public String getSecretsManagerSecretId() {
    return secretsManagerSecretId;
  }

  public void setSecretsManagerSecretId(String secretsManagerSecretId) {
    this.secretsManagerSecretId = secretsManagerSecretId;
  }


  public EndpointOracleSettings secretsManagerOracleAsmAccessRoleArn(String secretsManagerOracleAsmAccessRoleArn) {
    this.secretsManagerOracleAsmAccessRoleArn = secretsManagerOracleAsmAccessRoleArn;
    return this;
  }

  /**
   * Get secretsManagerOracleAsmAccessRoleArn
   * @return secretsManagerOracleAsmAccessRoleArn
   */
  @javax.annotation.Nullable
  public String getSecretsManagerOracleAsmAccessRoleArn() {
    return secretsManagerOracleAsmAccessRoleArn;
  }

  public void setSecretsManagerOracleAsmAccessRoleArn(String secretsManagerOracleAsmAccessRoleArn) {
    this.secretsManagerOracleAsmAccessRoleArn = secretsManagerOracleAsmAccessRoleArn;
  }


  public EndpointOracleSettings secretsManagerOracleAsmSecretId(String secretsManagerOracleAsmSecretId) {
    this.secretsManagerOracleAsmSecretId = secretsManagerOracleAsmSecretId;
    return this;
  }

  /**
   * Get secretsManagerOracleAsmSecretId
   * @return secretsManagerOracleAsmSecretId
   */
  @javax.annotation.Nullable
  public String getSecretsManagerOracleAsmSecretId() {
    return secretsManagerOracleAsmSecretId;
  }

  public void setSecretsManagerOracleAsmSecretId(String secretsManagerOracleAsmSecretId) {
    this.secretsManagerOracleAsmSecretId = secretsManagerOracleAsmSecretId;
  }


  public EndpointOracleSettings trimSpaceInChar(Boolean trimSpaceInChar) {
    this.trimSpaceInChar = trimSpaceInChar;
    return this;
  }

  /**
   * Get trimSpaceInChar
   * @return trimSpaceInChar
   */
  @javax.annotation.Nullable
  public Boolean getTrimSpaceInChar() {
    return trimSpaceInChar;
  }

  public void setTrimSpaceInChar(Boolean trimSpaceInChar) {
    this.trimSpaceInChar = trimSpaceInChar;
  }


  public EndpointOracleSettings convertTimestampWithZoneToUTC(Boolean convertTimestampWithZoneToUTC) {
    this.convertTimestampWithZoneToUTC = convertTimestampWithZoneToUTC;
    return this;
  }

  /**
   * Get convertTimestampWithZoneToUTC
   * @return convertTimestampWithZoneToUTC
   */
  @javax.annotation.Nullable
  public Boolean getConvertTimestampWithZoneToUTC() {
    return convertTimestampWithZoneToUTC;
  }

  public void setConvertTimestampWithZoneToUTC(Boolean convertTimestampWithZoneToUTC) {
    this.convertTimestampWithZoneToUTC = convertTimestampWithZoneToUTC;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointOracleSettings endpointOracleSettings = (EndpointOracleSettings) o;
    return Objects.equals(this.addSupplementalLogging, endpointOracleSettings.addSupplementalLogging) &&
        Objects.equals(this.archivedLogDestId, endpointOracleSettings.archivedLogDestId) &&
        Objects.equals(this.additionalArchivedLogDestId, endpointOracleSettings.additionalArchivedLogDestId) &&
        Objects.equals(this.extraArchivedLogDestIds, endpointOracleSettings.extraArchivedLogDestIds) &&
        Objects.equals(this.allowSelectNestedTables, endpointOracleSettings.allowSelectNestedTables) &&
        Objects.equals(this.parallelAsmReadThreads, endpointOracleSettings.parallelAsmReadThreads) &&
        Objects.equals(this.readAheadBlocks, endpointOracleSettings.readAheadBlocks) &&
        Objects.equals(this.accessAlternateDirectly, endpointOracleSettings.accessAlternateDirectly) &&
        Objects.equals(this.useAlternateFolderForOnline, endpointOracleSettings.useAlternateFolderForOnline) &&
        Objects.equals(this.oraclePathPrefix, endpointOracleSettings.oraclePathPrefix) &&
        Objects.equals(this.usePathPrefix, endpointOracleSettings.usePathPrefix) &&
        Objects.equals(this.replacePathPrefix, endpointOracleSettings.replacePathPrefix) &&
        Objects.equals(this.enableHomogenousTablespace, endpointOracleSettings.enableHomogenousTablespace) &&
        Objects.equals(this.directPathNoLog, endpointOracleSettings.directPathNoLog) &&
        Objects.equals(this.archivedLogsOnly, endpointOracleSettings.archivedLogsOnly) &&
        Objects.equals(this.asmPassword, endpointOracleSettings.asmPassword) &&
        Objects.equals(this.asmServer, endpointOracleSettings.asmServer) &&
        Objects.equals(this.asmUser, endpointOracleSettings.asmUser) &&
        Objects.equals(this.charLengthSemantics, endpointOracleSettings.charLengthSemantics) &&
        Objects.equals(this.databaseName, endpointOracleSettings.databaseName) &&
        Objects.equals(this.directPathParallelLoad, endpointOracleSettings.directPathParallelLoad) &&
        Objects.equals(this.failTasksOnLobTruncation, endpointOracleSettings.failTasksOnLobTruncation) &&
        Objects.equals(this.numberDatatypeScale, endpointOracleSettings.numberDatatypeScale) &&
        Objects.equals(this.password, endpointOracleSettings.password) &&
        Objects.equals(this.port, endpointOracleSettings.port) &&
        Objects.equals(this.readTableSpaceName, endpointOracleSettings.readTableSpaceName) &&
        Objects.equals(this.retryInterval, endpointOracleSettings.retryInterval) &&
        Objects.equals(this.securityDbEncryption, endpointOracleSettings.securityDbEncryption) &&
        Objects.equals(this.securityDbEncryptionName, endpointOracleSettings.securityDbEncryptionName) &&
        Objects.equals(this.serverName, endpointOracleSettings.serverName) &&
        Objects.equals(this.spatialDataOptionToGeoJsonFunctionName, endpointOracleSettings.spatialDataOptionToGeoJsonFunctionName) &&
        Objects.equals(this.standbyDelayTime, endpointOracleSettings.standbyDelayTime) &&
        Objects.equals(this.username, endpointOracleSettings.username) &&
        Objects.equals(this.useBFile, endpointOracleSettings.useBFile) &&
        Objects.equals(this.useDirectPathFullLoad, endpointOracleSettings.useDirectPathFullLoad) &&
        Objects.equals(this.useLogminerReader, endpointOracleSettings.useLogminerReader) &&
        Objects.equals(this.secretsManagerAccessRoleArn, endpointOracleSettings.secretsManagerAccessRoleArn) &&
        Objects.equals(this.secretsManagerSecretId, endpointOracleSettings.secretsManagerSecretId) &&
        Objects.equals(this.secretsManagerOracleAsmAccessRoleArn, endpointOracleSettings.secretsManagerOracleAsmAccessRoleArn) &&
        Objects.equals(this.secretsManagerOracleAsmSecretId, endpointOracleSettings.secretsManagerOracleAsmSecretId) &&
        Objects.equals(this.trimSpaceInChar, endpointOracleSettings.trimSpaceInChar) &&
        Objects.equals(this.convertTimestampWithZoneToUTC, endpointOracleSettings.convertTimestampWithZoneToUTC);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addSupplementalLogging, archivedLogDestId, additionalArchivedLogDestId, extraArchivedLogDestIds, allowSelectNestedTables, parallelAsmReadThreads, readAheadBlocks, accessAlternateDirectly, useAlternateFolderForOnline, oraclePathPrefix, usePathPrefix, replacePathPrefix, enableHomogenousTablespace, directPathNoLog, archivedLogsOnly, asmPassword, asmServer, asmUser, charLengthSemantics, databaseName, directPathParallelLoad, failTasksOnLobTruncation, numberDatatypeScale, password, port, readTableSpaceName, retryInterval, securityDbEncryption, securityDbEncryptionName, serverName, spatialDataOptionToGeoJsonFunctionName, standbyDelayTime, username, useBFile, useDirectPathFullLoad, useLogminerReader, secretsManagerAccessRoleArn, secretsManagerSecretId, secretsManagerOracleAsmAccessRoleArn, secretsManagerOracleAsmSecretId, trimSpaceInChar, convertTimestampWithZoneToUTC);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointOracleSettings {\n");
    sb.append("    addSupplementalLogging: ").append(toIndentedString(addSupplementalLogging)).append("\n");
    sb.append("    archivedLogDestId: ").append(toIndentedString(archivedLogDestId)).append("\n");
    sb.append("    additionalArchivedLogDestId: ").append(toIndentedString(additionalArchivedLogDestId)).append("\n");
    sb.append("    extraArchivedLogDestIds: ").append(toIndentedString(extraArchivedLogDestIds)).append("\n");
    sb.append("    allowSelectNestedTables: ").append(toIndentedString(allowSelectNestedTables)).append("\n");
    sb.append("    parallelAsmReadThreads: ").append(toIndentedString(parallelAsmReadThreads)).append("\n");
    sb.append("    readAheadBlocks: ").append(toIndentedString(readAheadBlocks)).append("\n");
    sb.append("    accessAlternateDirectly: ").append(toIndentedString(accessAlternateDirectly)).append("\n");
    sb.append("    useAlternateFolderForOnline: ").append(toIndentedString(useAlternateFolderForOnline)).append("\n");
    sb.append("    oraclePathPrefix: ").append(toIndentedString(oraclePathPrefix)).append("\n");
    sb.append("    usePathPrefix: ").append(toIndentedString(usePathPrefix)).append("\n");
    sb.append("    replacePathPrefix: ").append(toIndentedString(replacePathPrefix)).append("\n");
    sb.append("    enableHomogenousTablespace: ").append(toIndentedString(enableHomogenousTablespace)).append("\n");
    sb.append("    directPathNoLog: ").append(toIndentedString(directPathNoLog)).append("\n");
    sb.append("    archivedLogsOnly: ").append(toIndentedString(archivedLogsOnly)).append("\n");
    sb.append("    asmPassword: ").append(toIndentedString(asmPassword)).append("\n");
    sb.append("    asmServer: ").append(toIndentedString(asmServer)).append("\n");
    sb.append("    asmUser: ").append(toIndentedString(asmUser)).append("\n");
    sb.append("    charLengthSemantics: ").append(toIndentedString(charLengthSemantics)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    directPathParallelLoad: ").append(toIndentedString(directPathParallelLoad)).append("\n");
    sb.append("    failTasksOnLobTruncation: ").append(toIndentedString(failTasksOnLobTruncation)).append("\n");
    sb.append("    numberDatatypeScale: ").append(toIndentedString(numberDatatypeScale)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    readTableSpaceName: ").append(toIndentedString(readTableSpaceName)).append("\n");
    sb.append("    retryInterval: ").append(toIndentedString(retryInterval)).append("\n");
    sb.append("    securityDbEncryption: ").append(toIndentedString(securityDbEncryption)).append("\n");
    sb.append("    securityDbEncryptionName: ").append(toIndentedString(securityDbEncryptionName)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    spatialDataOptionToGeoJsonFunctionName: ").append(toIndentedString(spatialDataOptionToGeoJsonFunctionName)).append("\n");
    sb.append("    standbyDelayTime: ").append(toIndentedString(standbyDelayTime)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    useBFile: ").append(toIndentedString(useBFile)).append("\n");
    sb.append("    useDirectPathFullLoad: ").append(toIndentedString(useDirectPathFullLoad)).append("\n");
    sb.append("    useLogminerReader: ").append(toIndentedString(useLogminerReader)).append("\n");
    sb.append("    secretsManagerAccessRoleArn: ").append(toIndentedString(secretsManagerAccessRoleArn)).append("\n");
    sb.append("    secretsManagerSecretId: ").append(toIndentedString(secretsManagerSecretId)).append("\n");
    sb.append("    secretsManagerOracleAsmAccessRoleArn: ").append(toIndentedString(secretsManagerOracleAsmAccessRoleArn)).append("\n");
    sb.append("    secretsManagerOracleAsmSecretId: ").append(toIndentedString(secretsManagerOracleAsmSecretId)).append("\n");
    sb.append("    trimSpaceInChar: ").append(toIndentedString(trimSpaceInChar)).append("\n");
    sb.append("    convertTimestampWithZoneToUTC: ").append(toIndentedString(convertTimestampWithZoneToUTC)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AddSupplementalLogging");
    openapiFields.add("ArchivedLogDestId");
    openapiFields.add("AdditionalArchivedLogDestId");
    openapiFields.add("ExtraArchivedLogDestIds");
    openapiFields.add("AllowSelectNestedTables");
    openapiFields.add("ParallelAsmReadThreads");
    openapiFields.add("ReadAheadBlocks");
    openapiFields.add("AccessAlternateDirectly");
    openapiFields.add("UseAlternateFolderForOnline");
    openapiFields.add("OraclePathPrefix");
    openapiFields.add("UsePathPrefix");
    openapiFields.add("ReplacePathPrefix");
    openapiFields.add("EnableHomogenousTablespace");
    openapiFields.add("DirectPathNoLog");
    openapiFields.add("ArchivedLogsOnly");
    openapiFields.add("AsmPassword");
    openapiFields.add("AsmServer");
    openapiFields.add("AsmUser");
    openapiFields.add("CharLengthSemantics");
    openapiFields.add("DatabaseName");
    openapiFields.add("DirectPathParallelLoad");
    openapiFields.add("FailTasksOnLobTruncation");
    openapiFields.add("NumberDatatypeScale");
    openapiFields.add("Password");
    openapiFields.add("Port");
    openapiFields.add("ReadTableSpaceName");
    openapiFields.add("RetryInterval");
    openapiFields.add("SecurityDbEncryption");
    openapiFields.add("SecurityDbEncryptionName");
    openapiFields.add("ServerName");
    openapiFields.add("SpatialDataOptionToGeoJsonFunctionName");
    openapiFields.add("StandbyDelayTime");
    openapiFields.add("Username");
    openapiFields.add("UseBFile");
    openapiFields.add("UseDirectPathFullLoad");
    openapiFields.add("UseLogminerReader");
    openapiFields.add("SecretsManagerAccessRoleArn");
    openapiFields.add("SecretsManagerSecretId");
    openapiFields.add("SecretsManagerOracleAsmAccessRoleArn");
    openapiFields.add("SecretsManagerOracleAsmSecretId");
    openapiFields.add("TrimSpaceInChar");
    openapiFields.add("ConvertTimestampWithZoneToUTC");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EndpointOracleSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointOracleSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointOracleSettings is not found in the empty JSON string", EndpointOracleSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndpointOracleSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointOracleSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AddSupplementalLogging`
      if (jsonObj.get("AddSupplementalLogging") != null && !jsonObj.get("AddSupplementalLogging").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AddSupplementalLogging"));
      }
      // validate the optional field `ArchivedLogDestId`
      if (jsonObj.get("ArchivedLogDestId") != null && !jsonObj.get("ArchivedLogDestId").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ArchivedLogDestId"));
      }
      // validate the optional field `AdditionalArchivedLogDestId`
      if (jsonObj.get("AdditionalArchivedLogDestId") != null && !jsonObj.get("AdditionalArchivedLogDestId").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AdditionalArchivedLogDestId"));
      }
      // validate the optional field `ExtraArchivedLogDestIds`
      if (jsonObj.get("ExtraArchivedLogDestIds") != null && !jsonObj.get("ExtraArchivedLogDestIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExtraArchivedLogDestIds"));
      }
      // validate the optional field `AllowSelectNestedTables`
      if (jsonObj.get("AllowSelectNestedTables") != null && !jsonObj.get("AllowSelectNestedTables").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AllowSelectNestedTables"));
      }
      // validate the optional field `ParallelAsmReadThreads`
      if (jsonObj.get("ParallelAsmReadThreads") != null && !jsonObj.get("ParallelAsmReadThreads").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ParallelAsmReadThreads"));
      }
      // validate the optional field `ReadAheadBlocks`
      if (jsonObj.get("ReadAheadBlocks") != null && !jsonObj.get("ReadAheadBlocks").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ReadAheadBlocks"));
      }
      // validate the optional field `AccessAlternateDirectly`
      if (jsonObj.get("AccessAlternateDirectly") != null && !jsonObj.get("AccessAlternateDirectly").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AccessAlternateDirectly"));
      }
      // validate the optional field `UseAlternateFolderForOnline`
      if (jsonObj.get("UseAlternateFolderForOnline") != null && !jsonObj.get("UseAlternateFolderForOnline").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UseAlternateFolderForOnline"));
      }
      // validate the optional field `OraclePathPrefix`
      if (jsonObj.get("OraclePathPrefix") != null && !jsonObj.get("OraclePathPrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OraclePathPrefix"));
      }
      // validate the optional field `UsePathPrefix`
      if (jsonObj.get("UsePathPrefix") != null && !jsonObj.get("UsePathPrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UsePathPrefix"));
      }
      // validate the optional field `ReplacePathPrefix`
      if (jsonObj.get("ReplacePathPrefix") != null && !jsonObj.get("ReplacePathPrefix").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ReplacePathPrefix"));
      }
      // validate the optional field `EnableHomogenousTablespace`
      if (jsonObj.get("EnableHomogenousTablespace") != null && !jsonObj.get("EnableHomogenousTablespace").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnableHomogenousTablespace"));
      }
      // validate the optional field `DirectPathNoLog`
      if (jsonObj.get("DirectPathNoLog") != null && !jsonObj.get("DirectPathNoLog").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DirectPathNoLog"));
      }
      // validate the optional field `ArchivedLogsOnly`
      if (jsonObj.get("ArchivedLogsOnly") != null && !jsonObj.get("ArchivedLogsOnly").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ArchivedLogsOnly"));
      }
      // validate the optional field `AsmPassword`
      if (jsonObj.get("AsmPassword") != null && !jsonObj.get("AsmPassword").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AsmPassword"));
      }
      // validate the optional field `AsmServer`
      if (jsonObj.get("AsmServer") != null && !jsonObj.get("AsmServer").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AsmServer"));
      }
      // validate the optional field `AsmUser`
      if (jsonObj.get("AsmUser") != null && !jsonObj.get("AsmUser").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AsmUser"));
      }
      // validate the optional field `CharLengthSemantics`
      if (jsonObj.get("CharLengthSemantics") != null && !jsonObj.get("CharLengthSemantics").isJsonNull()) {
        CharLengthSemantics.validateJsonElement(jsonObj.get("CharLengthSemantics"));
      }
      // validate the optional field `DatabaseName`
      if (jsonObj.get("DatabaseName") != null && !jsonObj.get("DatabaseName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatabaseName"));
      }
      // validate the optional field `DirectPathParallelLoad`
      if (jsonObj.get("DirectPathParallelLoad") != null && !jsonObj.get("DirectPathParallelLoad").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DirectPathParallelLoad"));
      }
      // validate the optional field `FailTasksOnLobTruncation`
      if (jsonObj.get("FailTasksOnLobTruncation") != null && !jsonObj.get("FailTasksOnLobTruncation").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("FailTasksOnLobTruncation"));
      }
      // validate the optional field `NumberDatatypeScale`
      if (jsonObj.get("NumberDatatypeScale") != null && !jsonObj.get("NumberDatatypeScale").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberDatatypeScale"));
      }
      // validate the optional field `Password`
      if (jsonObj.get("Password") != null && !jsonObj.get("Password").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Password"));
      }
      // validate the optional field `Port`
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Port"));
      }
      // validate the optional field `ReadTableSpaceName`
      if (jsonObj.get("ReadTableSpaceName") != null && !jsonObj.get("ReadTableSpaceName").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ReadTableSpaceName"));
      }
      // validate the optional field `RetryInterval`
      if (jsonObj.get("RetryInterval") != null && !jsonObj.get("RetryInterval").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RetryInterval"));
      }
      // validate the optional field `SecurityDbEncryption`
      if (jsonObj.get("SecurityDbEncryption") != null && !jsonObj.get("SecurityDbEncryption").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecurityDbEncryption"));
      }
      // validate the optional field `SecurityDbEncryptionName`
      if (jsonObj.get("SecurityDbEncryptionName") != null && !jsonObj.get("SecurityDbEncryptionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecurityDbEncryptionName"));
      }
      // validate the optional field `ServerName`
      if (jsonObj.get("ServerName") != null && !jsonObj.get("ServerName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServerName"));
      }
      // validate the optional field `SpatialDataOptionToGeoJsonFunctionName`
      if (jsonObj.get("SpatialDataOptionToGeoJsonFunctionName") != null && !jsonObj.get("SpatialDataOptionToGeoJsonFunctionName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SpatialDataOptionToGeoJsonFunctionName"));
      }
      // validate the optional field `StandbyDelayTime`
      if (jsonObj.get("StandbyDelayTime") != null && !jsonObj.get("StandbyDelayTime").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("StandbyDelayTime"));
      }
      // validate the optional field `Username`
      if (jsonObj.get("Username") != null && !jsonObj.get("Username").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Username"));
      }
      // validate the optional field `UseBFile`
      if (jsonObj.get("UseBFile") != null && !jsonObj.get("UseBFile").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UseBFile"));
      }
      // validate the optional field `UseDirectPathFullLoad`
      if (jsonObj.get("UseDirectPathFullLoad") != null && !jsonObj.get("UseDirectPathFullLoad").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UseDirectPathFullLoad"));
      }
      // validate the optional field `UseLogminerReader`
      if (jsonObj.get("UseLogminerReader") != null && !jsonObj.get("UseLogminerReader").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UseLogminerReader"));
      }
      // validate the optional field `SecretsManagerAccessRoleArn`
      if (jsonObj.get("SecretsManagerAccessRoleArn") != null && !jsonObj.get("SecretsManagerAccessRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecretsManagerAccessRoleArn"));
      }
      // validate the optional field `SecretsManagerSecretId`
      if (jsonObj.get("SecretsManagerSecretId") != null && !jsonObj.get("SecretsManagerSecretId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecretsManagerSecretId"));
      }
      // validate the optional field `SecretsManagerOracleAsmAccessRoleArn`
      if (jsonObj.get("SecretsManagerOracleAsmAccessRoleArn") != null && !jsonObj.get("SecretsManagerOracleAsmAccessRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecretsManagerOracleAsmAccessRoleArn"));
      }
      // validate the optional field `SecretsManagerOracleAsmSecretId`
      if (jsonObj.get("SecretsManagerOracleAsmSecretId") != null && !jsonObj.get("SecretsManagerOracleAsmSecretId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SecretsManagerOracleAsmSecretId"));
      }
      // validate the optional field `TrimSpaceInChar`
      if (jsonObj.get("TrimSpaceInChar") != null && !jsonObj.get("TrimSpaceInChar").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("TrimSpaceInChar"));
      }
      // validate the optional field `ConvertTimestampWithZoneToUTC`
      if (jsonObj.get("ConvertTimestampWithZoneToUTC") != null && !jsonObj.get("ConvertTimestampWithZoneToUTC").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ConvertTimestampWithZoneToUTC"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointOracleSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointOracleSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointOracleSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointOracleSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointOracleSettings>() {
           @Override
           public void write(JsonWriter out, EndpointOracleSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointOracleSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EndpointOracleSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EndpointOracleSettings
   * @throws IOException if the JSON string is invalid with respect to EndpointOracleSettings
   */
  public static EndpointOracleSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointOracleSettings.class);
  }

  /**
   * Convert an instance of EndpointOracleSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

