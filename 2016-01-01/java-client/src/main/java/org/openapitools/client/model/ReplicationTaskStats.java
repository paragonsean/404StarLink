/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * In response to a request by the &lt;code&gt;DescribeReplicationTasks&lt;/code&gt; operation, this object provides a collection of statistics about a replication task.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:28.765689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicationTaskStats {
  public static final String SERIALIZED_NAME_FULL_LOAD_PROGRESS_PERCENT = "FullLoadProgressPercent";
  @SerializedName(SERIALIZED_NAME_FULL_LOAD_PROGRESS_PERCENT)
  private Integer fullLoadProgressPercent;

  public static final String SERIALIZED_NAME_ELAPSED_TIME_MILLIS = "ElapsedTimeMillis";
  @SerializedName(SERIALIZED_NAME_ELAPSED_TIME_MILLIS)
  private Integer elapsedTimeMillis;

  public static final String SERIALIZED_NAME_TABLES_LOADED = "TablesLoaded";
  @SerializedName(SERIALIZED_NAME_TABLES_LOADED)
  private Integer tablesLoaded;

  public static final String SERIALIZED_NAME_TABLES_LOADING = "TablesLoading";
  @SerializedName(SERIALIZED_NAME_TABLES_LOADING)
  private Integer tablesLoading;

  public static final String SERIALIZED_NAME_TABLES_QUEUED = "TablesQueued";
  @SerializedName(SERIALIZED_NAME_TABLES_QUEUED)
  private Integer tablesQueued;

  public static final String SERIALIZED_NAME_TABLES_ERRORED = "TablesErrored";
  @SerializedName(SERIALIZED_NAME_TABLES_ERRORED)
  private Integer tablesErrored;

  public static final String SERIALIZED_NAME_FRESH_START_DATE = "FreshStartDate";
  @SerializedName(SERIALIZED_NAME_FRESH_START_DATE)
  private OffsetDateTime freshStartDate;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_STOP_DATE = "StopDate";
  @SerializedName(SERIALIZED_NAME_STOP_DATE)
  private OffsetDateTime stopDate;

  public static final String SERIALIZED_NAME_FULL_LOAD_START_DATE = "FullLoadStartDate";
  @SerializedName(SERIALIZED_NAME_FULL_LOAD_START_DATE)
  private OffsetDateTime fullLoadStartDate;

  public static final String SERIALIZED_NAME_FULL_LOAD_FINISH_DATE = "FullLoadFinishDate";
  @SerializedName(SERIALIZED_NAME_FULL_LOAD_FINISH_DATE)
  private OffsetDateTime fullLoadFinishDate;

  public ReplicationTaskStats() {
  }

  public ReplicationTaskStats fullLoadProgressPercent(Integer fullLoadProgressPercent) {
    this.fullLoadProgressPercent = fullLoadProgressPercent;
    return this;
  }

  /**
   * Get fullLoadProgressPercent
   * @return fullLoadProgressPercent
   */
  @javax.annotation.Nullable
  public Integer getFullLoadProgressPercent() {
    return fullLoadProgressPercent;
  }

  public void setFullLoadProgressPercent(Integer fullLoadProgressPercent) {
    this.fullLoadProgressPercent = fullLoadProgressPercent;
  }


  public ReplicationTaskStats elapsedTimeMillis(Integer elapsedTimeMillis) {
    this.elapsedTimeMillis = elapsedTimeMillis;
    return this;
  }

  /**
   * Get elapsedTimeMillis
   * @return elapsedTimeMillis
   */
  @javax.annotation.Nullable
  public Integer getElapsedTimeMillis() {
    return elapsedTimeMillis;
  }

  public void setElapsedTimeMillis(Integer elapsedTimeMillis) {
    this.elapsedTimeMillis = elapsedTimeMillis;
  }


  public ReplicationTaskStats tablesLoaded(Integer tablesLoaded) {
    this.tablesLoaded = tablesLoaded;
    return this;
  }

  /**
   * Get tablesLoaded
   * @return tablesLoaded
   */
  @javax.annotation.Nullable
  public Integer getTablesLoaded() {
    return tablesLoaded;
  }

  public void setTablesLoaded(Integer tablesLoaded) {
    this.tablesLoaded = tablesLoaded;
  }


  public ReplicationTaskStats tablesLoading(Integer tablesLoading) {
    this.tablesLoading = tablesLoading;
    return this;
  }

  /**
   * Get tablesLoading
   * @return tablesLoading
   */
  @javax.annotation.Nullable
  public Integer getTablesLoading() {
    return tablesLoading;
  }

  public void setTablesLoading(Integer tablesLoading) {
    this.tablesLoading = tablesLoading;
  }


  public ReplicationTaskStats tablesQueued(Integer tablesQueued) {
    this.tablesQueued = tablesQueued;
    return this;
  }

  /**
   * Get tablesQueued
   * @return tablesQueued
   */
  @javax.annotation.Nullable
  public Integer getTablesQueued() {
    return tablesQueued;
  }

  public void setTablesQueued(Integer tablesQueued) {
    this.tablesQueued = tablesQueued;
  }


  public ReplicationTaskStats tablesErrored(Integer tablesErrored) {
    this.tablesErrored = tablesErrored;
    return this;
  }

  /**
   * Get tablesErrored
   * @return tablesErrored
   */
  @javax.annotation.Nullable
  public Integer getTablesErrored() {
    return tablesErrored;
  }

  public void setTablesErrored(Integer tablesErrored) {
    this.tablesErrored = tablesErrored;
  }


  public ReplicationTaskStats freshStartDate(OffsetDateTime freshStartDate) {
    this.freshStartDate = freshStartDate;
    return this;
  }

  /**
   * Get freshStartDate
   * @return freshStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFreshStartDate() {
    return freshStartDate;
  }

  public void setFreshStartDate(OffsetDateTime freshStartDate) {
    this.freshStartDate = freshStartDate;
  }


  public ReplicationTaskStats startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public ReplicationTaskStats stopDate(OffsetDateTime stopDate) {
    this.stopDate = stopDate;
    return this;
  }

  /**
   * Get stopDate
   * @return stopDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStopDate() {
    return stopDate;
  }

  public void setStopDate(OffsetDateTime stopDate) {
    this.stopDate = stopDate;
  }


  public ReplicationTaskStats fullLoadStartDate(OffsetDateTime fullLoadStartDate) {
    this.fullLoadStartDate = fullLoadStartDate;
    return this;
  }

  /**
   * Get fullLoadStartDate
   * @return fullLoadStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFullLoadStartDate() {
    return fullLoadStartDate;
  }

  public void setFullLoadStartDate(OffsetDateTime fullLoadStartDate) {
    this.fullLoadStartDate = fullLoadStartDate;
  }


  public ReplicationTaskStats fullLoadFinishDate(OffsetDateTime fullLoadFinishDate) {
    this.fullLoadFinishDate = fullLoadFinishDate;
    return this;
  }

  /**
   * Get fullLoadFinishDate
   * @return fullLoadFinishDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFullLoadFinishDate() {
    return fullLoadFinishDate;
  }

  public void setFullLoadFinishDate(OffsetDateTime fullLoadFinishDate) {
    this.fullLoadFinishDate = fullLoadFinishDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationTaskStats replicationTaskStats = (ReplicationTaskStats) o;
    return Objects.equals(this.fullLoadProgressPercent, replicationTaskStats.fullLoadProgressPercent) &&
        Objects.equals(this.elapsedTimeMillis, replicationTaskStats.elapsedTimeMillis) &&
        Objects.equals(this.tablesLoaded, replicationTaskStats.tablesLoaded) &&
        Objects.equals(this.tablesLoading, replicationTaskStats.tablesLoading) &&
        Objects.equals(this.tablesQueued, replicationTaskStats.tablesQueued) &&
        Objects.equals(this.tablesErrored, replicationTaskStats.tablesErrored) &&
        Objects.equals(this.freshStartDate, replicationTaskStats.freshStartDate) &&
        Objects.equals(this.startDate, replicationTaskStats.startDate) &&
        Objects.equals(this.stopDate, replicationTaskStats.stopDate) &&
        Objects.equals(this.fullLoadStartDate, replicationTaskStats.fullLoadStartDate) &&
        Objects.equals(this.fullLoadFinishDate, replicationTaskStats.fullLoadFinishDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fullLoadProgressPercent, elapsedTimeMillis, tablesLoaded, tablesLoading, tablesQueued, tablesErrored, freshStartDate, startDate, stopDate, fullLoadStartDate, fullLoadFinishDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationTaskStats {\n");
    sb.append("    fullLoadProgressPercent: ").append(toIndentedString(fullLoadProgressPercent)).append("\n");
    sb.append("    elapsedTimeMillis: ").append(toIndentedString(elapsedTimeMillis)).append("\n");
    sb.append("    tablesLoaded: ").append(toIndentedString(tablesLoaded)).append("\n");
    sb.append("    tablesLoading: ").append(toIndentedString(tablesLoading)).append("\n");
    sb.append("    tablesQueued: ").append(toIndentedString(tablesQueued)).append("\n");
    sb.append("    tablesErrored: ").append(toIndentedString(tablesErrored)).append("\n");
    sb.append("    freshStartDate: ").append(toIndentedString(freshStartDate)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    stopDate: ").append(toIndentedString(stopDate)).append("\n");
    sb.append("    fullLoadStartDate: ").append(toIndentedString(fullLoadStartDate)).append("\n");
    sb.append("    fullLoadFinishDate: ").append(toIndentedString(fullLoadFinishDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FullLoadProgressPercent");
    openapiFields.add("ElapsedTimeMillis");
    openapiFields.add("TablesLoaded");
    openapiFields.add("TablesLoading");
    openapiFields.add("TablesQueued");
    openapiFields.add("TablesErrored");
    openapiFields.add("FreshStartDate");
    openapiFields.add("StartDate");
    openapiFields.add("StopDate");
    openapiFields.add("FullLoadStartDate");
    openapiFields.add("FullLoadFinishDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicationTaskStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicationTaskStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationTaskStats is not found in the empty JSON string", ReplicationTaskStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicationTaskStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicationTaskStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `FullLoadProgressPercent`
      if (jsonObj.get("FullLoadProgressPercent") != null && !jsonObj.get("FullLoadProgressPercent").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FullLoadProgressPercent"));
      }
      // validate the optional field `ElapsedTimeMillis`
      if (jsonObj.get("ElapsedTimeMillis") != null && !jsonObj.get("ElapsedTimeMillis").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ElapsedTimeMillis"));
      }
      // validate the optional field `TablesLoaded`
      if (jsonObj.get("TablesLoaded") != null && !jsonObj.get("TablesLoaded").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TablesLoaded"));
      }
      // validate the optional field `TablesLoading`
      if (jsonObj.get("TablesLoading") != null && !jsonObj.get("TablesLoading").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TablesLoading"));
      }
      // validate the optional field `TablesQueued`
      if (jsonObj.get("TablesQueued") != null && !jsonObj.get("TablesQueued").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TablesQueued"));
      }
      // validate the optional field `TablesErrored`
      if (jsonObj.get("TablesErrored") != null && !jsonObj.get("TablesErrored").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TablesErrored"));
      }
      // validate the optional field `FreshStartDate`
      if (jsonObj.get("FreshStartDate") != null && !jsonObj.get("FreshStartDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("FreshStartDate"));
      }
      // validate the optional field `StartDate`
      if (jsonObj.get("StartDate") != null && !jsonObj.get("StartDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartDate"));
      }
      // validate the optional field `StopDate`
      if (jsonObj.get("StopDate") != null && !jsonObj.get("StopDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StopDate"));
      }
      // validate the optional field `FullLoadStartDate`
      if (jsonObj.get("FullLoadStartDate") != null && !jsonObj.get("FullLoadStartDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("FullLoadStartDate"));
      }
      // validate the optional field `FullLoadFinishDate`
      if (jsonObj.get("FullLoadFinishDate") != null && !jsonObj.get("FullLoadFinishDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("FullLoadFinishDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicationTaskStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicationTaskStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicationTaskStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicationTaskStats.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicationTaskStats>() {
           @Override
           public void write(JsonWriter out, ReplicationTaskStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicationTaskStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicationTaskStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicationTaskStats
   * @throws IOException if the JSON string is invalid with respect to ReplicationTaskStats
   */
  public static ReplicationTaskStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationTaskStats.class);
  }

  /**
   * Convert an instance of ReplicationTaskStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

