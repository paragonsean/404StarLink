/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SchemaResponseDatabaseInstance;
import org.openapitools.client.model.SchemaResponseServer;
import org.openapitools.client.model.SchemaShortInfoResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a schema in a Fleet Advisor collector inventory.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:28.765689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SchemaResponse {
  public static final String SERIALIZED_NAME_CODE_LINE_COUNT = "CodeLineCount";
  @SerializedName(SERIALIZED_NAME_CODE_LINE_COUNT)
  private Integer codeLineCount;

  public static final String SERIALIZED_NAME_CODE_SIZE = "CodeSize";
  @SerializedName(SERIALIZED_NAME_CODE_SIZE)
  private Integer codeSize;

  public static final String SERIALIZED_NAME_COMPLEXITY = "Complexity";
  @SerializedName(SERIALIZED_NAME_COMPLEXITY)
  private String complexity;

  public static final String SERIALIZED_NAME_SERVER = "Server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private SchemaResponseServer server;

  public static final String SERIALIZED_NAME_DATABASE_INSTANCE = "DatabaseInstance";
  @SerializedName(SERIALIZED_NAME_DATABASE_INSTANCE)
  private SchemaResponseDatabaseInstance databaseInstance;

  public static final String SERIALIZED_NAME_SCHEMA_ID = "SchemaId";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ID)
  private String schemaId;

  public static final String SERIALIZED_NAME_SCHEMA_NAME = "SchemaName";
  @SerializedName(SERIALIZED_NAME_SCHEMA_NAME)
  private String schemaName;

  public static final String SERIALIZED_NAME_ORIGINAL_SCHEMA = "OriginalSchema";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_SCHEMA)
  private SchemaShortInfoResponse originalSchema;

  public static final String SERIALIZED_NAME_SIMILARITY = "Similarity";
  @SerializedName(SERIALIZED_NAME_SIMILARITY)
  private Double similarity;

  public SchemaResponse() {
  }

  public SchemaResponse codeLineCount(Integer codeLineCount) {
    this.codeLineCount = codeLineCount;
    return this;
  }

  /**
   * Get codeLineCount
   * @return codeLineCount
   */
  @javax.annotation.Nullable
  public Integer getCodeLineCount() {
    return codeLineCount;
  }

  public void setCodeLineCount(Integer codeLineCount) {
    this.codeLineCount = codeLineCount;
  }


  public SchemaResponse codeSize(Integer codeSize) {
    this.codeSize = codeSize;
    return this;
  }

  /**
   * Get codeSize
   * @return codeSize
   */
  @javax.annotation.Nullable
  public Integer getCodeSize() {
    return codeSize;
  }

  public void setCodeSize(Integer codeSize) {
    this.codeSize = codeSize;
  }


  public SchemaResponse complexity(String complexity) {
    this.complexity = complexity;
    return this;
  }

  /**
   * Get complexity
   * @return complexity
   */
  @javax.annotation.Nullable
  public String getComplexity() {
    return complexity;
  }

  public void setComplexity(String complexity) {
    this.complexity = complexity;
  }


  public SchemaResponse server(SchemaResponseServer server) {
    this.server = server;
    return this;
  }

  /**
   * Get server
   * @return server
   */
  @javax.annotation.Nullable
  public SchemaResponseServer getServer() {
    return server;
  }

  public void setServer(SchemaResponseServer server) {
    this.server = server;
  }


  public SchemaResponse databaseInstance(SchemaResponseDatabaseInstance databaseInstance) {
    this.databaseInstance = databaseInstance;
    return this;
  }

  /**
   * Get databaseInstance
   * @return databaseInstance
   */
  @javax.annotation.Nullable
  public SchemaResponseDatabaseInstance getDatabaseInstance() {
    return databaseInstance;
  }

  public void setDatabaseInstance(SchemaResponseDatabaseInstance databaseInstance) {
    this.databaseInstance = databaseInstance;
  }


  public SchemaResponse schemaId(String schemaId) {
    this.schemaId = schemaId;
    return this;
  }

  /**
   * Get schemaId
   * @return schemaId
   */
  @javax.annotation.Nullable
  public String getSchemaId() {
    return schemaId;
  }

  public void setSchemaId(String schemaId) {
    this.schemaId = schemaId;
  }


  public SchemaResponse schemaName(String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

  /**
   * Get schemaName
   * @return schemaName
   */
  @javax.annotation.Nullable
  public String getSchemaName() {
    return schemaName;
  }

  public void setSchemaName(String schemaName) {
    this.schemaName = schemaName;
  }


  public SchemaResponse originalSchema(SchemaShortInfoResponse originalSchema) {
    this.originalSchema = originalSchema;
    return this;
  }

  /**
   * Get originalSchema
   * @return originalSchema
   */
  @javax.annotation.Nullable
  public SchemaShortInfoResponse getOriginalSchema() {
    return originalSchema;
  }

  public void setOriginalSchema(SchemaShortInfoResponse originalSchema) {
    this.originalSchema = originalSchema;
  }


  public SchemaResponse similarity(Double similarity) {
    this.similarity = similarity;
    return this;
  }

  /**
   * Get similarity
   * @return similarity
   */
  @javax.annotation.Nullable
  public Double getSimilarity() {
    return similarity;
  }

  public void setSimilarity(Double similarity) {
    this.similarity = similarity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaResponse schemaResponse = (SchemaResponse) o;
    return Objects.equals(this.codeLineCount, schemaResponse.codeLineCount) &&
        Objects.equals(this.codeSize, schemaResponse.codeSize) &&
        Objects.equals(this.complexity, schemaResponse.complexity) &&
        Objects.equals(this.server, schemaResponse.server) &&
        Objects.equals(this.databaseInstance, schemaResponse.databaseInstance) &&
        Objects.equals(this.schemaId, schemaResponse.schemaId) &&
        Objects.equals(this.schemaName, schemaResponse.schemaName) &&
        Objects.equals(this.originalSchema, schemaResponse.originalSchema) &&
        Objects.equals(this.similarity, schemaResponse.similarity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeLineCount, codeSize, complexity, server, databaseInstance, schemaId, schemaName, originalSchema, similarity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaResponse {\n");
    sb.append("    codeLineCount: ").append(toIndentedString(codeLineCount)).append("\n");
    sb.append("    codeSize: ").append(toIndentedString(codeSize)).append("\n");
    sb.append("    complexity: ").append(toIndentedString(complexity)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    databaseInstance: ").append(toIndentedString(databaseInstance)).append("\n");
    sb.append("    schemaId: ").append(toIndentedString(schemaId)).append("\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("    originalSchema: ").append(toIndentedString(originalSchema)).append("\n");
    sb.append("    similarity: ").append(toIndentedString(similarity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CodeLineCount");
    openapiFields.add("CodeSize");
    openapiFields.add("Complexity");
    openapiFields.add("Server");
    openapiFields.add("DatabaseInstance");
    openapiFields.add("SchemaId");
    openapiFields.add("SchemaName");
    openapiFields.add("OriginalSchema");
    openapiFields.add("Similarity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SchemaResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SchemaResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SchemaResponse is not found in the empty JSON string", SchemaResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SchemaResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SchemaResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CodeLineCount`
      if (jsonObj.get("CodeLineCount") != null && !jsonObj.get("CodeLineCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CodeLineCount"));
      }
      // validate the optional field `CodeSize`
      if (jsonObj.get("CodeSize") != null && !jsonObj.get("CodeSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CodeSize"));
      }
      // validate the optional field `Complexity`
      if (jsonObj.get("Complexity") != null && !jsonObj.get("Complexity").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Complexity"));
      }
      // validate the optional field `Server`
      if (jsonObj.get("Server") != null && !jsonObj.get("Server").isJsonNull()) {
        SchemaResponseServer.validateJsonElement(jsonObj.get("Server"));
      }
      // validate the optional field `DatabaseInstance`
      if (jsonObj.get("DatabaseInstance") != null && !jsonObj.get("DatabaseInstance").isJsonNull()) {
        SchemaResponseDatabaseInstance.validateJsonElement(jsonObj.get("DatabaseInstance"));
      }
      // validate the optional field `SchemaId`
      if (jsonObj.get("SchemaId") != null && !jsonObj.get("SchemaId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SchemaId"));
      }
      // validate the optional field `SchemaName`
      if (jsonObj.get("SchemaName") != null && !jsonObj.get("SchemaName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SchemaName"));
      }
      // validate the optional field `OriginalSchema`
      if (jsonObj.get("OriginalSchema") != null && !jsonObj.get("OriginalSchema").isJsonNull()) {
        SchemaShortInfoResponse.validateJsonElement(jsonObj.get("OriginalSchema"));
      }
      // validate the optional field `Similarity`
      if (jsonObj.get("Similarity") != null && !jsonObj.get("Similarity").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Similarity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SchemaResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SchemaResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SchemaResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SchemaResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SchemaResponse>() {
           @Override
           public void write(JsonWriter out, SchemaResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SchemaResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SchemaResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SchemaResponse
   * @throws IOException if the JSON string is invalid with respect to SchemaResponse
   */
  public static SchemaResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SchemaResponse.class);
  }

  /**
   * Convert an instance of SchemaResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

