/*
 * Google Analytics API
 * Views and manages your Google Analytics data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.WebpropertyChildLink;
import org.openapitools.client.model.WebpropertyParentLink;
import org.openapitools.client.model.WebpropertyPermissions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JSON template for an Analytics web property.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:01:26.696972-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Webproperty {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CHILD_LINK = "childLink";
  @SerializedName(SERIALIZED_NAME_CHILD_LINK)
  private WebpropertyChildLink childLink;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DATA_RETENTION_RESET_ON_NEW_ACTIVITY = "dataRetentionResetOnNewActivity";
  @SerializedName(SERIALIZED_NAME_DATA_RETENTION_RESET_ON_NEW_ACTIVITY)
  private Boolean dataRetentionResetOnNewActivity;

  public static final String SERIALIZED_NAME_DATA_RETENTION_TTL = "dataRetentionTtl";
  @SerializedName(SERIALIZED_NAME_DATA_RETENTION_TTL)
  private String dataRetentionTtl;

  public static final String SERIALIZED_NAME_DEFAULT_PROFILE_ID = "defaultProfileId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PROFILE_ID)
  private String defaultProfileId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INDUSTRY_VERTICAL = "industryVertical";
  @SerializedName(SERIALIZED_NAME_INDUSTRY_VERTICAL)
  private String industryVertical;

  public static final String SERIALIZED_NAME_INTERNAL_WEB_PROPERTY_ID = "internalWebPropertyId";
  @SerializedName(SERIALIZED_NAME_INTERNAL_WEB_PROPERTY_ID)
  private String internalWebPropertyId;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "analytics#webproperty";

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private String level;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_LINK = "parentLink";
  @SerializedName(SERIALIZED_NAME_PARENT_LINK)
  private WebpropertyParentLink parentLink;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private WebpropertyPermissions permissions;

  public static final String SERIALIZED_NAME_PROFILE_COUNT = "profileCount";
  @SerializedName(SERIALIZED_NAME_PROFILE_COUNT)
  private Integer profileCount;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_STARRED = "starred";
  @SerializedName(SERIALIZED_NAME_STARRED)
  private Boolean starred;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_WEBSITE_URL = "websiteUrl";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URL)
  private String websiteUrl;

  public Webproperty() {
  }

  public Webproperty(
     OffsetDateTime created, 
     String internalWebPropertyId, 
     String kind, 
     String level, 
     Integer profileCount, 
     String selfLink, 
     OffsetDateTime updated
  ) {
    this();
    this.created = created;
    this.internalWebPropertyId = internalWebPropertyId;
    this.kind = kind;
    this.level = level;
    this.profileCount = profileCount;
    this.selfLink = selfLink;
    this.updated = updated;
  }

  public Webproperty accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID to which this web property belongs.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Webproperty childLink(WebpropertyChildLink childLink) {
    this.childLink = childLink;
    return this;
  }

  /**
   * Get childLink
   * @return childLink
   */
  @javax.annotation.Nullable
  public WebpropertyChildLink getChildLink() {
    return childLink;
  }

  public void setChildLink(WebpropertyChildLink childLink) {
    this.childLink = childLink;
  }


  /**
   * Time this web property was created.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public Webproperty dataRetentionResetOnNewActivity(Boolean dataRetentionResetOnNewActivity) {
    this.dataRetentionResetOnNewActivity = dataRetentionResetOnNewActivity;
    return this;
  }

  /**
   * Set to true to reset the retention period of the user identifier with each new event from that user (thus setting the expiration date to current time plus retention period). Set to false to delete data associated with the user identifier automatically after the rentention period. This property cannot be set on insert.
   * @return dataRetentionResetOnNewActivity
   */
  @javax.annotation.Nullable
  public Boolean getDataRetentionResetOnNewActivity() {
    return dataRetentionResetOnNewActivity;
  }

  public void setDataRetentionResetOnNewActivity(Boolean dataRetentionResetOnNewActivity) {
    this.dataRetentionResetOnNewActivity = dataRetentionResetOnNewActivity;
  }


  public Webproperty dataRetentionTtl(String dataRetentionTtl) {
    this.dataRetentionTtl = dataRetentionTtl;
    return this;
  }

  /**
   * The length of time for which user and event data is retained. This property cannot be set on insert.
   * @return dataRetentionTtl
   */
  @javax.annotation.Nullable
  public String getDataRetentionTtl() {
    return dataRetentionTtl;
  }

  public void setDataRetentionTtl(String dataRetentionTtl) {
    this.dataRetentionTtl = dataRetentionTtl;
  }


  public Webproperty defaultProfileId(String defaultProfileId) {
    this.defaultProfileId = defaultProfileId;
    return this;
  }

  /**
   * Default view (profile) ID.
   * @return defaultProfileId
   */
  @javax.annotation.Nullable
  public String getDefaultProfileId() {
    return defaultProfileId;
  }

  public void setDefaultProfileId(String defaultProfileId) {
    this.defaultProfileId = defaultProfileId;
  }


  public Webproperty id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Web property ID of the form UA-XXXXX-YY.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Webproperty industryVertical(String industryVertical) {
    this.industryVertical = industryVertical;
    return this;
  }

  /**
   * The industry vertical/category selected for this web property.
   * @return industryVertical
   */
  @javax.annotation.Nullable
  public String getIndustryVertical() {
    return industryVertical;
  }

  public void setIndustryVertical(String industryVertical) {
    this.industryVertical = industryVertical;
  }


  /**
   * Internal ID for this web property.
   * @return internalWebPropertyId
   */
  @javax.annotation.Nullable
  public String getInternalWebPropertyId() {
    return internalWebPropertyId;
  }



  /**
   * Resource type for Analytics WebProperty.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }



  /**
   * Level for this web property. Possible values are STANDARD or PREMIUM.
   * @return level
   */
  @javax.annotation.Nullable
  public String getLevel() {
    return level;
  }



  public Webproperty name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this web property.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Webproperty parentLink(WebpropertyParentLink parentLink) {
    this.parentLink = parentLink;
    return this;
  }

  /**
   * Get parentLink
   * @return parentLink
   */
  @javax.annotation.Nullable
  public WebpropertyParentLink getParentLink() {
    return parentLink;
  }

  public void setParentLink(WebpropertyParentLink parentLink) {
    this.parentLink = parentLink;
  }


  public Webproperty permissions(WebpropertyPermissions permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nullable
  public WebpropertyPermissions getPermissions() {
    return permissions;
  }

  public void setPermissions(WebpropertyPermissions permissions) {
    this.permissions = permissions;
  }


  /**
   * View (Profile) count for this web property.
   * @return profileCount
   */
  @javax.annotation.Nullable
  public Integer getProfileCount() {
    return profileCount;
  }



  /**
   * Link for this web property.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }



  public Webproperty starred(Boolean starred) {
    this.starred = starred;
    return this;
  }

  /**
   * Indicates whether this web property is starred or not.
   * @return starred
   */
  @javax.annotation.Nullable
  public Boolean getStarred() {
    return starred;
  }

  public void setStarred(Boolean starred) {
    this.starred = starred;
  }


  /**
   * Time this web property was last modified.
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }



  public Webproperty websiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
    return this;
  }

  /**
   * Website url for this web property.
   * @return websiteUrl
   */
  @javax.annotation.Nullable
  public String getWebsiteUrl() {
    return websiteUrl;
  }

  public void setWebsiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Webproperty webproperty = (Webproperty) o;
    return Objects.equals(this.accountId, webproperty.accountId) &&
        Objects.equals(this.childLink, webproperty.childLink) &&
        Objects.equals(this.created, webproperty.created) &&
        Objects.equals(this.dataRetentionResetOnNewActivity, webproperty.dataRetentionResetOnNewActivity) &&
        Objects.equals(this.dataRetentionTtl, webproperty.dataRetentionTtl) &&
        Objects.equals(this.defaultProfileId, webproperty.defaultProfileId) &&
        Objects.equals(this.id, webproperty.id) &&
        Objects.equals(this.industryVertical, webproperty.industryVertical) &&
        Objects.equals(this.internalWebPropertyId, webproperty.internalWebPropertyId) &&
        Objects.equals(this.kind, webproperty.kind) &&
        Objects.equals(this.level, webproperty.level) &&
        Objects.equals(this.name, webproperty.name) &&
        Objects.equals(this.parentLink, webproperty.parentLink) &&
        Objects.equals(this.permissions, webproperty.permissions) &&
        Objects.equals(this.profileCount, webproperty.profileCount) &&
        Objects.equals(this.selfLink, webproperty.selfLink) &&
        Objects.equals(this.starred, webproperty.starred) &&
        Objects.equals(this.updated, webproperty.updated) &&
        Objects.equals(this.websiteUrl, webproperty.websiteUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, childLink, created, dataRetentionResetOnNewActivity, dataRetentionTtl, defaultProfileId, id, industryVertical, internalWebPropertyId, kind, level, name, parentLink, permissions, profileCount, selfLink, starred, updated, websiteUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Webproperty {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    childLink: ").append(toIndentedString(childLink)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    dataRetentionResetOnNewActivity: ").append(toIndentedString(dataRetentionResetOnNewActivity)).append("\n");
    sb.append("    dataRetentionTtl: ").append(toIndentedString(dataRetentionTtl)).append("\n");
    sb.append("    defaultProfileId: ").append(toIndentedString(defaultProfileId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    industryVertical: ").append(toIndentedString(industryVertical)).append("\n");
    sb.append("    internalWebPropertyId: ").append(toIndentedString(internalWebPropertyId)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentLink: ").append(toIndentedString(parentLink)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    profileCount: ").append(toIndentedString(profileCount)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    starred: ").append(toIndentedString(starred)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("childLink");
    openapiFields.add("created");
    openapiFields.add("dataRetentionResetOnNewActivity");
    openapiFields.add("dataRetentionTtl");
    openapiFields.add("defaultProfileId");
    openapiFields.add("id");
    openapiFields.add("industryVertical");
    openapiFields.add("internalWebPropertyId");
    openapiFields.add("kind");
    openapiFields.add("level");
    openapiFields.add("name");
    openapiFields.add("parentLink");
    openapiFields.add("permissions");
    openapiFields.add("profileCount");
    openapiFields.add("selfLink");
    openapiFields.add("starred");
    openapiFields.add("updated");
    openapiFields.add("websiteUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Webproperty
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Webproperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Webproperty is not found in the empty JSON string", Webproperty.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Webproperty.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Webproperty` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      // validate the optional field `childLink`
      if (jsonObj.get("childLink") != null && !jsonObj.get("childLink").isJsonNull()) {
        WebpropertyChildLink.validateJsonElement(jsonObj.get("childLink"));
      }
      if ((jsonObj.get("dataRetentionTtl") != null && !jsonObj.get("dataRetentionTtl").isJsonNull()) && !jsonObj.get("dataRetentionTtl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataRetentionTtl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataRetentionTtl").toString()));
      }
      if ((jsonObj.get("defaultProfileId") != null && !jsonObj.get("defaultProfileId").isJsonNull()) && !jsonObj.get("defaultProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultProfileId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("industryVertical") != null && !jsonObj.get("industryVertical").isJsonNull()) && !jsonObj.get("industryVertical").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industryVertical` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industryVertical").toString()));
      }
      if ((jsonObj.get("internalWebPropertyId") != null && !jsonObj.get("internalWebPropertyId").isJsonNull()) && !jsonObj.get("internalWebPropertyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalWebPropertyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalWebPropertyId").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) && !jsonObj.get("level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `parentLink`
      if (jsonObj.get("parentLink") != null && !jsonObj.get("parentLink").isJsonNull()) {
        WebpropertyParentLink.validateJsonElement(jsonObj.get("parentLink"));
      }
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        WebpropertyPermissions.validateJsonElement(jsonObj.get("permissions"));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("websiteUrl") != null && !jsonObj.get("websiteUrl").isJsonNull()) && !jsonObj.get("websiteUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `websiteUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("websiteUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Webproperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Webproperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Webproperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Webproperty.class));

       return (TypeAdapter<T>) new TypeAdapter<Webproperty>() {
           @Override
           public void write(JsonWriter out, Webproperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Webproperty read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Webproperty given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Webproperty
   * @throws IOException if the JSON string is invalid with respect to Webproperty
   */
  public static Webproperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Webproperty.class);
  }

  /**
   * Convert an instance of Webproperty to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

