/*
 * Google Analytics API
 * Views and manages your Google Analytics data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JSON template for an Analytics Remarketing Include Conditions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:11:22.913673-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IncludeConditions {
  public static final String SERIALIZED_NAME_DAYS_TO_LOOK_BACK = "daysToLookBack";
  @SerializedName(SERIALIZED_NAME_DAYS_TO_LOOK_BACK)
  private Integer daysToLookBack;

  public static final String SERIALIZED_NAME_IS_SMART_LIST = "isSmartList";
  @SerializedName(SERIALIZED_NAME_IS_SMART_LIST)
  private Boolean isSmartList;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "analytics#includeConditions";

  public static final String SERIALIZED_NAME_MEMBERSHIP_DURATION_DAYS = "membershipDurationDays";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_DURATION_DAYS)
  private Integer membershipDurationDays;

  public static final String SERIALIZED_NAME_SEGMENT = "segment";
  @SerializedName(SERIALIZED_NAME_SEGMENT)
  private String segment;

  public IncludeConditions() {
  }

  public IncludeConditions daysToLookBack(Integer daysToLookBack) {
    this.daysToLookBack = daysToLookBack;
    return this;
  }

  /**
   * The look-back window lets you specify a time frame for evaluating the behavior that qualifies users for your audience. For example, if your filters include users from Central Asia, and Transactions Greater than 2, and you set the look-back window to 14 days, then any user from Central Asia whose cumulative transactions exceed 2 during the last 14 days is added to the audience.
   * @return daysToLookBack
   */
  @javax.annotation.Nullable
  public Integer getDaysToLookBack() {
    return daysToLookBack;
  }

  public void setDaysToLookBack(Integer daysToLookBack) {
    this.daysToLookBack = daysToLookBack;
  }


  public IncludeConditions isSmartList(Boolean isSmartList) {
    this.isSmartList = isSmartList;
    return this;
  }

  /**
   * Boolean indicating whether this segment is a smart list. https://support.google.com/analytics/answer/4628577
   * @return isSmartList
   */
  @javax.annotation.Nullable
  public Boolean getIsSmartList() {
    return isSmartList;
  }

  public void setIsSmartList(Boolean isSmartList) {
    this.isSmartList = isSmartList;
  }


  public IncludeConditions kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Resource type for include conditions.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public IncludeConditions membershipDurationDays(Integer membershipDurationDays) {
    this.membershipDurationDays = membershipDurationDays;
    return this;
  }

  /**
   * Number of days (in the range 1 to 540) a user remains in the audience.
   * @return membershipDurationDays
   */
  @javax.annotation.Nullable
  public Integer getMembershipDurationDays() {
    return membershipDurationDays;
  }

  public void setMembershipDurationDays(Integer membershipDurationDays) {
    this.membershipDurationDays = membershipDurationDays;
  }


  public IncludeConditions segment(String segment) {
    this.segment = segment;
    return this;
  }

  /**
   * The segment condition that will cause a user to be added to an audience.
   * @return segment
   */
  @javax.annotation.Nullable
  public String getSegment() {
    return segment;
  }

  public void setSegment(String segment) {
    this.segment = segment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IncludeConditions includeConditions = (IncludeConditions) o;
    return Objects.equals(this.daysToLookBack, includeConditions.daysToLookBack) &&
        Objects.equals(this.isSmartList, includeConditions.isSmartList) &&
        Objects.equals(this.kind, includeConditions.kind) &&
        Objects.equals(this.membershipDurationDays, includeConditions.membershipDurationDays) &&
        Objects.equals(this.segment, includeConditions.segment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(daysToLookBack, isSmartList, kind, membershipDurationDays, segment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IncludeConditions {\n");
    sb.append("    daysToLookBack: ").append(toIndentedString(daysToLookBack)).append("\n");
    sb.append("    isSmartList: ").append(toIndentedString(isSmartList)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    membershipDurationDays: ").append(toIndentedString(membershipDurationDays)).append("\n");
    sb.append("    segment: ").append(toIndentedString(segment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("daysToLookBack");
    openapiFields.add("isSmartList");
    openapiFields.add("kind");
    openapiFields.add("membershipDurationDays");
    openapiFields.add("segment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IncludeConditions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IncludeConditions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IncludeConditions is not found in the empty JSON string", IncludeConditions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IncludeConditions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IncludeConditions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("segment") != null && !jsonObj.get("segment").isJsonNull()) && !jsonObj.get("segment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IncludeConditions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IncludeConditions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IncludeConditions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IncludeConditions.class));

       return (TypeAdapter<T>) new TypeAdapter<IncludeConditions>() {
           @Override
           public void write(JsonWriter out, IncludeConditions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IncludeConditions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IncludeConditions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IncludeConditions
   * @throws IOException if the JSON string is invalid with respect to IncludeConditions
   */
  public static IncludeConditions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IncludeConditions.class);
  }

  /**
   * Convert an instance of IncludeConditions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

