/*
 * Google Analytics API
 * Views and manages your Google Analytics data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.UnsampledReportCloudStorageDownloadDetails;
import org.openapitools.client.model.UnsampledReportDriveDownloadDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JSON template for Analytics unsampled report resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:01:26.696972-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UnsampledReport {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CLOUD_STORAGE_DOWNLOAD_DETAILS = "cloudStorageDownloadDetails";
  @SerializedName(SERIALIZED_NAME_CLOUD_STORAGE_DOWNLOAD_DETAILS)
  private UnsampledReportCloudStorageDownloadDetails cloudStorageDownloadDetails;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private String dimensions;

  public static final String SERIALIZED_NAME_DOWNLOAD_TYPE = "downloadType";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_TYPE)
  private String downloadType;

  public static final String SERIALIZED_NAME_DRIVE_DOWNLOAD_DETAILS = "driveDownloadDetails";
  @SerializedName(SERIALIZED_NAME_DRIVE_DOWNLOAD_DETAILS)
  private UnsampledReportDriveDownloadDetails driveDownloadDetails;

  public static final String SERIALIZED_NAME_END_DATE = "end-date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private String filters;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "analytics#unsampledReport";

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private String metrics;

  public static final String SERIALIZED_NAME_PROFILE_ID = "profileId";
  @SerializedName(SERIALIZED_NAME_PROFILE_ID)
  private String profileId;

  public static final String SERIALIZED_NAME_SEGMENT = "segment";
  @SerializedName(SERIALIZED_NAME_SEGMENT)
  private String segment;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_START_DATE = "start-date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_WEB_PROPERTY_ID = "webPropertyId";
  @SerializedName(SERIALIZED_NAME_WEB_PROPERTY_ID)
  private String webPropertyId;

  public UnsampledReport() {
  }

  public UnsampledReport(
     OffsetDateTime created, 
     String downloadType, 
     String kind, 
     String selfLink, 
     String status, 
     OffsetDateTime updated
  ) {
    this();
    this.created = created;
    this.downloadType = downloadType;
    this.kind = kind;
    this.selfLink = selfLink;
    this.status = status;
    this.updated = updated;
  }

  public UnsampledReport accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID to which this unsampled report belongs.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public UnsampledReport cloudStorageDownloadDetails(UnsampledReportCloudStorageDownloadDetails cloudStorageDownloadDetails) {
    this.cloudStorageDownloadDetails = cloudStorageDownloadDetails;
    return this;
  }

  /**
   * Get cloudStorageDownloadDetails
   * @return cloudStorageDownloadDetails
   */
  @javax.annotation.Nullable
  public UnsampledReportCloudStorageDownloadDetails getCloudStorageDownloadDetails() {
    return cloudStorageDownloadDetails;
  }

  public void setCloudStorageDownloadDetails(UnsampledReportCloudStorageDownloadDetails cloudStorageDownloadDetails) {
    this.cloudStorageDownloadDetails = cloudStorageDownloadDetails;
  }


  /**
   * Time this unsampled report was created.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public UnsampledReport dimensions(String dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * The dimensions for the unsampled report.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public String getDimensions() {
    return dimensions;
  }

  public void setDimensions(String dimensions) {
    this.dimensions = dimensions;
  }


  /**
   * The type of download you need to use for the report data file. Possible values include &#x60;GOOGLE_DRIVE&#x60; and &#x60;GOOGLE_CLOUD_STORAGE&#x60;. If the value is &#x60;GOOGLE_DRIVE&#x60;, see the &#x60;driveDownloadDetails&#x60; field. If the value is &#x60;GOOGLE_CLOUD_STORAGE&#x60;, see the &#x60;cloudStorageDownloadDetails&#x60; field.
   * @return downloadType
   */
  @javax.annotation.Nullable
  public String getDownloadType() {
    return downloadType;
  }



  public UnsampledReport driveDownloadDetails(UnsampledReportDriveDownloadDetails driveDownloadDetails) {
    this.driveDownloadDetails = driveDownloadDetails;
    return this;
  }

  /**
   * Get driveDownloadDetails
   * @return driveDownloadDetails
   */
  @javax.annotation.Nullable
  public UnsampledReportDriveDownloadDetails getDriveDownloadDetails() {
    return driveDownloadDetails;
  }

  public void setDriveDownloadDetails(UnsampledReportDriveDownloadDetails driveDownloadDetails) {
    this.driveDownloadDetails = driveDownloadDetails;
  }


  public UnsampledReport endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The end date for the unsampled report.
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public UnsampledReport filters(String filters) {
    this.filters = filters;
    return this;
  }

  /**
   * The filters for the unsampled report.
   * @return filters
   */
  @javax.annotation.Nullable
  public String getFilters() {
    return filters;
  }

  public void setFilters(String filters) {
    this.filters = filters;
  }


  public UnsampledReport id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unsampled report ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  /**
   * Resource type for an Analytics unsampled report.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }



  public UnsampledReport metrics(String metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * The metrics for the unsampled report.
   * @return metrics
   */
  @javax.annotation.Nullable
  public String getMetrics() {
    return metrics;
  }

  public void setMetrics(String metrics) {
    this.metrics = metrics;
  }


  public UnsampledReport profileId(String profileId) {
    this.profileId = profileId;
    return this;
  }

  /**
   * View (Profile) ID to which this unsampled report belongs.
   * @return profileId
   */
  @javax.annotation.Nullable
  public String getProfileId() {
    return profileId;
  }

  public void setProfileId(String profileId) {
    this.profileId = profileId;
  }


  public UnsampledReport segment(String segment) {
    this.segment = segment;
    return this;
  }

  /**
   * The segment for the unsampled report.
   * @return segment
   */
  @javax.annotation.Nullable
  public String getSegment() {
    return segment;
  }

  public void setSegment(String segment) {
    this.segment = segment;
  }


  /**
   * Link for this unsampled report.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }



  public UnsampledReport startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The start date for the unsampled report.
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  /**
   * Status of this unsampled report. Possible values are PENDING, COMPLETED, or FAILED.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }



  public UnsampledReport title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the unsampled report.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  /**
   * Time this unsampled report was last modified.
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }



  public UnsampledReport webPropertyId(String webPropertyId) {
    this.webPropertyId = webPropertyId;
    return this;
  }

  /**
   * Web property ID to which this unsampled report belongs. The web property ID is of the form UA-XXXXX-YY.
   * @return webPropertyId
   */
  @javax.annotation.Nullable
  public String getWebPropertyId() {
    return webPropertyId;
  }

  public void setWebPropertyId(String webPropertyId) {
    this.webPropertyId = webPropertyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnsampledReport unsampledReport = (UnsampledReport) o;
    return Objects.equals(this.accountId, unsampledReport.accountId) &&
        Objects.equals(this.cloudStorageDownloadDetails, unsampledReport.cloudStorageDownloadDetails) &&
        Objects.equals(this.created, unsampledReport.created) &&
        Objects.equals(this.dimensions, unsampledReport.dimensions) &&
        Objects.equals(this.downloadType, unsampledReport.downloadType) &&
        Objects.equals(this.driveDownloadDetails, unsampledReport.driveDownloadDetails) &&
        Objects.equals(this.endDate, unsampledReport.endDate) &&
        Objects.equals(this.filters, unsampledReport.filters) &&
        Objects.equals(this.id, unsampledReport.id) &&
        Objects.equals(this.kind, unsampledReport.kind) &&
        Objects.equals(this.metrics, unsampledReport.metrics) &&
        Objects.equals(this.profileId, unsampledReport.profileId) &&
        Objects.equals(this.segment, unsampledReport.segment) &&
        Objects.equals(this.selfLink, unsampledReport.selfLink) &&
        Objects.equals(this.startDate, unsampledReport.startDate) &&
        Objects.equals(this.status, unsampledReport.status) &&
        Objects.equals(this.title, unsampledReport.title) &&
        Objects.equals(this.updated, unsampledReport.updated) &&
        Objects.equals(this.webPropertyId, unsampledReport.webPropertyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, cloudStorageDownloadDetails, created, dimensions, downloadType, driveDownloadDetails, endDate, filters, id, kind, metrics, profileId, segment, selfLink, startDate, status, title, updated, webPropertyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnsampledReport {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    cloudStorageDownloadDetails: ").append(toIndentedString(cloudStorageDownloadDetails)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    downloadType: ").append(toIndentedString(downloadType)).append("\n");
    sb.append("    driveDownloadDetails: ").append(toIndentedString(driveDownloadDetails)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    segment: ").append(toIndentedString(segment)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    webPropertyId: ").append(toIndentedString(webPropertyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("cloudStorageDownloadDetails");
    openapiFields.add("created");
    openapiFields.add("dimensions");
    openapiFields.add("downloadType");
    openapiFields.add("driveDownloadDetails");
    openapiFields.add("end-date");
    openapiFields.add("filters");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("metrics");
    openapiFields.add("profileId");
    openapiFields.add("segment");
    openapiFields.add("selfLink");
    openapiFields.add("start-date");
    openapiFields.add("status");
    openapiFields.add("title");
    openapiFields.add("updated");
    openapiFields.add("webPropertyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UnsampledReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UnsampledReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UnsampledReport is not found in the empty JSON string", UnsampledReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UnsampledReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UnsampledReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      // validate the optional field `cloudStorageDownloadDetails`
      if (jsonObj.get("cloudStorageDownloadDetails") != null && !jsonObj.get("cloudStorageDownloadDetails").isJsonNull()) {
        UnsampledReportCloudStorageDownloadDetails.validateJsonElement(jsonObj.get("cloudStorageDownloadDetails"));
      }
      if ((jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) && !jsonObj.get("dimensions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
      }
      if ((jsonObj.get("downloadType") != null && !jsonObj.get("downloadType").isJsonNull()) && !jsonObj.get("downloadType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadType").toString()));
      }
      // validate the optional field `driveDownloadDetails`
      if (jsonObj.get("driveDownloadDetails") != null && !jsonObj.get("driveDownloadDetails").isJsonNull()) {
        UnsampledReportDriveDownloadDetails.validateJsonElement(jsonObj.get("driveDownloadDetails"));
      }
      if ((jsonObj.get("end-date") != null && !jsonObj.get("end-date").isJsonNull()) && !jsonObj.get("end-date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end-date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end-date").toString()));
      }
      if ((jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) && !jsonObj.get("filters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filters").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) && !jsonObj.get("metrics").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metrics` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
      }
      if ((jsonObj.get("profileId") != null && !jsonObj.get("profileId").isJsonNull()) && !jsonObj.get("profileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileId").toString()));
      }
      if ((jsonObj.get("segment") != null && !jsonObj.get("segment").isJsonNull()) && !jsonObj.get("segment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segment").toString()));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("start-date") != null && !jsonObj.get("start-date").isJsonNull()) && !jsonObj.get("start-date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start-date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start-date").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("webPropertyId") != null && !jsonObj.get("webPropertyId").isJsonNull()) && !jsonObj.get("webPropertyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webPropertyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webPropertyId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UnsampledReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UnsampledReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UnsampledReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UnsampledReport.class));

       return (TypeAdapter<T>) new TypeAdapter<UnsampledReport>() {
           @Override
           public void write(JsonWriter out, UnsampledReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UnsampledReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UnsampledReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UnsampledReport
   * @throws IOException if the JSON string is invalid with respect to UnsampledReport
   */
  public static UnsampledReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UnsampledReport.class);
  }

  /**
   * Convert an instance of UnsampledReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

