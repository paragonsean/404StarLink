/*
 * Google Analytics API
 * Views and manages your Google Analytics data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GaData;
import org.openapitools.client.model.McfData;
import org.openapitools.client.model.RealtimeData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for analyticsDataGaGet
     * @param ids Unique table ID for retrieving Analytics data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
     * @param startDate Start date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo. (required)
     * @param endDate End date for fetching Analytics data. Request can should specify an end date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is yesterday. (required)
     * @param metrics A comma-separated list of Analytics metrics. E.g., &#39;ga:sessions,ga:pageviews&#39;. At least one metric must be specified. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimensions A comma-separated list of Analytics dimensions. E.g., &#39;ga:browser,ga:city&#39;. (optional)
     * @param filters A comma-separated list of dimension or metric filters to be applied to Analytics data. (optional)
     * @param includeEmptyRows The response will include empty rows if this parameter is set to true, the default is true (optional)
     * @param maxResults The maximum number of entries to include in this feed. (optional)
     * @param output The selected format for the response. Default format is JSON. (optional)
     * @param samplingLevel The desired sampling level. (optional)
     * @param segment An Analytics segment to be applied to data. (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for Analytics data. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsDataGaGetCall(String ids, String startDate, String endDate, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Boolean includeEmptyRows, Integer maxResults, String output, String samplingLevel, String segment, String sort, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/ga";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end-date", endDate));
        }

        if (metrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metrics", metrics));
        }

        if (dimensions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dimensions", dimensions));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (includeEmptyRows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-empty-rows", includeEmptyRows));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        if (samplingLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("samplingLevel", samplingLevel));
        }

        if (segment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("segment", segment));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsDataGaGetValidateBeforeCall(String ids, String startDate, String endDate, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Boolean includeEmptyRows, Integer maxResults, String output, String samplingLevel, String segment, String sort, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling analyticsDataGaGet(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling analyticsDataGaGet(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling analyticsDataGaGet(Async)");
        }

        // verify the required parameter 'metrics' is set
        if (metrics == null) {
            throw new ApiException("Missing the required parameter 'metrics' when calling analyticsDataGaGet(Async)");
        }

        return analyticsDataGaGetCall(ids, startDate, endDate, metrics, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimensions, filters, includeEmptyRows, maxResults, output, samplingLevel, segment, sort, startIndex, _callback);

    }

    /**
     * 
     * Returns Analytics data for a view (profile).
     * @param ids Unique table ID for retrieving Analytics data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
     * @param startDate Start date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo. (required)
     * @param endDate End date for fetching Analytics data. Request can should specify an end date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is yesterday. (required)
     * @param metrics A comma-separated list of Analytics metrics. E.g., &#39;ga:sessions,ga:pageviews&#39;. At least one metric must be specified. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimensions A comma-separated list of Analytics dimensions. E.g., &#39;ga:browser,ga:city&#39;. (optional)
     * @param filters A comma-separated list of dimension or metric filters to be applied to Analytics data. (optional)
     * @param includeEmptyRows The response will include empty rows if this parameter is set to true, the default is true (optional)
     * @param maxResults The maximum number of entries to include in this feed. (optional)
     * @param output The selected format for the response. Default format is JSON. (optional)
     * @param samplingLevel The desired sampling level. (optional)
     * @param segment An Analytics segment to be applied to data. (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for Analytics data. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return GaData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GaData analyticsDataGaGet(String ids, String startDate, String endDate, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Boolean includeEmptyRows, Integer maxResults, String output, String samplingLevel, String segment, String sort, Integer startIndex) throws ApiException {
        ApiResponse<GaData> localVarResp = analyticsDataGaGetWithHttpInfo(ids, startDate, endDate, metrics, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimensions, filters, includeEmptyRows, maxResults, output, samplingLevel, segment, sort, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns Analytics data for a view (profile).
     * @param ids Unique table ID for retrieving Analytics data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
     * @param startDate Start date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo. (required)
     * @param endDate End date for fetching Analytics data. Request can should specify an end date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is yesterday. (required)
     * @param metrics A comma-separated list of Analytics metrics. E.g., &#39;ga:sessions,ga:pageviews&#39;. At least one metric must be specified. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimensions A comma-separated list of Analytics dimensions. E.g., &#39;ga:browser,ga:city&#39;. (optional)
     * @param filters A comma-separated list of dimension or metric filters to be applied to Analytics data. (optional)
     * @param includeEmptyRows The response will include empty rows if this parameter is set to true, the default is true (optional)
     * @param maxResults The maximum number of entries to include in this feed. (optional)
     * @param output The selected format for the response. Default format is JSON. (optional)
     * @param samplingLevel The desired sampling level. (optional)
     * @param segment An Analytics segment to be applied to data. (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for Analytics data. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;GaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GaData> analyticsDataGaGetWithHttpInfo(String ids, String startDate, String endDate, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Boolean includeEmptyRows, Integer maxResults, String output, String samplingLevel, String segment, String sort, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsDataGaGetValidateBeforeCall(ids, startDate, endDate, metrics, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimensions, filters, includeEmptyRows, maxResults, output, samplingLevel, segment, sort, startIndex, null);
        Type localVarReturnType = new TypeToken<GaData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns Analytics data for a view (profile).
     * @param ids Unique table ID for retrieving Analytics data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
     * @param startDate Start date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo. (required)
     * @param endDate End date for fetching Analytics data. Request can should specify an end date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is yesterday. (required)
     * @param metrics A comma-separated list of Analytics metrics. E.g., &#39;ga:sessions,ga:pageviews&#39;. At least one metric must be specified. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimensions A comma-separated list of Analytics dimensions. E.g., &#39;ga:browser,ga:city&#39;. (optional)
     * @param filters A comma-separated list of dimension or metric filters to be applied to Analytics data. (optional)
     * @param includeEmptyRows The response will include empty rows if this parameter is set to true, the default is true (optional)
     * @param maxResults The maximum number of entries to include in this feed. (optional)
     * @param output The selected format for the response. Default format is JSON. (optional)
     * @param samplingLevel The desired sampling level. (optional)
     * @param segment An Analytics segment to be applied to data. (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for Analytics data. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsDataGaGetAsync(String ids, String startDate, String endDate, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Boolean includeEmptyRows, Integer maxResults, String output, String samplingLevel, String segment, String sort, Integer startIndex, final ApiCallback<GaData> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsDataGaGetValidateBeforeCall(ids, startDate, endDate, metrics, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimensions, filters, includeEmptyRows, maxResults, output, samplingLevel, segment, sort, startIndex, _callback);
        Type localVarReturnType = new TypeToken<GaData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsDataMcfGet
     * @param ids Unique table ID for retrieving Analytics data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
     * @param startDate Start date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo. (required)
     * @param endDate End date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo. (required)
     * @param metrics A comma-separated list of Multi-Channel Funnels metrics. E.g., &#39;mcf:totalConversions,mcf:totalConversionValue&#39;. At least one metric must be specified. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimensions A comma-separated list of Multi-Channel Funnels dimensions. E.g., &#39;mcf:source,mcf:medium&#39;. (optional)
     * @param filters A comma-separated list of dimension or metric filters to be applied to the Analytics data. (optional)
     * @param maxResults The maximum number of entries to include in this feed. (optional)
     * @param samplingLevel The desired sampling level. (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for the Analytics data. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsDataMcfGetCall(String ids, String startDate, String endDate, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Integer maxResults, String samplingLevel, String sort, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/mcf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end-date", endDate));
        }

        if (metrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metrics", metrics));
        }

        if (dimensions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dimensions", dimensions));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (samplingLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("samplingLevel", samplingLevel));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsDataMcfGetValidateBeforeCall(String ids, String startDate, String endDate, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Integer maxResults, String samplingLevel, String sort, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling analyticsDataMcfGet(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling analyticsDataMcfGet(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling analyticsDataMcfGet(Async)");
        }

        // verify the required parameter 'metrics' is set
        if (metrics == null) {
            throw new ApiException("Missing the required parameter 'metrics' when calling analyticsDataMcfGet(Async)");
        }

        return analyticsDataMcfGetCall(ids, startDate, endDate, metrics, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimensions, filters, maxResults, samplingLevel, sort, startIndex, _callback);

    }

    /**
     * 
     * Returns Analytics Multi-Channel Funnels data for a view (profile).
     * @param ids Unique table ID for retrieving Analytics data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
     * @param startDate Start date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo. (required)
     * @param endDate End date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo. (required)
     * @param metrics A comma-separated list of Multi-Channel Funnels metrics. E.g., &#39;mcf:totalConversions,mcf:totalConversionValue&#39;. At least one metric must be specified. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimensions A comma-separated list of Multi-Channel Funnels dimensions. E.g., &#39;mcf:source,mcf:medium&#39;. (optional)
     * @param filters A comma-separated list of dimension or metric filters to be applied to the Analytics data. (optional)
     * @param maxResults The maximum number of entries to include in this feed. (optional)
     * @param samplingLevel The desired sampling level. (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for the Analytics data. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return McfData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public McfData analyticsDataMcfGet(String ids, String startDate, String endDate, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Integer maxResults, String samplingLevel, String sort, Integer startIndex) throws ApiException {
        ApiResponse<McfData> localVarResp = analyticsDataMcfGetWithHttpInfo(ids, startDate, endDate, metrics, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimensions, filters, maxResults, samplingLevel, sort, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns Analytics Multi-Channel Funnels data for a view (profile).
     * @param ids Unique table ID for retrieving Analytics data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
     * @param startDate Start date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo. (required)
     * @param endDate End date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo. (required)
     * @param metrics A comma-separated list of Multi-Channel Funnels metrics. E.g., &#39;mcf:totalConversions,mcf:totalConversionValue&#39;. At least one metric must be specified. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimensions A comma-separated list of Multi-Channel Funnels dimensions. E.g., &#39;mcf:source,mcf:medium&#39;. (optional)
     * @param filters A comma-separated list of dimension or metric filters to be applied to the Analytics data. (optional)
     * @param maxResults The maximum number of entries to include in this feed. (optional)
     * @param samplingLevel The desired sampling level. (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for the Analytics data. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;McfData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<McfData> analyticsDataMcfGetWithHttpInfo(String ids, String startDate, String endDate, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Integer maxResults, String samplingLevel, String sort, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsDataMcfGetValidateBeforeCall(ids, startDate, endDate, metrics, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimensions, filters, maxResults, samplingLevel, sort, startIndex, null);
        Type localVarReturnType = new TypeToken<McfData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns Analytics Multi-Channel Funnels data for a view (profile).
     * @param ids Unique table ID for retrieving Analytics data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
     * @param startDate Start date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo. (required)
     * @param endDate End date for fetching Analytics data. Requests can specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g., today, yesterday, or 7daysAgo). The default value is 7daysAgo. (required)
     * @param metrics A comma-separated list of Multi-Channel Funnels metrics. E.g., &#39;mcf:totalConversions,mcf:totalConversionValue&#39;. At least one metric must be specified. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimensions A comma-separated list of Multi-Channel Funnels dimensions. E.g., &#39;mcf:source,mcf:medium&#39;. (optional)
     * @param filters A comma-separated list of dimension or metric filters to be applied to the Analytics data. (optional)
     * @param maxResults The maximum number of entries to include in this feed. (optional)
     * @param samplingLevel The desired sampling level. (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for the Analytics data. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsDataMcfGetAsync(String ids, String startDate, String endDate, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Integer maxResults, String samplingLevel, String sort, Integer startIndex, final ApiCallback<McfData> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsDataMcfGetValidateBeforeCall(ids, startDate, endDate, metrics, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimensions, filters, maxResults, samplingLevel, sort, startIndex, _callback);
        Type localVarReturnType = new TypeToken<McfData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsDataRealtimeGet
     * @param ids Unique table ID for retrieving real time data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
     * @param metrics A comma-separated list of real time metrics. E.g., &#39;rt:activeUsers&#39;. At least one metric must be specified. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimensions A comma-separated list of real time dimensions. E.g., &#39;rt:medium,rt:city&#39;. (optional)
     * @param filters A comma-separated list of dimension or metric filters to be applied to real time data. (optional)
     * @param maxResults The maximum number of entries to include in this feed. (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for real time data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsDataRealtimeGetCall(String ids, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Integer maxResults, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/realtime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (metrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metrics", metrics));
        }

        if (dimensions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dimensions", dimensions));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsDataRealtimeGetValidateBeforeCall(String ids, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Integer maxResults, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling analyticsDataRealtimeGet(Async)");
        }

        // verify the required parameter 'metrics' is set
        if (metrics == null) {
            throw new ApiException("Missing the required parameter 'metrics' when calling analyticsDataRealtimeGet(Async)");
        }

        return analyticsDataRealtimeGetCall(ids, metrics, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimensions, filters, maxResults, sort, _callback);

    }

    /**
     * 
     * Returns real time data for a view (profile).
     * @param ids Unique table ID for retrieving real time data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
     * @param metrics A comma-separated list of real time metrics. E.g., &#39;rt:activeUsers&#39;. At least one metric must be specified. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimensions A comma-separated list of real time dimensions. E.g., &#39;rt:medium,rt:city&#39;. (optional)
     * @param filters A comma-separated list of dimension or metric filters to be applied to real time data. (optional)
     * @param maxResults The maximum number of entries to include in this feed. (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for real time data. (optional)
     * @return RealtimeData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public RealtimeData analyticsDataRealtimeGet(String ids, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Integer maxResults, String sort) throws ApiException {
        ApiResponse<RealtimeData> localVarResp = analyticsDataRealtimeGetWithHttpInfo(ids, metrics, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimensions, filters, maxResults, sort);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns real time data for a view (profile).
     * @param ids Unique table ID for retrieving real time data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
     * @param metrics A comma-separated list of real time metrics. E.g., &#39;rt:activeUsers&#39;. At least one metric must be specified. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimensions A comma-separated list of real time dimensions. E.g., &#39;rt:medium,rt:city&#39;. (optional)
     * @param filters A comma-separated list of dimension or metric filters to be applied to real time data. (optional)
     * @param maxResults The maximum number of entries to include in this feed. (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for real time data. (optional)
     * @return ApiResponse&lt;RealtimeData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RealtimeData> analyticsDataRealtimeGetWithHttpInfo(String ids, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Integer maxResults, String sort) throws ApiException {
        okhttp3.Call localVarCall = analyticsDataRealtimeGetValidateBeforeCall(ids, metrics, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimensions, filters, maxResults, sort, null);
        Type localVarReturnType = new TypeToken<RealtimeData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns real time data for a view (profile).
     * @param ids Unique table ID for retrieving real time data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
     * @param metrics A comma-separated list of real time metrics. E.g., &#39;rt:activeUsers&#39;. At least one metric must be specified. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimensions A comma-separated list of real time dimensions. E.g., &#39;rt:medium,rt:city&#39;. (optional)
     * @param filters A comma-separated list of dimension or metric filters to be applied to real time data. (optional)
     * @param maxResults The maximum number of entries to include in this feed. (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for real time data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsDataRealtimeGetAsync(String ids, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Integer maxResults, String sort, final ApiCallback<RealtimeData> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsDataRealtimeGetValidateBeforeCall(ids, metrics, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimensions, filters, maxResults, sort, _callback);
        Type localVarReturnType = new TypeToken<RealtimeData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
