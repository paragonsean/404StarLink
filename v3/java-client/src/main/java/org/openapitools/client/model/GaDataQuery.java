/*
 * Google Analytics API
 * Views and manages your Google Analytics data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Analytics data request query parameters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:11:22.913673-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GaDataQuery {
  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private String dimensions;

  public static final String SERIALIZED_NAME_END_DATE = "end-date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private String filters;

  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private String ids;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "max-results";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<String> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAMPLING_LEVEL = "samplingLevel";
  @SerializedName(SERIALIZED_NAME_SAMPLING_LEVEL)
  private String samplingLevel;

  public static final String SERIALIZED_NAME_SEGMENT = "segment";
  @SerializedName(SERIALIZED_NAME_SEGMENT)
  private String segment;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private List<String> sort = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE = "start-date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_START_INDEX = "start-index";
  @SerializedName(SERIALIZED_NAME_START_INDEX)
  private Integer startIndex;

  public GaDataQuery() {
  }

  public GaDataQuery dimensions(String dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * List of analytics dimensions.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public String getDimensions() {
    return dimensions;
  }

  public void setDimensions(String dimensions) {
    this.dimensions = dimensions;
  }


  public GaDataQuery endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * End date.
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public GaDataQuery filters(String filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Comma-separated list of dimension or metric filters.
   * @return filters
   */
  @javax.annotation.Nullable
  public String getFilters() {
    return filters;
  }

  public void setFilters(String filters) {
    this.filters = filters;
  }


  public GaDataQuery ids(String ids) {
    this.ids = ids;
    return this;
  }

  /**
   * Unique table ID.
   * @return ids
   */
  @javax.annotation.Nullable
  public String getIds() {
    return ids;
  }

  public void setIds(String ids) {
    this.ids = ids;
  }


  public GaDataQuery maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Maximum results per page.
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public GaDataQuery metrics(List<String> metrics) {
    this.metrics = metrics;
    return this;
  }

  public GaDataQuery addMetricsItem(String metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * List of analytics metrics.
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<String> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<String> metrics) {
    this.metrics = metrics;
  }


  public GaDataQuery samplingLevel(String samplingLevel) {
    this.samplingLevel = samplingLevel;
    return this;
  }

  /**
   * Desired sampling level
   * @return samplingLevel
   */
  @javax.annotation.Nullable
  public String getSamplingLevel() {
    return samplingLevel;
  }

  public void setSamplingLevel(String samplingLevel) {
    this.samplingLevel = samplingLevel;
  }


  public GaDataQuery segment(String segment) {
    this.segment = segment;
    return this;
  }

  /**
   * Analytics advanced segment.
   * @return segment
   */
  @javax.annotation.Nullable
  public String getSegment() {
    return segment;
  }

  public void setSegment(String segment) {
    this.segment = segment;
  }


  public GaDataQuery sort(List<String> sort) {
    this.sort = sort;
    return this;
  }

  public GaDataQuery addSortItem(String sortItem) {
    if (this.sort == null) {
      this.sort = new ArrayList<>();
    }
    this.sort.add(sortItem);
    return this;
  }

  /**
   * List of dimensions or metrics based on which Analytics data is sorted.
   * @return sort
   */
  @javax.annotation.Nullable
  public List<String> getSort() {
    return sort;
  }

  public void setSort(List<String> sort) {
    this.sort = sort;
  }


  public GaDataQuery startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Start date.
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public GaDataQuery startIndex(Integer startIndex) {
    this.startIndex = startIndex;
    return this;
  }

  /**
   * Start index.
   * @return startIndex
   */
  @javax.annotation.Nullable
  public Integer getStartIndex() {
    return startIndex;
  }

  public void setStartIndex(Integer startIndex) {
    this.startIndex = startIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GaDataQuery gaDataQuery = (GaDataQuery) o;
    return Objects.equals(this.dimensions, gaDataQuery.dimensions) &&
        Objects.equals(this.endDate, gaDataQuery.endDate) &&
        Objects.equals(this.filters, gaDataQuery.filters) &&
        Objects.equals(this.ids, gaDataQuery.ids) &&
        Objects.equals(this.maxResults, gaDataQuery.maxResults) &&
        Objects.equals(this.metrics, gaDataQuery.metrics) &&
        Objects.equals(this.samplingLevel, gaDataQuery.samplingLevel) &&
        Objects.equals(this.segment, gaDataQuery.segment) &&
        Objects.equals(this.sort, gaDataQuery.sort) &&
        Objects.equals(this.startDate, gaDataQuery.startDate) &&
        Objects.equals(this.startIndex, gaDataQuery.startIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimensions, endDate, filters, ids, maxResults, metrics, samplingLevel, segment, sort, startDate, startIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GaDataQuery {\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    samplingLevel: ").append(toIndentedString(samplingLevel)).append("\n");
    sb.append("    segment: ").append(toIndentedString(segment)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    startIndex: ").append(toIndentedString(startIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimensions");
    openapiFields.add("end-date");
    openapiFields.add("filters");
    openapiFields.add("ids");
    openapiFields.add("max-results");
    openapiFields.add("metrics");
    openapiFields.add("samplingLevel");
    openapiFields.add("segment");
    openapiFields.add("sort");
    openapiFields.add("start-date");
    openapiFields.add("start-index");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GaDataQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GaDataQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GaDataQuery is not found in the empty JSON string", GaDataQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GaDataQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GaDataQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) && !jsonObj.get("dimensions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
      }
      if ((jsonObj.get("end-date") != null && !jsonObj.get("end-date").isJsonNull()) && !jsonObj.get("end-date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end-date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end-date").toString()));
      }
      if ((jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) && !jsonObj.get("filters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filters").toString()));
      }
      if ((jsonObj.get("ids") != null && !jsonObj.get("ids").isJsonNull()) && !jsonObj.get("ids").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ids` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull() && !jsonObj.get("metrics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
      }
      if ((jsonObj.get("samplingLevel") != null && !jsonObj.get("samplingLevel").isJsonNull()) && !jsonObj.get("samplingLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `samplingLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("samplingLevel").toString()));
      }
      if ((jsonObj.get("segment") != null && !jsonObj.get("segment").isJsonNull()) && !jsonObj.get("segment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segment").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull() && !jsonObj.get("sort").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort` to be an array in the JSON string but got `%s`", jsonObj.get("sort").toString()));
      }
      if ((jsonObj.get("start-date") != null && !jsonObj.get("start-date").isJsonNull()) && !jsonObj.get("start-date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start-date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start-date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GaDataQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GaDataQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GaDataQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GaDataQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<GaDataQuery>() {
           @Override
           public void write(JsonWriter out, GaDataQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GaDataQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GaDataQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GaDataQuery
   * @throws IOException if the JSON string is invalid with respect to GaDataQuery
   */
  public static GaDataQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GaDataQuery.class);
  }

  /**
   * Convert an instance of GaDataQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

