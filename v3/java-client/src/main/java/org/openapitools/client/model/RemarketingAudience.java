/*
 * Google Analytics API
 * Views and manages your Google Analytics data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LinkedForeignAccount;
import org.openapitools.client.model.RemarketingAudienceAudienceDefinition;
import org.openapitools.client.model.RemarketingAudienceStateBasedAudienceDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JSON template for an Analytics remarketing audience.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:01:26.696972-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RemarketingAudience {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_AUDIENCE_DEFINITION = "audienceDefinition";
  @SerializedName(SERIALIZED_NAME_AUDIENCE_DEFINITION)
  private RemarketingAudienceAudienceDefinition audienceDefinition;

  public static final String SERIALIZED_NAME_AUDIENCE_TYPE = "audienceType";
  @SerializedName(SERIALIZED_NAME_AUDIENCE_TYPE)
  private String audienceType;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTERNAL_WEB_PROPERTY_ID = "internalWebPropertyId";
  @SerializedName(SERIALIZED_NAME_INTERNAL_WEB_PROPERTY_ID)
  private String internalWebPropertyId;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "analytics#remarketingAudience";

  public static final String SERIALIZED_NAME_LINKED_AD_ACCOUNTS = "linkedAdAccounts";
  @SerializedName(SERIALIZED_NAME_LINKED_AD_ACCOUNTS)
  private List<LinkedForeignAccount> linkedAdAccounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKED_VIEWS = "linkedViews";
  @SerializedName(SERIALIZED_NAME_LINKED_VIEWS)
  private List<String> linkedViews = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATE_BASED_AUDIENCE_DEFINITION = "stateBasedAudienceDefinition";
  @SerializedName(SERIALIZED_NAME_STATE_BASED_AUDIENCE_DEFINITION)
  private RemarketingAudienceStateBasedAudienceDefinition stateBasedAudienceDefinition;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_WEB_PROPERTY_ID = "webPropertyId";
  @SerializedName(SERIALIZED_NAME_WEB_PROPERTY_ID)
  private String webPropertyId;

  public RemarketingAudience() {
  }

  public RemarketingAudience(
     OffsetDateTime created, 
     String description, 
     String internalWebPropertyId, 
     OffsetDateTime updated
  ) {
    this();
    this.created = created;
    this.description = description;
    this.internalWebPropertyId = internalWebPropertyId;
    this.updated = updated;
  }

  public RemarketingAudience accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID to which this remarketing audience belongs.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public RemarketingAudience audienceDefinition(RemarketingAudienceAudienceDefinition audienceDefinition) {
    this.audienceDefinition = audienceDefinition;
    return this;
  }

  /**
   * Get audienceDefinition
   * @return audienceDefinition
   */
  @javax.annotation.Nullable
  public RemarketingAudienceAudienceDefinition getAudienceDefinition() {
    return audienceDefinition;
  }

  public void setAudienceDefinition(RemarketingAudienceAudienceDefinition audienceDefinition) {
    this.audienceDefinition = audienceDefinition;
  }


  public RemarketingAudience audienceType(String audienceType) {
    this.audienceType = audienceType;
    return this;
  }

  /**
   * The type of audience, either SIMPLE or STATE_BASED.
   * @return audienceType
   */
  @javax.annotation.Nullable
  public String getAudienceType() {
    return audienceType;
  }

  public void setAudienceType(String audienceType) {
    this.audienceType = audienceType;
  }


  /**
   * Time this remarketing audience was created.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  /**
   * The description of this remarketing audience.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  public RemarketingAudience id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Remarketing Audience ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  /**
   * Internal ID for the web property to which this remarketing audience belongs.
   * @return internalWebPropertyId
   */
  @javax.annotation.Nullable
  public String getInternalWebPropertyId() {
    return internalWebPropertyId;
  }



  public RemarketingAudience kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Collection type.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public RemarketingAudience linkedAdAccounts(List<LinkedForeignAccount> linkedAdAccounts) {
    this.linkedAdAccounts = linkedAdAccounts;
    return this;
  }

  public RemarketingAudience addLinkedAdAccountsItem(LinkedForeignAccount linkedAdAccountsItem) {
    if (this.linkedAdAccounts == null) {
      this.linkedAdAccounts = new ArrayList<>();
    }
    this.linkedAdAccounts.add(linkedAdAccountsItem);
    return this;
  }

  /**
   * The linked ad accounts associated with this remarketing audience. A remarketing audience can have only one linkedAdAccount currently.
   * @return linkedAdAccounts
   */
  @javax.annotation.Nullable
  public List<LinkedForeignAccount> getLinkedAdAccounts() {
    return linkedAdAccounts;
  }

  public void setLinkedAdAccounts(List<LinkedForeignAccount> linkedAdAccounts) {
    this.linkedAdAccounts = linkedAdAccounts;
  }


  public RemarketingAudience linkedViews(List<String> linkedViews) {
    this.linkedViews = linkedViews;
    return this;
  }

  public RemarketingAudience addLinkedViewsItem(String linkedViewsItem) {
    if (this.linkedViews == null) {
      this.linkedViews = new ArrayList<>();
    }
    this.linkedViews.add(linkedViewsItem);
    return this;
  }

  /**
   * The views (profiles) that this remarketing audience is linked to.
   * @return linkedViews
   */
  @javax.annotation.Nullable
  public List<String> getLinkedViews() {
    return linkedViews;
  }

  public void setLinkedViews(List<String> linkedViews) {
    this.linkedViews = linkedViews;
  }


  public RemarketingAudience name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of this remarketing audience.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RemarketingAudience stateBasedAudienceDefinition(RemarketingAudienceStateBasedAudienceDefinition stateBasedAudienceDefinition) {
    this.stateBasedAudienceDefinition = stateBasedAudienceDefinition;
    return this;
  }

  /**
   * Get stateBasedAudienceDefinition
   * @return stateBasedAudienceDefinition
   */
  @javax.annotation.Nullable
  public RemarketingAudienceStateBasedAudienceDefinition getStateBasedAudienceDefinition() {
    return stateBasedAudienceDefinition;
  }

  public void setStateBasedAudienceDefinition(RemarketingAudienceStateBasedAudienceDefinition stateBasedAudienceDefinition) {
    this.stateBasedAudienceDefinition = stateBasedAudienceDefinition;
  }


  /**
   * Time this remarketing audience was last modified.
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }



  public RemarketingAudience webPropertyId(String webPropertyId) {
    this.webPropertyId = webPropertyId;
    return this;
  }

  /**
   * Web property ID of the form UA-XXXXX-YY to which this remarketing audience belongs.
   * @return webPropertyId
   */
  @javax.annotation.Nullable
  public String getWebPropertyId() {
    return webPropertyId;
  }

  public void setWebPropertyId(String webPropertyId) {
    this.webPropertyId = webPropertyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemarketingAudience remarketingAudience = (RemarketingAudience) o;
    return Objects.equals(this.accountId, remarketingAudience.accountId) &&
        Objects.equals(this.audienceDefinition, remarketingAudience.audienceDefinition) &&
        Objects.equals(this.audienceType, remarketingAudience.audienceType) &&
        Objects.equals(this.created, remarketingAudience.created) &&
        Objects.equals(this.description, remarketingAudience.description) &&
        Objects.equals(this.id, remarketingAudience.id) &&
        Objects.equals(this.internalWebPropertyId, remarketingAudience.internalWebPropertyId) &&
        Objects.equals(this.kind, remarketingAudience.kind) &&
        Objects.equals(this.linkedAdAccounts, remarketingAudience.linkedAdAccounts) &&
        Objects.equals(this.linkedViews, remarketingAudience.linkedViews) &&
        Objects.equals(this.name, remarketingAudience.name) &&
        Objects.equals(this.stateBasedAudienceDefinition, remarketingAudience.stateBasedAudienceDefinition) &&
        Objects.equals(this.updated, remarketingAudience.updated) &&
        Objects.equals(this.webPropertyId, remarketingAudience.webPropertyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, audienceDefinition, audienceType, created, description, id, internalWebPropertyId, kind, linkedAdAccounts, linkedViews, name, stateBasedAudienceDefinition, updated, webPropertyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemarketingAudience {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    audienceDefinition: ").append(toIndentedString(audienceDefinition)).append("\n");
    sb.append("    audienceType: ").append(toIndentedString(audienceType)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    internalWebPropertyId: ").append(toIndentedString(internalWebPropertyId)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    linkedAdAccounts: ").append(toIndentedString(linkedAdAccounts)).append("\n");
    sb.append("    linkedViews: ").append(toIndentedString(linkedViews)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    stateBasedAudienceDefinition: ").append(toIndentedString(stateBasedAudienceDefinition)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    webPropertyId: ").append(toIndentedString(webPropertyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("audienceDefinition");
    openapiFields.add("audienceType");
    openapiFields.add("created");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("internalWebPropertyId");
    openapiFields.add("kind");
    openapiFields.add("linkedAdAccounts");
    openapiFields.add("linkedViews");
    openapiFields.add("name");
    openapiFields.add("stateBasedAudienceDefinition");
    openapiFields.add("updated");
    openapiFields.add("webPropertyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemarketingAudience
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemarketingAudience.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemarketingAudience is not found in the empty JSON string", RemarketingAudience.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemarketingAudience.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemarketingAudience` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      // validate the optional field `audienceDefinition`
      if (jsonObj.get("audienceDefinition") != null && !jsonObj.get("audienceDefinition").isJsonNull()) {
        RemarketingAudienceAudienceDefinition.validateJsonElement(jsonObj.get("audienceDefinition"));
      }
      if ((jsonObj.get("audienceType") != null && !jsonObj.get("audienceType").isJsonNull()) && !jsonObj.get("audienceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audienceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audienceType").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("internalWebPropertyId") != null && !jsonObj.get("internalWebPropertyId").isJsonNull()) && !jsonObj.get("internalWebPropertyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalWebPropertyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalWebPropertyId").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if (jsonObj.get("linkedAdAccounts") != null && !jsonObj.get("linkedAdAccounts").isJsonNull()) {
        JsonArray jsonArraylinkedAdAccounts = jsonObj.getAsJsonArray("linkedAdAccounts");
        if (jsonArraylinkedAdAccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("linkedAdAccounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `linkedAdAccounts` to be an array in the JSON string but got `%s`", jsonObj.get("linkedAdAccounts").toString()));
          }

          // validate the optional field `linkedAdAccounts` (array)
          for (int i = 0; i < jsonArraylinkedAdAccounts.size(); i++) {
            LinkedForeignAccount.validateJsonElement(jsonArraylinkedAdAccounts.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("linkedViews") != null && !jsonObj.get("linkedViews").isJsonNull() && !jsonObj.get("linkedViews").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedViews` to be an array in the JSON string but got `%s`", jsonObj.get("linkedViews").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `stateBasedAudienceDefinition`
      if (jsonObj.get("stateBasedAudienceDefinition") != null && !jsonObj.get("stateBasedAudienceDefinition").isJsonNull()) {
        RemarketingAudienceStateBasedAudienceDefinition.validateJsonElement(jsonObj.get("stateBasedAudienceDefinition"));
      }
      if ((jsonObj.get("webPropertyId") != null && !jsonObj.get("webPropertyId").isJsonNull()) && !jsonObj.get("webPropertyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webPropertyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webPropertyId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemarketingAudience.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemarketingAudience' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemarketingAudience> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemarketingAudience.class));

       return (TypeAdapter<T>) new TypeAdapter<RemarketingAudience>() {
           @Override
           public void write(JsonWriter out, RemarketingAudience value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemarketingAudience read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemarketingAudience given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemarketingAudience
   * @throws IOException if the JSON string is invalid with respect to RemarketingAudience
   */
  public static RemarketingAudience fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemarketingAudience.class);
  }

  /**
   * Convert an instance of RemarketingAudience to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

