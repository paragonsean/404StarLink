/*
 * Google Analytics API
 * Views and manages your Google Analytics data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.GoalEventDetails;
import org.openapitools.client.model.GoalParentLink;
import org.openapitools.client.model.GoalUrlDestinationDetails;
import org.openapitools.client.model.GoalVisitNumPagesDetails;
import org.openapitools.client.model.GoalVisitTimeOnSiteDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JSON template for Analytics goal resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:11:22.913673-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Goal {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_EVENT_DETAILS = "eventDetails";
  @SerializedName(SERIALIZED_NAME_EVENT_DETAILS)
  private GoalEventDetails eventDetails;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTERNAL_WEB_PROPERTY_ID = "internalWebPropertyId";
  @SerializedName(SERIALIZED_NAME_INTERNAL_WEB_PROPERTY_ID)
  private String internalWebPropertyId;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "analytics#goal";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_LINK = "parentLink";
  @SerializedName(SERIALIZED_NAME_PARENT_LINK)
  private GoalParentLink parentLink;

  public static final String SERIALIZED_NAME_PROFILE_ID = "profileId";
  @SerializedName(SERIALIZED_NAME_PROFILE_ID)
  private String profileId;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_URL_DESTINATION_DETAILS = "urlDestinationDetails";
  @SerializedName(SERIALIZED_NAME_URL_DESTINATION_DETAILS)
  private GoalUrlDestinationDetails urlDestinationDetails;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Float value;

  public static final String SERIALIZED_NAME_VISIT_NUM_PAGES_DETAILS = "visitNumPagesDetails";
  @SerializedName(SERIALIZED_NAME_VISIT_NUM_PAGES_DETAILS)
  private GoalVisitNumPagesDetails visitNumPagesDetails;

  public static final String SERIALIZED_NAME_VISIT_TIME_ON_SITE_DETAILS = "visitTimeOnSiteDetails";
  @SerializedName(SERIALIZED_NAME_VISIT_TIME_ON_SITE_DETAILS)
  private GoalVisitTimeOnSiteDetails visitTimeOnSiteDetails;

  public static final String SERIALIZED_NAME_WEB_PROPERTY_ID = "webPropertyId";
  @SerializedName(SERIALIZED_NAME_WEB_PROPERTY_ID)
  private String webPropertyId;

  public Goal() {
  }

  public Goal accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID to which this goal belongs.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Goal active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Determines whether this goal is active.
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public Goal created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Time this goal was created.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public Goal eventDetails(GoalEventDetails eventDetails) {
    this.eventDetails = eventDetails;
    return this;
  }

  /**
   * Get eventDetails
   * @return eventDetails
   */
  @javax.annotation.Nullable
  public GoalEventDetails getEventDetails() {
    return eventDetails;
  }

  public void setEventDetails(GoalEventDetails eventDetails) {
    this.eventDetails = eventDetails;
  }


  public Goal id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Goal ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Goal internalWebPropertyId(String internalWebPropertyId) {
    this.internalWebPropertyId = internalWebPropertyId;
    return this;
  }

  /**
   * Internal ID for the web property to which this goal belongs.
   * @return internalWebPropertyId
   */
  @javax.annotation.Nullable
  public String getInternalWebPropertyId() {
    return internalWebPropertyId;
  }

  public void setInternalWebPropertyId(String internalWebPropertyId) {
    this.internalWebPropertyId = internalWebPropertyId;
  }


  public Goal kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Resource type for an Analytics goal.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Goal name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Goal name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Goal parentLink(GoalParentLink parentLink) {
    this.parentLink = parentLink;
    return this;
  }

  /**
   * Get parentLink
   * @return parentLink
   */
  @javax.annotation.Nullable
  public GoalParentLink getParentLink() {
    return parentLink;
  }

  public void setParentLink(GoalParentLink parentLink) {
    this.parentLink = parentLink;
  }


  public Goal profileId(String profileId) {
    this.profileId = profileId;
    return this;
  }

  /**
   * View (Profile) ID to which this goal belongs.
   * @return profileId
   */
  @javax.annotation.Nullable
  public String getProfileId() {
    return profileId;
  }

  public void setProfileId(String profileId) {
    this.profileId = profileId;
  }


  public Goal selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * Link for this goal.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  public Goal type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Goal type. Possible values are URL_DESTINATION, VISIT_TIME_ON_SITE, VISIT_NUM_PAGES, AND EVENT.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Goal updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Time this goal was last modified.
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }


  public Goal urlDestinationDetails(GoalUrlDestinationDetails urlDestinationDetails) {
    this.urlDestinationDetails = urlDestinationDetails;
    return this;
  }

  /**
   * Get urlDestinationDetails
   * @return urlDestinationDetails
   */
  @javax.annotation.Nullable
  public GoalUrlDestinationDetails getUrlDestinationDetails() {
    return urlDestinationDetails;
  }

  public void setUrlDestinationDetails(GoalUrlDestinationDetails urlDestinationDetails) {
    this.urlDestinationDetails = urlDestinationDetails;
  }


  public Goal value(Float value) {
    this.value = value;
    return this;
  }

  /**
   * Goal value.
   * @return value
   */
  @javax.annotation.Nullable
  public Float getValue() {
    return value;
  }

  public void setValue(Float value) {
    this.value = value;
  }


  public Goal visitNumPagesDetails(GoalVisitNumPagesDetails visitNumPagesDetails) {
    this.visitNumPagesDetails = visitNumPagesDetails;
    return this;
  }

  /**
   * Get visitNumPagesDetails
   * @return visitNumPagesDetails
   */
  @javax.annotation.Nullable
  public GoalVisitNumPagesDetails getVisitNumPagesDetails() {
    return visitNumPagesDetails;
  }

  public void setVisitNumPagesDetails(GoalVisitNumPagesDetails visitNumPagesDetails) {
    this.visitNumPagesDetails = visitNumPagesDetails;
  }


  public Goal visitTimeOnSiteDetails(GoalVisitTimeOnSiteDetails visitTimeOnSiteDetails) {
    this.visitTimeOnSiteDetails = visitTimeOnSiteDetails;
    return this;
  }

  /**
   * Get visitTimeOnSiteDetails
   * @return visitTimeOnSiteDetails
   */
  @javax.annotation.Nullable
  public GoalVisitTimeOnSiteDetails getVisitTimeOnSiteDetails() {
    return visitTimeOnSiteDetails;
  }

  public void setVisitTimeOnSiteDetails(GoalVisitTimeOnSiteDetails visitTimeOnSiteDetails) {
    this.visitTimeOnSiteDetails = visitTimeOnSiteDetails;
  }


  public Goal webPropertyId(String webPropertyId) {
    this.webPropertyId = webPropertyId;
    return this;
  }

  /**
   * Web property ID to which this goal belongs. The web property ID is of the form UA-XXXXX-YY.
   * @return webPropertyId
   */
  @javax.annotation.Nullable
  public String getWebPropertyId() {
    return webPropertyId;
  }

  public void setWebPropertyId(String webPropertyId) {
    this.webPropertyId = webPropertyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Goal goal = (Goal) o;
    return Objects.equals(this.accountId, goal.accountId) &&
        Objects.equals(this.active, goal.active) &&
        Objects.equals(this.created, goal.created) &&
        Objects.equals(this.eventDetails, goal.eventDetails) &&
        Objects.equals(this.id, goal.id) &&
        Objects.equals(this.internalWebPropertyId, goal.internalWebPropertyId) &&
        Objects.equals(this.kind, goal.kind) &&
        Objects.equals(this.name, goal.name) &&
        Objects.equals(this.parentLink, goal.parentLink) &&
        Objects.equals(this.profileId, goal.profileId) &&
        Objects.equals(this.selfLink, goal.selfLink) &&
        Objects.equals(this.type, goal.type) &&
        Objects.equals(this.updated, goal.updated) &&
        Objects.equals(this.urlDestinationDetails, goal.urlDestinationDetails) &&
        Objects.equals(this.value, goal.value) &&
        Objects.equals(this.visitNumPagesDetails, goal.visitNumPagesDetails) &&
        Objects.equals(this.visitTimeOnSiteDetails, goal.visitTimeOnSiteDetails) &&
        Objects.equals(this.webPropertyId, goal.webPropertyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, active, created, eventDetails, id, internalWebPropertyId, kind, name, parentLink, profileId, selfLink, type, updated, urlDestinationDetails, value, visitNumPagesDetails, visitTimeOnSiteDetails, webPropertyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Goal {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    eventDetails: ").append(toIndentedString(eventDetails)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    internalWebPropertyId: ").append(toIndentedString(internalWebPropertyId)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentLink: ").append(toIndentedString(parentLink)).append("\n");
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    urlDestinationDetails: ").append(toIndentedString(urlDestinationDetails)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    visitNumPagesDetails: ").append(toIndentedString(visitNumPagesDetails)).append("\n");
    sb.append("    visitTimeOnSiteDetails: ").append(toIndentedString(visitTimeOnSiteDetails)).append("\n");
    sb.append("    webPropertyId: ").append(toIndentedString(webPropertyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("active");
    openapiFields.add("created");
    openapiFields.add("eventDetails");
    openapiFields.add("id");
    openapiFields.add("internalWebPropertyId");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("parentLink");
    openapiFields.add("profileId");
    openapiFields.add("selfLink");
    openapiFields.add("type");
    openapiFields.add("updated");
    openapiFields.add("urlDestinationDetails");
    openapiFields.add("value");
    openapiFields.add("visitNumPagesDetails");
    openapiFields.add("visitTimeOnSiteDetails");
    openapiFields.add("webPropertyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Goal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Goal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Goal is not found in the empty JSON string", Goal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Goal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Goal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      // validate the optional field `eventDetails`
      if (jsonObj.get("eventDetails") != null && !jsonObj.get("eventDetails").isJsonNull()) {
        GoalEventDetails.validateJsonElement(jsonObj.get("eventDetails"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("internalWebPropertyId") != null && !jsonObj.get("internalWebPropertyId").isJsonNull()) && !jsonObj.get("internalWebPropertyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalWebPropertyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalWebPropertyId").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `parentLink`
      if (jsonObj.get("parentLink") != null && !jsonObj.get("parentLink").isJsonNull()) {
        GoalParentLink.validateJsonElement(jsonObj.get("parentLink"));
      }
      if ((jsonObj.get("profileId") != null && !jsonObj.get("profileId").isJsonNull()) && !jsonObj.get("profileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileId").toString()));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `urlDestinationDetails`
      if (jsonObj.get("urlDestinationDetails") != null && !jsonObj.get("urlDestinationDetails").isJsonNull()) {
        GoalUrlDestinationDetails.validateJsonElement(jsonObj.get("urlDestinationDetails"));
      }
      // validate the optional field `visitNumPagesDetails`
      if (jsonObj.get("visitNumPagesDetails") != null && !jsonObj.get("visitNumPagesDetails").isJsonNull()) {
        GoalVisitNumPagesDetails.validateJsonElement(jsonObj.get("visitNumPagesDetails"));
      }
      // validate the optional field `visitTimeOnSiteDetails`
      if (jsonObj.get("visitTimeOnSiteDetails") != null && !jsonObj.get("visitTimeOnSiteDetails").isJsonNull()) {
        GoalVisitTimeOnSiteDetails.validateJsonElement(jsonObj.get("visitTimeOnSiteDetails"));
      }
      if ((jsonObj.get("webPropertyId") != null && !jsonObj.get("webPropertyId").isJsonNull()) && !jsonObj.get("webPropertyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webPropertyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webPropertyId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Goal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Goal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Goal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Goal.class));

       return (TypeAdapter<T>) new TypeAdapter<Goal>() {
           @Override
           public void write(JsonWriter out, Goal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Goal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Goal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Goal
   * @throws IOException if the JSON string is invalid with respect to Goal
   */
  public static Goal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Goal.class);
  }

  /**
   * Convert an instance of Goal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

