/*
 * Google Analytics API
 * Views and manages your Google Analytics data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FilterRef;
import org.openapitools.client.model.ProfileRef;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JSON template for an Analytics profile filter link.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:11:22.913673-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProfileFilterLink {
  public static final String SERIALIZED_NAME_FILTER_REF = "filterRef";
  @SerializedName(SERIALIZED_NAME_FILTER_REF)
  private FilterRef filterRef;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "analytics#profileFilterLink";

  public static final String SERIALIZED_NAME_PROFILE_REF = "profileRef";
  @SerializedName(SERIALIZED_NAME_PROFILE_REF)
  private ProfileRef profileRef;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public ProfileFilterLink() {
  }

  public ProfileFilterLink(
     String kind, 
     String selfLink
  ) {
    this();
    this.kind = kind;
    this.selfLink = selfLink;
  }

  public ProfileFilterLink filterRef(FilterRef filterRef) {
    this.filterRef = filterRef;
    return this;
  }

  /**
   * Get filterRef
   * @return filterRef
   */
  @javax.annotation.Nullable
  public FilterRef getFilterRef() {
    return filterRef;
  }

  public void setFilterRef(FilterRef filterRef) {
    this.filterRef = filterRef;
  }


  public ProfileFilterLink id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Profile filter link ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  /**
   * Resource type for Analytics filter.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }



  public ProfileFilterLink profileRef(ProfileRef profileRef) {
    this.profileRef = profileRef;
    return this;
  }

  /**
   * Get profileRef
   * @return profileRef
   */
  @javax.annotation.Nullable
  public ProfileRef getProfileRef() {
    return profileRef;
  }

  public void setProfileRef(ProfileRef profileRef) {
    this.profileRef = profileRef;
  }


  public ProfileFilterLink rank(Integer rank) {
    this.rank = rank;
    return this;
  }

  /**
   * The rank of this profile filter link relative to the other filters linked to the same profile. For readonly (i.e., list and get) operations, the rank always starts at 1. For write (i.e., create, update, or delete) operations, you may specify a value between 0 and 255 inclusively, [0, 255]. In order to insert a link at the end of the list, either don&#39;t specify a rank or set a rank to a number greater than the largest rank in the list. In order to insert a link to the beginning of the list specify a rank that is less than or equal to 1. The new link will move all existing filters with the same or lower rank down the list. After the link is inserted/updated/deleted all profile filter links will be renumbered starting at 1.
   * @return rank
   */
  @javax.annotation.Nullable
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }


  /**
   * Link for this profile filter link.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProfileFilterLink profileFilterLink = (ProfileFilterLink) o;
    return Objects.equals(this.filterRef, profileFilterLink.filterRef) &&
        Objects.equals(this.id, profileFilterLink.id) &&
        Objects.equals(this.kind, profileFilterLink.kind) &&
        Objects.equals(this.profileRef, profileFilterLink.profileRef) &&
        Objects.equals(this.rank, profileFilterLink.rank) &&
        Objects.equals(this.selfLink, profileFilterLink.selfLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterRef, id, kind, profileRef, rank, selfLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProfileFilterLink {\n");
    sb.append("    filterRef: ").append(toIndentedString(filterRef)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    profileRef: ").append(toIndentedString(profileRef)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filterRef");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("profileRef");
    openapiFields.add("rank");
    openapiFields.add("selfLink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProfileFilterLink
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProfileFilterLink.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProfileFilterLink is not found in the empty JSON string", ProfileFilterLink.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProfileFilterLink.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProfileFilterLink` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `filterRef`
      if (jsonObj.get("filterRef") != null && !jsonObj.get("filterRef").isJsonNull()) {
        FilterRef.validateJsonElement(jsonObj.get("filterRef"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `profileRef`
      if (jsonObj.get("profileRef") != null && !jsonObj.get("profileRef").isJsonNull()) {
        ProfileRef.validateJsonElement(jsonObj.get("profileRef"));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProfileFilterLink.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProfileFilterLink' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProfileFilterLink> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProfileFilterLink.class));

       return (TypeAdapter<T>) new TypeAdapter<ProfileFilterLink>() {
           @Override
           public void write(JsonWriter out, ProfileFilterLink value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProfileFilterLink read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProfileFilterLink given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProfileFilterLink
   * @throws IOException if the JSON string is invalid with respect to ProfileFilterLink
   */
  public static ProfileFilterLink fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProfileFilterLink.class);
  }

  /**
   * Convert an instance of ProfileFilterLink to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

