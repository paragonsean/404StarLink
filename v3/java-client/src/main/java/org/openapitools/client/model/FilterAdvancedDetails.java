/*
 * Google Analytics API
 * Views and manages your Google Analytics data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details for the filter of the type ADVANCED.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:01:26.696972-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FilterAdvancedDetails {
  public static final String SERIALIZED_NAME_CASE_SENSITIVE = "caseSensitive";
  @SerializedName(SERIALIZED_NAME_CASE_SENSITIVE)
  private Boolean caseSensitive;

  public static final String SERIALIZED_NAME_EXTRACT_A = "extractA";
  @SerializedName(SERIALIZED_NAME_EXTRACT_A)
  private String extractA;

  public static final String SERIALIZED_NAME_EXTRACT_B = "extractB";
  @SerializedName(SERIALIZED_NAME_EXTRACT_B)
  private String extractB;

  public static final String SERIALIZED_NAME_FIELD_A = "fieldA";
  @SerializedName(SERIALIZED_NAME_FIELD_A)
  private String fieldA;

  public static final String SERIALIZED_NAME_FIELD_A_INDEX = "fieldAIndex";
  @SerializedName(SERIALIZED_NAME_FIELD_A_INDEX)
  private Integer fieldAIndex;

  public static final String SERIALIZED_NAME_FIELD_A_REQUIRED = "fieldARequired";
  @SerializedName(SERIALIZED_NAME_FIELD_A_REQUIRED)
  private Boolean fieldARequired;

  public static final String SERIALIZED_NAME_FIELD_B = "fieldB";
  @SerializedName(SERIALIZED_NAME_FIELD_B)
  private String fieldB;

  public static final String SERIALIZED_NAME_FIELD_B_INDEX = "fieldBIndex";
  @SerializedName(SERIALIZED_NAME_FIELD_B_INDEX)
  private Integer fieldBIndex;

  public static final String SERIALIZED_NAME_FIELD_B_REQUIRED = "fieldBRequired";
  @SerializedName(SERIALIZED_NAME_FIELD_B_REQUIRED)
  private Boolean fieldBRequired;

  public static final String SERIALIZED_NAME_OUTPUT_CONSTRUCTOR = "outputConstructor";
  @SerializedName(SERIALIZED_NAME_OUTPUT_CONSTRUCTOR)
  private String outputConstructor;

  public static final String SERIALIZED_NAME_OUTPUT_TO_FIELD = "outputToField";
  @SerializedName(SERIALIZED_NAME_OUTPUT_TO_FIELD)
  private String outputToField;

  public static final String SERIALIZED_NAME_OUTPUT_TO_FIELD_INDEX = "outputToFieldIndex";
  @SerializedName(SERIALIZED_NAME_OUTPUT_TO_FIELD_INDEX)
  private Integer outputToFieldIndex;

  public static final String SERIALIZED_NAME_OVERRIDE_OUTPUT_FIELD = "overrideOutputField";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_OUTPUT_FIELD)
  private Boolean overrideOutputField;

  public FilterAdvancedDetails() {
  }

  public FilterAdvancedDetails caseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
    return this;
  }

  /**
   * Indicates if the filter expressions are case sensitive.
   * @return caseSensitive
   */
  @javax.annotation.Nullable
  public Boolean getCaseSensitive() {
    return caseSensitive;
  }

  public void setCaseSensitive(Boolean caseSensitive) {
    this.caseSensitive = caseSensitive;
  }


  public FilterAdvancedDetails extractA(String extractA) {
    this.extractA = extractA;
    return this;
  }

  /**
   * Expression to extract from field A.
   * @return extractA
   */
  @javax.annotation.Nullable
  public String getExtractA() {
    return extractA;
  }

  public void setExtractA(String extractA) {
    this.extractA = extractA;
  }


  public FilterAdvancedDetails extractB(String extractB) {
    this.extractB = extractB;
    return this;
  }

  /**
   * Expression to extract from field B.
   * @return extractB
   */
  @javax.annotation.Nullable
  public String getExtractB() {
    return extractB;
  }

  public void setExtractB(String extractB) {
    this.extractB = extractB;
  }


  public FilterAdvancedDetails fieldA(String fieldA) {
    this.fieldA = fieldA;
    return this;
  }

  /**
   * Field A.
   * @return fieldA
   */
  @javax.annotation.Nullable
  public String getFieldA() {
    return fieldA;
  }

  public void setFieldA(String fieldA) {
    this.fieldA = fieldA;
  }


  public FilterAdvancedDetails fieldAIndex(Integer fieldAIndex) {
    this.fieldAIndex = fieldAIndex;
    return this;
  }

  /**
   * The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION.
   * @return fieldAIndex
   */
  @javax.annotation.Nullable
  public Integer getFieldAIndex() {
    return fieldAIndex;
  }

  public void setFieldAIndex(Integer fieldAIndex) {
    this.fieldAIndex = fieldAIndex;
  }


  public FilterAdvancedDetails fieldARequired(Boolean fieldARequired) {
    this.fieldARequired = fieldARequired;
    return this;
  }

  /**
   * Indicates if field A is required to match.
   * @return fieldARequired
   */
  @javax.annotation.Nullable
  public Boolean getFieldARequired() {
    return fieldARequired;
  }

  public void setFieldARequired(Boolean fieldARequired) {
    this.fieldARequired = fieldARequired;
  }


  public FilterAdvancedDetails fieldB(String fieldB) {
    this.fieldB = fieldB;
    return this;
  }

  /**
   * Field B.
   * @return fieldB
   */
  @javax.annotation.Nullable
  public String getFieldB() {
    return fieldB;
  }

  public void setFieldB(String fieldB) {
    this.fieldB = fieldB;
  }


  public FilterAdvancedDetails fieldBIndex(Integer fieldBIndex) {
    this.fieldBIndex = fieldBIndex;
    return this;
  }

  /**
   * The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION.
   * @return fieldBIndex
   */
  @javax.annotation.Nullable
  public Integer getFieldBIndex() {
    return fieldBIndex;
  }

  public void setFieldBIndex(Integer fieldBIndex) {
    this.fieldBIndex = fieldBIndex;
  }


  public FilterAdvancedDetails fieldBRequired(Boolean fieldBRequired) {
    this.fieldBRequired = fieldBRequired;
    return this;
  }

  /**
   * Indicates if field B is required to match.
   * @return fieldBRequired
   */
  @javax.annotation.Nullable
  public Boolean getFieldBRequired() {
    return fieldBRequired;
  }

  public void setFieldBRequired(Boolean fieldBRequired) {
    this.fieldBRequired = fieldBRequired;
  }


  public FilterAdvancedDetails outputConstructor(String outputConstructor) {
    this.outputConstructor = outputConstructor;
    return this;
  }

  /**
   * Expression used to construct the output value.
   * @return outputConstructor
   */
  @javax.annotation.Nullable
  public String getOutputConstructor() {
    return outputConstructor;
  }

  public void setOutputConstructor(String outputConstructor) {
    this.outputConstructor = outputConstructor;
  }


  public FilterAdvancedDetails outputToField(String outputToField) {
    this.outputToField = outputToField;
    return this;
  }

  /**
   * Output field.
   * @return outputToField
   */
  @javax.annotation.Nullable
  public String getOutputToField() {
    return outputToField;
  }

  public void setOutputToField(String outputToField) {
    this.outputToField = outputToField;
  }


  public FilterAdvancedDetails outputToFieldIndex(Integer outputToFieldIndex) {
    this.outputToFieldIndex = outputToFieldIndex;
    return this;
  }

  /**
   * The Index of the custom dimension. Required if field is a CUSTOM_DIMENSION.
   * @return outputToFieldIndex
   */
  @javax.annotation.Nullable
  public Integer getOutputToFieldIndex() {
    return outputToFieldIndex;
  }

  public void setOutputToFieldIndex(Integer outputToFieldIndex) {
    this.outputToFieldIndex = outputToFieldIndex;
  }


  public FilterAdvancedDetails overrideOutputField(Boolean overrideOutputField) {
    this.overrideOutputField = overrideOutputField;
    return this;
  }

  /**
   * Indicates if the existing value of the output field, if any, should be overridden by the output expression.
   * @return overrideOutputField
   */
  @javax.annotation.Nullable
  public Boolean getOverrideOutputField() {
    return overrideOutputField;
  }

  public void setOverrideOutputField(Boolean overrideOutputField) {
    this.overrideOutputField = overrideOutputField;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterAdvancedDetails filterAdvancedDetails = (FilterAdvancedDetails) o;
    return Objects.equals(this.caseSensitive, filterAdvancedDetails.caseSensitive) &&
        Objects.equals(this.extractA, filterAdvancedDetails.extractA) &&
        Objects.equals(this.extractB, filterAdvancedDetails.extractB) &&
        Objects.equals(this.fieldA, filterAdvancedDetails.fieldA) &&
        Objects.equals(this.fieldAIndex, filterAdvancedDetails.fieldAIndex) &&
        Objects.equals(this.fieldARequired, filterAdvancedDetails.fieldARequired) &&
        Objects.equals(this.fieldB, filterAdvancedDetails.fieldB) &&
        Objects.equals(this.fieldBIndex, filterAdvancedDetails.fieldBIndex) &&
        Objects.equals(this.fieldBRequired, filterAdvancedDetails.fieldBRequired) &&
        Objects.equals(this.outputConstructor, filterAdvancedDetails.outputConstructor) &&
        Objects.equals(this.outputToField, filterAdvancedDetails.outputToField) &&
        Objects.equals(this.outputToFieldIndex, filterAdvancedDetails.outputToFieldIndex) &&
        Objects.equals(this.overrideOutputField, filterAdvancedDetails.overrideOutputField);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caseSensitive, extractA, extractB, fieldA, fieldAIndex, fieldARequired, fieldB, fieldBIndex, fieldBRequired, outputConstructor, outputToField, outputToFieldIndex, overrideOutputField);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterAdvancedDetails {\n");
    sb.append("    caseSensitive: ").append(toIndentedString(caseSensitive)).append("\n");
    sb.append("    extractA: ").append(toIndentedString(extractA)).append("\n");
    sb.append("    extractB: ").append(toIndentedString(extractB)).append("\n");
    sb.append("    fieldA: ").append(toIndentedString(fieldA)).append("\n");
    sb.append("    fieldAIndex: ").append(toIndentedString(fieldAIndex)).append("\n");
    sb.append("    fieldARequired: ").append(toIndentedString(fieldARequired)).append("\n");
    sb.append("    fieldB: ").append(toIndentedString(fieldB)).append("\n");
    sb.append("    fieldBIndex: ").append(toIndentedString(fieldBIndex)).append("\n");
    sb.append("    fieldBRequired: ").append(toIndentedString(fieldBRequired)).append("\n");
    sb.append("    outputConstructor: ").append(toIndentedString(outputConstructor)).append("\n");
    sb.append("    outputToField: ").append(toIndentedString(outputToField)).append("\n");
    sb.append("    outputToFieldIndex: ").append(toIndentedString(outputToFieldIndex)).append("\n");
    sb.append("    overrideOutputField: ").append(toIndentedString(overrideOutputField)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caseSensitive");
    openapiFields.add("extractA");
    openapiFields.add("extractB");
    openapiFields.add("fieldA");
    openapiFields.add("fieldAIndex");
    openapiFields.add("fieldARequired");
    openapiFields.add("fieldB");
    openapiFields.add("fieldBIndex");
    openapiFields.add("fieldBRequired");
    openapiFields.add("outputConstructor");
    openapiFields.add("outputToField");
    openapiFields.add("outputToFieldIndex");
    openapiFields.add("overrideOutputField");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FilterAdvancedDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FilterAdvancedDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FilterAdvancedDetails is not found in the empty JSON string", FilterAdvancedDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FilterAdvancedDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FilterAdvancedDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("extractA") != null && !jsonObj.get("extractA").isJsonNull()) && !jsonObj.get("extractA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extractA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extractA").toString()));
      }
      if ((jsonObj.get("extractB") != null && !jsonObj.get("extractB").isJsonNull()) && !jsonObj.get("extractB").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extractB` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extractB").toString()));
      }
      if ((jsonObj.get("fieldA") != null && !jsonObj.get("fieldA").isJsonNull()) && !jsonObj.get("fieldA").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldA` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldA").toString()));
      }
      if ((jsonObj.get("fieldB") != null && !jsonObj.get("fieldB").isJsonNull()) && !jsonObj.get("fieldB").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldB` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldB").toString()));
      }
      if ((jsonObj.get("outputConstructor") != null && !jsonObj.get("outputConstructor").isJsonNull()) && !jsonObj.get("outputConstructor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputConstructor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputConstructor").toString()));
      }
      if ((jsonObj.get("outputToField") != null && !jsonObj.get("outputToField").isJsonNull()) && !jsonObj.get("outputToField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputToField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputToField").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FilterAdvancedDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FilterAdvancedDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FilterAdvancedDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FilterAdvancedDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<FilterAdvancedDetails>() {
           @Override
           public void write(JsonWriter out, FilterAdvancedDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FilterAdvancedDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FilterAdvancedDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FilterAdvancedDetails
   * @throws IOException if the JSON string is invalid with respect to FilterAdvancedDetails
   */
  public static FilterAdvancedDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FilterAdvancedDetails.class);
  }

  /**
   * Convert an instance of FilterAdvancedDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

