/*
 * Google Analytics API
 * Views and manages your Google Analytics data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomDataSourceChildLink;
import org.openapitools.client.model.CustomDataSourceParentLink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JSON template for an Analytics custom data source.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:11:22.913673-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomDataSource {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CHILD_LINK = "childLink";
  @SerializedName(SERIALIZED_NAME_CHILD_LINK)
  private CustomDataSourceChildLink childLink;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMPORT_BEHAVIOR = "importBehavior";
  @SerializedName(SERIALIZED_NAME_IMPORT_BEHAVIOR)
  private String importBehavior;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "analytics#customDataSource";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_LINK = "parentLink";
  @SerializedName(SERIALIZED_NAME_PARENT_LINK)
  private CustomDataSourceParentLink parentLink;

  public static final String SERIALIZED_NAME_PROFILES_LINKED = "profilesLinked";
  @SerializedName(SERIALIZED_NAME_PROFILES_LINKED)
  private List<String> profilesLinked = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private List<String> schema = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_UPLOAD_TYPE = "uploadType";
  @SerializedName(SERIALIZED_NAME_UPLOAD_TYPE)
  private String uploadType;

  public static final String SERIALIZED_NAME_WEB_PROPERTY_ID = "webPropertyId";
  @SerializedName(SERIALIZED_NAME_WEB_PROPERTY_ID)
  private String webPropertyId;

  public CustomDataSource() {
  }

  public CustomDataSource accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID to which this custom data source belongs.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public CustomDataSource childLink(CustomDataSourceChildLink childLink) {
    this.childLink = childLink;
    return this;
  }

  /**
   * Get childLink
   * @return childLink
   */
  @javax.annotation.Nullable
  public CustomDataSourceChildLink getChildLink() {
    return childLink;
  }

  public void setChildLink(CustomDataSourceChildLink childLink) {
    this.childLink = childLink;
  }


  public CustomDataSource created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Time this custom data source was created.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public CustomDataSource description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of custom data source.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CustomDataSource id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Custom data source ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CustomDataSource importBehavior(String importBehavior) {
    this.importBehavior = importBehavior;
    return this;
  }

  /**
   * Get importBehavior
   * @return importBehavior
   */
  @javax.annotation.Nullable
  public String getImportBehavior() {
    return importBehavior;
  }

  public void setImportBehavior(String importBehavior) {
    this.importBehavior = importBehavior;
  }


  public CustomDataSource kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Resource type for Analytics custom data source.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public CustomDataSource name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this custom data source.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CustomDataSource parentLink(CustomDataSourceParentLink parentLink) {
    this.parentLink = parentLink;
    return this;
  }

  /**
   * Get parentLink
   * @return parentLink
   */
  @javax.annotation.Nullable
  public CustomDataSourceParentLink getParentLink() {
    return parentLink;
  }

  public void setParentLink(CustomDataSourceParentLink parentLink) {
    this.parentLink = parentLink;
  }


  public CustomDataSource profilesLinked(List<String> profilesLinked) {
    this.profilesLinked = profilesLinked;
    return this;
  }

  public CustomDataSource addProfilesLinkedItem(String profilesLinkedItem) {
    if (this.profilesLinked == null) {
      this.profilesLinked = new ArrayList<>();
    }
    this.profilesLinked.add(profilesLinkedItem);
    return this;
  }

  /**
   * IDs of views (profiles) linked to the custom data source.
   * @return profilesLinked
   */
  @javax.annotation.Nullable
  public List<String> getProfilesLinked() {
    return profilesLinked;
  }

  public void setProfilesLinked(List<String> profilesLinked) {
    this.profilesLinked = profilesLinked;
  }


  public CustomDataSource schema(List<String> schema) {
    this.schema = schema;
    return this;
  }

  public CustomDataSource addSchemaItem(String schemaItem) {
    if (this.schema == null) {
      this.schema = new ArrayList<>();
    }
    this.schema.add(schemaItem);
    return this;
  }

  /**
   * Collection of schema headers of the custom data source.
   * @return schema
   */
  @javax.annotation.Nullable
  public List<String> getSchema() {
    return schema;
  }

  public void setSchema(List<String> schema) {
    this.schema = schema;
  }


  public CustomDataSource selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * Link for this Analytics custom data source.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  public CustomDataSource type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the custom data source.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public CustomDataSource updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Time this custom data source was last modified.
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }


  public CustomDataSource uploadType(String uploadType) {
    this.uploadType = uploadType;
    return this;
  }

  /**
   * Upload type of the custom data source.
   * @return uploadType
   */
  @javax.annotation.Nullable
  public String getUploadType() {
    return uploadType;
  }

  public void setUploadType(String uploadType) {
    this.uploadType = uploadType;
  }


  public CustomDataSource webPropertyId(String webPropertyId) {
    this.webPropertyId = webPropertyId;
    return this;
  }

  /**
   * Web property ID of the form UA-XXXXX-YY to which this custom data source belongs.
   * @return webPropertyId
   */
  @javax.annotation.Nullable
  public String getWebPropertyId() {
    return webPropertyId;
  }

  public void setWebPropertyId(String webPropertyId) {
    this.webPropertyId = webPropertyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomDataSource customDataSource = (CustomDataSource) o;
    return Objects.equals(this.accountId, customDataSource.accountId) &&
        Objects.equals(this.childLink, customDataSource.childLink) &&
        Objects.equals(this.created, customDataSource.created) &&
        Objects.equals(this.description, customDataSource.description) &&
        Objects.equals(this.id, customDataSource.id) &&
        Objects.equals(this.importBehavior, customDataSource.importBehavior) &&
        Objects.equals(this.kind, customDataSource.kind) &&
        Objects.equals(this.name, customDataSource.name) &&
        Objects.equals(this.parentLink, customDataSource.parentLink) &&
        Objects.equals(this.profilesLinked, customDataSource.profilesLinked) &&
        Objects.equals(this.schema, customDataSource.schema) &&
        Objects.equals(this.selfLink, customDataSource.selfLink) &&
        Objects.equals(this.type, customDataSource.type) &&
        Objects.equals(this.updated, customDataSource.updated) &&
        Objects.equals(this.uploadType, customDataSource.uploadType) &&
        Objects.equals(this.webPropertyId, customDataSource.webPropertyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, childLink, created, description, id, importBehavior, kind, name, parentLink, profilesLinked, schema, selfLink, type, updated, uploadType, webPropertyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomDataSource {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    childLink: ").append(toIndentedString(childLink)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    importBehavior: ").append(toIndentedString(importBehavior)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentLink: ").append(toIndentedString(parentLink)).append("\n");
    sb.append("    profilesLinked: ").append(toIndentedString(profilesLinked)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    uploadType: ").append(toIndentedString(uploadType)).append("\n");
    sb.append("    webPropertyId: ").append(toIndentedString(webPropertyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("childLink");
    openapiFields.add("created");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("importBehavior");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("parentLink");
    openapiFields.add("profilesLinked");
    openapiFields.add("schema");
    openapiFields.add("selfLink");
    openapiFields.add("type");
    openapiFields.add("updated");
    openapiFields.add("uploadType");
    openapiFields.add("webPropertyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomDataSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomDataSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomDataSource is not found in the empty JSON string", CustomDataSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomDataSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomDataSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      // validate the optional field `childLink`
      if (jsonObj.get("childLink") != null && !jsonObj.get("childLink").isJsonNull()) {
        CustomDataSourceChildLink.validateJsonElement(jsonObj.get("childLink"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("importBehavior") != null && !jsonObj.get("importBehavior").isJsonNull()) && !jsonObj.get("importBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importBehavior").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `parentLink`
      if (jsonObj.get("parentLink") != null && !jsonObj.get("parentLink").isJsonNull()) {
        CustomDataSourceParentLink.validateJsonElement(jsonObj.get("parentLink"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("profilesLinked") != null && !jsonObj.get("profilesLinked").isJsonNull() && !jsonObj.get("profilesLinked").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `profilesLinked` to be an array in the JSON string but got `%s`", jsonObj.get("profilesLinked").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull() && !jsonObj.get("schema").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schema` to be an array in the JSON string but got `%s`", jsonObj.get("schema").toString()));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("uploadType") != null && !jsonObj.get("uploadType").isJsonNull()) && !jsonObj.get("uploadType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploadType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploadType").toString()));
      }
      if ((jsonObj.get("webPropertyId") != null && !jsonObj.get("webPropertyId").isJsonNull()) && !jsonObj.get("webPropertyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webPropertyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webPropertyId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomDataSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomDataSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomDataSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomDataSource.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomDataSource>() {
           @Override
           public void write(JsonWriter out, CustomDataSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomDataSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomDataSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomDataSource
   * @throws IOException if the JSON string is invalid with respect to CustomDataSource
   */
  public static CustomDataSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomDataSource.class);
  }

  /**
   * Convert an instance of CustomDataSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

