/*
 * Google Analytics API
 * Views and manages your Google Analytics data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountSummaries;
import org.openapitools.client.model.Accounts;
import org.openapitools.client.model.AnalyticsDataimportDeleteUploadDataRequest;
import org.openapitools.client.model.CustomDataSources;
import org.openapitools.client.model.CustomDimension;
import org.openapitools.client.model.CustomDimensions;
import org.openapitools.client.model.CustomMetric;
import org.openapitools.client.model.CustomMetrics;
import org.openapitools.client.model.EntityAdWordsLink;
import org.openapitools.client.model.EntityAdWordsLinks;
import org.openapitools.client.model.EntityUserLink;
import org.openapitools.client.model.EntityUserLinks;
import org.openapitools.client.model.Experiment;
import org.openapitools.client.model.Experiments;
import org.openapitools.client.model.Filter;
import org.openapitools.client.model.Filters;
import org.openapitools.client.model.Goal;
import org.openapitools.client.model.Goals;
import org.openapitools.client.model.HashClientIdRequest;
import org.openapitools.client.model.HashClientIdResponse;
import org.openapitools.client.model.Profile;
import org.openapitools.client.model.ProfileFilterLink;
import org.openapitools.client.model.ProfileFilterLinks;
import org.openapitools.client.model.Profiles;
import org.openapitools.client.model.RemarketingAudience;
import org.openapitools.client.model.RemarketingAudiences;
import org.openapitools.client.model.Segments;
import org.openapitools.client.model.UnsampledReport;
import org.openapitools.client.model.UnsampledReports;
import org.openapitools.client.model.Upload;
import org.openapitools.client.model.Uploads;
import org.openapitools.client.model.Webproperties;
import org.openapitools.client.model.Webproperty;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for analyticsManagementAccountSummariesList
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of account summaries to include in this response, where the largest acceptable value is 1000. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementAccountSummariesListCall(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accountSummaries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementAccountSummariesListValidateBeforeCall(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        return analyticsManagementAccountSummariesListCall(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);

    }

    /**
     * 
     * Lists account summaries (lightweight tree comprised of accounts/properties/profiles) to which the user has access.
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of account summaries to include in this response, where the largest acceptable value is 1000. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return AccountSummaries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public AccountSummaries analyticsManagementAccountSummariesList(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        ApiResponse<AccountSummaries> localVarResp = analyticsManagementAccountSummariesListWithHttpInfo(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists account summaries (lightweight tree comprised of accounts/properties/profiles) to which the user has access.
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of account summaries to include in this response, where the largest acceptable value is 1000. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;AccountSummaries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountSummaries> analyticsManagementAccountSummariesListWithHttpInfo(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementAccountSummariesListValidateBeforeCall(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, null);
        Type localVarReturnType = new TypeToken<AccountSummaries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists account summaries (lightweight tree comprised of accounts/properties/profiles) to which the user has access.
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of account summaries to include in this response, where the largest acceptable value is 1000. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementAccountSummariesListAsync(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback<AccountSummaries> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementAccountSummariesListValidateBeforeCall(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);
        Type localVarReturnType = new TypeToken<AccountSummaries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementAccountUserLinksDelete
     * @param accountId Account ID to delete the user link for. (required)
     * @param linkId Link ID to delete the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementAccountUserLinksDeleteCall(String accountId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/entityUserLinks/{linkId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "linkId" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementAccountUserLinksDeleteValidateBeforeCall(String accountId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementAccountUserLinksDelete(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling analyticsManagementAccountUserLinksDelete(Async)");
        }

        return analyticsManagementAccountUserLinksDeleteCall(accountId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Removes a user from the given account.
     * @param accountId Account ID to delete the user link for. (required)
     * @param linkId Link ID to delete the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void analyticsManagementAccountUserLinksDelete(String accountId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        analyticsManagementAccountUserLinksDeleteWithHttpInfo(accountId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
    }

    /**
     * 
     * Removes a user from the given account.
     * @param accountId Account ID to delete the user link for. (required)
     * @param linkId Link ID to delete the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyticsManagementAccountUserLinksDeleteWithHttpInfo(String accountId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementAccountUserLinksDeleteValidateBeforeCall(accountId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes a user from the given account.
     * @param accountId Account ID to delete the user link for. (required)
     * @param linkId Link ID to delete the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementAccountUserLinksDeleteAsync(String accountId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementAccountUserLinksDeleteValidateBeforeCall(accountId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementAccountUserLinksInsert
     * @param accountId Account ID to create the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementAccountUserLinksInsertCall(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityUserLink;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/entityUserLinks"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementAccountUserLinksInsertValidateBeforeCall(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementAccountUserLinksInsert(Async)");
        }

        return analyticsManagementAccountUserLinksInsertCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink, _callback);

    }

    /**
     * 
     * Adds a new user to the given account.
     * @param accountId Account ID to create the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @return EntityUserLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EntityUserLink analyticsManagementAccountUserLinksInsert(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink) throws ApiException {
        ApiResponse<EntityUserLink> localVarResp = analyticsManagementAccountUserLinksInsertWithHttpInfo(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a new user to the given account.
     * @param accountId Account ID to create the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @return ApiResponse&lt;EntityUserLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityUserLink> analyticsManagementAccountUserLinksInsertWithHttpInfo(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementAccountUserLinksInsertValidateBeforeCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink, null);
        Type localVarReturnType = new TypeToken<EntityUserLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a new user to the given account.
     * @param accountId Account ID to create the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementAccountUserLinksInsertAsync(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink, final ApiCallback<EntityUserLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementAccountUserLinksInsertValidateBeforeCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink, _callback);
        Type localVarReturnType = new TypeToken<EntityUserLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementAccountUserLinksList
     * @param accountId Account ID to retrieve the user links for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of account-user links to include in this response. (optional)
     * @param startIndex An index of the first account-user link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementAccountUserLinksListCall(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/entityUserLinks"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementAccountUserLinksListValidateBeforeCall(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementAccountUserLinksList(Async)");
        }

        return analyticsManagementAccountUserLinksListCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);

    }

    /**
     * 
     * Lists account-user links for a given account.
     * @param accountId Account ID to retrieve the user links for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of account-user links to include in this response. (optional)
     * @param startIndex An index of the first account-user link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return EntityUserLinks
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EntityUserLinks analyticsManagementAccountUserLinksList(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        ApiResponse<EntityUserLinks> localVarResp = analyticsManagementAccountUserLinksListWithHttpInfo(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists account-user links for a given account.
     * @param accountId Account ID to retrieve the user links for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of account-user links to include in this response. (optional)
     * @param startIndex An index of the first account-user link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;EntityUserLinks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityUserLinks> analyticsManagementAccountUserLinksListWithHttpInfo(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementAccountUserLinksListValidateBeforeCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, null);
        Type localVarReturnType = new TypeToken<EntityUserLinks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists account-user links for a given account.
     * @param accountId Account ID to retrieve the user links for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of account-user links to include in this response. (optional)
     * @param startIndex An index of the first account-user link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementAccountUserLinksListAsync(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback<EntityUserLinks> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementAccountUserLinksListValidateBeforeCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);
        Type localVarReturnType = new TypeToken<EntityUserLinks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementAccountUserLinksUpdate
     * @param accountId Account ID to update the account-user link for. (required)
     * @param linkId Link ID to update the account-user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementAccountUserLinksUpdateCall(String accountId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityUserLink;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/entityUserLinks/{linkId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "linkId" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementAccountUserLinksUpdateValidateBeforeCall(String accountId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementAccountUserLinksUpdate(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling analyticsManagementAccountUserLinksUpdate(Async)");
        }

        return analyticsManagementAccountUserLinksUpdateCall(accountId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink, _callback);

    }

    /**
     * 
     * Updates permissions for an existing user on the given account.
     * @param accountId Account ID to update the account-user link for. (required)
     * @param linkId Link ID to update the account-user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @return EntityUserLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EntityUserLink analyticsManagementAccountUserLinksUpdate(String accountId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink) throws ApiException {
        ApiResponse<EntityUserLink> localVarResp = analyticsManagementAccountUserLinksUpdateWithHttpInfo(accountId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates permissions for an existing user on the given account.
     * @param accountId Account ID to update the account-user link for. (required)
     * @param linkId Link ID to update the account-user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @return ApiResponse&lt;EntityUserLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityUserLink> analyticsManagementAccountUserLinksUpdateWithHttpInfo(String accountId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementAccountUserLinksUpdateValidateBeforeCall(accountId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink, null);
        Type localVarReturnType = new TypeToken<EntityUserLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates permissions for an existing user on the given account.
     * @param accountId Account ID to update the account-user link for. (required)
     * @param linkId Link ID to update the account-user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementAccountUserLinksUpdateAsync(String accountId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink, final ApiCallback<EntityUserLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementAccountUserLinksUpdateValidateBeforeCall(accountId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink, _callback);
        Type localVarReturnType = new TypeToken<EntityUserLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementAccountsList
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of accounts to include in this response. (optional)
     * @param startIndex An index of the first account to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementAccountsListCall(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementAccountsListValidateBeforeCall(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        return analyticsManagementAccountsListCall(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);

    }

    /**
     * 
     * Lists all accounts to which the user has access.
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of accounts to include in this response. (optional)
     * @param startIndex An index of the first account to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return Accounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Accounts analyticsManagementAccountsList(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        ApiResponse<Accounts> localVarResp = analyticsManagementAccountsListWithHttpInfo(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all accounts to which the user has access.
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of accounts to include in this response. (optional)
     * @param startIndex An index of the first account to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;Accounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Accounts> analyticsManagementAccountsListWithHttpInfo(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementAccountsListValidateBeforeCall(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, null);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all accounts to which the user has access.
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of accounts to include in this response. (optional)
     * @param startIndex An index of the first account to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementAccountsListAsync(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback<Accounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementAccountsListValidateBeforeCall(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementClientIdHashClientId
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param hashClientIdRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementClientIdHashClientIdCall(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, HashClientIdRequest hashClientIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hashClientIdRequest;

        // create path and map variables
        String localVarPath = "/management/clientId:hashClientId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementClientIdHashClientIdValidateBeforeCall(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, HashClientIdRequest hashClientIdRequest, final ApiCallback _callback) throws ApiException {
        return analyticsManagementClientIdHashClientIdCall(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, hashClientIdRequest, _callback);

    }

    /**
     * 
     * Hashes the given Client ID.
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param hashClientIdRequest  (optional)
     * @return HashClientIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public HashClientIdResponse analyticsManagementClientIdHashClientId(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, HashClientIdRequest hashClientIdRequest) throws ApiException {
        ApiResponse<HashClientIdResponse> localVarResp = analyticsManagementClientIdHashClientIdWithHttpInfo(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, hashClientIdRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Hashes the given Client ID.
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param hashClientIdRequest  (optional)
     * @return ApiResponse&lt;HashClientIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HashClientIdResponse> analyticsManagementClientIdHashClientIdWithHttpInfo(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, HashClientIdRequest hashClientIdRequest) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementClientIdHashClientIdValidateBeforeCall(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, hashClientIdRequest, null);
        Type localVarReturnType = new TypeToken<HashClientIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Hashes the given Client ID.
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param hashClientIdRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementClientIdHashClientIdAsync(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, HashClientIdRequest hashClientIdRequest, final ApiCallback<HashClientIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementClientIdHashClientIdValidateBeforeCall(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, hashClientIdRequest, _callback);
        Type localVarReturnType = new TypeToken<HashClientIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementCustomDataSourcesList
     * @param accountId Account Id for the custom data sources to retrieve. (required)
     * @param webPropertyId Web property Id for the custom data sources to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of custom data sources to include in this response. (optional)
     * @param startIndex A 1-based index of the first custom data source to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomDataSourcesListCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementCustomDataSourcesListValidateBeforeCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementCustomDataSourcesList(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementCustomDataSourcesList(Async)");
        }

        return analyticsManagementCustomDataSourcesListCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);

    }

    /**
     * 
     * List custom data sources to which the user has access.
     * @param accountId Account Id for the custom data sources to retrieve. (required)
     * @param webPropertyId Web property Id for the custom data sources to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of custom data sources to include in this response. (optional)
     * @param startIndex A 1-based index of the first custom data source to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return CustomDataSources
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CustomDataSources analyticsManagementCustomDataSourcesList(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        ApiResponse<CustomDataSources> localVarResp = analyticsManagementCustomDataSourcesListWithHttpInfo(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * List custom data sources to which the user has access.
     * @param accountId Account Id for the custom data sources to retrieve. (required)
     * @param webPropertyId Web property Id for the custom data sources to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of custom data sources to include in this response. (optional)
     * @param startIndex A 1-based index of the first custom data source to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;CustomDataSources&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomDataSources> analyticsManagementCustomDataSourcesListWithHttpInfo(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementCustomDataSourcesListValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, null);
        Type localVarReturnType = new TypeToken<CustomDataSources>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List custom data sources to which the user has access.
     * @param accountId Account Id for the custom data sources to retrieve. (required)
     * @param webPropertyId Web property Id for the custom data sources to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of custom data sources to include in this response. (optional)
     * @param startIndex A 1-based index of the first custom data source to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomDataSourcesListAsync(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback<CustomDataSources> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementCustomDataSourcesListValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);
        Type localVarReturnType = new TypeToken<CustomDataSources>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementCustomDimensionsGet
     * @param accountId Account ID for the custom dimension to retrieve. (required)
     * @param webPropertyId Web property ID for the custom dimension to retrieve. (required)
     * @param customDimensionId The ID of the custom dimension to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomDimensionsGetCall(String accountId, String webPropertyId, String customDimensionId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "customDimensionId" + "}", localVarApiClient.escapeString(customDimensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementCustomDimensionsGetValidateBeforeCall(String accountId, String webPropertyId, String customDimensionId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementCustomDimensionsGet(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementCustomDimensionsGet(Async)");
        }

        // verify the required parameter 'customDimensionId' is set
        if (customDimensionId == null) {
            throw new ApiException("Missing the required parameter 'customDimensionId' when calling analyticsManagementCustomDimensionsGet(Async)");
        }

        return analyticsManagementCustomDimensionsGetCall(accountId, webPropertyId, customDimensionId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Get a custom dimension to which the user has access.
     * @param accountId Account ID for the custom dimension to retrieve. (required)
     * @param webPropertyId Web property ID for the custom dimension to retrieve. (required)
     * @param customDimensionId The ID of the custom dimension to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return CustomDimension
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CustomDimension analyticsManagementCustomDimensionsGet(String accountId, String webPropertyId, String customDimensionId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<CustomDimension> localVarResp = analyticsManagementCustomDimensionsGetWithHttpInfo(accountId, webPropertyId, customDimensionId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a custom dimension to which the user has access.
     * @param accountId Account ID for the custom dimension to retrieve. (required)
     * @param webPropertyId Web property ID for the custom dimension to retrieve. (required)
     * @param customDimensionId The ID of the custom dimension to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;CustomDimension&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomDimension> analyticsManagementCustomDimensionsGetWithHttpInfo(String accountId, String webPropertyId, String customDimensionId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementCustomDimensionsGetValidateBeforeCall(accountId, webPropertyId, customDimensionId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<CustomDimension>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a custom dimension to which the user has access.
     * @param accountId Account ID for the custom dimension to retrieve. (required)
     * @param webPropertyId Web property ID for the custom dimension to retrieve. (required)
     * @param customDimensionId The ID of the custom dimension to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomDimensionsGetAsync(String accountId, String webPropertyId, String customDimensionId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<CustomDimension> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementCustomDimensionsGetValidateBeforeCall(accountId, webPropertyId, customDimensionId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<CustomDimension>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementCustomDimensionsInsert
     * @param accountId Account ID for the custom dimension to create. (required)
     * @param webPropertyId Web property ID for the custom dimension to create. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param customDimension  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomDimensionsInsertCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, CustomDimension customDimension, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customDimension;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementCustomDimensionsInsertValidateBeforeCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, CustomDimension customDimension, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementCustomDimensionsInsert(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementCustomDimensionsInsert(Async)");
        }

        return analyticsManagementCustomDimensionsInsertCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, customDimension, _callback);

    }

    /**
     * 
     * Create a new custom dimension.
     * @param accountId Account ID for the custom dimension to create. (required)
     * @param webPropertyId Web property ID for the custom dimension to create. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param customDimension  (optional)
     * @return CustomDimension
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CustomDimension analyticsManagementCustomDimensionsInsert(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, CustomDimension customDimension) throws ApiException {
        ApiResponse<CustomDimension> localVarResp = analyticsManagementCustomDimensionsInsertWithHttpInfo(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, customDimension);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new custom dimension.
     * @param accountId Account ID for the custom dimension to create. (required)
     * @param webPropertyId Web property ID for the custom dimension to create. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param customDimension  (optional)
     * @return ApiResponse&lt;CustomDimension&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomDimension> analyticsManagementCustomDimensionsInsertWithHttpInfo(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, CustomDimension customDimension) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementCustomDimensionsInsertValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, customDimension, null);
        Type localVarReturnType = new TypeToken<CustomDimension>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new custom dimension.
     * @param accountId Account ID for the custom dimension to create. (required)
     * @param webPropertyId Web property ID for the custom dimension to create. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param customDimension  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomDimensionsInsertAsync(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, CustomDimension customDimension, final ApiCallback<CustomDimension> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementCustomDimensionsInsertValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, customDimension, _callback);
        Type localVarReturnType = new TypeToken<CustomDimension>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementCustomDimensionsList
     * @param accountId Account ID for the custom dimensions to retrieve. (required)
     * @param webPropertyId Web property ID for the custom dimensions to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of custom dimensions to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomDimensionsListCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementCustomDimensionsListValidateBeforeCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementCustomDimensionsList(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementCustomDimensionsList(Async)");
        }

        return analyticsManagementCustomDimensionsListCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);

    }

    /**
     * 
     * Lists custom dimensions to which the user has access.
     * @param accountId Account ID for the custom dimensions to retrieve. (required)
     * @param webPropertyId Web property ID for the custom dimensions to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of custom dimensions to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return CustomDimensions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CustomDimensions analyticsManagementCustomDimensionsList(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        ApiResponse<CustomDimensions> localVarResp = analyticsManagementCustomDimensionsListWithHttpInfo(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists custom dimensions to which the user has access.
     * @param accountId Account ID for the custom dimensions to retrieve. (required)
     * @param webPropertyId Web property ID for the custom dimensions to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of custom dimensions to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;CustomDimensions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomDimensions> analyticsManagementCustomDimensionsListWithHttpInfo(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementCustomDimensionsListValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, null);
        Type localVarReturnType = new TypeToken<CustomDimensions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists custom dimensions to which the user has access.
     * @param accountId Account ID for the custom dimensions to retrieve. (required)
     * @param webPropertyId Web property ID for the custom dimensions to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of custom dimensions to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomDimensionsListAsync(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback<CustomDimensions> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementCustomDimensionsListValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);
        Type localVarReturnType = new TypeToken<CustomDimensions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementCustomDimensionsPatch
     * @param accountId Account ID for the custom dimension to update. (required)
     * @param webPropertyId Web property ID for the custom dimension to update. (required)
     * @param customDimensionId Custom dimension ID for the custom dimension to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom dimension being linked to a custom data source / data set. (optional)
     * @param customDimension  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomDimensionsPatchCall(String accountId, String webPropertyId, String customDimensionId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomDimension customDimension, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customDimension;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "customDimensionId" + "}", localVarApiClient.escapeString(customDimensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (ignoreCustomDataSourceLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignoreCustomDataSourceLinks", ignoreCustomDataSourceLinks));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementCustomDimensionsPatchValidateBeforeCall(String accountId, String webPropertyId, String customDimensionId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomDimension customDimension, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementCustomDimensionsPatch(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementCustomDimensionsPatch(Async)");
        }

        // verify the required parameter 'customDimensionId' is set
        if (customDimensionId == null) {
            throw new ApiException("Missing the required parameter 'customDimensionId' when calling analyticsManagementCustomDimensionsPatch(Async)");
        }

        return analyticsManagementCustomDimensionsPatchCall(accountId, webPropertyId, customDimensionId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customDimension, _callback);

    }

    /**
     * 
     * Updates an existing custom dimension. This method supports patch semantics.
     * @param accountId Account ID for the custom dimension to update. (required)
     * @param webPropertyId Web property ID for the custom dimension to update. (required)
     * @param customDimensionId Custom dimension ID for the custom dimension to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom dimension being linked to a custom data source / data set. (optional)
     * @param customDimension  (optional)
     * @return CustomDimension
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CustomDimension analyticsManagementCustomDimensionsPatch(String accountId, String webPropertyId, String customDimensionId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomDimension customDimension) throws ApiException {
        ApiResponse<CustomDimension> localVarResp = analyticsManagementCustomDimensionsPatchWithHttpInfo(accountId, webPropertyId, customDimensionId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customDimension);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing custom dimension. This method supports patch semantics.
     * @param accountId Account ID for the custom dimension to update. (required)
     * @param webPropertyId Web property ID for the custom dimension to update. (required)
     * @param customDimensionId Custom dimension ID for the custom dimension to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom dimension being linked to a custom data source / data set. (optional)
     * @param customDimension  (optional)
     * @return ApiResponse&lt;CustomDimension&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomDimension> analyticsManagementCustomDimensionsPatchWithHttpInfo(String accountId, String webPropertyId, String customDimensionId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomDimension customDimension) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementCustomDimensionsPatchValidateBeforeCall(accountId, webPropertyId, customDimensionId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customDimension, null);
        Type localVarReturnType = new TypeToken<CustomDimension>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing custom dimension. This method supports patch semantics.
     * @param accountId Account ID for the custom dimension to update. (required)
     * @param webPropertyId Web property ID for the custom dimension to update. (required)
     * @param customDimensionId Custom dimension ID for the custom dimension to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom dimension being linked to a custom data source / data set. (optional)
     * @param customDimension  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomDimensionsPatchAsync(String accountId, String webPropertyId, String customDimensionId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomDimension customDimension, final ApiCallback<CustomDimension> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementCustomDimensionsPatchValidateBeforeCall(accountId, webPropertyId, customDimensionId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customDimension, _callback);
        Type localVarReturnType = new TypeToken<CustomDimension>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementCustomDimensionsUpdate
     * @param accountId Account ID for the custom dimension to update. (required)
     * @param webPropertyId Web property ID for the custom dimension to update. (required)
     * @param customDimensionId Custom dimension ID for the custom dimension to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom dimension being linked to a custom data source / data set. (optional)
     * @param customDimension  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomDimensionsUpdateCall(String accountId, String webPropertyId, String customDimensionId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomDimension customDimension, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customDimension;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "customDimensionId" + "}", localVarApiClient.escapeString(customDimensionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (ignoreCustomDataSourceLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignoreCustomDataSourceLinks", ignoreCustomDataSourceLinks));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementCustomDimensionsUpdateValidateBeforeCall(String accountId, String webPropertyId, String customDimensionId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomDimension customDimension, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementCustomDimensionsUpdate(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementCustomDimensionsUpdate(Async)");
        }

        // verify the required parameter 'customDimensionId' is set
        if (customDimensionId == null) {
            throw new ApiException("Missing the required parameter 'customDimensionId' when calling analyticsManagementCustomDimensionsUpdate(Async)");
        }

        return analyticsManagementCustomDimensionsUpdateCall(accountId, webPropertyId, customDimensionId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customDimension, _callback);

    }

    /**
     * 
     * Updates an existing custom dimension.
     * @param accountId Account ID for the custom dimension to update. (required)
     * @param webPropertyId Web property ID for the custom dimension to update. (required)
     * @param customDimensionId Custom dimension ID for the custom dimension to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom dimension being linked to a custom data source / data set. (optional)
     * @param customDimension  (optional)
     * @return CustomDimension
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CustomDimension analyticsManagementCustomDimensionsUpdate(String accountId, String webPropertyId, String customDimensionId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomDimension customDimension) throws ApiException {
        ApiResponse<CustomDimension> localVarResp = analyticsManagementCustomDimensionsUpdateWithHttpInfo(accountId, webPropertyId, customDimensionId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customDimension);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing custom dimension.
     * @param accountId Account ID for the custom dimension to update. (required)
     * @param webPropertyId Web property ID for the custom dimension to update. (required)
     * @param customDimensionId Custom dimension ID for the custom dimension to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom dimension being linked to a custom data source / data set. (optional)
     * @param customDimension  (optional)
     * @return ApiResponse&lt;CustomDimension&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomDimension> analyticsManagementCustomDimensionsUpdateWithHttpInfo(String accountId, String webPropertyId, String customDimensionId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomDimension customDimension) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementCustomDimensionsUpdateValidateBeforeCall(accountId, webPropertyId, customDimensionId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customDimension, null);
        Type localVarReturnType = new TypeToken<CustomDimension>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing custom dimension.
     * @param accountId Account ID for the custom dimension to update. (required)
     * @param webPropertyId Web property ID for the custom dimension to update. (required)
     * @param customDimensionId Custom dimension ID for the custom dimension to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom dimension being linked to a custom data source / data set. (optional)
     * @param customDimension  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomDimensionsUpdateAsync(String accountId, String webPropertyId, String customDimensionId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomDimension customDimension, final ApiCallback<CustomDimension> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementCustomDimensionsUpdateValidateBeforeCall(accountId, webPropertyId, customDimensionId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customDimension, _callback);
        Type localVarReturnType = new TypeToken<CustomDimension>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementCustomMetricsGet
     * @param accountId Account ID for the custom metric to retrieve. (required)
     * @param webPropertyId Web property ID for the custom metric to retrieve. (required)
     * @param customMetricId The ID of the custom metric to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomMetricsGetCall(String accountId, String webPropertyId, String customMetricId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "customMetricId" + "}", localVarApiClient.escapeString(customMetricId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementCustomMetricsGetValidateBeforeCall(String accountId, String webPropertyId, String customMetricId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementCustomMetricsGet(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementCustomMetricsGet(Async)");
        }

        // verify the required parameter 'customMetricId' is set
        if (customMetricId == null) {
            throw new ApiException("Missing the required parameter 'customMetricId' when calling analyticsManagementCustomMetricsGet(Async)");
        }

        return analyticsManagementCustomMetricsGetCall(accountId, webPropertyId, customMetricId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Get a custom metric to which the user has access.
     * @param accountId Account ID for the custom metric to retrieve. (required)
     * @param webPropertyId Web property ID for the custom metric to retrieve. (required)
     * @param customMetricId The ID of the custom metric to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return CustomMetric
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CustomMetric analyticsManagementCustomMetricsGet(String accountId, String webPropertyId, String customMetricId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<CustomMetric> localVarResp = analyticsManagementCustomMetricsGetWithHttpInfo(accountId, webPropertyId, customMetricId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a custom metric to which the user has access.
     * @param accountId Account ID for the custom metric to retrieve. (required)
     * @param webPropertyId Web property ID for the custom metric to retrieve. (required)
     * @param customMetricId The ID of the custom metric to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;CustomMetric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomMetric> analyticsManagementCustomMetricsGetWithHttpInfo(String accountId, String webPropertyId, String customMetricId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementCustomMetricsGetValidateBeforeCall(accountId, webPropertyId, customMetricId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<CustomMetric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a custom metric to which the user has access.
     * @param accountId Account ID for the custom metric to retrieve. (required)
     * @param webPropertyId Web property ID for the custom metric to retrieve. (required)
     * @param customMetricId The ID of the custom metric to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomMetricsGetAsync(String accountId, String webPropertyId, String customMetricId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<CustomMetric> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementCustomMetricsGetValidateBeforeCall(accountId, webPropertyId, customMetricId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<CustomMetric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementCustomMetricsInsert
     * @param accountId Account ID for the custom metric to create. (required)
     * @param webPropertyId Web property ID for the custom dimension to create. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param customMetric  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomMetricsInsertCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, CustomMetric customMetric, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customMetric;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementCustomMetricsInsertValidateBeforeCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, CustomMetric customMetric, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementCustomMetricsInsert(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementCustomMetricsInsert(Async)");
        }

        return analyticsManagementCustomMetricsInsertCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, customMetric, _callback);

    }

    /**
     * 
     * Create a new custom metric.
     * @param accountId Account ID for the custom metric to create. (required)
     * @param webPropertyId Web property ID for the custom dimension to create. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param customMetric  (optional)
     * @return CustomMetric
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CustomMetric analyticsManagementCustomMetricsInsert(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, CustomMetric customMetric) throws ApiException {
        ApiResponse<CustomMetric> localVarResp = analyticsManagementCustomMetricsInsertWithHttpInfo(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, customMetric);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new custom metric.
     * @param accountId Account ID for the custom metric to create. (required)
     * @param webPropertyId Web property ID for the custom dimension to create. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param customMetric  (optional)
     * @return ApiResponse&lt;CustomMetric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomMetric> analyticsManagementCustomMetricsInsertWithHttpInfo(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, CustomMetric customMetric) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementCustomMetricsInsertValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, customMetric, null);
        Type localVarReturnType = new TypeToken<CustomMetric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new custom metric.
     * @param accountId Account ID for the custom metric to create. (required)
     * @param webPropertyId Web property ID for the custom dimension to create. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param customMetric  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomMetricsInsertAsync(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, CustomMetric customMetric, final ApiCallback<CustomMetric> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementCustomMetricsInsertValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, customMetric, _callback);
        Type localVarReturnType = new TypeToken<CustomMetric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementCustomMetricsList
     * @param accountId Account ID for the custom metrics to retrieve. (required)
     * @param webPropertyId Web property ID for the custom metrics to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of custom metrics to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomMetricsListCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementCustomMetricsListValidateBeforeCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementCustomMetricsList(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementCustomMetricsList(Async)");
        }

        return analyticsManagementCustomMetricsListCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);

    }

    /**
     * 
     * Lists custom metrics to which the user has access.
     * @param accountId Account ID for the custom metrics to retrieve. (required)
     * @param webPropertyId Web property ID for the custom metrics to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of custom metrics to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return CustomMetrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CustomMetrics analyticsManagementCustomMetricsList(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        ApiResponse<CustomMetrics> localVarResp = analyticsManagementCustomMetricsListWithHttpInfo(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists custom metrics to which the user has access.
     * @param accountId Account ID for the custom metrics to retrieve. (required)
     * @param webPropertyId Web property ID for the custom metrics to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of custom metrics to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;CustomMetrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomMetrics> analyticsManagementCustomMetricsListWithHttpInfo(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementCustomMetricsListValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, null);
        Type localVarReturnType = new TypeToken<CustomMetrics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists custom metrics to which the user has access.
     * @param accountId Account ID for the custom metrics to retrieve. (required)
     * @param webPropertyId Web property ID for the custom metrics to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of custom metrics to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomMetricsListAsync(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback<CustomMetrics> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementCustomMetricsListValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);
        Type localVarReturnType = new TypeToken<CustomMetrics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementCustomMetricsPatch
     * @param accountId Account ID for the custom metric to update. (required)
     * @param webPropertyId Web property ID for the custom metric to update. (required)
     * @param customMetricId Custom metric ID for the custom metric to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom metric being linked to a custom data source / data set. (optional)
     * @param customMetric  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomMetricsPatchCall(String accountId, String webPropertyId, String customMetricId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomMetric customMetric, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customMetric;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "customMetricId" + "}", localVarApiClient.escapeString(customMetricId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (ignoreCustomDataSourceLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignoreCustomDataSourceLinks", ignoreCustomDataSourceLinks));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementCustomMetricsPatchValidateBeforeCall(String accountId, String webPropertyId, String customMetricId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomMetric customMetric, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementCustomMetricsPatch(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementCustomMetricsPatch(Async)");
        }

        // verify the required parameter 'customMetricId' is set
        if (customMetricId == null) {
            throw new ApiException("Missing the required parameter 'customMetricId' when calling analyticsManagementCustomMetricsPatch(Async)");
        }

        return analyticsManagementCustomMetricsPatchCall(accountId, webPropertyId, customMetricId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customMetric, _callback);

    }

    /**
     * 
     * Updates an existing custom metric. This method supports patch semantics.
     * @param accountId Account ID for the custom metric to update. (required)
     * @param webPropertyId Web property ID for the custom metric to update. (required)
     * @param customMetricId Custom metric ID for the custom metric to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom metric being linked to a custom data source / data set. (optional)
     * @param customMetric  (optional)
     * @return CustomMetric
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CustomMetric analyticsManagementCustomMetricsPatch(String accountId, String webPropertyId, String customMetricId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomMetric customMetric) throws ApiException {
        ApiResponse<CustomMetric> localVarResp = analyticsManagementCustomMetricsPatchWithHttpInfo(accountId, webPropertyId, customMetricId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customMetric);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing custom metric. This method supports patch semantics.
     * @param accountId Account ID for the custom metric to update. (required)
     * @param webPropertyId Web property ID for the custom metric to update. (required)
     * @param customMetricId Custom metric ID for the custom metric to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom metric being linked to a custom data source / data set. (optional)
     * @param customMetric  (optional)
     * @return ApiResponse&lt;CustomMetric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomMetric> analyticsManagementCustomMetricsPatchWithHttpInfo(String accountId, String webPropertyId, String customMetricId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomMetric customMetric) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementCustomMetricsPatchValidateBeforeCall(accountId, webPropertyId, customMetricId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customMetric, null);
        Type localVarReturnType = new TypeToken<CustomMetric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing custom metric. This method supports patch semantics.
     * @param accountId Account ID for the custom metric to update. (required)
     * @param webPropertyId Web property ID for the custom metric to update. (required)
     * @param customMetricId Custom metric ID for the custom metric to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom metric being linked to a custom data source / data set. (optional)
     * @param customMetric  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomMetricsPatchAsync(String accountId, String webPropertyId, String customMetricId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomMetric customMetric, final ApiCallback<CustomMetric> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementCustomMetricsPatchValidateBeforeCall(accountId, webPropertyId, customMetricId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customMetric, _callback);
        Type localVarReturnType = new TypeToken<CustomMetric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementCustomMetricsUpdate
     * @param accountId Account ID for the custom metric to update. (required)
     * @param webPropertyId Web property ID for the custom metric to update. (required)
     * @param customMetricId Custom metric ID for the custom metric to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom metric being linked to a custom data source / data set. (optional)
     * @param customMetric  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomMetricsUpdateCall(String accountId, String webPropertyId, String customMetricId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomMetric customMetric, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customMetric;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "customMetricId" + "}", localVarApiClient.escapeString(customMetricId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (ignoreCustomDataSourceLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignoreCustomDataSourceLinks", ignoreCustomDataSourceLinks));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementCustomMetricsUpdateValidateBeforeCall(String accountId, String webPropertyId, String customMetricId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomMetric customMetric, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementCustomMetricsUpdate(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementCustomMetricsUpdate(Async)");
        }

        // verify the required parameter 'customMetricId' is set
        if (customMetricId == null) {
            throw new ApiException("Missing the required parameter 'customMetricId' when calling analyticsManagementCustomMetricsUpdate(Async)");
        }

        return analyticsManagementCustomMetricsUpdateCall(accountId, webPropertyId, customMetricId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customMetric, _callback);

    }

    /**
     * 
     * Updates an existing custom metric.
     * @param accountId Account ID for the custom metric to update. (required)
     * @param webPropertyId Web property ID for the custom metric to update. (required)
     * @param customMetricId Custom metric ID for the custom metric to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom metric being linked to a custom data source / data set. (optional)
     * @param customMetric  (optional)
     * @return CustomMetric
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public CustomMetric analyticsManagementCustomMetricsUpdate(String accountId, String webPropertyId, String customMetricId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomMetric customMetric) throws ApiException {
        ApiResponse<CustomMetric> localVarResp = analyticsManagementCustomMetricsUpdateWithHttpInfo(accountId, webPropertyId, customMetricId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customMetric);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing custom metric.
     * @param accountId Account ID for the custom metric to update. (required)
     * @param webPropertyId Web property ID for the custom metric to update. (required)
     * @param customMetricId Custom metric ID for the custom metric to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom metric being linked to a custom data source / data set. (optional)
     * @param customMetric  (optional)
     * @return ApiResponse&lt;CustomMetric&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomMetric> analyticsManagementCustomMetricsUpdateWithHttpInfo(String accountId, String webPropertyId, String customMetricId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomMetric customMetric) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementCustomMetricsUpdateValidateBeforeCall(accountId, webPropertyId, customMetricId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customMetric, null);
        Type localVarReturnType = new TypeToken<CustomMetric>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing custom metric.
     * @param accountId Account ID for the custom metric to update. (required)
     * @param webPropertyId Web property ID for the custom metric to update. (required)
     * @param customMetricId Custom metric ID for the custom metric to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param ignoreCustomDataSourceLinks Force the update and ignore any warnings related to the custom metric being linked to a custom data source / data set. (optional)
     * @param customMetric  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementCustomMetricsUpdateAsync(String accountId, String webPropertyId, String customMetricId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Boolean ignoreCustomDataSourceLinks, CustomMetric customMetric, final ApiCallback<CustomMetric> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementCustomMetricsUpdateValidateBeforeCall(accountId, webPropertyId, customMetricId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customMetric, _callback);
        Type localVarReturnType = new TypeToken<CustomMetric>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementExperimentsDelete
     * @param accountId Account ID to which the experiment belongs (required)
     * @param webPropertyId Web property ID to which the experiment belongs (required)
     * @param profileId View (Profile) ID to which the experiment belongs (required)
     * @param experimentId ID of the experiment to delete (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementExperimentsDeleteCall(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "experimentId" + "}", localVarApiClient.escapeString(experimentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementExperimentsDeleteValidateBeforeCall(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementExperimentsDelete(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementExperimentsDelete(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementExperimentsDelete(Async)");
        }

        // verify the required parameter 'experimentId' is set
        if (experimentId == null) {
            throw new ApiException("Missing the required parameter 'experimentId' when calling analyticsManagementExperimentsDelete(Async)");
        }

        return analyticsManagementExperimentsDeleteCall(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Delete an experiment.
     * @param accountId Account ID to which the experiment belongs (required)
     * @param webPropertyId Web property ID to which the experiment belongs (required)
     * @param profileId View (Profile) ID to which the experiment belongs (required)
     * @param experimentId ID of the experiment to delete (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void analyticsManagementExperimentsDelete(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        analyticsManagementExperimentsDeleteWithHttpInfo(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
    }

    /**
     * 
     * Delete an experiment.
     * @param accountId Account ID to which the experiment belongs (required)
     * @param webPropertyId Web property ID to which the experiment belongs (required)
     * @param profileId View (Profile) ID to which the experiment belongs (required)
     * @param experimentId ID of the experiment to delete (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyticsManagementExperimentsDeleteWithHttpInfo(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementExperimentsDeleteValidateBeforeCall(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an experiment.
     * @param accountId Account ID to which the experiment belongs (required)
     * @param webPropertyId Web property ID to which the experiment belongs (required)
     * @param profileId View (Profile) ID to which the experiment belongs (required)
     * @param experimentId ID of the experiment to delete (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementExperimentsDeleteAsync(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementExperimentsDeleteValidateBeforeCall(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementExperimentsGet
     * @param accountId Account ID to retrieve the experiment for. (required)
     * @param webPropertyId Web property ID to retrieve the experiment for. (required)
     * @param profileId View (Profile) ID to retrieve the experiment for. (required)
     * @param experimentId Experiment ID to retrieve the experiment for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementExperimentsGetCall(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "experimentId" + "}", localVarApiClient.escapeString(experimentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementExperimentsGetValidateBeforeCall(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementExperimentsGet(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementExperimentsGet(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementExperimentsGet(Async)");
        }

        // verify the required parameter 'experimentId' is set
        if (experimentId == null) {
            throw new ApiException("Missing the required parameter 'experimentId' when calling analyticsManagementExperimentsGet(Async)");
        }

        return analyticsManagementExperimentsGetCall(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Returns an experiment to which the user has access.
     * @param accountId Account ID to retrieve the experiment for. (required)
     * @param webPropertyId Web property ID to retrieve the experiment for. (required)
     * @param profileId View (Profile) ID to retrieve the experiment for. (required)
     * @param experimentId Experiment ID to retrieve the experiment for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Experiment analyticsManagementExperimentsGet(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<Experiment> localVarResp = analyticsManagementExperimentsGetWithHttpInfo(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an experiment to which the user has access.
     * @param accountId Account ID to retrieve the experiment for. (required)
     * @param webPropertyId Web property ID to retrieve the experiment for. (required)
     * @param profileId View (Profile) ID to retrieve the experiment for. (required)
     * @param experimentId Experiment ID to retrieve the experiment for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Experiment> analyticsManagementExperimentsGetWithHttpInfo(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementExperimentsGetValidateBeforeCall(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an experiment to which the user has access.
     * @param accountId Account ID to retrieve the experiment for. (required)
     * @param webPropertyId Web property ID to retrieve the experiment for. (required)
     * @param profileId View (Profile) ID to retrieve the experiment for. (required)
     * @param experimentId Experiment ID to retrieve the experiment for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementExperimentsGetAsync(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Experiment> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementExperimentsGetValidateBeforeCall(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementExperimentsInsert
     * @param accountId Account ID to create the experiment for. (required)
     * @param webPropertyId Web property ID to create the experiment for. (required)
     * @param profileId View (Profile) ID to create the experiment for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param experiment  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementExperimentsInsertCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Experiment experiment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = experiment;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementExperimentsInsertValidateBeforeCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Experiment experiment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementExperimentsInsert(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementExperimentsInsert(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementExperimentsInsert(Async)");
        }

        return analyticsManagementExperimentsInsertCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, experiment, _callback);

    }

    /**
     * 
     * Create a new experiment.
     * @param accountId Account ID to create the experiment for. (required)
     * @param webPropertyId Web property ID to create the experiment for. (required)
     * @param profileId View (Profile) ID to create the experiment for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param experiment  (optional)
     * @return Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Experiment analyticsManagementExperimentsInsert(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Experiment experiment) throws ApiException {
        ApiResponse<Experiment> localVarResp = analyticsManagementExperimentsInsertWithHttpInfo(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, experiment);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new experiment.
     * @param accountId Account ID to create the experiment for. (required)
     * @param webPropertyId Web property ID to create the experiment for. (required)
     * @param profileId View (Profile) ID to create the experiment for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param experiment  (optional)
     * @return ApiResponse&lt;Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Experiment> analyticsManagementExperimentsInsertWithHttpInfo(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Experiment experiment) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementExperimentsInsertValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, experiment, null);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new experiment.
     * @param accountId Account ID to create the experiment for. (required)
     * @param webPropertyId Web property ID to create the experiment for. (required)
     * @param profileId View (Profile) ID to create the experiment for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param experiment  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementExperimentsInsertAsync(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Experiment experiment, final ApiCallback<Experiment> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementExperimentsInsertValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, experiment, _callback);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementExperimentsList
     * @param accountId Account ID to retrieve experiments for. (required)
     * @param webPropertyId Web property ID to retrieve experiments for. (required)
     * @param profileId View (Profile) ID to retrieve experiments for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of experiments to include in this response. (optional)
     * @param startIndex An index of the first experiment to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementExperimentsListCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementExperimentsListValidateBeforeCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementExperimentsList(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementExperimentsList(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementExperimentsList(Async)");
        }

        return analyticsManagementExperimentsListCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);

    }

    /**
     * 
     * Lists experiments to which the user has access.
     * @param accountId Account ID to retrieve experiments for. (required)
     * @param webPropertyId Web property ID to retrieve experiments for. (required)
     * @param profileId View (Profile) ID to retrieve experiments for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of experiments to include in this response. (optional)
     * @param startIndex An index of the first experiment to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return Experiments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Experiments analyticsManagementExperimentsList(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        ApiResponse<Experiments> localVarResp = analyticsManagementExperimentsListWithHttpInfo(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists experiments to which the user has access.
     * @param accountId Account ID to retrieve experiments for. (required)
     * @param webPropertyId Web property ID to retrieve experiments for. (required)
     * @param profileId View (Profile) ID to retrieve experiments for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of experiments to include in this response. (optional)
     * @param startIndex An index of the first experiment to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;Experiments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Experiments> analyticsManagementExperimentsListWithHttpInfo(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementExperimentsListValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, null);
        Type localVarReturnType = new TypeToken<Experiments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists experiments to which the user has access.
     * @param accountId Account ID to retrieve experiments for. (required)
     * @param webPropertyId Web property ID to retrieve experiments for. (required)
     * @param profileId View (Profile) ID to retrieve experiments for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of experiments to include in this response. (optional)
     * @param startIndex An index of the first experiment to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementExperimentsListAsync(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback<Experiments> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementExperimentsListValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);
        Type localVarReturnType = new TypeToken<Experiments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementExperimentsPatch
     * @param accountId Account ID of the experiment to update. (required)
     * @param webPropertyId Web property ID of the experiment to update. (required)
     * @param profileId View (Profile) ID of the experiment to update. (required)
     * @param experimentId Experiment ID of the experiment to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param experiment  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementExperimentsPatchCall(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Experiment experiment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = experiment;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "experimentId" + "}", localVarApiClient.escapeString(experimentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementExperimentsPatchValidateBeforeCall(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Experiment experiment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementExperimentsPatch(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementExperimentsPatch(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementExperimentsPatch(Async)");
        }

        // verify the required parameter 'experimentId' is set
        if (experimentId == null) {
            throw new ApiException("Missing the required parameter 'experimentId' when calling analyticsManagementExperimentsPatch(Async)");
        }

        return analyticsManagementExperimentsPatchCall(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, experiment, _callback);

    }

    /**
     * 
     * Update an existing experiment. This method supports patch semantics.
     * @param accountId Account ID of the experiment to update. (required)
     * @param webPropertyId Web property ID of the experiment to update. (required)
     * @param profileId View (Profile) ID of the experiment to update. (required)
     * @param experimentId Experiment ID of the experiment to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param experiment  (optional)
     * @return Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Experiment analyticsManagementExperimentsPatch(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Experiment experiment) throws ApiException {
        ApiResponse<Experiment> localVarResp = analyticsManagementExperimentsPatchWithHttpInfo(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, experiment);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an existing experiment. This method supports patch semantics.
     * @param accountId Account ID of the experiment to update. (required)
     * @param webPropertyId Web property ID of the experiment to update. (required)
     * @param profileId View (Profile) ID of the experiment to update. (required)
     * @param experimentId Experiment ID of the experiment to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param experiment  (optional)
     * @return ApiResponse&lt;Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Experiment> analyticsManagementExperimentsPatchWithHttpInfo(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Experiment experiment) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementExperimentsPatchValidateBeforeCall(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, experiment, null);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an existing experiment. This method supports patch semantics.
     * @param accountId Account ID of the experiment to update. (required)
     * @param webPropertyId Web property ID of the experiment to update. (required)
     * @param profileId View (Profile) ID of the experiment to update. (required)
     * @param experimentId Experiment ID of the experiment to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param experiment  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementExperimentsPatchAsync(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Experiment experiment, final ApiCallback<Experiment> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementExperimentsPatchValidateBeforeCall(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, experiment, _callback);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementExperimentsUpdate
     * @param accountId Account ID of the experiment to update. (required)
     * @param webPropertyId Web property ID of the experiment to update. (required)
     * @param profileId View (Profile) ID of the experiment to update. (required)
     * @param experimentId Experiment ID of the experiment to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param experiment  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementExperimentsUpdateCall(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Experiment experiment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = experiment;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "experimentId" + "}", localVarApiClient.escapeString(experimentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementExperimentsUpdateValidateBeforeCall(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Experiment experiment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementExperimentsUpdate(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementExperimentsUpdate(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementExperimentsUpdate(Async)");
        }

        // verify the required parameter 'experimentId' is set
        if (experimentId == null) {
            throw new ApiException("Missing the required parameter 'experimentId' when calling analyticsManagementExperimentsUpdate(Async)");
        }

        return analyticsManagementExperimentsUpdateCall(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, experiment, _callback);

    }

    /**
     * 
     * Update an existing experiment.
     * @param accountId Account ID of the experiment to update. (required)
     * @param webPropertyId Web property ID of the experiment to update. (required)
     * @param profileId View (Profile) ID of the experiment to update. (required)
     * @param experimentId Experiment ID of the experiment to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param experiment  (optional)
     * @return Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Experiment analyticsManagementExperimentsUpdate(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Experiment experiment) throws ApiException {
        ApiResponse<Experiment> localVarResp = analyticsManagementExperimentsUpdateWithHttpInfo(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, experiment);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an existing experiment.
     * @param accountId Account ID of the experiment to update. (required)
     * @param webPropertyId Web property ID of the experiment to update. (required)
     * @param profileId View (Profile) ID of the experiment to update. (required)
     * @param experimentId Experiment ID of the experiment to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param experiment  (optional)
     * @return ApiResponse&lt;Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Experiment> analyticsManagementExperimentsUpdateWithHttpInfo(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Experiment experiment) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementExperimentsUpdateValidateBeforeCall(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, experiment, null);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an existing experiment.
     * @param accountId Account ID of the experiment to update. (required)
     * @param webPropertyId Web property ID of the experiment to update. (required)
     * @param profileId View (Profile) ID of the experiment to update. (required)
     * @param experimentId Experiment ID of the experiment to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param experiment  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementExperimentsUpdateAsync(String accountId, String webPropertyId, String profileId, String experimentId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Experiment experiment, final ApiCallback<Experiment> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementExperimentsUpdateValidateBeforeCall(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, experiment, _callback);
        Type localVarReturnType = new TypeToken<Experiment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementFiltersDelete
     * @param accountId Account ID to delete the filter for. (required)
     * @param filterId ID of the filter to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementFiltersDeleteCall(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/filters/{filterId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "filterId" + "}", localVarApiClient.escapeString(filterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementFiltersDeleteValidateBeforeCall(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementFiltersDelete(Async)");
        }

        // verify the required parameter 'filterId' is set
        if (filterId == null) {
            throw new ApiException("Missing the required parameter 'filterId' when calling analyticsManagementFiltersDelete(Async)");
        }

        return analyticsManagementFiltersDeleteCall(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Delete a filter.
     * @param accountId Account ID to delete the filter for. (required)
     * @param filterId ID of the filter to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return Filter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Filter analyticsManagementFiltersDelete(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<Filter> localVarResp = analyticsManagementFiltersDeleteWithHttpInfo(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a filter.
     * @param accountId Account ID to delete the filter for. (required)
     * @param filterId ID of the filter to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Filter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Filter> analyticsManagementFiltersDeleteWithHttpInfo(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementFiltersDeleteValidateBeforeCall(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a filter.
     * @param accountId Account ID to delete the filter for. (required)
     * @param filterId ID of the filter to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementFiltersDeleteAsync(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Filter> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementFiltersDeleteValidateBeforeCall(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementFiltersGet
     * @param accountId Account ID to retrieve filters for. (required)
     * @param filterId Filter ID to retrieve filters for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementFiltersGetCall(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/filters/{filterId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "filterId" + "}", localVarApiClient.escapeString(filterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementFiltersGetValidateBeforeCall(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementFiltersGet(Async)");
        }

        // verify the required parameter 'filterId' is set
        if (filterId == null) {
            throw new ApiException("Missing the required parameter 'filterId' when calling analyticsManagementFiltersGet(Async)");
        }

        return analyticsManagementFiltersGetCall(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Returns filters to which the user has access.
     * @param accountId Account ID to retrieve filters for. (required)
     * @param filterId Filter ID to retrieve filters for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return Filter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Filter analyticsManagementFiltersGet(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<Filter> localVarResp = analyticsManagementFiltersGetWithHttpInfo(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns filters to which the user has access.
     * @param accountId Account ID to retrieve filters for. (required)
     * @param filterId Filter ID to retrieve filters for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Filter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Filter> analyticsManagementFiltersGetWithHttpInfo(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementFiltersGetValidateBeforeCall(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns filters to which the user has access.
     * @param accountId Account ID to retrieve filters for. (required)
     * @param filterId Filter ID to retrieve filters for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementFiltersGetAsync(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Filter> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementFiltersGetValidateBeforeCall(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementFiltersInsert
     * @param accountId Account ID to create filter for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementFiltersInsertCall(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Filter filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filter;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/filters"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementFiltersInsertValidateBeforeCall(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Filter filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementFiltersInsert(Async)");
        }

        return analyticsManagementFiltersInsertCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, filter, _callback);

    }

    /**
     * 
     * Create a new filter.
     * @param accountId Account ID to create filter for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param filter  (optional)
     * @return Filter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Filter analyticsManagementFiltersInsert(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Filter filter) throws ApiException {
        ApiResponse<Filter> localVarResp = analyticsManagementFiltersInsertWithHttpInfo(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new filter.
     * @param accountId Account ID to create filter for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param filter  (optional)
     * @return ApiResponse&lt;Filter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Filter> analyticsManagementFiltersInsertWithHttpInfo(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Filter filter) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementFiltersInsertValidateBeforeCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, filter, null);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new filter.
     * @param accountId Account ID to create filter for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementFiltersInsertAsync(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Filter filter, final ApiCallback<Filter> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementFiltersInsertValidateBeforeCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, filter, _callback);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementFiltersList
     * @param accountId Account ID to retrieve filters for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of filters to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementFiltersListCall(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/filters"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementFiltersListValidateBeforeCall(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementFiltersList(Async)");
        }

        return analyticsManagementFiltersListCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);

    }

    /**
     * 
     * Lists all filters for an account
     * @param accountId Account ID to retrieve filters for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of filters to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return Filters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Filters analyticsManagementFiltersList(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        ApiResponse<Filters> localVarResp = analyticsManagementFiltersListWithHttpInfo(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all filters for an account
     * @param accountId Account ID to retrieve filters for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of filters to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;Filters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Filters> analyticsManagementFiltersListWithHttpInfo(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementFiltersListValidateBeforeCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, null);
        Type localVarReturnType = new TypeToken<Filters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all filters for an account
     * @param accountId Account ID to retrieve filters for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of filters to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementFiltersListAsync(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback<Filters> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementFiltersListValidateBeforeCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);
        Type localVarReturnType = new TypeToken<Filters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementFiltersPatch
     * @param accountId Account ID to which the filter belongs. (required)
     * @param filterId ID of the filter to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementFiltersPatchCall(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Filter filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filter;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/filters/{filterId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "filterId" + "}", localVarApiClient.escapeString(filterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementFiltersPatchValidateBeforeCall(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Filter filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementFiltersPatch(Async)");
        }

        // verify the required parameter 'filterId' is set
        if (filterId == null) {
            throw new ApiException("Missing the required parameter 'filterId' when calling analyticsManagementFiltersPatch(Async)");
        }

        return analyticsManagementFiltersPatchCall(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, filter, _callback);

    }

    /**
     * 
     * Updates an existing filter. This method supports patch semantics.
     * @param accountId Account ID to which the filter belongs. (required)
     * @param filterId ID of the filter to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param filter  (optional)
     * @return Filter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Filter analyticsManagementFiltersPatch(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Filter filter) throws ApiException {
        ApiResponse<Filter> localVarResp = analyticsManagementFiltersPatchWithHttpInfo(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing filter. This method supports patch semantics.
     * @param accountId Account ID to which the filter belongs. (required)
     * @param filterId ID of the filter to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param filter  (optional)
     * @return ApiResponse&lt;Filter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Filter> analyticsManagementFiltersPatchWithHttpInfo(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Filter filter) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementFiltersPatchValidateBeforeCall(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, filter, null);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing filter. This method supports patch semantics.
     * @param accountId Account ID to which the filter belongs. (required)
     * @param filterId ID of the filter to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementFiltersPatchAsync(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Filter filter, final ApiCallback<Filter> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementFiltersPatchValidateBeforeCall(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, filter, _callback);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementFiltersUpdate
     * @param accountId Account ID to which the filter belongs. (required)
     * @param filterId ID of the filter to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementFiltersUpdateCall(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Filter filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filter;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/filters/{filterId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "filterId" + "}", localVarApiClient.escapeString(filterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementFiltersUpdateValidateBeforeCall(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Filter filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementFiltersUpdate(Async)");
        }

        // verify the required parameter 'filterId' is set
        if (filterId == null) {
            throw new ApiException("Missing the required parameter 'filterId' when calling analyticsManagementFiltersUpdate(Async)");
        }

        return analyticsManagementFiltersUpdateCall(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, filter, _callback);

    }

    /**
     * 
     * Updates an existing filter.
     * @param accountId Account ID to which the filter belongs. (required)
     * @param filterId ID of the filter to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param filter  (optional)
     * @return Filter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Filter analyticsManagementFiltersUpdate(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Filter filter) throws ApiException {
        ApiResponse<Filter> localVarResp = analyticsManagementFiltersUpdateWithHttpInfo(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing filter.
     * @param accountId Account ID to which the filter belongs. (required)
     * @param filterId ID of the filter to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param filter  (optional)
     * @return ApiResponse&lt;Filter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Filter> analyticsManagementFiltersUpdateWithHttpInfo(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Filter filter) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementFiltersUpdateValidateBeforeCall(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, filter, null);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing filter.
     * @param accountId Account ID to which the filter belongs. (required)
     * @param filterId ID of the filter to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementFiltersUpdateAsync(String accountId, String filterId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Filter filter, final ApiCallback<Filter> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementFiltersUpdateValidateBeforeCall(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, filter, _callback);
        Type localVarReturnType = new TypeToken<Filter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementGoalsGet
     * @param accountId Account ID to retrieve the goal for. (required)
     * @param webPropertyId Web property ID to retrieve the goal for. (required)
     * @param profileId View (Profile) ID to retrieve the goal for. (required)
     * @param goalId Goal ID to retrieve the goal for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementGoalsGetCall(String accountId, String webPropertyId, String profileId, String goalId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "goalId" + "}", localVarApiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementGoalsGetValidateBeforeCall(String accountId, String webPropertyId, String profileId, String goalId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementGoalsGet(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementGoalsGet(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementGoalsGet(Async)");
        }

        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling analyticsManagementGoalsGet(Async)");
        }

        return analyticsManagementGoalsGetCall(accountId, webPropertyId, profileId, goalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Gets a goal to which the user has access.
     * @param accountId Account ID to retrieve the goal for. (required)
     * @param webPropertyId Web property ID to retrieve the goal for. (required)
     * @param profileId View (Profile) ID to retrieve the goal for. (required)
     * @param goalId Goal ID to retrieve the goal for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return Goal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Goal analyticsManagementGoalsGet(String accountId, String webPropertyId, String profileId, String goalId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<Goal> localVarResp = analyticsManagementGoalsGetWithHttpInfo(accountId, webPropertyId, profileId, goalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a goal to which the user has access.
     * @param accountId Account ID to retrieve the goal for. (required)
     * @param webPropertyId Web property ID to retrieve the goal for. (required)
     * @param profileId View (Profile) ID to retrieve the goal for. (required)
     * @param goalId Goal ID to retrieve the goal for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Goal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Goal> analyticsManagementGoalsGetWithHttpInfo(String accountId, String webPropertyId, String profileId, String goalId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementGoalsGetValidateBeforeCall(accountId, webPropertyId, profileId, goalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a goal to which the user has access.
     * @param accountId Account ID to retrieve the goal for. (required)
     * @param webPropertyId Web property ID to retrieve the goal for. (required)
     * @param profileId View (Profile) ID to retrieve the goal for. (required)
     * @param goalId Goal ID to retrieve the goal for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementGoalsGetAsync(String accountId, String webPropertyId, String profileId, String goalId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Goal> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementGoalsGetValidateBeforeCall(accountId, webPropertyId, profileId, goalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementGoalsInsert
     * @param accountId Account ID to create the goal for. (required)
     * @param webPropertyId Web property ID to create the goal for. (required)
     * @param profileId View (Profile) ID to create the goal for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param goal  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementGoalsInsertCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Goal goal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = goal;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementGoalsInsertValidateBeforeCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Goal goal, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementGoalsInsert(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementGoalsInsert(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementGoalsInsert(Async)");
        }

        return analyticsManagementGoalsInsertCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, goal, _callback);

    }

    /**
     * 
     * Create a new goal.
     * @param accountId Account ID to create the goal for. (required)
     * @param webPropertyId Web property ID to create the goal for. (required)
     * @param profileId View (Profile) ID to create the goal for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param goal  (optional)
     * @return Goal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Goal analyticsManagementGoalsInsert(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Goal goal) throws ApiException {
        ApiResponse<Goal> localVarResp = analyticsManagementGoalsInsertWithHttpInfo(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, goal);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new goal.
     * @param accountId Account ID to create the goal for. (required)
     * @param webPropertyId Web property ID to create the goal for. (required)
     * @param profileId View (Profile) ID to create the goal for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param goal  (optional)
     * @return ApiResponse&lt;Goal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Goal> analyticsManagementGoalsInsertWithHttpInfo(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Goal goal) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementGoalsInsertValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, goal, null);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new goal.
     * @param accountId Account ID to create the goal for. (required)
     * @param webPropertyId Web property ID to create the goal for. (required)
     * @param profileId View (Profile) ID to create the goal for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param goal  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementGoalsInsertAsync(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Goal goal, final ApiCallback<Goal> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementGoalsInsertValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, goal, _callback);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementGoalsList
     * @param accountId Account ID to retrieve goals for. Can either be a specific account ID or &#39;~all&#39;, which refers to all the accounts that user has access to. (required)
     * @param webPropertyId Web property ID to retrieve goals for. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties that user has access to. (required)
     * @param profileId View (Profile) ID to retrieve goals for. Can either be a specific view (profile) ID or &#39;~all&#39;, which refers to all the views (profiles) that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of goals to include in this response. (optional)
     * @param startIndex An index of the first goal to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementGoalsListCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementGoalsListValidateBeforeCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementGoalsList(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementGoalsList(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementGoalsList(Async)");
        }

        return analyticsManagementGoalsListCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);

    }

    /**
     * 
     * Lists goals to which the user has access.
     * @param accountId Account ID to retrieve goals for. Can either be a specific account ID or &#39;~all&#39;, which refers to all the accounts that user has access to. (required)
     * @param webPropertyId Web property ID to retrieve goals for. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties that user has access to. (required)
     * @param profileId View (Profile) ID to retrieve goals for. Can either be a specific view (profile) ID or &#39;~all&#39;, which refers to all the views (profiles) that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of goals to include in this response. (optional)
     * @param startIndex An index of the first goal to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return Goals
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Goals analyticsManagementGoalsList(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        ApiResponse<Goals> localVarResp = analyticsManagementGoalsListWithHttpInfo(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists goals to which the user has access.
     * @param accountId Account ID to retrieve goals for. Can either be a specific account ID or &#39;~all&#39;, which refers to all the accounts that user has access to. (required)
     * @param webPropertyId Web property ID to retrieve goals for. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties that user has access to. (required)
     * @param profileId View (Profile) ID to retrieve goals for. Can either be a specific view (profile) ID or &#39;~all&#39;, which refers to all the views (profiles) that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of goals to include in this response. (optional)
     * @param startIndex An index of the first goal to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;Goals&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Goals> analyticsManagementGoalsListWithHttpInfo(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementGoalsListValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, null);
        Type localVarReturnType = new TypeToken<Goals>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists goals to which the user has access.
     * @param accountId Account ID to retrieve goals for. Can either be a specific account ID or &#39;~all&#39;, which refers to all the accounts that user has access to. (required)
     * @param webPropertyId Web property ID to retrieve goals for. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties that user has access to. (required)
     * @param profileId View (Profile) ID to retrieve goals for. Can either be a specific view (profile) ID or &#39;~all&#39;, which refers to all the views (profiles) that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of goals to include in this response. (optional)
     * @param startIndex An index of the first goal to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementGoalsListAsync(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback<Goals> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementGoalsListValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);
        Type localVarReturnType = new TypeToken<Goals>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementGoalsPatch
     * @param accountId Account ID to update the goal. (required)
     * @param webPropertyId Web property ID to update the goal. (required)
     * @param profileId View (Profile) ID to update the goal. (required)
     * @param goalId Index of the goal to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param goal  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementGoalsPatchCall(String accountId, String webPropertyId, String profileId, String goalId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Goal goal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = goal;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "goalId" + "}", localVarApiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementGoalsPatchValidateBeforeCall(String accountId, String webPropertyId, String profileId, String goalId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Goal goal, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementGoalsPatch(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementGoalsPatch(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementGoalsPatch(Async)");
        }

        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling analyticsManagementGoalsPatch(Async)");
        }

        return analyticsManagementGoalsPatchCall(accountId, webPropertyId, profileId, goalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, goal, _callback);

    }

    /**
     * 
     * Updates an existing goal. This method supports patch semantics.
     * @param accountId Account ID to update the goal. (required)
     * @param webPropertyId Web property ID to update the goal. (required)
     * @param profileId View (Profile) ID to update the goal. (required)
     * @param goalId Index of the goal to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param goal  (optional)
     * @return Goal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Goal analyticsManagementGoalsPatch(String accountId, String webPropertyId, String profileId, String goalId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Goal goal) throws ApiException {
        ApiResponse<Goal> localVarResp = analyticsManagementGoalsPatchWithHttpInfo(accountId, webPropertyId, profileId, goalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, goal);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing goal. This method supports patch semantics.
     * @param accountId Account ID to update the goal. (required)
     * @param webPropertyId Web property ID to update the goal. (required)
     * @param profileId View (Profile) ID to update the goal. (required)
     * @param goalId Index of the goal to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param goal  (optional)
     * @return ApiResponse&lt;Goal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Goal> analyticsManagementGoalsPatchWithHttpInfo(String accountId, String webPropertyId, String profileId, String goalId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Goal goal) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementGoalsPatchValidateBeforeCall(accountId, webPropertyId, profileId, goalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, goal, null);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing goal. This method supports patch semantics.
     * @param accountId Account ID to update the goal. (required)
     * @param webPropertyId Web property ID to update the goal. (required)
     * @param profileId View (Profile) ID to update the goal. (required)
     * @param goalId Index of the goal to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param goal  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementGoalsPatchAsync(String accountId, String webPropertyId, String profileId, String goalId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Goal goal, final ApiCallback<Goal> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementGoalsPatchValidateBeforeCall(accountId, webPropertyId, profileId, goalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, goal, _callback);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementGoalsUpdate
     * @param accountId Account ID to update the goal. (required)
     * @param webPropertyId Web property ID to update the goal. (required)
     * @param profileId View (Profile) ID to update the goal. (required)
     * @param goalId Index of the goal to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param goal  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementGoalsUpdateCall(String accountId, String webPropertyId, String profileId, String goalId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Goal goal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = goal;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "goalId" + "}", localVarApiClient.escapeString(goalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementGoalsUpdateValidateBeforeCall(String accountId, String webPropertyId, String profileId, String goalId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Goal goal, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementGoalsUpdate(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementGoalsUpdate(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementGoalsUpdate(Async)");
        }

        // verify the required parameter 'goalId' is set
        if (goalId == null) {
            throw new ApiException("Missing the required parameter 'goalId' when calling analyticsManagementGoalsUpdate(Async)");
        }

        return analyticsManagementGoalsUpdateCall(accountId, webPropertyId, profileId, goalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, goal, _callback);

    }

    /**
     * 
     * Updates an existing goal.
     * @param accountId Account ID to update the goal. (required)
     * @param webPropertyId Web property ID to update the goal. (required)
     * @param profileId View (Profile) ID to update the goal. (required)
     * @param goalId Index of the goal to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param goal  (optional)
     * @return Goal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Goal analyticsManagementGoalsUpdate(String accountId, String webPropertyId, String profileId, String goalId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Goal goal) throws ApiException {
        ApiResponse<Goal> localVarResp = analyticsManagementGoalsUpdateWithHttpInfo(accountId, webPropertyId, profileId, goalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, goal);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing goal.
     * @param accountId Account ID to update the goal. (required)
     * @param webPropertyId Web property ID to update the goal. (required)
     * @param profileId View (Profile) ID to update the goal. (required)
     * @param goalId Index of the goal to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param goal  (optional)
     * @return ApiResponse&lt;Goal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Goal> analyticsManagementGoalsUpdateWithHttpInfo(String accountId, String webPropertyId, String profileId, String goalId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Goal goal) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementGoalsUpdateValidateBeforeCall(accountId, webPropertyId, profileId, goalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, goal, null);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing goal.
     * @param accountId Account ID to update the goal. (required)
     * @param webPropertyId Web property ID to update the goal. (required)
     * @param profileId View (Profile) ID to update the goal. (required)
     * @param goalId Index of the goal to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param goal  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementGoalsUpdateAsync(String accountId, String webPropertyId, String profileId, String goalId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Goal goal, final ApiCallback<Goal> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementGoalsUpdateValidateBeforeCall(accountId, webPropertyId, profileId, goalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, goal, _callback);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementProfileFilterLinksDelete
     * @param accountId Account ID to which the profile filter link belongs. (required)
     * @param webPropertyId Web property Id to which the profile filter link belongs. (required)
     * @param profileId Profile ID to which the filter link belongs. (required)
     * @param linkId ID of the profile filter link to delete. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileFilterLinksDeleteCall(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "linkId" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementProfileFilterLinksDeleteValidateBeforeCall(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementProfileFilterLinksDelete(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementProfileFilterLinksDelete(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementProfileFilterLinksDelete(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling analyticsManagementProfileFilterLinksDelete(Async)");
        }

        return analyticsManagementProfileFilterLinksDeleteCall(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Delete a profile filter link.
     * @param accountId Account ID to which the profile filter link belongs. (required)
     * @param webPropertyId Web property Id to which the profile filter link belongs. (required)
     * @param profileId Profile ID to which the filter link belongs. (required)
     * @param linkId ID of the profile filter link to delete. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void analyticsManagementProfileFilterLinksDelete(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        analyticsManagementProfileFilterLinksDeleteWithHttpInfo(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
    }

    /**
     * 
     * Delete a profile filter link.
     * @param accountId Account ID to which the profile filter link belongs. (required)
     * @param webPropertyId Web property Id to which the profile filter link belongs. (required)
     * @param profileId Profile ID to which the filter link belongs. (required)
     * @param linkId ID of the profile filter link to delete. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyticsManagementProfileFilterLinksDeleteWithHttpInfo(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementProfileFilterLinksDeleteValidateBeforeCall(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a profile filter link.
     * @param accountId Account ID to which the profile filter link belongs. (required)
     * @param webPropertyId Web property Id to which the profile filter link belongs. (required)
     * @param profileId Profile ID to which the filter link belongs. (required)
     * @param linkId ID of the profile filter link to delete. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileFilterLinksDeleteAsync(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementProfileFilterLinksDeleteValidateBeforeCall(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementProfileFilterLinksGet
     * @param accountId Account ID to retrieve profile filter link for. (required)
     * @param webPropertyId Web property Id to retrieve profile filter link for. (required)
     * @param profileId Profile ID to retrieve filter link for. (required)
     * @param linkId ID of the profile filter link. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileFilterLinksGetCall(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "linkId" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementProfileFilterLinksGetValidateBeforeCall(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementProfileFilterLinksGet(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementProfileFilterLinksGet(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementProfileFilterLinksGet(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling analyticsManagementProfileFilterLinksGet(Async)");
        }

        return analyticsManagementProfileFilterLinksGetCall(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Returns a single profile filter link.
     * @param accountId Account ID to retrieve profile filter link for. (required)
     * @param webPropertyId Web property Id to retrieve profile filter link for. (required)
     * @param profileId Profile ID to retrieve filter link for. (required)
     * @param linkId ID of the profile filter link. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ProfileFilterLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ProfileFilterLink analyticsManagementProfileFilterLinksGet(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<ProfileFilterLink> localVarResp = analyticsManagementProfileFilterLinksGetWithHttpInfo(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a single profile filter link.
     * @param accountId Account ID to retrieve profile filter link for. (required)
     * @param webPropertyId Web property Id to retrieve profile filter link for. (required)
     * @param profileId Profile ID to retrieve filter link for. (required)
     * @param linkId ID of the profile filter link. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;ProfileFilterLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileFilterLink> analyticsManagementProfileFilterLinksGetWithHttpInfo(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementProfileFilterLinksGetValidateBeforeCall(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<ProfileFilterLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a single profile filter link.
     * @param accountId Account ID to retrieve profile filter link for. (required)
     * @param webPropertyId Web property Id to retrieve profile filter link for. (required)
     * @param profileId Profile ID to retrieve filter link for. (required)
     * @param linkId ID of the profile filter link. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileFilterLinksGetAsync(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<ProfileFilterLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementProfileFilterLinksGetValidateBeforeCall(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<ProfileFilterLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementProfileFilterLinksInsert
     * @param accountId Account ID to create profile filter link for. (required)
     * @param webPropertyId Web property Id to create profile filter link for. (required)
     * @param profileId Profile ID to create filter link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profileFilterLink  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileFilterLinksInsertCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ProfileFilterLink profileFilterLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = profileFilterLink;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementProfileFilterLinksInsertValidateBeforeCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ProfileFilterLink profileFilterLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementProfileFilterLinksInsert(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementProfileFilterLinksInsert(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementProfileFilterLinksInsert(Async)");
        }

        return analyticsManagementProfileFilterLinksInsertCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profileFilterLink, _callback);

    }

    /**
     * 
     * Create a new profile filter link.
     * @param accountId Account ID to create profile filter link for. (required)
     * @param webPropertyId Web property Id to create profile filter link for. (required)
     * @param profileId Profile ID to create filter link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profileFilterLink  (optional)
     * @return ProfileFilterLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ProfileFilterLink analyticsManagementProfileFilterLinksInsert(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ProfileFilterLink profileFilterLink) throws ApiException {
        ApiResponse<ProfileFilterLink> localVarResp = analyticsManagementProfileFilterLinksInsertWithHttpInfo(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profileFilterLink);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new profile filter link.
     * @param accountId Account ID to create profile filter link for. (required)
     * @param webPropertyId Web property Id to create profile filter link for. (required)
     * @param profileId Profile ID to create filter link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profileFilterLink  (optional)
     * @return ApiResponse&lt;ProfileFilterLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileFilterLink> analyticsManagementProfileFilterLinksInsertWithHttpInfo(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ProfileFilterLink profileFilterLink) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementProfileFilterLinksInsertValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profileFilterLink, null);
        Type localVarReturnType = new TypeToken<ProfileFilterLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new profile filter link.
     * @param accountId Account ID to create profile filter link for. (required)
     * @param webPropertyId Web property Id to create profile filter link for. (required)
     * @param profileId Profile ID to create filter link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profileFilterLink  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileFilterLinksInsertAsync(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ProfileFilterLink profileFilterLink, final ApiCallback<ProfileFilterLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementProfileFilterLinksInsertValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profileFilterLink, _callback);
        Type localVarReturnType = new TypeToken<ProfileFilterLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementProfileFilterLinksList
     * @param accountId Account ID to retrieve profile filter links for. (required)
     * @param webPropertyId Web property Id for profile filter links for. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties that user has access to. (required)
     * @param profileId Profile ID to retrieve filter links for. Can either be a specific profile ID or &#39;~all&#39;, which refers to all the profiles that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of profile filter links to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileFilterLinksListCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementProfileFilterLinksListValidateBeforeCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementProfileFilterLinksList(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementProfileFilterLinksList(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementProfileFilterLinksList(Async)");
        }

        return analyticsManagementProfileFilterLinksListCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);

    }

    /**
     * 
     * Lists all profile filter links for a profile.
     * @param accountId Account ID to retrieve profile filter links for. (required)
     * @param webPropertyId Web property Id for profile filter links for. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties that user has access to. (required)
     * @param profileId Profile ID to retrieve filter links for. Can either be a specific profile ID or &#39;~all&#39;, which refers to all the profiles that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of profile filter links to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ProfileFilterLinks
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ProfileFilterLinks analyticsManagementProfileFilterLinksList(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        ApiResponse<ProfileFilterLinks> localVarResp = analyticsManagementProfileFilterLinksListWithHttpInfo(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all profile filter links for a profile.
     * @param accountId Account ID to retrieve profile filter links for. (required)
     * @param webPropertyId Web property Id for profile filter links for. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties that user has access to. (required)
     * @param profileId Profile ID to retrieve filter links for. Can either be a specific profile ID or &#39;~all&#39;, which refers to all the profiles that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of profile filter links to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;ProfileFilterLinks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileFilterLinks> analyticsManagementProfileFilterLinksListWithHttpInfo(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementProfileFilterLinksListValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, null);
        Type localVarReturnType = new TypeToken<ProfileFilterLinks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all profile filter links for a profile.
     * @param accountId Account ID to retrieve profile filter links for. (required)
     * @param webPropertyId Web property Id for profile filter links for. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties that user has access to. (required)
     * @param profileId Profile ID to retrieve filter links for. Can either be a specific profile ID or &#39;~all&#39;, which refers to all the profiles that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of profile filter links to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileFilterLinksListAsync(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback<ProfileFilterLinks> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementProfileFilterLinksListValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);
        Type localVarReturnType = new TypeToken<ProfileFilterLinks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementProfileFilterLinksPatch
     * @param accountId Account ID to which profile filter link belongs. (required)
     * @param webPropertyId Web property Id to which profile filter link belongs (required)
     * @param profileId Profile ID to which filter link belongs (required)
     * @param linkId ID of the profile filter link to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profileFilterLink  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileFilterLinksPatchCall(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ProfileFilterLink profileFilterLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = profileFilterLink;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "linkId" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementProfileFilterLinksPatchValidateBeforeCall(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ProfileFilterLink profileFilterLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementProfileFilterLinksPatch(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementProfileFilterLinksPatch(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementProfileFilterLinksPatch(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling analyticsManagementProfileFilterLinksPatch(Async)");
        }

        return analyticsManagementProfileFilterLinksPatchCall(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profileFilterLink, _callback);

    }

    /**
     * 
     * Update an existing profile filter link. This method supports patch semantics.
     * @param accountId Account ID to which profile filter link belongs. (required)
     * @param webPropertyId Web property Id to which profile filter link belongs (required)
     * @param profileId Profile ID to which filter link belongs (required)
     * @param linkId ID of the profile filter link to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profileFilterLink  (optional)
     * @return ProfileFilterLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ProfileFilterLink analyticsManagementProfileFilterLinksPatch(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ProfileFilterLink profileFilterLink) throws ApiException {
        ApiResponse<ProfileFilterLink> localVarResp = analyticsManagementProfileFilterLinksPatchWithHttpInfo(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profileFilterLink);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an existing profile filter link. This method supports patch semantics.
     * @param accountId Account ID to which profile filter link belongs. (required)
     * @param webPropertyId Web property Id to which profile filter link belongs (required)
     * @param profileId Profile ID to which filter link belongs (required)
     * @param linkId ID of the profile filter link to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profileFilterLink  (optional)
     * @return ApiResponse&lt;ProfileFilterLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileFilterLink> analyticsManagementProfileFilterLinksPatchWithHttpInfo(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ProfileFilterLink profileFilterLink) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementProfileFilterLinksPatchValidateBeforeCall(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profileFilterLink, null);
        Type localVarReturnType = new TypeToken<ProfileFilterLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an existing profile filter link. This method supports patch semantics.
     * @param accountId Account ID to which profile filter link belongs. (required)
     * @param webPropertyId Web property Id to which profile filter link belongs (required)
     * @param profileId Profile ID to which filter link belongs (required)
     * @param linkId ID of the profile filter link to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profileFilterLink  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileFilterLinksPatchAsync(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ProfileFilterLink profileFilterLink, final ApiCallback<ProfileFilterLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementProfileFilterLinksPatchValidateBeforeCall(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profileFilterLink, _callback);
        Type localVarReturnType = new TypeToken<ProfileFilterLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementProfileFilterLinksUpdate
     * @param accountId Account ID to which profile filter link belongs. (required)
     * @param webPropertyId Web property Id to which profile filter link belongs (required)
     * @param profileId Profile ID to which filter link belongs (required)
     * @param linkId ID of the profile filter link to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profileFilterLink  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileFilterLinksUpdateCall(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ProfileFilterLink profileFilterLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = profileFilterLink;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "linkId" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementProfileFilterLinksUpdateValidateBeforeCall(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ProfileFilterLink profileFilterLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementProfileFilterLinksUpdate(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementProfileFilterLinksUpdate(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementProfileFilterLinksUpdate(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling analyticsManagementProfileFilterLinksUpdate(Async)");
        }

        return analyticsManagementProfileFilterLinksUpdateCall(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profileFilterLink, _callback);

    }

    /**
     * 
     * Update an existing profile filter link.
     * @param accountId Account ID to which profile filter link belongs. (required)
     * @param webPropertyId Web property Id to which profile filter link belongs (required)
     * @param profileId Profile ID to which filter link belongs (required)
     * @param linkId ID of the profile filter link to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profileFilterLink  (optional)
     * @return ProfileFilterLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ProfileFilterLink analyticsManagementProfileFilterLinksUpdate(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ProfileFilterLink profileFilterLink) throws ApiException {
        ApiResponse<ProfileFilterLink> localVarResp = analyticsManagementProfileFilterLinksUpdateWithHttpInfo(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profileFilterLink);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an existing profile filter link.
     * @param accountId Account ID to which profile filter link belongs. (required)
     * @param webPropertyId Web property Id to which profile filter link belongs (required)
     * @param profileId Profile ID to which filter link belongs (required)
     * @param linkId ID of the profile filter link to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profileFilterLink  (optional)
     * @return ApiResponse&lt;ProfileFilterLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileFilterLink> analyticsManagementProfileFilterLinksUpdateWithHttpInfo(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ProfileFilterLink profileFilterLink) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementProfileFilterLinksUpdateValidateBeforeCall(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profileFilterLink, null);
        Type localVarReturnType = new TypeToken<ProfileFilterLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an existing profile filter link.
     * @param accountId Account ID to which profile filter link belongs. (required)
     * @param webPropertyId Web property Id to which profile filter link belongs (required)
     * @param profileId Profile ID to which filter link belongs (required)
     * @param linkId ID of the profile filter link to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profileFilterLink  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileFilterLinksUpdateAsync(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, ProfileFilterLink profileFilterLink, final ApiCallback<ProfileFilterLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementProfileFilterLinksUpdateValidateBeforeCall(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profileFilterLink, _callback);
        Type localVarReturnType = new TypeToken<ProfileFilterLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementProfileUserLinksDelete
     * @param accountId Account ID to delete the user link for. (required)
     * @param webPropertyId Web Property ID to delete the user link for. (required)
     * @param profileId View (Profile) ID to delete the user link for. (required)
     * @param linkId Link ID to delete the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileUserLinksDeleteCall(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "linkId" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementProfileUserLinksDeleteValidateBeforeCall(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementProfileUserLinksDelete(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementProfileUserLinksDelete(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementProfileUserLinksDelete(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling analyticsManagementProfileUserLinksDelete(Async)");
        }

        return analyticsManagementProfileUserLinksDeleteCall(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Removes a user from the given view (profile).
     * @param accountId Account ID to delete the user link for. (required)
     * @param webPropertyId Web Property ID to delete the user link for. (required)
     * @param profileId View (Profile) ID to delete the user link for. (required)
     * @param linkId Link ID to delete the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void analyticsManagementProfileUserLinksDelete(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        analyticsManagementProfileUserLinksDeleteWithHttpInfo(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
    }

    /**
     * 
     * Removes a user from the given view (profile).
     * @param accountId Account ID to delete the user link for. (required)
     * @param webPropertyId Web Property ID to delete the user link for. (required)
     * @param profileId View (Profile) ID to delete the user link for. (required)
     * @param linkId Link ID to delete the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyticsManagementProfileUserLinksDeleteWithHttpInfo(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementProfileUserLinksDeleteValidateBeforeCall(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes a user from the given view (profile).
     * @param accountId Account ID to delete the user link for. (required)
     * @param webPropertyId Web Property ID to delete the user link for. (required)
     * @param profileId View (Profile) ID to delete the user link for. (required)
     * @param linkId Link ID to delete the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileUserLinksDeleteAsync(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementProfileUserLinksDeleteValidateBeforeCall(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementProfileUserLinksInsert
     * @param accountId Account ID to create the user link for. (required)
     * @param webPropertyId Web Property ID to create the user link for. (required)
     * @param profileId View (Profile) ID to create the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileUserLinksInsertCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityUserLink;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementProfileUserLinksInsertValidateBeforeCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementProfileUserLinksInsert(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementProfileUserLinksInsert(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementProfileUserLinksInsert(Async)");
        }

        return analyticsManagementProfileUserLinksInsertCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink, _callback);

    }

    /**
     * 
     * Adds a new user to the given view (profile).
     * @param accountId Account ID to create the user link for. (required)
     * @param webPropertyId Web Property ID to create the user link for. (required)
     * @param profileId View (Profile) ID to create the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @return EntityUserLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EntityUserLink analyticsManagementProfileUserLinksInsert(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink) throws ApiException {
        ApiResponse<EntityUserLink> localVarResp = analyticsManagementProfileUserLinksInsertWithHttpInfo(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a new user to the given view (profile).
     * @param accountId Account ID to create the user link for. (required)
     * @param webPropertyId Web Property ID to create the user link for. (required)
     * @param profileId View (Profile) ID to create the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @return ApiResponse&lt;EntityUserLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityUserLink> analyticsManagementProfileUserLinksInsertWithHttpInfo(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementProfileUserLinksInsertValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink, null);
        Type localVarReturnType = new TypeToken<EntityUserLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a new user to the given view (profile).
     * @param accountId Account ID to create the user link for. (required)
     * @param webPropertyId Web Property ID to create the user link for. (required)
     * @param profileId View (Profile) ID to create the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileUserLinksInsertAsync(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink, final ApiCallback<EntityUserLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementProfileUserLinksInsertValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink, _callback);
        Type localVarReturnType = new TypeToken<EntityUserLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementProfileUserLinksList
     * @param accountId Account ID which the given view (profile) belongs to. (required)
     * @param webPropertyId Web Property ID which the given view (profile) belongs to. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties that user has access to. (required)
     * @param profileId View (Profile) ID to retrieve the profile-user links for. Can either be a specific profile ID or &#39;~all&#39;, which refers to all the profiles that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of profile-user links to include in this response. (optional)
     * @param startIndex An index of the first profile-user link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileUserLinksListCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementProfileUserLinksListValidateBeforeCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementProfileUserLinksList(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementProfileUserLinksList(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementProfileUserLinksList(Async)");
        }

        return analyticsManagementProfileUserLinksListCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);

    }

    /**
     * 
     * Lists profile-user links for a given view (profile).
     * @param accountId Account ID which the given view (profile) belongs to. (required)
     * @param webPropertyId Web Property ID which the given view (profile) belongs to. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties that user has access to. (required)
     * @param profileId View (Profile) ID to retrieve the profile-user links for. Can either be a specific profile ID or &#39;~all&#39;, which refers to all the profiles that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of profile-user links to include in this response. (optional)
     * @param startIndex An index of the first profile-user link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return EntityUserLinks
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EntityUserLinks analyticsManagementProfileUserLinksList(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        ApiResponse<EntityUserLinks> localVarResp = analyticsManagementProfileUserLinksListWithHttpInfo(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists profile-user links for a given view (profile).
     * @param accountId Account ID which the given view (profile) belongs to. (required)
     * @param webPropertyId Web Property ID which the given view (profile) belongs to. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties that user has access to. (required)
     * @param profileId View (Profile) ID to retrieve the profile-user links for. Can either be a specific profile ID or &#39;~all&#39;, which refers to all the profiles that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of profile-user links to include in this response. (optional)
     * @param startIndex An index of the first profile-user link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;EntityUserLinks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityUserLinks> analyticsManagementProfileUserLinksListWithHttpInfo(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementProfileUserLinksListValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, null);
        Type localVarReturnType = new TypeToken<EntityUserLinks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists profile-user links for a given view (profile).
     * @param accountId Account ID which the given view (profile) belongs to. (required)
     * @param webPropertyId Web Property ID which the given view (profile) belongs to. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties that user has access to. (required)
     * @param profileId View (Profile) ID to retrieve the profile-user links for. Can either be a specific profile ID or &#39;~all&#39;, which refers to all the profiles that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of profile-user links to include in this response. (optional)
     * @param startIndex An index of the first profile-user link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileUserLinksListAsync(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback<EntityUserLinks> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementProfileUserLinksListValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);
        Type localVarReturnType = new TypeToken<EntityUserLinks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementProfileUserLinksUpdate
     * @param accountId Account ID to update the user link for. (required)
     * @param webPropertyId Web Property ID to update the user link for. (required)
     * @param profileId View (Profile ID) to update the user link for. (required)
     * @param linkId Link ID to update the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileUserLinksUpdateCall(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityUserLink;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "linkId" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementProfileUserLinksUpdateValidateBeforeCall(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementProfileUserLinksUpdate(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementProfileUserLinksUpdate(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementProfileUserLinksUpdate(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling analyticsManagementProfileUserLinksUpdate(Async)");
        }

        return analyticsManagementProfileUserLinksUpdateCall(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink, _callback);

    }

    /**
     * 
     * Updates permissions for an existing user on the given view (profile).
     * @param accountId Account ID to update the user link for. (required)
     * @param webPropertyId Web Property ID to update the user link for. (required)
     * @param profileId View (Profile ID) to update the user link for. (required)
     * @param linkId Link ID to update the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @return EntityUserLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EntityUserLink analyticsManagementProfileUserLinksUpdate(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink) throws ApiException {
        ApiResponse<EntityUserLink> localVarResp = analyticsManagementProfileUserLinksUpdateWithHttpInfo(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates permissions for an existing user on the given view (profile).
     * @param accountId Account ID to update the user link for. (required)
     * @param webPropertyId Web Property ID to update the user link for. (required)
     * @param profileId View (Profile ID) to update the user link for. (required)
     * @param linkId Link ID to update the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @return ApiResponse&lt;EntityUserLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityUserLink> analyticsManagementProfileUserLinksUpdateWithHttpInfo(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementProfileUserLinksUpdateValidateBeforeCall(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink, null);
        Type localVarReturnType = new TypeToken<EntityUserLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates permissions for an existing user on the given view (profile).
     * @param accountId Account ID to update the user link for. (required)
     * @param webPropertyId Web Property ID to update the user link for. (required)
     * @param profileId View (Profile ID) to update the user link for. (required)
     * @param linkId Link ID to update the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfileUserLinksUpdateAsync(String accountId, String webPropertyId, String profileId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink, final ApiCallback<EntityUserLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementProfileUserLinksUpdateValidateBeforeCall(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink, _callback);
        Type localVarReturnType = new TypeToken<EntityUserLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementProfilesDelete
     * @param accountId Account ID to delete the view (profile) for. (required)
     * @param webPropertyId Web property ID to delete the view (profile) for. (required)
     * @param profileId ID of the view (profile) to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfilesDeleteCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementProfilesDeleteValidateBeforeCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementProfilesDelete(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementProfilesDelete(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementProfilesDelete(Async)");
        }

        return analyticsManagementProfilesDeleteCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Deletes a view (profile).
     * @param accountId Account ID to delete the view (profile) for. (required)
     * @param webPropertyId Web property ID to delete the view (profile) for. (required)
     * @param profileId ID of the view (profile) to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void analyticsManagementProfilesDelete(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        analyticsManagementProfilesDeleteWithHttpInfo(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
    }

    /**
     * 
     * Deletes a view (profile).
     * @param accountId Account ID to delete the view (profile) for. (required)
     * @param webPropertyId Web property ID to delete the view (profile) for. (required)
     * @param profileId ID of the view (profile) to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyticsManagementProfilesDeleteWithHttpInfo(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementProfilesDeleteValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a view (profile).
     * @param accountId Account ID to delete the view (profile) for. (required)
     * @param webPropertyId Web property ID to delete the view (profile) for. (required)
     * @param profileId ID of the view (profile) to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfilesDeleteAsync(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementProfilesDeleteValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementProfilesGet
     * @param accountId Account ID to retrieve the view (profile) for. (required)
     * @param webPropertyId Web property ID to retrieve the view (profile) for. (required)
     * @param profileId View (Profile) ID to retrieve the view (profile) for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfilesGetCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementProfilesGetValidateBeforeCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementProfilesGet(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementProfilesGet(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementProfilesGet(Async)");
        }

        return analyticsManagementProfilesGetCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Gets a view (profile) to which the user has access.
     * @param accountId Account ID to retrieve the view (profile) for. (required)
     * @param webPropertyId Web property ID to retrieve the view (profile) for. (required)
     * @param profileId View (Profile) ID to retrieve the view (profile) for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Profile analyticsManagementProfilesGet(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<Profile> localVarResp = analyticsManagementProfilesGetWithHttpInfo(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a view (profile) to which the user has access.
     * @param accountId Account ID to retrieve the view (profile) for. (required)
     * @param webPropertyId Web property ID to retrieve the view (profile) for. (required)
     * @param profileId View (Profile) ID to retrieve the view (profile) for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Profile> analyticsManagementProfilesGetWithHttpInfo(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementProfilesGetValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a view (profile) to which the user has access.
     * @param accountId Account ID to retrieve the view (profile) for. (required)
     * @param webPropertyId Web property ID to retrieve the view (profile) for. (required)
     * @param profileId View (Profile) ID to retrieve the view (profile) for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfilesGetAsync(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Profile> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementProfilesGetValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementProfilesInsert
     * @param accountId Account ID to create the view (profile) for. (required)
     * @param webPropertyId Web property ID to create the view (profile) for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profile  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfilesInsertCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Profile profile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = profile;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementProfilesInsertValidateBeforeCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Profile profile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementProfilesInsert(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementProfilesInsert(Async)");
        }

        return analyticsManagementProfilesInsertCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profile, _callback);

    }

    /**
     * 
     * Create a new view (profile).
     * @param accountId Account ID to create the view (profile) for. (required)
     * @param webPropertyId Web property ID to create the view (profile) for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profile  (optional)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Profile analyticsManagementProfilesInsert(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Profile profile) throws ApiException {
        ApiResponse<Profile> localVarResp = analyticsManagementProfilesInsertWithHttpInfo(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profile);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new view (profile).
     * @param accountId Account ID to create the view (profile) for. (required)
     * @param webPropertyId Web property ID to create the view (profile) for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profile  (optional)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Profile> analyticsManagementProfilesInsertWithHttpInfo(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Profile profile) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementProfilesInsertValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profile, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new view (profile).
     * @param accountId Account ID to create the view (profile) for. (required)
     * @param webPropertyId Web property ID to create the view (profile) for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profile  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfilesInsertAsync(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Profile profile, final ApiCallback<Profile> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementProfilesInsertValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profile, _callback);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementProfilesList
     * @param accountId Account ID for the view (profiles) to retrieve. Can either be a specific account ID or &#39;~all&#39;, which refers to all the accounts to which the user has access. (required)
     * @param webPropertyId Web property ID for the views (profiles) to retrieve. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties to which the user has access. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of views (profiles) to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfilesListCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementProfilesListValidateBeforeCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementProfilesList(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementProfilesList(Async)");
        }

        return analyticsManagementProfilesListCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);

    }

    /**
     * 
     * Lists views (profiles) to which the user has access.
     * @param accountId Account ID for the view (profiles) to retrieve. Can either be a specific account ID or &#39;~all&#39;, which refers to all the accounts to which the user has access. (required)
     * @param webPropertyId Web property ID for the views (profiles) to retrieve. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties to which the user has access. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of views (profiles) to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return Profiles
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Profiles analyticsManagementProfilesList(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        ApiResponse<Profiles> localVarResp = analyticsManagementProfilesListWithHttpInfo(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists views (profiles) to which the user has access.
     * @param accountId Account ID for the view (profiles) to retrieve. Can either be a specific account ID or &#39;~all&#39;, which refers to all the accounts to which the user has access. (required)
     * @param webPropertyId Web property ID for the views (profiles) to retrieve. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties to which the user has access. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of views (profiles) to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;Profiles&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Profiles> analyticsManagementProfilesListWithHttpInfo(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementProfilesListValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, null);
        Type localVarReturnType = new TypeToken<Profiles>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists views (profiles) to which the user has access.
     * @param accountId Account ID for the view (profiles) to retrieve. Can either be a specific account ID or &#39;~all&#39;, which refers to all the accounts to which the user has access. (required)
     * @param webPropertyId Web property ID for the views (profiles) to retrieve. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties to which the user has access. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of views (profiles) to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfilesListAsync(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback<Profiles> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementProfilesListValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);
        Type localVarReturnType = new TypeToken<Profiles>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementProfilesPatch
     * @param accountId Account ID to which the view (profile) belongs (required)
     * @param webPropertyId Web property ID to which the view (profile) belongs (required)
     * @param profileId ID of the view (profile) to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profile  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfilesPatchCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Profile profile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = profile;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementProfilesPatchValidateBeforeCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Profile profile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementProfilesPatch(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementProfilesPatch(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementProfilesPatch(Async)");
        }

        return analyticsManagementProfilesPatchCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profile, _callback);

    }

    /**
     * 
     * Updates an existing view (profile). This method supports patch semantics.
     * @param accountId Account ID to which the view (profile) belongs (required)
     * @param webPropertyId Web property ID to which the view (profile) belongs (required)
     * @param profileId ID of the view (profile) to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profile  (optional)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Profile analyticsManagementProfilesPatch(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Profile profile) throws ApiException {
        ApiResponse<Profile> localVarResp = analyticsManagementProfilesPatchWithHttpInfo(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profile);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing view (profile). This method supports patch semantics.
     * @param accountId Account ID to which the view (profile) belongs (required)
     * @param webPropertyId Web property ID to which the view (profile) belongs (required)
     * @param profileId ID of the view (profile) to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profile  (optional)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Profile> analyticsManagementProfilesPatchWithHttpInfo(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Profile profile) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementProfilesPatchValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profile, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing view (profile). This method supports patch semantics.
     * @param accountId Account ID to which the view (profile) belongs (required)
     * @param webPropertyId Web property ID to which the view (profile) belongs (required)
     * @param profileId ID of the view (profile) to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profile  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfilesPatchAsync(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Profile profile, final ApiCallback<Profile> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementProfilesPatchValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profile, _callback);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementProfilesUpdate
     * @param accountId Account ID to which the view (profile) belongs (required)
     * @param webPropertyId Web property ID to which the view (profile) belongs (required)
     * @param profileId ID of the view (profile) to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profile  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfilesUpdateCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Profile profile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = profile;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementProfilesUpdateValidateBeforeCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Profile profile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementProfilesUpdate(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementProfilesUpdate(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementProfilesUpdate(Async)");
        }

        return analyticsManagementProfilesUpdateCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profile, _callback);

    }

    /**
     * 
     * Updates an existing view (profile).
     * @param accountId Account ID to which the view (profile) belongs (required)
     * @param webPropertyId Web property ID to which the view (profile) belongs (required)
     * @param profileId ID of the view (profile) to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profile  (optional)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Profile analyticsManagementProfilesUpdate(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Profile profile) throws ApiException {
        ApiResponse<Profile> localVarResp = analyticsManagementProfilesUpdateWithHttpInfo(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profile);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing view (profile).
     * @param accountId Account ID to which the view (profile) belongs (required)
     * @param webPropertyId Web property ID to which the view (profile) belongs (required)
     * @param profileId ID of the view (profile) to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profile  (optional)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Profile> analyticsManagementProfilesUpdateWithHttpInfo(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Profile profile) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementProfilesUpdateValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profile, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing view (profile).
     * @param accountId Account ID to which the view (profile) belongs (required)
     * @param webPropertyId Web property ID to which the view (profile) belongs (required)
     * @param profileId ID of the view (profile) to be updated. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param profile  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementProfilesUpdateAsync(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Profile profile, final ApiCallback<Profile> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementProfilesUpdateValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profile, _callback);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementRemarketingAudienceDelete
     * @param accountId Account ID to which the remarketing audience belongs. (required)
     * @param webPropertyId Web property ID to which the remarketing audience belongs. (required)
     * @param remarketingAudienceId The ID of the remarketing audience to delete. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementRemarketingAudienceDeleteCall(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "remarketingAudienceId" + "}", localVarApiClient.escapeString(remarketingAudienceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementRemarketingAudienceDeleteValidateBeforeCall(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementRemarketingAudienceDelete(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementRemarketingAudienceDelete(Async)");
        }

        // verify the required parameter 'remarketingAudienceId' is set
        if (remarketingAudienceId == null) {
            throw new ApiException("Missing the required parameter 'remarketingAudienceId' when calling analyticsManagementRemarketingAudienceDelete(Async)");
        }

        return analyticsManagementRemarketingAudienceDeleteCall(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Delete a remarketing audience.
     * @param accountId Account ID to which the remarketing audience belongs. (required)
     * @param webPropertyId Web property ID to which the remarketing audience belongs. (required)
     * @param remarketingAudienceId The ID of the remarketing audience to delete. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void analyticsManagementRemarketingAudienceDelete(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        analyticsManagementRemarketingAudienceDeleteWithHttpInfo(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
    }

    /**
     * 
     * Delete a remarketing audience.
     * @param accountId Account ID to which the remarketing audience belongs. (required)
     * @param webPropertyId Web property ID to which the remarketing audience belongs. (required)
     * @param remarketingAudienceId The ID of the remarketing audience to delete. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyticsManagementRemarketingAudienceDeleteWithHttpInfo(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementRemarketingAudienceDeleteValidateBeforeCall(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a remarketing audience.
     * @param accountId Account ID to which the remarketing audience belongs. (required)
     * @param webPropertyId Web property ID to which the remarketing audience belongs. (required)
     * @param remarketingAudienceId The ID of the remarketing audience to delete. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementRemarketingAudienceDeleteAsync(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementRemarketingAudienceDeleteValidateBeforeCall(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementRemarketingAudienceGet
     * @param accountId The account ID of the remarketing audience to retrieve. (required)
     * @param webPropertyId The web property ID of the remarketing audience to retrieve. (required)
     * @param remarketingAudienceId The ID of the remarketing audience to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementRemarketingAudienceGetCall(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "remarketingAudienceId" + "}", localVarApiClient.escapeString(remarketingAudienceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementRemarketingAudienceGetValidateBeforeCall(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementRemarketingAudienceGet(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementRemarketingAudienceGet(Async)");
        }

        // verify the required parameter 'remarketingAudienceId' is set
        if (remarketingAudienceId == null) {
            throw new ApiException("Missing the required parameter 'remarketingAudienceId' when calling analyticsManagementRemarketingAudienceGet(Async)");
        }

        return analyticsManagementRemarketingAudienceGetCall(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Gets a remarketing audience to which the user has access.
     * @param accountId The account ID of the remarketing audience to retrieve. (required)
     * @param webPropertyId The web property ID of the remarketing audience to retrieve. (required)
     * @param remarketingAudienceId The ID of the remarketing audience to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return RemarketingAudience
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public RemarketingAudience analyticsManagementRemarketingAudienceGet(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<RemarketingAudience> localVarResp = analyticsManagementRemarketingAudienceGetWithHttpInfo(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a remarketing audience to which the user has access.
     * @param accountId The account ID of the remarketing audience to retrieve. (required)
     * @param webPropertyId The web property ID of the remarketing audience to retrieve. (required)
     * @param remarketingAudienceId The ID of the remarketing audience to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;RemarketingAudience&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemarketingAudience> analyticsManagementRemarketingAudienceGetWithHttpInfo(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementRemarketingAudienceGetValidateBeforeCall(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<RemarketingAudience>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a remarketing audience to which the user has access.
     * @param accountId The account ID of the remarketing audience to retrieve. (required)
     * @param webPropertyId The web property ID of the remarketing audience to retrieve. (required)
     * @param remarketingAudienceId The ID of the remarketing audience to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementRemarketingAudienceGetAsync(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<RemarketingAudience> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementRemarketingAudienceGetValidateBeforeCall(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<RemarketingAudience>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementRemarketingAudienceInsert
     * @param accountId The account ID for which to create the remarketing audience. (required)
     * @param webPropertyId Web property ID for which to create the remarketing audience. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param remarketingAudience  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementRemarketingAudienceInsertCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, RemarketingAudience remarketingAudience, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = remarketingAudience;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementRemarketingAudienceInsertValidateBeforeCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, RemarketingAudience remarketingAudience, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementRemarketingAudienceInsert(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementRemarketingAudienceInsert(Async)");
        }

        return analyticsManagementRemarketingAudienceInsertCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, remarketingAudience, _callback);

    }

    /**
     * 
     * Creates a new remarketing audience.
     * @param accountId The account ID for which to create the remarketing audience. (required)
     * @param webPropertyId Web property ID for which to create the remarketing audience. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param remarketingAudience  (optional)
     * @return RemarketingAudience
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public RemarketingAudience analyticsManagementRemarketingAudienceInsert(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, RemarketingAudience remarketingAudience) throws ApiException {
        ApiResponse<RemarketingAudience> localVarResp = analyticsManagementRemarketingAudienceInsertWithHttpInfo(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, remarketingAudience);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new remarketing audience.
     * @param accountId The account ID for which to create the remarketing audience. (required)
     * @param webPropertyId Web property ID for which to create the remarketing audience. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param remarketingAudience  (optional)
     * @return ApiResponse&lt;RemarketingAudience&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemarketingAudience> analyticsManagementRemarketingAudienceInsertWithHttpInfo(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, RemarketingAudience remarketingAudience) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementRemarketingAudienceInsertValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, remarketingAudience, null);
        Type localVarReturnType = new TypeToken<RemarketingAudience>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new remarketing audience.
     * @param accountId The account ID for which to create the remarketing audience. (required)
     * @param webPropertyId Web property ID for which to create the remarketing audience. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param remarketingAudience  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementRemarketingAudienceInsertAsync(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, RemarketingAudience remarketingAudience, final ApiCallback<RemarketingAudience> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementRemarketingAudienceInsertValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, remarketingAudience, _callback);
        Type localVarReturnType = new TypeToken<RemarketingAudience>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementRemarketingAudienceList
     * @param accountId The account ID of the remarketing audiences to retrieve. (required)
     * @param webPropertyId The web property ID of the remarketing audiences to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of remarketing audiences to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param type  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementRemarketingAudienceListCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementRemarketingAudienceListValidateBeforeCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementRemarketingAudienceList(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementRemarketingAudienceList(Async)");
        }

        return analyticsManagementRemarketingAudienceListCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, type, _callback);

    }

    /**
     * 
     * Lists remarketing audiences to which the user has access.
     * @param accountId The account ID of the remarketing audiences to retrieve. (required)
     * @param webPropertyId The web property ID of the remarketing audiences to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of remarketing audiences to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param type  (optional)
     * @return RemarketingAudiences
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public RemarketingAudiences analyticsManagementRemarketingAudienceList(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, String type) throws ApiException {
        ApiResponse<RemarketingAudiences> localVarResp = analyticsManagementRemarketingAudienceListWithHttpInfo(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, type);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists remarketing audiences to which the user has access.
     * @param accountId The account ID of the remarketing audiences to retrieve. (required)
     * @param webPropertyId The web property ID of the remarketing audiences to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of remarketing audiences to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param type  (optional)
     * @return ApiResponse&lt;RemarketingAudiences&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemarketingAudiences> analyticsManagementRemarketingAudienceListWithHttpInfo(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, String type) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementRemarketingAudienceListValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, type, null);
        Type localVarReturnType = new TypeToken<RemarketingAudiences>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists remarketing audiences to which the user has access.
     * @param accountId The account ID of the remarketing audiences to retrieve. (required)
     * @param webPropertyId The web property ID of the remarketing audiences to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of remarketing audiences to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param type  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementRemarketingAudienceListAsync(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, String type, final ApiCallback<RemarketingAudiences> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementRemarketingAudienceListValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, type, _callback);
        Type localVarReturnType = new TypeToken<RemarketingAudiences>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementRemarketingAudiencePatch
     * @param accountId The account ID of the remarketing audience to update. (required)
     * @param webPropertyId The web property ID of the remarketing audience to update. (required)
     * @param remarketingAudienceId The ID of the remarketing audience to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param remarketingAudience  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementRemarketingAudiencePatchCall(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, RemarketingAudience remarketingAudience, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = remarketingAudience;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "remarketingAudienceId" + "}", localVarApiClient.escapeString(remarketingAudienceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementRemarketingAudiencePatchValidateBeforeCall(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, RemarketingAudience remarketingAudience, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementRemarketingAudiencePatch(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementRemarketingAudiencePatch(Async)");
        }

        // verify the required parameter 'remarketingAudienceId' is set
        if (remarketingAudienceId == null) {
            throw new ApiException("Missing the required parameter 'remarketingAudienceId' when calling analyticsManagementRemarketingAudiencePatch(Async)");
        }

        return analyticsManagementRemarketingAudiencePatchCall(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, remarketingAudience, _callback);

    }

    /**
     * 
     * Updates an existing remarketing audience. This method supports patch semantics.
     * @param accountId The account ID of the remarketing audience to update. (required)
     * @param webPropertyId The web property ID of the remarketing audience to update. (required)
     * @param remarketingAudienceId The ID of the remarketing audience to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param remarketingAudience  (optional)
     * @return RemarketingAudience
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public RemarketingAudience analyticsManagementRemarketingAudiencePatch(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, RemarketingAudience remarketingAudience) throws ApiException {
        ApiResponse<RemarketingAudience> localVarResp = analyticsManagementRemarketingAudiencePatchWithHttpInfo(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, remarketingAudience);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing remarketing audience. This method supports patch semantics.
     * @param accountId The account ID of the remarketing audience to update. (required)
     * @param webPropertyId The web property ID of the remarketing audience to update. (required)
     * @param remarketingAudienceId The ID of the remarketing audience to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param remarketingAudience  (optional)
     * @return ApiResponse&lt;RemarketingAudience&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemarketingAudience> analyticsManagementRemarketingAudiencePatchWithHttpInfo(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, RemarketingAudience remarketingAudience) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementRemarketingAudiencePatchValidateBeforeCall(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, remarketingAudience, null);
        Type localVarReturnType = new TypeToken<RemarketingAudience>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing remarketing audience. This method supports patch semantics.
     * @param accountId The account ID of the remarketing audience to update. (required)
     * @param webPropertyId The web property ID of the remarketing audience to update. (required)
     * @param remarketingAudienceId The ID of the remarketing audience to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param remarketingAudience  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementRemarketingAudiencePatchAsync(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, RemarketingAudience remarketingAudience, final ApiCallback<RemarketingAudience> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementRemarketingAudiencePatchValidateBeforeCall(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, remarketingAudience, _callback);
        Type localVarReturnType = new TypeToken<RemarketingAudience>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementRemarketingAudienceUpdate
     * @param accountId The account ID of the remarketing audience to update. (required)
     * @param webPropertyId The web property ID of the remarketing audience to update. (required)
     * @param remarketingAudienceId The ID of the remarketing audience to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param remarketingAudience  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementRemarketingAudienceUpdateCall(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, RemarketingAudience remarketingAudience, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = remarketingAudience;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "remarketingAudienceId" + "}", localVarApiClient.escapeString(remarketingAudienceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementRemarketingAudienceUpdateValidateBeforeCall(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, RemarketingAudience remarketingAudience, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementRemarketingAudienceUpdate(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementRemarketingAudienceUpdate(Async)");
        }

        // verify the required parameter 'remarketingAudienceId' is set
        if (remarketingAudienceId == null) {
            throw new ApiException("Missing the required parameter 'remarketingAudienceId' when calling analyticsManagementRemarketingAudienceUpdate(Async)");
        }

        return analyticsManagementRemarketingAudienceUpdateCall(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, remarketingAudience, _callback);

    }

    /**
     * 
     * Updates an existing remarketing audience.
     * @param accountId The account ID of the remarketing audience to update. (required)
     * @param webPropertyId The web property ID of the remarketing audience to update. (required)
     * @param remarketingAudienceId The ID of the remarketing audience to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param remarketingAudience  (optional)
     * @return RemarketingAudience
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public RemarketingAudience analyticsManagementRemarketingAudienceUpdate(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, RemarketingAudience remarketingAudience) throws ApiException {
        ApiResponse<RemarketingAudience> localVarResp = analyticsManagementRemarketingAudienceUpdateWithHttpInfo(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, remarketingAudience);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing remarketing audience.
     * @param accountId The account ID of the remarketing audience to update. (required)
     * @param webPropertyId The web property ID of the remarketing audience to update. (required)
     * @param remarketingAudienceId The ID of the remarketing audience to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param remarketingAudience  (optional)
     * @return ApiResponse&lt;RemarketingAudience&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemarketingAudience> analyticsManagementRemarketingAudienceUpdateWithHttpInfo(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, RemarketingAudience remarketingAudience) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementRemarketingAudienceUpdateValidateBeforeCall(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, remarketingAudience, null);
        Type localVarReturnType = new TypeToken<RemarketingAudience>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing remarketing audience.
     * @param accountId The account ID of the remarketing audience to update. (required)
     * @param webPropertyId The web property ID of the remarketing audience to update. (required)
     * @param remarketingAudienceId The ID of the remarketing audience to update. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param remarketingAudience  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementRemarketingAudienceUpdateAsync(String accountId, String webPropertyId, String remarketingAudienceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, RemarketingAudience remarketingAudience, final ApiCallback<RemarketingAudience> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementRemarketingAudienceUpdateValidateBeforeCall(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, remarketingAudience, _callback);
        Type localVarReturnType = new TypeToken<RemarketingAudience>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementSegmentsList
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of segments to include in this response. (optional)
     * @param startIndex An index of the first segment to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementSegmentsListCall(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/segments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementSegmentsListValidateBeforeCall(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        return analyticsManagementSegmentsListCall(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);

    }

    /**
     * 
     * Lists segments to which the user has access.
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of segments to include in this response. (optional)
     * @param startIndex An index of the first segment to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return Segments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Segments analyticsManagementSegmentsList(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        ApiResponse<Segments> localVarResp = analyticsManagementSegmentsListWithHttpInfo(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists segments to which the user has access.
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of segments to include in this response. (optional)
     * @param startIndex An index of the first segment to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;Segments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Segments> analyticsManagementSegmentsListWithHttpInfo(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementSegmentsListValidateBeforeCall(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, null);
        Type localVarReturnType = new TypeToken<Segments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists segments to which the user has access.
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of segments to include in this response. (optional)
     * @param startIndex An index of the first segment to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementSegmentsListAsync(String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback<Segments> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementSegmentsListValidateBeforeCall(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);
        Type localVarReturnType = new TypeToken<Segments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementUnsampledReportsDelete
     * @param accountId Account ID to delete the unsampled report for. (required)
     * @param webPropertyId Web property ID to delete the unsampled reports for. (required)
     * @param profileId View (Profile) ID to delete the unsampled report for. (required)
     * @param unsampledReportId ID of the unsampled report to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementUnsampledReportsDeleteCall(String accountId, String webPropertyId, String profileId, String unsampledReportId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "unsampledReportId" + "}", localVarApiClient.escapeString(unsampledReportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementUnsampledReportsDeleteValidateBeforeCall(String accountId, String webPropertyId, String profileId, String unsampledReportId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementUnsampledReportsDelete(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementUnsampledReportsDelete(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementUnsampledReportsDelete(Async)");
        }

        // verify the required parameter 'unsampledReportId' is set
        if (unsampledReportId == null) {
            throw new ApiException("Missing the required parameter 'unsampledReportId' when calling analyticsManagementUnsampledReportsDelete(Async)");
        }

        return analyticsManagementUnsampledReportsDeleteCall(accountId, webPropertyId, profileId, unsampledReportId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Deletes an unsampled report.
     * @param accountId Account ID to delete the unsampled report for. (required)
     * @param webPropertyId Web property ID to delete the unsampled reports for. (required)
     * @param profileId View (Profile) ID to delete the unsampled report for. (required)
     * @param unsampledReportId ID of the unsampled report to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void analyticsManagementUnsampledReportsDelete(String accountId, String webPropertyId, String profileId, String unsampledReportId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        analyticsManagementUnsampledReportsDeleteWithHttpInfo(accountId, webPropertyId, profileId, unsampledReportId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
    }

    /**
     * 
     * Deletes an unsampled report.
     * @param accountId Account ID to delete the unsampled report for. (required)
     * @param webPropertyId Web property ID to delete the unsampled reports for. (required)
     * @param profileId View (Profile) ID to delete the unsampled report for. (required)
     * @param unsampledReportId ID of the unsampled report to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyticsManagementUnsampledReportsDeleteWithHttpInfo(String accountId, String webPropertyId, String profileId, String unsampledReportId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementUnsampledReportsDeleteValidateBeforeCall(accountId, webPropertyId, profileId, unsampledReportId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an unsampled report.
     * @param accountId Account ID to delete the unsampled report for. (required)
     * @param webPropertyId Web property ID to delete the unsampled reports for. (required)
     * @param profileId View (Profile) ID to delete the unsampled report for. (required)
     * @param unsampledReportId ID of the unsampled report to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementUnsampledReportsDeleteAsync(String accountId, String webPropertyId, String profileId, String unsampledReportId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementUnsampledReportsDeleteValidateBeforeCall(accountId, webPropertyId, profileId, unsampledReportId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementUnsampledReportsGet
     * @param accountId Account ID to retrieve unsampled report for. (required)
     * @param webPropertyId Web property ID to retrieve unsampled reports for. (required)
     * @param profileId View (Profile) ID to retrieve unsampled report for. (required)
     * @param unsampledReportId ID of the unsampled report to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementUnsampledReportsGetCall(String accountId, String webPropertyId, String profileId, String unsampledReportId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()))
            .replace("{" + "unsampledReportId" + "}", localVarApiClient.escapeString(unsampledReportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementUnsampledReportsGetValidateBeforeCall(String accountId, String webPropertyId, String profileId, String unsampledReportId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementUnsampledReportsGet(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementUnsampledReportsGet(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementUnsampledReportsGet(Async)");
        }

        // verify the required parameter 'unsampledReportId' is set
        if (unsampledReportId == null) {
            throw new ApiException("Missing the required parameter 'unsampledReportId' when calling analyticsManagementUnsampledReportsGet(Async)");
        }

        return analyticsManagementUnsampledReportsGetCall(accountId, webPropertyId, profileId, unsampledReportId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Returns a single unsampled report.
     * @param accountId Account ID to retrieve unsampled report for. (required)
     * @param webPropertyId Web property ID to retrieve unsampled reports for. (required)
     * @param profileId View (Profile) ID to retrieve unsampled report for. (required)
     * @param unsampledReportId ID of the unsampled report to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return UnsampledReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public UnsampledReport analyticsManagementUnsampledReportsGet(String accountId, String webPropertyId, String profileId, String unsampledReportId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<UnsampledReport> localVarResp = analyticsManagementUnsampledReportsGetWithHttpInfo(accountId, webPropertyId, profileId, unsampledReportId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a single unsampled report.
     * @param accountId Account ID to retrieve unsampled report for. (required)
     * @param webPropertyId Web property ID to retrieve unsampled reports for. (required)
     * @param profileId View (Profile) ID to retrieve unsampled report for. (required)
     * @param unsampledReportId ID of the unsampled report to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;UnsampledReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnsampledReport> analyticsManagementUnsampledReportsGetWithHttpInfo(String accountId, String webPropertyId, String profileId, String unsampledReportId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementUnsampledReportsGetValidateBeforeCall(accountId, webPropertyId, profileId, unsampledReportId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<UnsampledReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a single unsampled report.
     * @param accountId Account ID to retrieve unsampled report for. (required)
     * @param webPropertyId Web property ID to retrieve unsampled reports for. (required)
     * @param profileId View (Profile) ID to retrieve unsampled report for. (required)
     * @param unsampledReportId ID of the unsampled report to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementUnsampledReportsGetAsync(String accountId, String webPropertyId, String profileId, String unsampledReportId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<UnsampledReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementUnsampledReportsGetValidateBeforeCall(accountId, webPropertyId, profileId, unsampledReportId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<UnsampledReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementUnsampledReportsInsert
     * @param accountId Account ID to create the unsampled report for. (required)
     * @param webPropertyId Web property ID to create the unsampled report for. (required)
     * @param profileId View (Profile) ID to create the unsampled report for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param unsampledReport  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementUnsampledReportsInsertCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, UnsampledReport unsampledReport, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unsampledReport;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementUnsampledReportsInsertValidateBeforeCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, UnsampledReport unsampledReport, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementUnsampledReportsInsert(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementUnsampledReportsInsert(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementUnsampledReportsInsert(Async)");
        }

        return analyticsManagementUnsampledReportsInsertCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, unsampledReport, _callback);

    }

    /**
     * 
     * Create a new unsampled report.
     * @param accountId Account ID to create the unsampled report for. (required)
     * @param webPropertyId Web property ID to create the unsampled report for. (required)
     * @param profileId View (Profile) ID to create the unsampled report for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param unsampledReport  (optional)
     * @return UnsampledReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public UnsampledReport analyticsManagementUnsampledReportsInsert(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, UnsampledReport unsampledReport) throws ApiException {
        ApiResponse<UnsampledReport> localVarResp = analyticsManagementUnsampledReportsInsertWithHttpInfo(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, unsampledReport);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new unsampled report.
     * @param accountId Account ID to create the unsampled report for. (required)
     * @param webPropertyId Web property ID to create the unsampled report for. (required)
     * @param profileId View (Profile) ID to create the unsampled report for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param unsampledReport  (optional)
     * @return ApiResponse&lt;UnsampledReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnsampledReport> analyticsManagementUnsampledReportsInsertWithHttpInfo(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, UnsampledReport unsampledReport) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementUnsampledReportsInsertValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, unsampledReport, null);
        Type localVarReturnType = new TypeToken<UnsampledReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new unsampled report.
     * @param accountId Account ID to create the unsampled report for. (required)
     * @param webPropertyId Web property ID to create the unsampled report for. (required)
     * @param profileId View (Profile) ID to create the unsampled report for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param unsampledReport  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementUnsampledReportsInsertAsync(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, UnsampledReport unsampledReport, final ApiCallback<UnsampledReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementUnsampledReportsInsertValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, unsampledReport, _callback);
        Type localVarReturnType = new TypeToken<UnsampledReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementUnsampledReportsList
     * @param accountId Account ID to retrieve unsampled reports for. Must be a specific account ID, ~all is not supported. (required)
     * @param webPropertyId Web property ID to retrieve unsampled reports for. Must be a specific web property ID, ~all is not supported. (required)
     * @param profileId View (Profile) ID to retrieve unsampled reports for. Must be a specific view (profile) ID, ~all is not supported. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of unsampled reports to include in this response. (optional)
     * @param startIndex An index of the first unsampled report to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementUnsampledReportsListCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "profileId" + "}", localVarApiClient.escapeString(profileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementUnsampledReportsListValidateBeforeCall(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementUnsampledReportsList(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementUnsampledReportsList(Async)");
        }

        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling analyticsManagementUnsampledReportsList(Async)");
        }

        return analyticsManagementUnsampledReportsListCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);

    }

    /**
     * 
     * Lists unsampled reports to which the user has access.
     * @param accountId Account ID to retrieve unsampled reports for. Must be a specific account ID, ~all is not supported. (required)
     * @param webPropertyId Web property ID to retrieve unsampled reports for. Must be a specific web property ID, ~all is not supported. (required)
     * @param profileId View (Profile) ID to retrieve unsampled reports for. Must be a specific view (profile) ID, ~all is not supported. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of unsampled reports to include in this response. (optional)
     * @param startIndex An index of the first unsampled report to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return UnsampledReports
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public UnsampledReports analyticsManagementUnsampledReportsList(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        ApiResponse<UnsampledReports> localVarResp = analyticsManagementUnsampledReportsListWithHttpInfo(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists unsampled reports to which the user has access.
     * @param accountId Account ID to retrieve unsampled reports for. Must be a specific account ID, ~all is not supported. (required)
     * @param webPropertyId Web property ID to retrieve unsampled reports for. Must be a specific web property ID, ~all is not supported. (required)
     * @param profileId View (Profile) ID to retrieve unsampled reports for. Must be a specific view (profile) ID, ~all is not supported. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of unsampled reports to include in this response. (optional)
     * @param startIndex An index of the first unsampled report to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;UnsampledReports&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnsampledReports> analyticsManagementUnsampledReportsListWithHttpInfo(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementUnsampledReportsListValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, null);
        Type localVarReturnType = new TypeToken<UnsampledReports>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists unsampled reports to which the user has access.
     * @param accountId Account ID to retrieve unsampled reports for. Must be a specific account ID, ~all is not supported. (required)
     * @param webPropertyId Web property ID to retrieve unsampled reports for. Must be a specific web property ID, ~all is not supported. (required)
     * @param profileId View (Profile) ID to retrieve unsampled reports for. Must be a specific view (profile) ID, ~all is not supported. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of unsampled reports to include in this response. (optional)
     * @param startIndex An index of the first unsampled report to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementUnsampledReportsListAsync(String accountId, String webPropertyId, String profileId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback<UnsampledReports> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementUnsampledReportsListValidateBeforeCall(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);
        Type localVarReturnType = new TypeToken<UnsampledReports>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementUploadsDeleteUploadData
     * @param accountId Account Id for the uploads to be deleted. (required)
     * @param webPropertyId Web property Id for the uploads to be deleted. (required)
     * @param customDataSourceId Custom data source Id for the uploads to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param analyticsDataimportDeleteUploadDataRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementUploadsDeleteUploadDataCall(String accountId, String webPropertyId, String customDataSourceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AnalyticsDataimportDeleteUploadDataRequest analyticsDataimportDeleteUploadDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = analyticsDataimportDeleteUploadDataRequest;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/deleteUploadData"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "customDataSourceId" + "}", localVarApiClient.escapeString(customDataSourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementUploadsDeleteUploadDataValidateBeforeCall(String accountId, String webPropertyId, String customDataSourceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AnalyticsDataimportDeleteUploadDataRequest analyticsDataimportDeleteUploadDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementUploadsDeleteUploadData(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementUploadsDeleteUploadData(Async)");
        }

        // verify the required parameter 'customDataSourceId' is set
        if (customDataSourceId == null) {
            throw new ApiException("Missing the required parameter 'customDataSourceId' when calling analyticsManagementUploadsDeleteUploadData(Async)");
        }

        return analyticsManagementUploadsDeleteUploadDataCall(accountId, webPropertyId, customDataSourceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, analyticsDataimportDeleteUploadDataRequest, _callback);

    }

    /**
     * 
     * Delete data associated with a previous upload.
     * @param accountId Account Id for the uploads to be deleted. (required)
     * @param webPropertyId Web property Id for the uploads to be deleted. (required)
     * @param customDataSourceId Custom data source Id for the uploads to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param analyticsDataimportDeleteUploadDataRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void analyticsManagementUploadsDeleteUploadData(String accountId, String webPropertyId, String customDataSourceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AnalyticsDataimportDeleteUploadDataRequest analyticsDataimportDeleteUploadDataRequest) throws ApiException {
        analyticsManagementUploadsDeleteUploadDataWithHttpInfo(accountId, webPropertyId, customDataSourceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, analyticsDataimportDeleteUploadDataRequest);
    }

    /**
     * 
     * Delete data associated with a previous upload.
     * @param accountId Account Id for the uploads to be deleted. (required)
     * @param webPropertyId Web property Id for the uploads to be deleted. (required)
     * @param customDataSourceId Custom data source Id for the uploads to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param analyticsDataimportDeleteUploadDataRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyticsManagementUploadsDeleteUploadDataWithHttpInfo(String accountId, String webPropertyId, String customDataSourceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AnalyticsDataimportDeleteUploadDataRequest analyticsDataimportDeleteUploadDataRequest) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementUploadsDeleteUploadDataValidateBeforeCall(accountId, webPropertyId, customDataSourceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, analyticsDataimportDeleteUploadDataRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete data associated with a previous upload.
     * @param accountId Account Id for the uploads to be deleted. (required)
     * @param webPropertyId Web property Id for the uploads to be deleted. (required)
     * @param customDataSourceId Custom data source Id for the uploads to be deleted. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param analyticsDataimportDeleteUploadDataRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementUploadsDeleteUploadDataAsync(String accountId, String webPropertyId, String customDataSourceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, AnalyticsDataimportDeleteUploadDataRequest analyticsDataimportDeleteUploadDataRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementUploadsDeleteUploadDataValidateBeforeCall(accountId, webPropertyId, customDataSourceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, analyticsDataimportDeleteUploadDataRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementUploadsGet
     * @param accountId Account Id for the upload to retrieve. (required)
     * @param webPropertyId Web property Id for the upload to retrieve. (required)
     * @param customDataSourceId Custom data source Id for upload to retrieve. (required)
     * @param uploadId Upload Id to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementUploadsGetCall(String accountId, String webPropertyId, String customDataSourceId, String uploadId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads/{uploadId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "customDataSourceId" + "}", localVarApiClient.escapeString(customDataSourceId.toString()))
            .replace("{" + "uploadId" + "}", localVarApiClient.escapeString(uploadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementUploadsGetValidateBeforeCall(String accountId, String webPropertyId, String customDataSourceId, String uploadId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementUploadsGet(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementUploadsGet(Async)");
        }

        // verify the required parameter 'customDataSourceId' is set
        if (customDataSourceId == null) {
            throw new ApiException("Missing the required parameter 'customDataSourceId' when calling analyticsManagementUploadsGet(Async)");
        }

        // verify the required parameter 'uploadId' is set
        if (uploadId == null) {
            throw new ApiException("Missing the required parameter 'uploadId' when calling analyticsManagementUploadsGet(Async)");
        }

        return analyticsManagementUploadsGetCall(accountId, webPropertyId, customDataSourceId, uploadId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * List uploads to which the user has access.
     * @param accountId Account Id for the upload to retrieve. (required)
     * @param webPropertyId Web property Id for the upload to retrieve. (required)
     * @param customDataSourceId Custom data source Id for upload to retrieve. (required)
     * @param uploadId Upload Id to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return Upload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Upload analyticsManagementUploadsGet(String accountId, String webPropertyId, String customDataSourceId, String uploadId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<Upload> localVarResp = analyticsManagementUploadsGetWithHttpInfo(accountId, webPropertyId, customDataSourceId, uploadId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * List uploads to which the user has access.
     * @param accountId Account Id for the upload to retrieve. (required)
     * @param webPropertyId Web property Id for the upload to retrieve. (required)
     * @param customDataSourceId Custom data source Id for upload to retrieve. (required)
     * @param uploadId Upload Id to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Upload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Upload> analyticsManagementUploadsGetWithHttpInfo(String accountId, String webPropertyId, String customDataSourceId, String uploadId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementUploadsGetValidateBeforeCall(accountId, webPropertyId, customDataSourceId, uploadId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List uploads to which the user has access.
     * @param accountId Account Id for the upload to retrieve. (required)
     * @param webPropertyId Web property Id for the upload to retrieve. (required)
     * @param customDataSourceId Custom data source Id for upload to retrieve. (required)
     * @param uploadId Upload Id to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementUploadsGetAsync(String accountId, String webPropertyId, String customDataSourceId, String uploadId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Upload> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementUploadsGetValidateBeforeCall(accountId, webPropertyId, customDataSourceId, uploadId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementUploadsList
     * @param accountId Account Id for the uploads to retrieve. (required)
     * @param webPropertyId Web property Id for the uploads to retrieve. (required)
     * @param customDataSourceId Custom data source Id for uploads to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of uploads to include in this response. (optional)
     * @param startIndex A 1-based index of the first upload to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementUploadsListCall(String accountId, String webPropertyId, String customDataSourceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "customDataSourceId" + "}", localVarApiClient.escapeString(customDataSourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementUploadsListValidateBeforeCall(String accountId, String webPropertyId, String customDataSourceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementUploadsList(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementUploadsList(Async)");
        }

        // verify the required parameter 'customDataSourceId' is set
        if (customDataSourceId == null) {
            throw new ApiException("Missing the required parameter 'customDataSourceId' when calling analyticsManagementUploadsList(Async)");
        }

        return analyticsManagementUploadsListCall(accountId, webPropertyId, customDataSourceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);

    }

    /**
     * 
     * List uploads to which the user has access.
     * @param accountId Account Id for the uploads to retrieve. (required)
     * @param webPropertyId Web property Id for the uploads to retrieve. (required)
     * @param customDataSourceId Custom data source Id for uploads to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of uploads to include in this response. (optional)
     * @param startIndex A 1-based index of the first upload to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return Uploads
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Uploads analyticsManagementUploadsList(String accountId, String webPropertyId, String customDataSourceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        ApiResponse<Uploads> localVarResp = analyticsManagementUploadsListWithHttpInfo(accountId, webPropertyId, customDataSourceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * List uploads to which the user has access.
     * @param accountId Account Id for the uploads to retrieve. (required)
     * @param webPropertyId Web property Id for the uploads to retrieve. (required)
     * @param customDataSourceId Custom data source Id for uploads to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of uploads to include in this response. (optional)
     * @param startIndex A 1-based index of the first upload to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;Uploads&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Uploads> analyticsManagementUploadsListWithHttpInfo(String accountId, String webPropertyId, String customDataSourceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementUploadsListValidateBeforeCall(accountId, webPropertyId, customDataSourceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, null);
        Type localVarReturnType = new TypeToken<Uploads>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List uploads to which the user has access.
     * @param accountId Account Id for the uploads to retrieve. (required)
     * @param webPropertyId Web property Id for the uploads to retrieve. (required)
     * @param customDataSourceId Custom data source Id for uploads to retrieve. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of uploads to include in this response. (optional)
     * @param startIndex A 1-based index of the first upload to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementUploadsListAsync(String accountId, String webPropertyId, String customDataSourceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback<Uploads> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementUploadsListValidateBeforeCall(accountId, webPropertyId, customDataSourceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);
        Type localVarReturnType = new TypeToken<Uploads>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementUploadsUploadData
     * @param accountId Account Id associated with the upload. (required)
     * @param webPropertyId Web property UA-string associated with the upload. (required)
     * @param customDataSourceId Custom data source Id to which the data being uploaded belongs. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementUploadsUploadDataCall(String accountId, String webPropertyId, String customDataSourceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "customDataSourceId" + "}", localVarApiClient.escapeString(customDataSourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementUploadsUploadDataValidateBeforeCall(String accountId, String webPropertyId, String customDataSourceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementUploadsUploadData(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementUploadsUploadData(Async)");
        }

        // verify the required parameter 'customDataSourceId' is set
        if (customDataSourceId == null) {
            throw new ApiException("Missing the required parameter 'customDataSourceId' when calling analyticsManagementUploadsUploadData(Async)");
        }

        return analyticsManagementUploadsUploadDataCall(accountId, webPropertyId, customDataSourceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Upload data for a custom data source.
     * @param accountId Account Id associated with the upload. (required)
     * @param webPropertyId Web property UA-string associated with the upload. (required)
     * @param customDataSourceId Custom data source Id to which the data being uploaded belongs. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return Upload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Upload analyticsManagementUploadsUploadData(String accountId, String webPropertyId, String customDataSourceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<Upload> localVarResp = analyticsManagementUploadsUploadDataWithHttpInfo(accountId, webPropertyId, customDataSourceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Upload data for a custom data source.
     * @param accountId Account Id associated with the upload. (required)
     * @param webPropertyId Web property UA-string associated with the upload. (required)
     * @param customDataSourceId Custom data source Id to which the data being uploaded belongs. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Upload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Upload> analyticsManagementUploadsUploadDataWithHttpInfo(String accountId, String webPropertyId, String customDataSourceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementUploadsUploadDataValidateBeforeCall(accountId, webPropertyId, customDataSourceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Upload data for a custom data source.
     * @param accountId Account Id associated with the upload. (required)
     * @param webPropertyId Web property UA-string associated with the upload. (required)
     * @param customDataSourceId Custom data source Id to which the data being uploaded belongs. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementUploadsUploadDataAsync(String accountId, String webPropertyId, String customDataSourceId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Upload> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementUploadsUploadDataValidateBeforeCall(accountId, webPropertyId, customDataSourceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementWebPropertyAdWordsLinksDelete
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to delete the Google Ads link for. (required)
     * @param webPropertyAdWordsLinkId Web property Google Ads link ID. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebPropertyAdWordsLinksDeleteCall(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "webPropertyAdWordsLinkId" + "}", localVarApiClient.escapeString(webPropertyAdWordsLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementWebPropertyAdWordsLinksDeleteValidateBeforeCall(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementWebPropertyAdWordsLinksDelete(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementWebPropertyAdWordsLinksDelete(Async)");
        }

        // verify the required parameter 'webPropertyAdWordsLinkId' is set
        if (webPropertyAdWordsLinkId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyAdWordsLinkId' when calling analyticsManagementWebPropertyAdWordsLinksDelete(Async)");
        }

        return analyticsManagementWebPropertyAdWordsLinksDeleteCall(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Deletes a web property-Google Ads link.
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to delete the Google Ads link for. (required)
     * @param webPropertyAdWordsLinkId Web property Google Ads link ID. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void analyticsManagementWebPropertyAdWordsLinksDelete(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        analyticsManagementWebPropertyAdWordsLinksDeleteWithHttpInfo(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
    }

    /**
     * 
     * Deletes a web property-Google Ads link.
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to delete the Google Ads link for. (required)
     * @param webPropertyAdWordsLinkId Web property Google Ads link ID. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyticsManagementWebPropertyAdWordsLinksDeleteWithHttpInfo(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementWebPropertyAdWordsLinksDeleteValidateBeforeCall(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a web property-Google Ads link.
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to delete the Google Ads link for. (required)
     * @param webPropertyAdWordsLinkId Web property Google Ads link ID. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebPropertyAdWordsLinksDeleteAsync(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementWebPropertyAdWordsLinksDeleteValidateBeforeCall(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementWebPropertyAdWordsLinksGet
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to retrieve the Google Ads link for. (required)
     * @param webPropertyAdWordsLinkId Web property-Google Ads link ID. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebPropertyAdWordsLinksGetCall(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "webPropertyAdWordsLinkId" + "}", localVarApiClient.escapeString(webPropertyAdWordsLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementWebPropertyAdWordsLinksGetValidateBeforeCall(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementWebPropertyAdWordsLinksGet(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementWebPropertyAdWordsLinksGet(Async)");
        }

        // verify the required parameter 'webPropertyAdWordsLinkId' is set
        if (webPropertyAdWordsLinkId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyAdWordsLinkId' when calling analyticsManagementWebPropertyAdWordsLinksGet(Async)");
        }

        return analyticsManagementWebPropertyAdWordsLinksGetCall(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Returns a web property-Google Ads link to which the user has access.
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to retrieve the Google Ads link for. (required)
     * @param webPropertyAdWordsLinkId Web property-Google Ads link ID. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return EntityAdWordsLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EntityAdWordsLink analyticsManagementWebPropertyAdWordsLinksGet(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<EntityAdWordsLink> localVarResp = analyticsManagementWebPropertyAdWordsLinksGetWithHttpInfo(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a web property-Google Ads link to which the user has access.
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to retrieve the Google Ads link for. (required)
     * @param webPropertyAdWordsLinkId Web property-Google Ads link ID. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;EntityAdWordsLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityAdWordsLink> analyticsManagementWebPropertyAdWordsLinksGetWithHttpInfo(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementWebPropertyAdWordsLinksGetValidateBeforeCall(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<EntityAdWordsLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a web property-Google Ads link to which the user has access.
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to retrieve the Google Ads link for. (required)
     * @param webPropertyAdWordsLinkId Web property-Google Ads link ID. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebPropertyAdWordsLinksGetAsync(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<EntityAdWordsLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementWebPropertyAdWordsLinksGetValidateBeforeCall(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<EntityAdWordsLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementWebPropertyAdWordsLinksInsert
     * @param accountId ID of the Google Analytics account to create the link for. (required)
     * @param webPropertyId Web property ID to create the link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityAdWordsLink  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebPropertyAdWordsLinksInsertCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityAdWordsLink entityAdWordsLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityAdWordsLink;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementWebPropertyAdWordsLinksInsertValidateBeforeCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityAdWordsLink entityAdWordsLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementWebPropertyAdWordsLinksInsert(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementWebPropertyAdWordsLinksInsert(Async)");
        }

        return analyticsManagementWebPropertyAdWordsLinksInsertCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityAdWordsLink, _callback);

    }

    /**
     * 
     * Creates a webProperty-Google Ads link.
     * @param accountId ID of the Google Analytics account to create the link for. (required)
     * @param webPropertyId Web property ID to create the link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityAdWordsLink  (optional)
     * @return EntityAdWordsLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EntityAdWordsLink analyticsManagementWebPropertyAdWordsLinksInsert(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityAdWordsLink entityAdWordsLink) throws ApiException {
        ApiResponse<EntityAdWordsLink> localVarResp = analyticsManagementWebPropertyAdWordsLinksInsertWithHttpInfo(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityAdWordsLink);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a webProperty-Google Ads link.
     * @param accountId ID of the Google Analytics account to create the link for. (required)
     * @param webPropertyId Web property ID to create the link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityAdWordsLink  (optional)
     * @return ApiResponse&lt;EntityAdWordsLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityAdWordsLink> analyticsManagementWebPropertyAdWordsLinksInsertWithHttpInfo(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityAdWordsLink entityAdWordsLink) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementWebPropertyAdWordsLinksInsertValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityAdWordsLink, null);
        Type localVarReturnType = new TypeToken<EntityAdWordsLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a webProperty-Google Ads link.
     * @param accountId ID of the Google Analytics account to create the link for. (required)
     * @param webPropertyId Web property ID to create the link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityAdWordsLink  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebPropertyAdWordsLinksInsertAsync(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityAdWordsLink entityAdWordsLink, final ApiCallback<EntityAdWordsLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementWebPropertyAdWordsLinksInsertValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityAdWordsLink, _callback);
        Type localVarReturnType = new TypeToken<EntityAdWordsLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementWebPropertyAdWordsLinksList
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to retrieve the Google Ads links for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of webProperty-Google Ads links to include in this response. (optional)
     * @param startIndex An index of the first webProperty-Google Ads link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebPropertyAdWordsLinksListCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementWebPropertyAdWordsLinksListValidateBeforeCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementWebPropertyAdWordsLinksList(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementWebPropertyAdWordsLinksList(Async)");
        }

        return analyticsManagementWebPropertyAdWordsLinksListCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);

    }

    /**
     * 
     * Lists webProperty-Google Ads links for a given web property.
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to retrieve the Google Ads links for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of webProperty-Google Ads links to include in this response. (optional)
     * @param startIndex An index of the first webProperty-Google Ads link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return EntityAdWordsLinks
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EntityAdWordsLinks analyticsManagementWebPropertyAdWordsLinksList(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        ApiResponse<EntityAdWordsLinks> localVarResp = analyticsManagementWebPropertyAdWordsLinksListWithHttpInfo(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists webProperty-Google Ads links for a given web property.
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to retrieve the Google Ads links for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of webProperty-Google Ads links to include in this response. (optional)
     * @param startIndex An index of the first webProperty-Google Ads link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;EntityAdWordsLinks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityAdWordsLinks> analyticsManagementWebPropertyAdWordsLinksListWithHttpInfo(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementWebPropertyAdWordsLinksListValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, null);
        Type localVarReturnType = new TypeToken<EntityAdWordsLinks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists webProperty-Google Ads links for a given web property.
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to retrieve the Google Ads links for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of webProperty-Google Ads links to include in this response. (optional)
     * @param startIndex An index of the first webProperty-Google Ads link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebPropertyAdWordsLinksListAsync(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback<EntityAdWordsLinks> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementWebPropertyAdWordsLinksListValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);
        Type localVarReturnType = new TypeToken<EntityAdWordsLinks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementWebPropertyAdWordsLinksPatch
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to retrieve the Google Ads link for. (required)
     * @param webPropertyAdWordsLinkId Web property-Google Ads link ID. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityAdWordsLink  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebPropertyAdWordsLinksPatchCall(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityAdWordsLink entityAdWordsLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityAdWordsLink;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "webPropertyAdWordsLinkId" + "}", localVarApiClient.escapeString(webPropertyAdWordsLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementWebPropertyAdWordsLinksPatchValidateBeforeCall(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityAdWordsLink entityAdWordsLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementWebPropertyAdWordsLinksPatch(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementWebPropertyAdWordsLinksPatch(Async)");
        }

        // verify the required parameter 'webPropertyAdWordsLinkId' is set
        if (webPropertyAdWordsLinkId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyAdWordsLinkId' when calling analyticsManagementWebPropertyAdWordsLinksPatch(Async)");
        }

        return analyticsManagementWebPropertyAdWordsLinksPatchCall(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityAdWordsLink, _callback);

    }

    /**
     * 
     * Updates an existing webProperty-Google Ads link. This method supports patch semantics.
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to retrieve the Google Ads link for. (required)
     * @param webPropertyAdWordsLinkId Web property-Google Ads link ID. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityAdWordsLink  (optional)
     * @return EntityAdWordsLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EntityAdWordsLink analyticsManagementWebPropertyAdWordsLinksPatch(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityAdWordsLink entityAdWordsLink) throws ApiException {
        ApiResponse<EntityAdWordsLink> localVarResp = analyticsManagementWebPropertyAdWordsLinksPatchWithHttpInfo(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityAdWordsLink);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing webProperty-Google Ads link. This method supports patch semantics.
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to retrieve the Google Ads link for. (required)
     * @param webPropertyAdWordsLinkId Web property-Google Ads link ID. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityAdWordsLink  (optional)
     * @return ApiResponse&lt;EntityAdWordsLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityAdWordsLink> analyticsManagementWebPropertyAdWordsLinksPatchWithHttpInfo(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityAdWordsLink entityAdWordsLink) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementWebPropertyAdWordsLinksPatchValidateBeforeCall(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityAdWordsLink, null);
        Type localVarReturnType = new TypeToken<EntityAdWordsLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing webProperty-Google Ads link. This method supports patch semantics.
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to retrieve the Google Ads link for. (required)
     * @param webPropertyAdWordsLinkId Web property-Google Ads link ID. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityAdWordsLink  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebPropertyAdWordsLinksPatchAsync(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityAdWordsLink entityAdWordsLink, final ApiCallback<EntityAdWordsLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementWebPropertyAdWordsLinksPatchValidateBeforeCall(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityAdWordsLink, _callback);
        Type localVarReturnType = new TypeToken<EntityAdWordsLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementWebPropertyAdWordsLinksUpdate
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to retrieve the Google Ads link for. (required)
     * @param webPropertyAdWordsLinkId Web property-Google Ads link ID. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityAdWordsLink  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebPropertyAdWordsLinksUpdateCall(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityAdWordsLink entityAdWordsLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityAdWordsLink;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "webPropertyAdWordsLinkId" + "}", localVarApiClient.escapeString(webPropertyAdWordsLinkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementWebPropertyAdWordsLinksUpdateValidateBeforeCall(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityAdWordsLink entityAdWordsLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementWebPropertyAdWordsLinksUpdate(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementWebPropertyAdWordsLinksUpdate(Async)");
        }

        // verify the required parameter 'webPropertyAdWordsLinkId' is set
        if (webPropertyAdWordsLinkId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyAdWordsLinkId' when calling analyticsManagementWebPropertyAdWordsLinksUpdate(Async)");
        }

        return analyticsManagementWebPropertyAdWordsLinksUpdateCall(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityAdWordsLink, _callback);

    }

    /**
     * 
     * Updates an existing webProperty-Google Ads link.
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to retrieve the Google Ads link for. (required)
     * @param webPropertyAdWordsLinkId Web property-Google Ads link ID. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityAdWordsLink  (optional)
     * @return EntityAdWordsLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EntityAdWordsLink analyticsManagementWebPropertyAdWordsLinksUpdate(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityAdWordsLink entityAdWordsLink) throws ApiException {
        ApiResponse<EntityAdWordsLink> localVarResp = analyticsManagementWebPropertyAdWordsLinksUpdateWithHttpInfo(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityAdWordsLink);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing webProperty-Google Ads link.
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to retrieve the Google Ads link for. (required)
     * @param webPropertyAdWordsLinkId Web property-Google Ads link ID. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityAdWordsLink  (optional)
     * @return ApiResponse&lt;EntityAdWordsLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityAdWordsLink> analyticsManagementWebPropertyAdWordsLinksUpdateWithHttpInfo(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityAdWordsLink entityAdWordsLink) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementWebPropertyAdWordsLinksUpdateValidateBeforeCall(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityAdWordsLink, null);
        Type localVarReturnType = new TypeToken<EntityAdWordsLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing webProperty-Google Ads link.
     * @param accountId ID of the account which the given web property belongs to. (required)
     * @param webPropertyId Web property ID to retrieve the Google Ads link for. (required)
     * @param webPropertyAdWordsLinkId Web property-Google Ads link ID. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityAdWordsLink  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebPropertyAdWordsLinksUpdateAsync(String accountId, String webPropertyId, String webPropertyAdWordsLinkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityAdWordsLink entityAdWordsLink, final ApiCallback<EntityAdWordsLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementWebPropertyAdWordsLinksUpdateValidateBeforeCall(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityAdWordsLink, _callback);
        Type localVarReturnType = new TypeToken<EntityAdWordsLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementWebpropertiesGet
     * @param accountId Account ID to retrieve the web property for. (required)
     * @param webPropertyId ID to retrieve the web property for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebpropertiesGetCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementWebpropertiesGetValidateBeforeCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementWebpropertiesGet(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementWebpropertiesGet(Async)");
        }

        return analyticsManagementWebpropertiesGetCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Gets a web property to which the user has access.
     * @param accountId Account ID to retrieve the web property for. (required)
     * @param webPropertyId ID to retrieve the web property for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return Webproperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Webproperty analyticsManagementWebpropertiesGet(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        ApiResponse<Webproperty> localVarResp = analyticsManagementWebpropertiesGetWithHttpInfo(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a web property to which the user has access.
     * @param accountId Account ID to retrieve the web property for. (required)
     * @param webPropertyId ID to retrieve the web property for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Webproperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webproperty> analyticsManagementWebpropertiesGetWithHttpInfo(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementWebpropertiesGetValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        Type localVarReturnType = new TypeToken<Webproperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a web property to which the user has access.
     * @param accountId Account ID to retrieve the web property for. (required)
     * @param webPropertyId ID to retrieve the web property for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebpropertiesGetAsync(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Webproperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementWebpropertiesGetValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        Type localVarReturnType = new TypeToken<Webproperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementWebpropertiesInsert
     * @param accountId Account ID to create the web property for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param webproperty  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebpropertiesInsertCall(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Webproperty webproperty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webproperty;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementWebpropertiesInsertValidateBeforeCall(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Webproperty webproperty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementWebpropertiesInsert(Async)");
        }

        return analyticsManagementWebpropertiesInsertCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, webproperty, _callback);

    }

    /**
     * 
     * Create a new property if the account has fewer than 20 properties. Web properties are visible in the Google Analytics interface only if they have at least one profile.
     * @param accountId Account ID to create the web property for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param webproperty  (optional)
     * @return Webproperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Webproperty analyticsManagementWebpropertiesInsert(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Webproperty webproperty) throws ApiException {
        ApiResponse<Webproperty> localVarResp = analyticsManagementWebpropertiesInsertWithHttpInfo(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, webproperty);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new property if the account has fewer than 20 properties. Web properties are visible in the Google Analytics interface only if they have at least one profile.
     * @param accountId Account ID to create the web property for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param webproperty  (optional)
     * @return ApiResponse&lt;Webproperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webproperty> analyticsManagementWebpropertiesInsertWithHttpInfo(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Webproperty webproperty) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementWebpropertiesInsertValidateBeforeCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, webproperty, null);
        Type localVarReturnType = new TypeToken<Webproperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new property if the account has fewer than 20 properties. Web properties are visible in the Google Analytics interface only if they have at least one profile.
     * @param accountId Account ID to create the web property for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param webproperty  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebpropertiesInsertAsync(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Webproperty webproperty, final ApiCallback<Webproperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementWebpropertiesInsertValidateBeforeCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, webproperty, _callback);
        Type localVarReturnType = new TypeToken<Webproperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementWebpropertiesList
     * @param accountId Account ID to retrieve web properties for. Can either be a specific account ID or &#39;~all&#39;, which refers to all the accounts that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of web properties to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebpropertiesListCall(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementWebpropertiesListValidateBeforeCall(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementWebpropertiesList(Async)");
        }

        return analyticsManagementWebpropertiesListCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);

    }

    /**
     * 
     * Lists web properties to which the user has access.
     * @param accountId Account ID to retrieve web properties for. Can either be a specific account ID or &#39;~all&#39;, which refers to all the accounts that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of web properties to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return Webproperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Webproperties analyticsManagementWebpropertiesList(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        ApiResponse<Webproperties> localVarResp = analyticsManagementWebpropertiesListWithHttpInfo(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists web properties to which the user has access.
     * @param accountId Account ID to retrieve web properties for. Can either be a specific account ID or &#39;~all&#39;, which refers to all the accounts that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of web properties to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;Webproperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webproperties> analyticsManagementWebpropertiesListWithHttpInfo(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementWebpropertiesListValidateBeforeCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, null);
        Type localVarReturnType = new TypeToken<Webproperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists web properties to which the user has access.
     * @param accountId Account ID to retrieve web properties for. Can either be a specific account ID or &#39;~all&#39;, which refers to all the accounts that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of web properties to include in this response. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebpropertiesListAsync(String accountId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback<Webproperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementWebpropertiesListValidateBeforeCall(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);
        Type localVarReturnType = new TypeToken<Webproperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementWebpropertiesPatch
     * @param accountId Account ID to which the web property belongs (required)
     * @param webPropertyId Web property ID (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param webproperty  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebpropertiesPatchCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Webproperty webproperty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webproperty;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementWebpropertiesPatchValidateBeforeCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Webproperty webproperty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementWebpropertiesPatch(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementWebpropertiesPatch(Async)");
        }

        return analyticsManagementWebpropertiesPatchCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, webproperty, _callback);

    }

    /**
     * 
     * Updates an existing web property. This method supports patch semantics.
     * @param accountId Account ID to which the web property belongs (required)
     * @param webPropertyId Web property ID (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param webproperty  (optional)
     * @return Webproperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Webproperty analyticsManagementWebpropertiesPatch(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Webproperty webproperty) throws ApiException {
        ApiResponse<Webproperty> localVarResp = analyticsManagementWebpropertiesPatchWithHttpInfo(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, webproperty);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing web property. This method supports patch semantics.
     * @param accountId Account ID to which the web property belongs (required)
     * @param webPropertyId Web property ID (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param webproperty  (optional)
     * @return ApiResponse&lt;Webproperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webproperty> analyticsManagementWebpropertiesPatchWithHttpInfo(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Webproperty webproperty) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementWebpropertiesPatchValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, webproperty, null);
        Type localVarReturnType = new TypeToken<Webproperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing web property. This method supports patch semantics.
     * @param accountId Account ID to which the web property belongs (required)
     * @param webPropertyId Web property ID (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param webproperty  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebpropertiesPatchAsync(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Webproperty webproperty, final ApiCallback<Webproperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementWebpropertiesPatchValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, webproperty, _callback);
        Type localVarReturnType = new TypeToken<Webproperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementWebpropertiesUpdate
     * @param accountId Account ID to which the web property belongs (required)
     * @param webPropertyId Web property ID (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param webproperty  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebpropertiesUpdateCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Webproperty webproperty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webproperty;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementWebpropertiesUpdateValidateBeforeCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Webproperty webproperty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementWebpropertiesUpdate(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementWebpropertiesUpdate(Async)");
        }

        return analyticsManagementWebpropertiesUpdateCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, webproperty, _callback);

    }

    /**
     * 
     * Updates an existing web property.
     * @param accountId Account ID to which the web property belongs (required)
     * @param webPropertyId Web property ID (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param webproperty  (optional)
     * @return Webproperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public Webproperty analyticsManagementWebpropertiesUpdate(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Webproperty webproperty) throws ApiException {
        ApiResponse<Webproperty> localVarResp = analyticsManagementWebpropertiesUpdateWithHttpInfo(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, webproperty);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing web property.
     * @param accountId Account ID to which the web property belongs (required)
     * @param webPropertyId Web property ID (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param webproperty  (optional)
     * @return ApiResponse&lt;Webproperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Webproperty> analyticsManagementWebpropertiesUpdateWithHttpInfo(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Webproperty webproperty) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementWebpropertiesUpdateValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, webproperty, null);
        Type localVarReturnType = new TypeToken<Webproperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing web property.
     * @param accountId Account ID to which the web property belongs (required)
     * @param webPropertyId Web property ID (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param webproperty  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebpropertiesUpdateAsync(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Webproperty webproperty, final ApiCallback<Webproperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementWebpropertiesUpdateValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, webproperty, _callback);
        Type localVarReturnType = new TypeToken<Webproperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementWebpropertyUserLinksDelete
     * @param accountId Account ID to delete the user link for. (required)
     * @param webPropertyId Web Property ID to delete the user link for. (required)
     * @param linkId Link ID to delete the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebpropertyUserLinksDeleteCall(String accountId, String webPropertyId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "linkId" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementWebpropertyUserLinksDeleteValidateBeforeCall(String accountId, String webPropertyId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementWebpropertyUserLinksDelete(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementWebpropertyUserLinksDelete(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling analyticsManagementWebpropertyUserLinksDelete(Async)");
        }

        return analyticsManagementWebpropertyUserLinksDeleteCall(accountId, webPropertyId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);

    }

    /**
     * 
     * Removes a user from the given web property.
     * @param accountId Account ID to delete the user link for. (required)
     * @param webPropertyId Web Property ID to delete the user link for. (required)
     * @param linkId Link ID to delete the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void analyticsManagementWebpropertyUserLinksDelete(String accountId, String webPropertyId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        analyticsManagementWebpropertyUserLinksDeleteWithHttpInfo(accountId, webPropertyId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
    }

    /**
     * 
     * Removes a user from the given web property.
     * @param accountId Account ID to delete the user link for. (required)
     * @param webPropertyId Web Property ID to delete the user link for. (required)
     * @param linkId Link ID to delete the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyticsManagementWebpropertyUserLinksDeleteWithHttpInfo(String accountId, String webPropertyId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementWebpropertyUserLinksDeleteValidateBeforeCall(accountId, webPropertyId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes a user from the given web property.
     * @param accountId Account ID to delete the user link for. (required)
     * @param webPropertyId Web Property ID to delete the user link for. (required)
     * @param linkId Link ID to delete the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebpropertyUserLinksDeleteAsync(String accountId, String webPropertyId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementWebpropertyUserLinksDeleteValidateBeforeCall(accountId, webPropertyId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementWebpropertyUserLinksInsert
     * @param accountId Account ID to create the user link for. (required)
     * @param webPropertyId Web Property ID to create the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebpropertyUserLinksInsertCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityUserLink;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementWebpropertyUserLinksInsertValidateBeforeCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementWebpropertyUserLinksInsert(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementWebpropertyUserLinksInsert(Async)");
        }

        return analyticsManagementWebpropertyUserLinksInsertCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink, _callback);

    }

    /**
     * 
     * Adds a new user to the given web property.
     * @param accountId Account ID to create the user link for. (required)
     * @param webPropertyId Web Property ID to create the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @return EntityUserLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EntityUserLink analyticsManagementWebpropertyUserLinksInsert(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink) throws ApiException {
        ApiResponse<EntityUserLink> localVarResp = analyticsManagementWebpropertyUserLinksInsertWithHttpInfo(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a new user to the given web property.
     * @param accountId Account ID to create the user link for. (required)
     * @param webPropertyId Web Property ID to create the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @return ApiResponse&lt;EntityUserLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityUserLink> analyticsManagementWebpropertyUserLinksInsertWithHttpInfo(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementWebpropertyUserLinksInsertValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink, null);
        Type localVarReturnType = new TypeToken<EntityUserLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a new user to the given web property.
     * @param accountId Account ID to create the user link for. (required)
     * @param webPropertyId Web Property ID to create the user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebpropertyUserLinksInsertAsync(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink, final ApiCallback<EntityUserLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementWebpropertyUserLinksInsertValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink, _callback);
        Type localVarReturnType = new TypeToken<EntityUserLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementWebpropertyUserLinksList
     * @param accountId Account ID which the given web property belongs to. (required)
     * @param webPropertyId Web Property ID for the webProperty-user links to retrieve. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of webProperty-user Links to include in this response. (optional)
     * @param startIndex An index of the first webProperty-user link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebpropertyUserLinksListCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementWebpropertyUserLinksListValidateBeforeCall(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementWebpropertyUserLinksList(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementWebpropertyUserLinksList(Async)");
        }

        return analyticsManagementWebpropertyUserLinksListCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);

    }

    /**
     * 
     * Lists webProperty-user links for a given web property.
     * @param accountId Account ID which the given web property belongs to. (required)
     * @param webPropertyId Web Property ID for the webProperty-user links to retrieve. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of webProperty-user Links to include in this response. (optional)
     * @param startIndex An index of the first webProperty-user link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return EntityUserLinks
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EntityUserLinks analyticsManagementWebpropertyUserLinksList(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        ApiResponse<EntityUserLinks> localVarResp = analyticsManagementWebpropertyUserLinksListWithHttpInfo(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists webProperty-user links for a given web property.
     * @param accountId Account ID which the given web property belongs to. (required)
     * @param webPropertyId Web Property ID for the webProperty-user links to retrieve. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of webProperty-user Links to include in this response. (optional)
     * @param startIndex An index of the first webProperty-user link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;EntityUserLinks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityUserLinks> analyticsManagementWebpropertyUserLinksListWithHttpInfo(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementWebpropertyUserLinksListValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, null);
        Type localVarReturnType = new TypeToken<EntityUserLinks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists webProperty-user links for a given web property.
     * @param accountId Account ID which the given web property belongs to. (required)
     * @param webPropertyId Web Property ID for the webProperty-user links to retrieve. Can either be a specific web property ID or &#39;~all&#39;, which refers to all the web properties that user has access to. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param maxResults The maximum number of webProperty-user Links to include in this response. (optional)
     * @param startIndex An index of the first webProperty-user link to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebpropertyUserLinksListAsync(String accountId, String webPropertyId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, Integer maxResults, Integer startIndex, final ApiCallback<EntityUserLinks> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementWebpropertyUserLinksListValidateBeforeCall(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, _callback);
        Type localVarReturnType = new TypeToken<EntityUserLinks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsManagementWebpropertyUserLinksUpdate
     * @param accountId Account ID to update the account-user link for. (required)
     * @param webPropertyId Web property ID to update the account-user link for. (required)
     * @param linkId Link ID to update the account-user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebpropertyUserLinksUpdateCall(String accountId, String webPropertyId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityUserLink;

        // create path and map variables
        String localVarPath = "/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "webPropertyId" + "}", localVarApiClient.escapeString(webPropertyId.toString()))
            .replace("{" + "linkId" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsManagementWebpropertyUserLinksUpdateValidateBeforeCall(String accountId, String webPropertyId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling analyticsManagementWebpropertyUserLinksUpdate(Async)");
        }

        // verify the required parameter 'webPropertyId' is set
        if (webPropertyId == null) {
            throw new ApiException("Missing the required parameter 'webPropertyId' when calling analyticsManagementWebpropertyUserLinksUpdate(Async)");
        }

        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling analyticsManagementWebpropertyUserLinksUpdate(Async)");
        }

        return analyticsManagementWebpropertyUserLinksUpdateCall(accountId, webPropertyId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink, _callback);

    }

    /**
     * 
     * Updates permissions for an existing user on the given web property.
     * @param accountId Account ID to update the account-user link for. (required)
     * @param webPropertyId Web property ID to update the account-user link for. (required)
     * @param linkId Link ID to update the account-user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @return EntityUserLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public EntityUserLink analyticsManagementWebpropertyUserLinksUpdate(String accountId, String webPropertyId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink) throws ApiException {
        ApiResponse<EntityUserLink> localVarResp = analyticsManagementWebpropertyUserLinksUpdateWithHttpInfo(accountId, webPropertyId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates permissions for an existing user on the given web property.
     * @param accountId Account ID to update the account-user link for. (required)
     * @param webPropertyId Web property ID to update the account-user link for. (required)
     * @param linkId Link ID to update the account-user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @return ApiResponse&lt;EntityUserLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityUserLink> analyticsManagementWebpropertyUserLinksUpdateWithHttpInfo(String accountId, String webPropertyId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink) throws ApiException {
        okhttp3.Call localVarCall = analyticsManagementWebpropertyUserLinksUpdateValidateBeforeCall(accountId, webPropertyId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink, null);
        Type localVarReturnType = new TypeToken<EntityUserLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates permissions for an existing user on the given web property.
     * @param accountId Account ID to update the account-user link for. (required)
     * @param webPropertyId Web property ID to update the account-user link for. (required)
     * @param linkId Link ID to update the account-user link for. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param entityUserLink  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsManagementWebpropertyUserLinksUpdateAsync(String accountId, String webPropertyId, String linkId, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, EntityUserLink entityUserLink, final ApiCallback<EntityUserLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsManagementWebpropertyUserLinksUpdateValidateBeforeCall(accountId, webPropertyId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink, _callback);
        Type localVarReturnType = new TypeToken<EntityUserLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
