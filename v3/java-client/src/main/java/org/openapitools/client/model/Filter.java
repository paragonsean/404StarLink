/*
 * Google Analytics API
 * Views and manages your Google Analytics data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.FilterAdvancedDetails;
import org.openapitools.client.model.FilterExpression;
import org.openapitools.client.model.FilterLowercaseDetails;
import org.openapitools.client.model.FilterParentLink;
import org.openapitools.client.model.FilterSearchAndReplaceDetails;
import org.openapitools.client.model.FilterUppercaseDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JSON template for an Analytics account filter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:01:26.696972-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Filter {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ADVANCED_DETAILS = "advancedDetails";
  @SerializedName(SERIALIZED_NAME_ADVANCED_DETAILS)
  private FilterAdvancedDetails advancedDetails;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_EXCLUDE_DETAILS = "excludeDetails";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_DETAILS)
  private FilterExpression excludeDetails;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INCLUDE_DETAILS = "includeDetails";
  @SerializedName(SERIALIZED_NAME_INCLUDE_DETAILS)
  private FilterExpression includeDetails;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "analytics#filter";

  public static final String SERIALIZED_NAME_LOWERCASE_DETAILS = "lowercaseDetails";
  @SerializedName(SERIALIZED_NAME_LOWERCASE_DETAILS)
  private FilterLowercaseDetails lowercaseDetails;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_LINK = "parentLink";
  @SerializedName(SERIALIZED_NAME_PARENT_LINK)
  private FilterParentLink parentLink;

  public static final String SERIALIZED_NAME_SEARCH_AND_REPLACE_DETAILS = "searchAndReplaceDetails";
  @SerializedName(SERIALIZED_NAME_SEARCH_AND_REPLACE_DETAILS)
  private FilterSearchAndReplaceDetails searchAndReplaceDetails;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_UPPERCASE_DETAILS = "uppercaseDetails";
  @SerializedName(SERIALIZED_NAME_UPPERCASE_DETAILS)
  private FilterUppercaseDetails uppercaseDetails;

  public Filter() {
  }

  public Filter(
     OffsetDateTime created, 
     String kind, 
     String selfLink, 
     OffsetDateTime updated
  ) {
    this();
    this.created = created;
    this.kind = kind;
    this.selfLink = selfLink;
    this.updated = updated;
  }

  public Filter accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID to which this filter belongs.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Filter advancedDetails(FilterAdvancedDetails advancedDetails) {
    this.advancedDetails = advancedDetails;
    return this;
  }

  /**
   * Get advancedDetails
   * @return advancedDetails
   */
  @javax.annotation.Nullable
  public FilterAdvancedDetails getAdvancedDetails() {
    return advancedDetails;
  }

  public void setAdvancedDetails(FilterAdvancedDetails advancedDetails) {
    this.advancedDetails = advancedDetails;
  }


  /**
   * Time this filter was created.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public Filter excludeDetails(FilterExpression excludeDetails) {
    this.excludeDetails = excludeDetails;
    return this;
  }

  /**
   * Get excludeDetails
   * @return excludeDetails
   */
  @javax.annotation.Nullable
  public FilterExpression getExcludeDetails() {
    return excludeDetails;
  }

  public void setExcludeDetails(FilterExpression excludeDetails) {
    this.excludeDetails = excludeDetails;
  }


  public Filter id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Filter ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Filter includeDetails(FilterExpression includeDetails) {
    this.includeDetails = includeDetails;
    return this;
  }

  /**
   * Get includeDetails
   * @return includeDetails
   */
  @javax.annotation.Nullable
  public FilterExpression getIncludeDetails() {
    return includeDetails;
  }

  public void setIncludeDetails(FilterExpression includeDetails) {
    this.includeDetails = includeDetails;
  }


  /**
   * Resource type for Analytics filter.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }



  public Filter lowercaseDetails(FilterLowercaseDetails lowercaseDetails) {
    this.lowercaseDetails = lowercaseDetails;
    return this;
  }

  /**
   * Get lowercaseDetails
   * @return lowercaseDetails
   */
  @javax.annotation.Nullable
  public FilterLowercaseDetails getLowercaseDetails() {
    return lowercaseDetails;
  }

  public void setLowercaseDetails(FilterLowercaseDetails lowercaseDetails) {
    this.lowercaseDetails = lowercaseDetails;
  }


  public Filter name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of this filter.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Filter parentLink(FilterParentLink parentLink) {
    this.parentLink = parentLink;
    return this;
  }

  /**
   * Get parentLink
   * @return parentLink
   */
  @javax.annotation.Nullable
  public FilterParentLink getParentLink() {
    return parentLink;
  }

  public void setParentLink(FilterParentLink parentLink) {
    this.parentLink = parentLink;
  }


  public Filter searchAndReplaceDetails(FilterSearchAndReplaceDetails searchAndReplaceDetails) {
    this.searchAndReplaceDetails = searchAndReplaceDetails;
    return this;
  }

  /**
   * Get searchAndReplaceDetails
   * @return searchAndReplaceDetails
   */
  @javax.annotation.Nullable
  public FilterSearchAndReplaceDetails getSearchAndReplaceDetails() {
    return searchAndReplaceDetails;
  }

  public void setSearchAndReplaceDetails(FilterSearchAndReplaceDetails searchAndReplaceDetails) {
    this.searchAndReplaceDetails = searchAndReplaceDetails;
  }


  /**
   * Link for this filter.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }



  public Filter type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of this filter. Possible values are INCLUDE, EXCLUDE, LOWERCASE, UPPERCASE, SEARCH_AND_REPLACE and ADVANCED.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  /**
   * Time this filter was last modified.
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }



  public Filter uppercaseDetails(FilterUppercaseDetails uppercaseDetails) {
    this.uppercaseDetails = uppercaseDetails;
    return this;
  }

  /**
   * Get uppercaseDetails
   * @return uppercaseDetails
   */
  @javax.annotation.Nullable
  public FilterUppercaseDetails getUppercaseDetails() {
    return uppercaseDetails;
  }

  public void setUppercaseDetails(FilterUppercaseDetails uppercaseDetails) {
    this.uppercaseDetails = uppercaseDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Filter filter = (Filter) o;
    return Objects.equals(this.accountId, filter.accountId) &&
        Objects.equals(this.advancedDetails, filter.advancedDetails) &&
        Objects.equals(this.created, filter.created) &&
        Objects.equals(this.excludeDetails, filter.excludeDetails) &&
        Objects.equals(this.id, filter.id) &&
        Objects.equals(this.includeDetails, filter.includeDetails) &&
        Objects.equals(this.kind, filter.kind) &&
        Objects.equals(this.lowercaseDetails, filter.lowercaseDetails) &&
        Objects.equals(this.name, filter.name) &&
        Objects.equals(this.parentLink, filter.parentLink) &&
        Objects.equals(this.searchAndReplaceDetails, filter.searchAndReplaceDetails) &&
        Objects.equals(this.selfLink, filter.selfLink) &&
        Objects.equals(this.type, filter.type) &&
        Objects.equals(this.updated, filter.updated) &&
        Objects.equals(this.uppercaseDetails, filter.uppercaseDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, advancedDetails, created, excludeDetails, id, includeDetails, kind, lowercaseDetails, name, parentLink, searchAndReplaceDetails, selfLink, type, updated, uppercaseDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Filter {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    advancedDetails: ").append(toIndentedString(advancedDetails)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    excludeDetails: ").append(toIndentedString(excludeDetails)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    includeDetails: ").append(toIndentedString(includeDetails)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    lowercaseDetails: ").append(toIndentedString(lowercaseDetails)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentLink: ").append(toIndentedString(parentLink)).append("\n");
    sb.append("    searchAndReplaceDetails: ").append(toIndentedString(searchAndReplaceDetails)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    uppercaseDetails: ").append(toIndentedString(uppercaseDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("advancedDetails");
    openapiFields.add("created");
    openapiFields.add("excludeDetails");
    openapiFields.add("id");
    openapiFields.add("includeDetails");
    openapiFields.add("kind");
    openapiFields.add("lowercaseDetails");
    openapiFields.add("name");
    openapiFields.add("parentLink");
    openapiFields.add("searchAndReplaceDetails");
    openapiFields.add("selfLink");
    openapiFields.add("type");
    openapiFields.add("updated");
    openapiFields.add("uppercaseDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Filter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Filter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Filter is not found in the empty JSON string", Filter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Filter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Filter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      // validate the optional field `advancedDetails`
      if (jsonObj.get("advancedDetails") != null && !jsonObj.get("advancedDetails").isJsonNull()) {
        FilterAdvancedDetails.validateJsonElement(jsonObj.get("advancedDetails"));
      }
      // validate the optional field `excludeDetails`
      if (jsonObj.get("excludeDetails") != null && !jsonObj.get("excludeDetails").isJsonNull()) {
        FilterExpression.validateJsonElement(jsonObj.get("excludeDetails"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `includeDetails`
      if (jsonObj.get("includeDetails") != null && !jsonObj.get("includeDetails").isJsonNull()) {
        FilterExpression.validateJsonElement(jsonObj.get("includeDetails"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `lowercaseDetails`
      if (jsonObj.get("lowercaseDetails") != null && !jsonObj.get("lowercaseDetails").isJsonNull()) {
        FilterLowercaseDetails.validateJsonElement(jsonObj.get("lowercaseDetails"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `parentLink`
      if (jsonObj.get("parentLink") != null && !jsonObj.get("parentLink").isJsonNull()) {
        FilterParentLink.validateJsonElement(jsonObj.get("parentLink"));
      }
      // validate the optional field `searchAndReplaceDetails`
      if (jsonObj.get("searchAndReplaceDetails") != null && !jsonObj.get("searchAndReplaceDetails").isJsonNull()) {
        FilterSearchAndReplaceDetails.validateJsonElement(jsonObj.get("searchAndReplaceDetails"));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `uppercaseDetails`
      if (jsonObj.get("uppercaseDetails") != null && !jsonObj.get("uppercaseDetails").isJsonNull()) {
        FilterUppercaseDetails.validateJsonElement(jsonObj.get("uppercaseDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Filter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Filter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Filter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Filter.class));

       return (TypeAdapter<T>) new TypeAdapter<Filter>() {
           @Override
           public void write(JsonWriter out, Filter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Filter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Filter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Filter
   * @throws IOException if the JSON string is invalid with respect to Filter
   */
  public static Filter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Filter.class);
  }

  /**
   * Convert an instance of Filter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

