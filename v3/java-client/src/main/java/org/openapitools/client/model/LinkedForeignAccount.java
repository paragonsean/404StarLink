/*
 * Google Analytics API
 * Views and manages your Google Analytics data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JSON template for an Analytics Remarketing Audience Foreign Link.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:01:26.696972-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LinkedForeignAccount {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ELIGIBLE_FOR_SEARCH = "eligibleForSearch";
  @SerializedName(SERIALIZED_NAME_ELIGIBLE_FOR_SEARCH)
  private Boolean eligibleForSearch;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTERNAL_WEB_PROPERTY_ID = "internalWebPropertyId";
  @SerializedName(SERIALIZED_NAME_INTERNAL_WEB_PROPERTY_ID)
  private String internalWebPropertyId;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "analytics#linkedForeignAccount";

  public static final String SERIALIZED_NAME_LINKED_ACCOUNT_ID = "linkedAccountId";
  @SerializedName(SERIALIZED_NAME_LINKED_ACCOUNT_ID)
  private String linkedAccountId;

  public static final String SERIALIZED_NAME_REMARKETING_AUDIENCE_ID = "remarketingAudienceId";
  @SerializedName(SERIALIZED_NAME_REMARKETING_AUDIENCE_ID)
  private String remarketingAudienceId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_WEB_PROPERTY_ID = "webPropertyId";
  @SerializedName(SERIALIZED_NAME_WEB_PROPERTY_ID)
  private String webPropertyId;

  public LinkedForeignAccount() {
  }

  public LinkedForeignAccount(
     Boolean eligibleForSearch, 
     String internalWebPropertyId
  ) {
    this();
    this.eligibleForSearch = eligibleForSearch;
    this.internalWebPropertyId = internalWebPropertyId;
  }

  public LinkedForeignAccount accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account ID to which this linked foreign account belongs.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  /**
   * Boolean indicating whether this is eligible for search.
   * @return eligibleForSearch
   */
  @javax.annotation.Nullable
  public Boolean getEligibleForSearch() {
    return eligibleForSearch;
  }



  public LinkedForeignAccount id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Entity ad account link ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  /**
   * Internal ID for the web property to which this linked foreign account belongs.
   * @return internalWebPropertyId
   */
  @javax.annotation.Nullable
  public String getInternalWebPropertyId() {
    return internalWebPropertyId;
  }



  public LinkedForeignAccount kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Resource type for linked foreign account.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public LinkedForeignAccount linkedAccountId(String linkedAccountId) {
    this.linkedAccountId = linkedAccountId;
    return this;
  }

  /**
   * The foreign account ID. For example the an Google Ads &#x60;linkedAccountId&#x60; has the following format XXX-XXX-XXXX.
   * @return linkedAccountId
   */
  @javax.annotation.Nullable
  public String getLinkedAccountId() {
    return linkedAccountId;
  }

  public void setLinkedAccountId(String linkedAccountId) {
    this.linkedAccountId = linkedAccountId;
  }


  public LinkedForeignAccount remarketingAudienceId(String remarketingAudienceId) {
    this.remarketingAudienceId = remarketingAudienceId;
    return this;
  }

  /**
   * Remarketing audience ID to which this linked foreign account belongs.
   * @return remarketingAudienceId
   */
  @javax.annotation.Nullable
  public String getRemarketingAudienceId() {
    return remarketingAudienceId;
  }

  public void setRemarketingAudienceId(String remarketingAudienceId) {
    this.remarketingAudienceId = remarketingAudienceId;
  }


  public LinkedForeignAccount status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of this foreign account link.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public LinkedForeignAccount type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the foreign account. For example, &#x60;ADWORDS_LINKS&#x60;, &#x60;DBM_LINKS&#x60;, &#x60;MCC_LINKS&#x60; or &#x60;OPTIMIZE&#x60;.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public LinkedForeignAccount webPropertyId(String webPropertyId) {
    this.webPropertyId = webPropertyId;
    return this;
  }

  /**
   * Web property ID of the form UA-XXXXX-YY to which this linked foreign account belongs.
   * @return webPropertyId
   */
  @javax.annotation.Nullable
  public String getWebPropertyId() {
    return webPropertyId;
  }

  public void setWebPropertyId(String webPropertyId) {
    this.webPropertyId = webPropertyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkedForeignAccount linkedForeignAccount = (LinkedForeignAccount) o;
    return Objects.equals(this.accountId, linkedForeignAccount.accountId) &&
        Objects.equals(this.eligibleForSearch, linkedForeignAccount.eligibleForSearch) &&
        Objects.equals(this.id, linkedForeignAccount.id) &&
        Objects.equals(this.internalWebPropertyId, linkedForeignAccount.internalWebPropertyId) &&
        Objects.equals(this.kind, linkedForeignAccount.kind) &&
        Objects.equals(this.linkedAccountId, linkedForeignAccount.linkedAccountId) &&
        Objects.equals(this.remarketingAudienceId, linkedForeignAccount.remarketingAudienceId) &&
        Objects.equals(this.status, linkedForeignAccount.status) &&
        Objects.equals(this.type, linkedForeignAccount.type) &&
        Objects.equals(this.webPropertyId, linkedForeignAccount.webPropertyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, eligibleForSearch, id, internalWebPropertyId, kind, linkedAccountId, remarketingAudienceId, status, type, webPropertyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkedForeignAccount {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    eligibleForSearch: ").append(toIndentedString(eligibleForSearch)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    internalWebPropertyId: ").append(toIndentedString(internalWebPropertyId)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    linkedAccountId: ").append(toIndentedString(linkedAccountId)).append("\n");
    sb.append("    remarketingAudienceId: ").append(toIndentedString(remarketingAudienceId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    webPropertyId: ").append(toIndentedString(webPropertyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("eligibleForSearch");
    openapiFields.add("id");
    openapiFields.add("internalWebPropertyId");
    openapiFields.add("kind");
    openapiFields.add("linkedAccountId");
    openapiFields.add("remarketingAudienceId");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("webPropertyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LinkedForeignAccount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LinkedForeignAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinkedForeignAccount is not found in the empty JSON string", LinkedForeignAccount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LinkedForeignAccount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LinkedForeignAccount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("internalWebPropertyId") != null && !jsonObj.get("internalWebPropertyId").isJsonNull()) && !jsonObj.get("internalWebPropertyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalWebPropertyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalWebPropertyId").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("linkedAccountId") != null && !jsonObj.get("linkedAccountId").isJsonNull()) && !jsonObj.get("linkedAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedAccountId").toString()));
      }
      if ((jsonObj.get("remarketingAudienceId") != null && !jsonObj.get("remarketingAudienceId").isJsonNull()) && !jsonObj.get("remarketingAudienceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remarketingAudienceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remarketingAudienceId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("webPropertyId") != null && !jsonObj.get("webPropertyId").isJsonNull()) && !jsonObj.get("webPropertyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webPropertyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webPropertyId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinkedForeignAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinkedForeignAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinkedForeignAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinkedForeignAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<LinkedForeignAccount>() {
           @Override
           public void write(JsonWriter out, LinkedForeignAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LinkedForeignAccount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LinkedForeignAccount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LinkedForeignAccount
   * @throws IOException if the JSON string is invalid with respect to LinkedForeignAccount
   */
  public static LinkedForeignAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinkedForeignAccount.class);
  }

  /**
   * Convert an instance of LinkedForeignAccount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

