/*
 * Google Analytics API
 * Views and manages your Google Analytics data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GoalEventDetailsEventConditionsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:11:22.913673-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoalEventDetailsEventConditionsInner {
  public static final String SERIALIZED_NAME_COMPARISON_TYPE = "comparisonType";
  @SerializedName(SERIALIZED_NAME_COMPARISON_TYPE)
  private String comparisonType;

  public static final String SERIALIZED_NAME_COMPARISON_VALUE = "comparisonValue";
  @SerializedName(SERIALIZED_NAME_COMPARISON_VALUE)
  private String comparisonValue;

  public static final String SERIALIZED_NAME_EXPRESSION = "expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  private String expression;

  public static final String SERIALIZED_NAME_MATCH_TYPE = "matchType";
  @SerializedName(SERIALIZED_NAME_MATCH_TYPE)
  private String matchType;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public GoalEventDetailsEventConditionsInner() {
  }

  public GoalEventDetailsEventConditionsInner comparisonType(String comparisonType) {
    this.comparisonType = comparisonType;
    return this;
  }

  /**
   * Type of comparison. Possible values are LESS_THAN, GREATER_THAN or EQUAL.
   * @return comparisonType
   */
  @javax.annotation.Nullable
  public String getComparisonType() {
    return comparisonType;
  }

  public void setComparisonType(String comparisonType) {
    this.comparisonType = comparisonType;
  }


  public GoalEventDetailsEventConditionsInner comparisonValue(String comparisonValue) {
    this.comparisonValue = comparisonValue;
    return this;
  }

  /**
   * Value used for this comparison.
   * @return comparisonValue
   */
  @javax.annotation.Nullable
  public String getComparisonValue() {
    return comparisonValue;
  }

  public void setComparisonValue(String comparisonValue) {
    this.comparisonValue = comparisonValue;
  }


  public GoalEventDetailsEventConditionsInner expression(String expression) {
    this.expression = expression;
    return this;
  }

  /**
   * Expression used for this match.
   * @return expression
   */
  @javax.annotation.Nullable
  public String getExpression() {
    return expression;
  }

  public void setExpression(String expression) {
    this.expression = expression;
  }


  public GoalEventDetailsEventConditionsInner matchType(String matchType) {
    this.matchType = matchType;
    return this;
  }

  /**
   * Type of the match to be performed. Possible values are REGEXP, BEGINS_WITH, or EXACT.
   * @return matchType
   */
  @javax.annotation.Nullable
  public String getMatchType() {
    return matchType;
  }

  public void setMatchType(String matchType) {
    this.matchType = matchType;
  }


  public GoalEventDetailsEventConditionsInner type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of this event condition. Possible values are CATEGORY, ACTION, LABEL, or VALUE.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoalEventDetailsEventConditionsInner goalEventDetailsEventConditionsInner = (GoalEventDetailsEventConditionsInner) o;
    return Objects.equals(this.comparisonType, goalEventDetailsEventConditionsInner.comparisonType) &&
        Objects.equals(this.comparisonValue, goalEventDetailsEventConditionsInner.comparisonValue) &&
        Objects.equals(this.expression, goalEventDetailsEventConditionsInner.expression) &&
        Objects.equals(this.matchType, goalEventDetailsEventConditionsInner.matchType) &&
        Objects.equals(this.type, goalEventDetailsEventConditionsInner.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comparisonType, comparisonValue, expression, matchType, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoalEventDetailsEventConditionsInner {\n");
    sb.append("    comparisonType: ").append(toIndentedString(comparisonType)).append("\n");
    sb.append("    comparisonValue: ").append(toIndentedString(comparisonValue)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    matchType: ").append(toIndentedString(matchType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comparisonType");
    openapiFields.add("comparisonValue");
    openapiFields.add("expression");
    openapiFields.add("matchType");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoalEventDetailsEventConditionsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoalEventDetailsEventConditionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoalEventDetailsEventConditionsInner is not found in the empty JSON string", GoalEventDetailsEventConditionsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoalEventDetailsEventConditionsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoalEventDetailsEventConditionsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comparisonType") != null && !jsonObj.get("comparisonType").isJsonNull()) && !jsonObj.get("comparisonType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comparisonType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comparisonType").toString()));
      }
      if ((jsonObj.get("comparisonValue") != null && !jsonObj.get("comparisonValue").isJsonNull()) && !jsonObj.get("comparisonValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comparisonValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comparisonValue").toString()));
      }
      if ((jsonObj.get("expression") != null && !jsonObj.get("expression").isJsonNull()) && !jsonObj.get("expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expression").toString()));
      }
      if ((jsonObj.get("matchType") != null && !jsonObj.get("matchType").isJsonNull()) && !jsonObj.get("matchType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchType").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoalEventDetailsEventConditionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoalEventDetailsEventConditionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoalEventDetailsEventConditionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoalEventDetailsEventConditionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GoalEventDetailsEventConditionsInner>() {
           @Override
           public void write(JsonWriter out, GoalEventDetailsEventConditionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoalEventDetailsEventConditionsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoalEventDetailsEventConditionsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoalEventDetailsEventConditionsInner
   * @throws IOException if the JSON string is invalid with respect to GoalEventDetailsEventConditionsInner
   */
  public static GoalEventDetailsEventConditionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoalEventDetailsEventConditionsInner.class);
  }

  /**
   * Convert an instance of GoalEventDetailsEventConditionsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

