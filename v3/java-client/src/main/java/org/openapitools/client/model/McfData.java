/*
 * Google Analytics API
 * Views and manages your Google Analytics data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GaDataProfileInfo;
import org.openapitools.client.model.GaDataQuery;
import org.openapitools.client.model.McfDataColumnHeadersInner;
import org.openapitools.client.model.McfDataRowsInnerInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Multi-Channel Funnels data for a given view (profile).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:01:26.696972-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class McfData {
  public static final String SERIALIZED_NAME_COLUMN_HEADERS = "columnHeaders";
  @SerializedName(SERIALIZED_NAME_COLUMN_HEADERS)
  private List<McfDataColumnHeadersInner> columnHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTAINS_SAMPLED_DATA = "containsSampledData";
  @SerializedName(SERIALIZED_NAME_CONTAINS_SAMPLED_DATA)
  private Boolean containsSampledData;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ITEMS_PER_PAGE = "itemsPerPage";
  @SerializedName(SERIALIZED_NAME_ITEMS_PER_PAGE)
  private Integer itemsPerPage;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "analytics#mcfData";

  public static final String SERIALIZED_NAME_NEXT_LINK = "nextLink";
  @SerializedName(SERIALIZED_NAME_NEXT_LINK)
  private String nextLink;

  public static final String SERIALIZED_NAME_PREVIOUS_LINK = "previousLink";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_LINK)
  private String previousLink;

  public static final String SERIALIZED_NAME_PROFILE_INFO = "profileInfo";
  @SerializedName(SERIALIZED_NAME_PROFILE_INFO)
  private GaDataProfileInfo profileInfo;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private GaDataQuery query;

  public static final String SERIALIZED_NAME_ROWS = "rows";
  @SerializedName(SERIALIZED_NAME_ROWS)
  private List<List<McfDataRowsInnerInner>> rows = new ArrayList<>();

  public static final String SERIALIZED_NAME_SAMPLE_SIZE = "sampleSize";
  @SerializedName(SERIALIZED_NAME_SAMPLE_SIZE)
  private String sampleSize;

  public static final String SERIALIZED_NAME_SAMPLE_SPACE = "sampleSpace";
  @SerializedName(SERIALIZED_NAME_SAMPLE_SPACE)
  private String sampleSpace;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_TOTAL_RESULTS = "totalResults";
  @SerializedName(SERIALIZED_NAME_TOTAL_RESULTS)
  private Integer totalResults;

  public static final String SERIALIZED_NAME_TOTALS_FOR_ALL_RESULTS = "totalsForAllResults";
  @SerializedName(SERIALIZED_NAME_TOTALS_FOR_ALL_RESULTS)
  private Map<String, String> totalsForAllResults = new HashMap<>();

  public McfData() {
  }

  public McfData columnHeaders(List<McfDataColumnHeadersInner> columnHeaders) {
    this.columnHeaders = columnHeaders;
    return this;
  }

  public McfData addColumnHeadersItem(McfDataColumnHeadersInner columnHeadersItem) {
    if (this.columnHeaders == null) {
      this.columnHeaders = new ArrayList<>();
    }
    this.columnHeaders.add(columnHeadersItem);
    return this;
  }

  /**
   * Column headers that list dimension names followed by the metric names. The order of dimensions and metrics is same as specified in the request.
   * @return columnHeaders
   */
  @javax.annotation.Nullable
  public List<McfDataColumnHeadersInner> getColumnHeaders() {
    return columnHeaders;
  }

  public void setColumnHeaders(List<McfDataColumnHeadersInner> columnHeaders) {
    this.columnHeaders = columnHeaders;
  }


  public McfData containsSampledData(Boolean containsSampledData) {
    this.containsSampledData = containsSampledData;
    return this;
  }

  /**
   * Determines if the Analytics data contains sampled data.
   * @return containsSampledData
   */
  @javax.annotation.Nullable
  public Boolean getContainsSampledData() {
    return containsSampledData;
  }

  public void setContainsSampledData(Boolean containsSampledData) {
    this.containsSampledData = containsSampledData;
  }


  public McfData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique ID for this data response.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public McfData itemsPerPage(Integer itemsPerPage) {
    this.itemsPerPage = itemsPerPage;
    return this;
  }

  /**
   * The maximum number of rows the response can contain, regardless of the actual number of rows returned. Its value ranges from 1 to 10,000 with a value of 1000 by default, or otherwise specified by the max-results query parameter.
   * @return itemsPerPage
   */
  @javax.annotation.Nullable
  public Integer getItemsPerPage() {
    return itemsPerPage;
  }

  public void setItemsPerPage(Integer itemsPerPage) {
    this.itemsPerPage = itemsPerPage;
  }


  public McfData kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Resource type.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public McfData nextLink(String nextLink) {
    this.nextLink = nextLink;
    return this;
  }

  /**
   * Link to next page for this Analytics data query.
   * @return nextLink
   */
  @javax.annotation.Nullable
  public String getNextLink() {
    return nextLink;
  }

  public void setNextLink(String nextLink) {
    this.nextLink = nextLink;
  }


  public McfData previousLink(String previousLink) {
    this.previousLink = previousLink;
    return this;
  }

  /**
   * Link to previous page for this Analytics data query.
   * @return previousLink
   */
  @javax.annotation.Nullable
  public String getPreviousLink() {
    return previousLink;
  }

  public void setPreviousLink(String previousLink) {
    this.previousLink = previousLink;
  }


  public McfData profileInfo(GaDataProfileInfo profileInfo) {
    this.profileInfo = profileInfo;
    return this;
  }

  /**
   * Get profileInfo
   * @return profileInfo
   */
  @javax.annotation.Nullable
  public GaDataProfileInfo getProfileInfo() {
    return profileInfo;
  }

  public void setProfileInfo(GaDataProfileInfo profileInfo) {
    this.profileInfo = profileInfo;
  }


  public McfData query(GaDataQuery query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @javax.annotation.Nullable
  public GaDataQuery getQuery() {
    return query;
  }

  public void setQuery(GaDataQuery query) {
    this.query = query;
  }


  public McfData rows(List<List<McfDataRowsInnerInner>> rows) {
    this.rows = rows;
    return this;
  }

  public McfData addRowsItem(List<McfDataRowsInnerInner> rowsItem) {
    if (this.rows == null) {
      this.rows = new ArrayList<>();
    }
    this.rows.add(rowsItem);
    return this;
  }

  /**
   * Analytics data rows, where each row contains a list of dimension values followed by the metric values. The order of dimensions and metrics is same as specified in the request.
   * @return rows
   */
  @javax.annotation.Nullable
  public List<List<McfDataRowsInnerInner>> getRows() {
    return rows;
  }

  public void setRows(List<List<McfDataRowsInnerInner>> rows) {
    this.rows = rows;
  }


  public McfData sampleSize(String sampleSize) {
    this.sampleSize = sampleSize;
    return this;
  }

  /**
   * The number of samples used to calculate the result.
   * @return sampleSize
   */
  @javax.annotation.Nullable
  public String getSampleSize() {
    return sampleSize;
  }

  public void setSampleSize(String sampleSize) {
    this.sampleSize = sampleSize;
  }


  public McfData sampleSpace(String sampleSpace) {
    this.sampleSpace = sampleSpace;
    return this;
  }

  /**
   * Total size of the sample space from which the samples were selected.
   * @return sampleSpace
   */
  @javax.annotation.Nullable
  public String getSampleSpace() {
    return sampleSpace;
  }

  public void setSampleSpace(String sampleSpace) {
    this.sampleSpace = sampleSpace;
  }


  public McfData selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * Link to this page.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  public McfData totalResults(Integer totalResults) {
    this.totalResults = totalResults;
    return this;
  }

  /**
   * The total number of rows for the query, regardless of the number of rows in the response.
   * @return totalResults
   */
  @javax.annotation.Nullable
  public Integer getTotalResults() {
    return totalResults;
  }

  public void setTotalResults(Integer totalResults) {
    this.totalResults = totalResults;
  }


  public McfData totalsForAllResults(Map<String, String> totalsForAllResults) {
    this.totalsForAllResults = totalsForAllResults;
    return this;
  }

  public McfData putTotalsForAllResultsItem(String key, String totalsForAllResultsItem) {
    if (this.totalsForAllResults == null) {
      this.totalsForAllResults = new HashMap<>();
    }
    this.totalsForAllResults.put(key, totalsForAllResultsItem);
    return this;
  }

  /**
   * Total values for the requested metrics over all the results, not just the results returned in this response. The order of the metric totals is same as the metric order specified in the request.
   * @return totalsForAllResults
   */
  @javax.annotation.Nullable
  public Map<String, String> getTotalsForAllResults() {
    return totalsForAllResults;
  }

  public void setTotalsForAllResults(Map<String, String> totalsForAllResults) {
    this.totalsForAllResults = totalsForAllResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    McfData mcfData = (McfData) o;
    return Objects.equals(this.columnHeaders, mcfData.columnHeaders) &&
        Objects.equals(this.containsSampledData, mcfData.containsSampledData) &&
        Objects.equals(this.id, mcfData.id) &&
        Objects.equals(this.itemsPerPage, mcfData.itemsPerPage) &&
        Objects.equals(this.kind, mcfData.kind) &&
        Objects.equals(this.nextLink, mcfData.nextLink) &&
        Objects.equals(this.previousLink, mcfData.previousLink) &&
        Objects.equals(this.profileInfo, mcfData.profileInfo) &&
        Objects.equals(this.query, mcfData.query) &&
        Objects.equals(this.rows, mcfData.rows) &&
        Objects.equals(this.sampleSize, mcfData.sampleSize) &&
        Objects.equals(this.sampleSpace, mcfData.sampleSpace) &&
        Objects.equals(this.selfLink, mcfData.selfLink) &&
        Objects.equals(this.totalResults, mcfData.totalResults) &&
        Objects.equals(this.totalsForAllResults, mcfData.totalsForAllResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnHeaders, containsSampledData, id, itemsPerPage, kind, nextLink, previousLink, profileInfo, query, rows, sampleSize, sampleSpace, selfLink, totalResults, totalsForAllResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class McfData {\n");
    sb.append("    columnHeaders: ").append(toIndentedString(columnHeaders)).append("\n");
    sb.append("    containsSampledData: ").append(toIndentedString(containsSampledData)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    itemsPerPage: ").append(toIndentedString(itemsPerPage)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    nextLink: ").append(toIndentedString(nextLink)).append("\n");
    sb.append("    previousLink: ").append(toIndentedString(previousLink)).append("\n");
    sb.append("    profileInfo: ").append(toIndentedString(profileInfo)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    sampleSize: ").append(toIndentedString(sampleSize)).append("\n");
    sb.append("    sampleSpace: ").append(toIndentedString(sampleSpace)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    totalResults: ").append(toIndentedString(totalResults)).append("\n");
    sb.append("    totalsForAllResults: ").append(toIndentedString(totalsForAllResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columnHeaders");
    openapiFields.add("containsSampledData");
    openapiFields.add("id");
    openapiFields.add("itemsPerPage");
    openapiFields.add("kind");
    openapiFields.add("nextLink");
    openapiFields.add("previousLink");
    openapiFields.add("profileInfo");
    openapiFields.add("query");
    openapiFields.add("rows");
    openapiFields.add("sampleSize");
    openapiFields.add("sampleSpace");
    openapiFields.add("selfLink");
    openapiFields.add("totalResults");
    openapiFields.add("totalsForAllResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to McfData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!McfData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in McfData is not found in the empty JSON string", McfData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!McfData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `McfData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("columnHeaders") != null && !jsonObj.get("columnHeaders").isJsonNull()) {
        JsonArray jsonArraycolumnHeaders = jsonObj.getAsJsonArray("columnHeaders");
        if (jsonArraycolumnHeaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("columnHeaders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `columnHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("columnHeaders").toString()));
          }

          // validate the optional field `columnHeaders` (array)
          for (int i = 0; i < jsonArraycolumnHeaders.size(); i++) {
            McfDataColumnHeadersInner.validateJsonElement(jsonArraycolumnHeaders.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("nextLink") != null && !jsonObj.get("nextLink").isJsonNull()) && !jsonObj.get("nextLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextLink").toString()));
      }
      if ((jsonObj.get("previousLink") != null && !jsonObj.get("previousLink").isJsonNull()) && !jsonObj.get("previousLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previousLink").toString()));
      }
      // validate the optional field `profileInfo`
      if (jsonObj.get("profileInfo") != null && !jsonObj.get("profileInfo").isJsonNull()) {
        GaDataProfileInfo.validateJsonElement(jsonObj.get("profileInfo"));
      }
      // validate the optional field `query`
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) {
        GaDataQuery.validateJsonElement(jsonObj.get("query"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rows") != null && !jsonObj.get("rows").isJsonNull() && !jsonObj.get("rows").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rows` to be an array in the JSON string but got `%s`", jsonObj.get("rows").toString()));
      }
      if ((jsonObj.get("sampleSize") != null && !jsonObj.get("sampleSize").isJsonNull()) && !jsonObj.get("sampleSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sampleSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sampleSize").toString()));
      }
      if ((jsonObj.get("sampleSpace") != null && !jsonObj.get("sampleSpace").isJsonNull()) && !jsonObj.get("sampleSpace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sampleSpace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sampleSpace").toString()));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!McfData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'McfData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<McfData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(McfData.class));

       return (TypeAdapter<T>) new TypeAdapter<McfData>() {
           @Override
           public void write(JsonWriter out, McfData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public McfData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of McfData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of McfData
   * @throws IOException if the JSON string is invalid with respect to McfData
   */
  public static McfData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, McfData.class);
  }

  /**
   * Convert an instance of McfData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

