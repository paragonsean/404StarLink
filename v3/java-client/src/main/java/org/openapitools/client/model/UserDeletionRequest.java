/*
 * Google Analytics API
 * Views and manages your Google Analytics data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.UserDeletionRequestId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JSON template for a user deletion request resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:01:26.696972-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserDeletionRequest {
  public static final String SERIALIZED_NAME_DELETION_REQUEST_TIME = "deletionRequestTime";
  @SerializedName(SERIALIZED_NAME_DELETION_REQUEST_TIME)
  private OffsetDateTime deletionRequestTime;

  public static final String SERIALIZED_NAME_FIREBASE_PROJECT_ID = "firebaseProjectId";
  @SerializedName(SERIALIZED_NAME_FIREBASE_PROJECT_ID)
  private String firebaseProjectId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UserDeletionRequestId id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "analytics#userDeletionRequest";

  public static final String SERIALIZED_NAME_PROPERTY_ID = "propertyId";
  @SerializedName(SERIALIZED_NAME_PROPERTY_ID)
  private String propertyId;

  public static final String SERIALIZED_NAME_WEB_PROPERTY_ID = "webPropertyId";
  @SerializedName(SERIALIZED_NAME_WEB_PROPERTY_ID)
  private String webPropertyId;

  public UserDeletionRequest() {
  }

  public UserDeletionRequest(
     OffsetDateTime deletionRequestTime
  ) {
    this();
    this.deletionRequestTime = deletionRequestTime;
  }

  /**
   * This marks the point in time for which all user data before should be deleted
   * @return deletionRequestTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletionRequestTime() {
    return deletionRequestTime;
  }



  public UserDeletionRequest firebaseProjectId(String firebaseProjectId) {
    this.firebaseProjectId = firebaseProjectId;
    return this;
  }

  /**
   * Firebase Project Id
   * @return firebaseProjectId
   */
  @javax.annotation.Nullable
  public String getFirebaseProjectId() {
    return firebaseProjectId;
  }

  public void setFirebaseProjectId(String firebaseProjectId) {
    this.firebaseProjectId = firebaseProjectId;
  }


  public UserDeletionRequest id(UserDeletionRequestId id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UserDeletionRequestId getId() {
    return id;
  }

  public void setId(UserDeletionRequestId id) {
    this.id = id;
  }


  public UserDeletionRequest kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Value is \&quot;analytics#userDeletionRequest\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public UserDeletionRequest propertyId(String propertyId) {
    this.propertyId = propertyId;
    return this;
  }

  /**
   * Property ID
   * @return propertyId
   */
  @javax.annotation.Nullable
  public String getPropertyId() {
    return propertyId;
  }

  public void setPropertyId(String propertyId) {
    this.propertyId = propertyId;
  }


  public UserDeletionRequest webPropertyId(String webPropertyId) {
    this.webPropertyId = webPropertyId;
    return this;
  }

  /**
   * Web property ID of the form UA-XXXXX-YY.
   * @return webPropertyId
   */
  @javax.annotation.Nullable
  public String getWebPropertyId() {
    return webPropertyId;
  }

  public void setWebPropertyId(String webPropertyId) {
    this.webPropertyId = webPropertyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserDeletionRequest userDeletionRequest = (UserDeletionRequest) o;
    return Objects.equals(this.deletionRequestTime, userDeletionRequest.deletionRequestTime) &&
        Objects.equals(this.firebaseProjectId, userDeletionRequest.firebaseProjectId) &&
        Objects.equals(this.id, userDeletionRequest.id) &&
        Objects.equals(this.kind, userDeletionRequest.kind) &&
        Objects.equals(this.propertyId, userDeletionRequest.propertyId) &&
        Objects.equals(this.webPropertyId, userDeletionRequest.webPropertyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deletionRequestTime, firebaseProjectId, id, kind, propertyId, webPropertyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserDeletionRequest {\n");
    sb.append("    deletionRequestTime: ").append(toIndentedString(deletionRequestTime)).append("\n");
    sb.append("    firebaseProjectId: ").append(toIndentedString(firebaseProjectId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    propertyId: ").append(toIndentedString(propertyId)).append("\n");
    sb.append("    webPropertyId: ").append(toIndentedString(webPropertyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deletionRequestTime");
    openapiFields.add("firebaseProjectId");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("propertyId");
    openapiFields.add("webPropertyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserDeletionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserDeletionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserDeletionRequest is not found in the empty JSON string", UserDeletionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserDeletionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserDeletionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("firebaseProjectId") != null && !jsonObj.get("firebaseProjectId").isJsonNull()) && !jsonObj.get("firebaseProjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firebaseProjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firebaseProjectId").toString()));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        UserDeletionRequestId.validateJsonElement(jsonObj.get("id"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("propertyId") != null && !jsonObj.get("propertyId").isJsonNull()) && !jsonObj.get("propertyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `propertyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("propertyId").toString()));
      }
      if ((jsonObj.get("webPropertyId") != null && !jsonObj.get("webPropertyId").isJsonNull()) && !jsonObj.get("webPropertyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webPropertyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webPropertyId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserDeletionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserDeletionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserDeletionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserDeletionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UserDeletionRequest>() {
           @Override
           public void write(JsonWriter out, UserDeletionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserDeletionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserDeletionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserDeletionRequest
   * @throws IOException if the JSON string is invalid with respect to UserDeletionRequest
   */
  public static UserDeletionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserDeletionRequest.class);
  }

  /**
   * Convert an instance of UserDeletionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

