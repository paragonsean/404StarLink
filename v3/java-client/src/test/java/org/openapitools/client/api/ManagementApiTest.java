/*
 * Google Analytics API
 * Views and manages your Google Analytics data.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountSummaries;
import org.openapitools.client.model.Accounts;
import org.openapitools.client.model.AnalyticsDataimportDeleteUploadDataRequest;
import org.openapitools.client.model.CustomDataSources;
import org.openapitools.client.model.CustomDimension;
import org.openapitools.client.model.CustomDimensions;
import org.openapitools.client.model.CustomMetric;
import org.openapitools.client.model.CustomMetrics;
import org.openapitools.client.model.EntityAdWordsLink;
import org.openapitools.client.model.EntityAdWordsLinks;
import org.openapitools.client.model.EntityUserLink;
import org.openapitools.client.model.EntityUserLinks;
import org.openapitools.client.model.Experiment;
import org.openapitools.client.model.Experiments;
import org.openapitools.client.model.Filter;
import org.openapitools.client.model.Filters;
import org.openapitools.client.model.Goal;
import org.openapitools.client.model.Goals;
import org.openapitools.client.model.HashClientIdRequest;
import org.openapitools.client.model.HashClientIdResponse;
import org.openapitools.client.model.Profile;
import org.openapitools.client.model.ProfileFilterLink;
import org.openapitools.client.model.ProfileFilterLinks;
import org.openapitools.client.model.Profiles;
import org.openapitools.client.model.RemarketingAudience;
import org.openapitools.client.model.RemarketingAudiences;
import org.openapitools.client.model.Segments;
import org.openapitools.client.model.UnsampledReport;
import org.openapitools.client.model.UnsampledReports;
import org.openapitools.client.model.Upload;
import org.openapitools.client.model.Uploads;
import org.openapitools.client.model.Webproperties;
import org.openapitools.client.model.Webproperty;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementApi
 */
@Disabled
public class ManagementApiTest {

    private final ManagementApi api = new ManagementApi();

    /**
     * Lists account summaries (lightweight tree comprised of accounts/properties/profiles) to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementAccountSummariesListTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        AccountSummaries response = api.analyticsManagementAccountSummariesList(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        // TODO: test validations
    }

    /**
     * Removes a user from the given account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementAccountUserLinksDeleteTest() throws ApiException {
        String accountId = null;
        String linkId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.analyticsManagementAccountUserLinksDelete(accountId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Adds a new user to the given account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementAccountUserLinksInsertTest() throws ApiException {
        String accountId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        EntityUserLink entityUserLink = null;
        EntityUserLink response = api.analyticsManagementAccountUserLinksInsert(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink);
        // TODO: test validations
    }

    /**
     * Lists account-user links for a given account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementAccountUserLinksListTest() throws ApiException {
        String accountId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        EntityUserLinks response = api.analyticsManagementAccountUserLinksList(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        // TODO: test validations
    }

    /**
     * Updates permissions for an existing user on the given account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementAccountUserLinksUpdateTest() throws ApiException {
        String accountId = null;
        String linkId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        EntityUserLink entityUserLink = null;
        EntityUserLink response = api.analyticsManagementAccountUserLinksUpdate(accountId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink);
        // TODO: test validations
    }

    /**
     * Lists all accounts to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementAccountsListTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        Accounts response = api.analyticsManagementAccountsList(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        // TODO: test validations
    }

    /**
     * Hashes the given Client ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementClientIdHashClientIdTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        HashClientIdRequest hashClientIdRequest = null;
        HashClientIdResponse response = api.analyticsManagementClientIdHashClientId(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, hashClientIdRequest);
        // TODO: test validations
    }

    /**
     * List custom data sources to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementCustomDataSourcesListTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        CustomDataSources response = api.analyticsManagementCustomDataSourcesList(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        // TODO: test validations
    }

    /**
     * Get a custom dimension to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementCustomDimensionsGetTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String customDimensionId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        CustomDimension response = api.analyticsManagementCustomDimensionsGet(accountId, webPropertyId, customDimensionId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Create a new custom dimension.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementCustomDimensionsInsertTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        CustomDimension customDimension = null;
        CustomDimension response = api.analyticsManagementCustomDimensionsInsert(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, customDimension);
        // TODO: test validations
    }

    /**
     * Lists custom dimensions to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementCustomDimensionsListTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        CustomDimensions response = api.analyticsManagementCustomDimensionsList(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        // TODO: test validations
    }

    /**
     * Updates an existing custom dimension. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementCustomDimensionsPatchTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String customDimensionId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Boolean ignoreCustomDataSourceLinks = null;
        CustomDimension customDimension = null;
        CustomDimension response = api.analyticsManagementCustomDimensionsPatch(accountId, webPropertyId, customDimensionId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customDimension);
        // TODO: test validations
    }

    /**
     * Updates an existing custom dimension.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementCustomDimensionsUpdateTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String customDimensionId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Boolean ignoreCustomDataSourceLinks = null;
        CustomDimension customDimension = null;
        CustomDimension response = api.analyticsManagementCustomDimensionsUpdate(accountId, webPropertyId, customDimensionId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customDimension);
        // TODO: test validations
    }

    /**
     * Get a custom metric to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementCustomMetricsGetTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String customMetricId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        CustomMetric response = api.analyticsManagementCustomMetricsGet(accountId, webPropertyId, customMetricId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Create a new custom metric.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementCustomMetricsInsertTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        CustomMetric customMetric = null;
        CustomMetric response = api.analyticsManagementCustomMetricsInsert(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, customMetric);
        // TODO: test validations
    }

    /**
     * Lists custom metrics to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementCustomMetricsListTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        CustomMetrics response = api.analyticsManagementCustomMetricsList(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        // TODO: test validations
    }

    /**
     * Updates an existing custom metric. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementCustomMetricsPatchTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String customMetricId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Boolean ignoreCustomDataSourceLinks = null;
        CustomMetric customMetric = null;
        CustomMetric response = api.analyticsManagementCustomMetricsPatch(accountId, webPropertyId, customMetricId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customMetric);
        // TODO: test validations
    }

    /**
     * Updates an existing custom metric.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementCustomMetricsUpdateTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String customMetricId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Boolean ignoreCustomDataSourceLinks = null;
        CustomMetric customMetric = null;
        CustomMetric response = api.analyticsManagementCustomMetricsUpdate(accountId, webPropertyId, customMetricId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ignoreCustomDataSourceLinks, customMetric);
        // TODO: test validations
    }

    /**
     * Delete an experiment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementExperimentsDeleteTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String experimentId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.analyticsManagementExperimentsDelete(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Returns an experiment to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementExperimentsGetTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String experimentId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Experiment response = api.analyticsManagementExperimentsGet(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Create a new experiment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementExperimentsInsertTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Experiment experiment = null;
        Experiment response = api.analyticsManagementExperimentsInsert(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, experiment);
        // TODO: test validations
    }

    /**
     * Lists experiments to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementExperimentsListTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        Experiments response = api.analyticsManagementExperimentsList(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        // TODO: test validations
    }

    /**
     * Update an existing experiment. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementExperimentsPatchTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String experimentId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Experiment experiment = null;
        Experiment response = api.analyticsManagementExperimentsPatch(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, experiment);
        // TODO: test validations
    }

    /**
     * Update an existing experiment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementExperimentsUpdateTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String experimentId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Experiment experiment = null;
        Experiment response = api.analyticsManagementExperimentsUpdate(accountId, webPropertyId, profileId, experimentId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, experiment);
        // TODO: test validations
    }

    /**
     * Delete a filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementFiltersDeleteTest() throws ApiException {
        String accountId = null;
        String filterId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Filter response = api.analyticsManagementFiltersDelete(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Returns filters to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementFiltersGetTest() throws ApiException {
        String accountId = null;
        String filterId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Filter response = api.analyticsManagementFiltersGet(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Create a new filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementFiltersInsertTest() throws ApiException {
        String accountId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Filter filter = null;
        Filter response = api.analyticsManagementFiltersInsert(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, filter);
        // TODO: test validations
    }

    /**
     * Lists all filters for an account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementFiltersListTest() throws ApiException {
        String accountId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        Filters response = api.analyticsManagementFiltersList(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        // TODO: test validations
    }

    /**
     * Updates an existing filter. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementFiltersPatchTest() throws ApiException {
        String accountId = null;
        String filterId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Filter filter = null;
        Filter response = api.analyticsManagementFiltersPatch(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, filter);
        // TODO: test validations
    }

    /**
     * Updates an existing filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementFiltersUpdateTest() throws ApiException {
        String accountId = null;
        String filterId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Filter filter = null;
        Filter response = api.analyticsManagementFiltersUpdate(accountId, filterId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, filter);
        // TODO: test validations
    }

    /**
     * Gets a goal to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementGoalsGetTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String goalId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Goal response = api.analyticsManagementGoalsGet(accountId, webPropertyId, profileId, goalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Create a new goal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementGoalsInsertTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Goal goal = null;
        Goal response = api.analyticsManagementGoalsInsert(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, goal);
        // TODO: test validations
    }

    /**
     * Lists goals to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementGoalsListTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        Goals response = api.analyticsManagementGoalsList(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        // TODO: test validations
    }

    /**
     * Updates an existing goal. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementGoalsPatchTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String goalId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Goal goal = null;
        Goal response = api.analyticsManagementGoalsPatch(accountId, webPropertyId, profileId, goalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, goal);
        // TODO: test validations
    }

    /**
     * Updates an existing goal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementGoalsUpdateTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String goalId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Goal goal = null;
        Goal response = api.analyticsManagementGoalsUpdate(accountId, webPropertyId, profileId, goalId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, goal);
        // TODO: test validations
    }

    /**
     * Delete a profile filter link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementProfileFilterLinksDeleteTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String linkId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.analyticsManagementProfileFilterLinksDelete(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Returns a single profile filter link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementProfileFilterLinksGetTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String linkId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ProfileFilterLink response = api.analyticsManagementProfileFilterLinksGet(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Create a new profile filter link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementProfileFilterLinksInsertTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ProfileFilterLink profileFilterLink = null;
        ProfileFilterLink response = api.analyticsManagementProfileFilterLinksInsert(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profileFilterLink);
        // TODO: test validations
    }

    /**
     * Lists all profile filter links for a profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementProfileFilterLinksListTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        ProfileFilterLinks response = api.analyticsManagementProfileFilterLinksList(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        // TODO: test validations
    }

    /**
     * Update an existing profile filter link. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementProfileFilterLinksPatchTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String linkId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ProfileFilterLink profileFilterLink = null;
        ProfileFilterLink response = api.analyticsManagementProfileFilterLinksPatch(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profileFilterLink);
        // TODO: test validations
    }

    /**
     * Update an existing profile filter link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementProfileFilterLinksUpdateTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String linkId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ProfileFilterLink profileFilterLink = null;
        ProfileFilterLink response = api.analyticsManagementProfileFilterLinksUpdate(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profileFilterLink);
        // TODO: test validations
    }

    /**
     * Removes a user from the given view (profile).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementProfileUserLinksDeleteTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String linkId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.analyticsManagementProfileUserLinksDelete(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Adds a new user to the given view (profile).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementProfileUserLinksInsertTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        EntityUserLink entityUserLink = null;
        EntityUserLink response = api.analyticsManagementProfileUserLinksInsert(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink);
        // TODO: test validations
    }

    /**
     * Lists profile-user links for a given view (profile).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementProfileUserLinksListTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        EntityUserLinks response = api.analyticsManagementProfileUserLinksList(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        // TODO: test validations
    }

    /**
     * Updates permissions for an existing user on the given view (profile).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementProfileUserLinksUpdateTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String linkId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        EntityUserLink entityUserLink = null;
        EntityUserLink response = api.analyticsManagementProfileUserLinksUpdate(accountId, webPropertyId, profileId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink);
        // TODO: test validations
    }

    /**
     * Deletes a view (profile).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementProfilesDeleteTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.analyticsManagementProfilesDelete(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Gets a view (profile) to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementProfilesGetTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Profile response = api.analyticsManagementProfilesGet(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Create a new view (profile).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementProfilesInsertTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Profile profile = null;
        Profile response = api.analyticsManagementProfilesInsert(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profile);
        // TODO: test validations
    }

    /**
     * Lists views (profiles) to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementProfilesListTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        Profiles response = api.analyticsManagementProfilesList(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        // TODO: test validations
    }

    /**
     * Updates an existing view (profile). This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementProfilesPatchTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Profile profile = null;
        Profile response = api.analyticsManagementProfilesPatch(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profile);
        // TODO: test validations
    }

    /**
     * Updates an existing view (profile).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementProfilesUpdateTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Profile profile = null;
        Profile response = api.analyticsManagementProfilesUpdate(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, profile);
        // TODO: test validations
    }

    /**
     * Delete a remarketing audience.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementRemarketingAudienceDeleteTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String remarketingAudienceId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.analyticsManagementRemarketingAudienceDelete(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Gets a remarketing audience to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementRemarketingAudienceGetTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String remarketingAudienceId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        RemarketingAudience response = api.analyticsManagementRemarketingAudienceGet(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Creates a new remarketing audience.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementRemarketingAudienceInsertTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        RemarketingAudience remarketingAudience = null;
        RemarketingAudience response = api.analyticsManagementRemarketingAudienceInsert(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, remarketingAudience);
        // TODO: test validations
    }

    /**
     * Lists remarketing audiences to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementRemarketingAudienceListTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        String type = null;
        RemarketingAudiences response = api.analyticsManagementRemarketingAudienceList(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex, type);
        // TODO: test validations
    }

    /**
     * Updates an existing remarketing audience. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementRemarketingAudiencePatchTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String remarketingAudienceId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        RemarketingAudience remarketingAudience = null;
        RemarketingAudience response = api.analyticsManagementRemarketingAudiencePatch(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, remarketingAudience);
        // TODO: test validations
    }

    /**
     * Updates an existing remarketing audience.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementRemarketingAudienceUpdateTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String remarketingAudienceId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        RemarketingAudience remarketingAudience = null;
        RemarketingAudience response = api.analyticsManagementRemarketingAudienceUpdate(accountId, webPropertyId, remarketingAudienceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, remarketingAudience);
        // TODO: test validations
    }

    /**
     * Lists segments to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementSegmentsListTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        Segments response = api.analyticsManagementSegmentsList(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        // TODO: test validations
    }

    /**
     * Deletes an unsampled report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementUnsampledReportsDeleteTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String unsampledReportId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.analyticsManagementUnsampledReportsDelete(accountId, webPropertyId, profileId, unsampledReportId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Returns a single unsampled report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementUnsampledReportsGetTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String unsampledReportId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        UnsampledReport response = api.analyticsManagementUnsampledReportsGet(accountId, webPropertyId, profileId, unsampledReportId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Create a new unsampled report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementUnsampledReportsInsertTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        UnsampledReport unsampledReport = null;
        UnsampledReport response = api.analyticsManagementUnsampledReportsInsert(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, unsampledReport);
        // TODO: test validations
    }

    /**
     * Lists unsampled reports to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementUnsampledReportsListTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String profileId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        UnsampledReports response = api.analyticsManagementUnsampledReportsList(accountId, webPropertyId, profileId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        // TODO: test validations
    }

    /**
     * Delete data associated with a previous upload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementUploadsDeleteUploadDataTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String customDataSourceId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        AnalyticsDataimportDeleteUploadDataRequest analyticsDataimportDeleteUploadDataRequest = null;
        api.analyticsManagementUploadsDeleteUploadData(accountId, webPropertyId, customDataSourceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, analyticsDataimportDeleteUploadDataRequest);
        // TODO: test validations
    }

    /**
     * List uploads to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementUploadsGetTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String customDataSourceId = null;
        String uploadId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Upload response = api.analyticsManagementUploadsGet(accountId, webPropertyId, customDataSourceId, uploadId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * List uploads to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementUploadsListTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String customDataSourceId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        Uploads response = api.analyticsManagementUploadsList(accountId, webPropertyId, customDataSourceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        // TODO: test validations
    }

    /**
     * Upload data for a custom data source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementUploadsUploadDataTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String customDataSourceId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Upload response = api.analyticsManagementUploadsUploadData(accountId, webPropertyId, customDataSourceId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Deletes a web property-Google Ads link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementWebPropertyAdWordsLinksDeleteTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String webPropertyAdWordsLinkId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.analyticsManagementWebPropertyAdWordsLinksDelete(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Returns a web property-Google Ads link to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementWebPropertyAdWordsLinksGetTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String webPropertyAdWordsLinkId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        EntityAdWordsLink response = api.analyticsManagementWebPropertyAdWordsLinksGet(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Creates a webProperty-Google Ads link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementWebPropertyAdWordsLinksInsertTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        EntityAdWordsLink entityAdWordsLink = null;
        EntityAdWordsLink response = api.analyticsManagementWebPropertyAdWordsLinksInsert(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityAdWordsLink);
        // TODO: test validations
    }

    /**
     * Lists webProperty-Google Ads links for a given web property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementWebPropertyAdWordsLinksListTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        EntityAdWordsLinks response = api.analyticsManagementWebPropertyAdWordsLinksList(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        // TODO: test validations
    }

    /**
     * Updates an existing webProperty-Google Ads link. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementWebPropertyAdWordsLinksPatchTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String webPropertyAdWordsLinkId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        EntityAdWordsLink entityAdWordsLink = null;
        EntityAdWordsLink response = api.analyticsManagementWebPropertyAdWordsLinksPatch(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityAdWordsLink);
        // TODO: test validations
    }

    /**
     * Updates an existing webProperty-Google Ads link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementWebPropertyAdWordsLinksUpdateTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String webPropertyAdWordsLinkId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        EntityAdWordsLink entityAdWordsLink = null;
        EntityAdWordsLink response = api.analyticsManagementWebPropertyAdWordsLinksUpdate(accountId, webPropertyId, webPropertyAdWordsLinkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityAdWordsLink);
        // TODO: test validations
    }

    /**
     * Gets a web property to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementWebpropertiesGetTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Webproperty response = api.analyticsManagementWebpropertiesGet(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Create a new property if the account has fewer than 20 properties. Web properties are visible in the Google Analytics interface only if they have at least one profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementWebpropertiesInsertTest() throws ApiException {
        String accountId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Webproperty webproperty = null;
        Webproperty response = api.analyticsManagementWebpropertiesInsert(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, webproperty);
        // TODO: test validations
    }

    /**
     * Lists web properties to which the user has access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementWebpropertiesListTest() throws ApiException {
        String accountId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        Webproperties response = api.analyticsManagementWebpropertiesList(accountId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        // TODO: test validations
    }

    /**
     * Updates an existing web property. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementWebpropertiesPatchTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Webproperty webproperty = null;
        Webproperty response = api.analyticsManagementWebpropertiesPatch(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, webproperty);
        // TODO: test validations
    }

    /**
     * Updates an existing web property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementWebpropertiesUpdateTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Webproperty webproperty = null;
        Webproperty response = api.analyticsManagementWebpropertiesUpdate(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, webproperty);
        // TODO: test validations
    }

    /**
     * Removes a user from the given web property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementWebpropertyUserLinksDeleteTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String linkId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.analyticsManagementWebpropertyUserLinksDelete(accountId, webPropertyId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Adds a new user to the given web property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementWebpropertyUserLinksInsertTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        EntityUserLink entityUserLink = null;
        EntityUserLink response = api.analyticsManagementWebpropertyUserLinksInsert(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink);
        // TODO: test validations
    }

    /**
     * Lists webProperty-user links for a given web property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementWebpropertyUserLinksListTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Integer maxResults = null;
        Integer startIndex = null;
        EntityUserLinks response = api.analyticsManagementWebpropertyUserLinksList(accountId, webPropertyId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, maxResults, startIndex);
        // TODO: test validations
    }

    /**
     * Updates permissions for an existing user on the given web property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analyticsManagementWebpropertyUserLinksUpdateTest() throws ApiException {
        String accountId = null;
        String webPropertyId = null;
        String linkId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        EntityUserLink entityUserLink = null;
        EntityUserLink response = api.analyticsManagementWebpropertyUserLinksUpdate(accountId, webPropertyId, linkId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, entityUserLink);
        // TODO: test validations
    }

}
