/*
 * reCAPTCHA Enterprise API
 * Help protect your website from fraudulent activity, spam, and abuse without creating friction.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest;
import org.openapitools.client.model.GoogleCloudRecaptchaenterpriseV1Assessment;
import org.openapitools.client.model.GoogleCloudRecaptchaenterpriseV1FirewallPolicy;
import org.openapitools.client.model.GoogleCloudRecaptchaenterpriseV1Key;
import org.openapitools.client.model.GoogleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse;
import org.openapitools.client.model.GoogleCloudRecaptchaenterpriseV1ListKeysResponse;
import org.openapitools.client.model.GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse;
import org.openapitools.client.model.GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse;
import org.openapitools.client.model.GoogleCloudRecaptchaenterpriseV1Metrics;
import org.openapitools.client.model.GoogleCloudRecaptchaenterpriseV1MigrateKeyRequest;
import org.openapitools.client.model.GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse;
import org.openapitools.client.model.GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsRequest;
import org.openapitools.client.model.GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Annotates a previously created Assessment to provide additional information on whether the event turned out to be authentic or fraudulent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recaptchaenterpriseProjectsAssessmentsAnnotateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest googleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest = null;
        Object response = api.recaptchaenterpriseProjectsAssessmentsAnnotate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest);
        // TODO: test validations
    }

    /**
     * Creates an Assessment of the likelihood an event is legitimate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recaptchaenterpriseProjectsAssessmentsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRecaptchaenterpriseV1Assessment googleCloudRecaptchaenterpriseV1Assessment = null;
        GoogleCloudRecaptchaenterpriseV1Assessment response = api.recaptchaenterpriseProjectsAssessmentsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRecaptchaenterpriseV1Assessment);
        // TODO: test validations
    }

    /**
     * Creates a new FirewallPolicy, specifying conditions at which reCAPTCHA Enterprise actions can be executed. A project may have a maximum of 1000 policies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recaptchaenterpriseProjectsFirewallpoliciesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRecaptchaenterpriseV1FirewallPolicy googleCloudRecaptchaenterpriseV1FirewallPolicy = null;
        GoogleCloudRecaptchaenterpriseV1FirewallPolicy response = api.recaptchaenterpriseProjectsFirewallpoliciesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRecaptchaenterpriseV1FirewallPolicy);
        // TODO: test validations
    }

    /**
     * Returns the list of all firewall policies that belong to a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recaptchaenterpriseProjectsFirewallpoliciesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse response = api.recaptchaenterpriseProjectsFirewallpoliciesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new reCAPTCHA Enterprise key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recaptchaenterpriseProjectsKeysCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRecaptchaenterpriseV1Key googleCloudRecaptchaenterpriseV1Key = null;
        GoogleCloudRecaptchaenterpriseV1Key response = api.recaptchaenterpriseProjectsKeysCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRecaptchaenterpriseV1Key);
        // TODO: test validations
    }

    /**
     * Deletes the specified key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recaptchaenterpriseProjectsKeysDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.recaptchaenterpriseProjectsKeysDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Get some aggregated metrics for a Key. This data can be used to build dashboards.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recaptchaenterpriseProjectsKeysGetMetricsTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRecaptchaenterpriseV1Metrics response = api.recaptchaenterpriseProjectsKeysGetMetrics(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns the list of all keys that belong to a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recaptchaenterpriseProjectsKeysListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudRecaptchaenterpriseV1ListKeysResponse response = api.recaptchaenterpriseProjectsKeysList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Migrates an existing key from reCAPTCHA to reCAPTCHA Enterprise. Once a key is migrated, it can be used from either product. SiteVerify requests are billed as CreateAssessment calls. You must be authenticated as one of the current owners of the reCAPTCHA Site Key, and your user must have the reCAPTCHA Enterprise Admin IAM role in the destination project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recaptchaenterpriseProjectsKeysMigrateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRecaptchaenterpriseV1MigrateKeyRequest googleCloudRecaptchaenterpriseV1MigrateKeyRequest = null;
        GoogleCloudRecaptchaenterpriseV1Key response = api.recaptchaenterpriseProjectsKeysMigrate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRecaptchaenterpriseV1MigrateKeyRequest);
        // TODO: test validations
    }

    /**
     * Updates the specified key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recaptchaenterpriseProjectsKeysPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        GoogleCloudRecaptchaenterpriseV1Key googleCloudRecaptchaenterpriseV1Key = null;
        GoogleCloudRecaptchaenterpriseV1Key response = api.recaptchaenterpriseProjectsKeysPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, googleCloudRecaptchaenterpriseV1Key);
        // TODO: test validations
    }

    /**
     * Returns the secret key related to the specified public key. You must use the legacy secret key only in a 3rd party integration with legacy reCAPTCHA.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String key = null;
        GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse response = api.recaptchaenterpriseProjectsKeysRetrieveLegacySecretKey($xgafv, accessToken, alt, paramCallback, fields, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, key);
        // TODO: test validations
    }

    /**
     * Search group memberships related to a given account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchTest() throws ApiException {
        String project = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsRequest googleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsRequest = null;
        GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse response = api.recaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearch(project, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsRequest);
        // TODO: test validations
    }

    /**
     * List groups of related accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recaptchaenterpriseProjectsRelatedaccountgroupsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse response = api.recaptchaenterpriseProjectsRelatedaccountgroupsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Get memberships in a group of related accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse response = api.recaptchaenterpriseProjectsRelatedaccountgroupsMembershipsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

}
