/*
 * reCAPTCHA Enterprise API
 * Help protect your website from fraudulent activity, spam, and abuse without creating friction.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRecaptchaenterpriseV1TransactionData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The event being assessed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:56:54.758298-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRecaptchaenterpriseV1Event {
  public static final String SERIALIZED_NAME_EXPECTED_ACTION = "expectedAction";
  @SerializedName(SERIALIZED_NAME_EXPECTED_ACTION)
  private String expectedAction;

  public static final String SERIALIZED_NAME_EXPRESS = "express";
  @SerializedName(SERIALIZED_NAME_EXPRESS)
  private Boolean express;

  public static final String SERIALIZED_NAME_FIREWALL_POLICY_EVALUATION = "firewallPolicyEvaluation";
  @SerializedName(SERIALIZED_NAME_FIREWALL_POLICY_EVALUATION)
  private Boolean firewallPolicyEvaluation;

  public static final String SERIALIZED_NAME_HASHED_ACCOUNT_ID = "hashedAccountId";
  @SerializedName(SERIALIZED_NAME_HASHED_ACCOUNT_ID)
  private byte[] hashedAccountId;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private List<String> headers = new ArrayList<>();

  public static final String SERIALIZED_NAME_JA3 = "ja3";
  @SerializedName(SERIALIZED_NAME_JA3)
  private String ja3;

  public static final String SERIALIZED_NAME_REQUESTED_URI = "requestedUri";
  @SerializedName(SERIALIZED_NAME_REQUESTED_URI)
  private String requestedUri;

  public static final String SERIALIZED_NAME_SITE_KEY = "siteKey";
  @SerializedName(SERIALIZED_NAME_SITE_KEY)
  private String siteKey;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_TRANSACTION_DATA = "transactionData";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DATA)
  private GoogleCloudRecaptchaenterpriseV1TransactionData transactionData;

  public static final String SERIALIZED_NAME_USER_AGENT = "userAgent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public static final String SERIALIZED_NAME_USER_IP_ADDRESS = "userIpAddress";
  @SerializedName(SERIALIZED_NAME_USER_IP_ADDRESS)
  private String userIpAddress;

  public static final String SERIALIZED_NAME_WAF_TOKEN_ASSESSMENT = "wafTokenAssessment";
  @SerializedName(SERIALIZED_NAME_WAF_TOKEN_ASSESSMENT)
  private Boolean wafTokenAssessment;

  public GoogleCloudRecaptchaenterpriseV1Event() {
  }

  public GoogleCloudRecaptchaenterpriseV1Event expectedAction(String expectedAction) {
    this.expectedAction = expectedAction;
    return this;
  }

  /**
   * Optional. The expected action for this type of event. This should be the same action provided at token generation time on client-side platforms already integrated with recaptcha enterprise.
   * @return expectedAction
   */
  @javax.annotation.Nullable
  public String getExpectedAction() {
    return expectedAction;
  }

  public void setExpectedAction(String expectedAction) {
    this.expectedAction = expectedAction;
  }


  public GoogleCloudRecaptchaenterpriseV1Event express(Boolean express) {
    this.express = express;
    return this;
  }

  /**
   * Optional. Flag for a reCAPTCHA express request for an assessment without a token. If enabled, &#x60;site_key&#x60; must reference a SCORE key with WAF feature set to EXPRESS.
   * @return express
   */
  @javax.annotation.Nullable
  public Boolean getExpress() {
    return express;
  }

  public void setExpress(Boolean express) {
    this.express = express;
  }


  public GoogleCloudRecaptchaenterpriseV1Event firewallPolicyEvaluation(Boolean firewallPolicyEvaluation) {
    this.firewallPolicyEvaluation = firewallPolicyEvaluation;
    return this;
  }

  /**
   * Optional. Flag for enabling firewall policy config assessment. If this flag is enabled, the firewall policy will be evaluated and a suggested firewall action will be returned in the response.
   * @return firewallPolicyEvaluation
   */
  @javax.annotation.Nullable
  public Boolean getFirewallPolicyEvaluation() {
    return firewallPolicyEvaluation;
  }

  public void setFirewallPolicyEvaluation(Boolean firewallPolicyEvaluation) {
    this.firewallPolicyEvaluation = firewallPolicyEvaluation;
  }


  public GoogleCloudRecaptchaenterpriseV1Event hashedAccountId(byte[] hashedAccountId) {
    this.hashedAccountId = hashedAccountId;
    return this;
  }

  /**
   * Optional. Unique stable hashed user identifier for the request. The identifier must be hashed using hmac-sha256 with stable secret.
   * @return hashedAccountId
   */
  @javax.annotation.Nullable
  public byte[] getHashedAccountId() {
    return hashedAccountId;
  }

  public void setHashedAccountId(byte[] hashedAccountId) {
    this.hashedAccountId = hashedAccountId;
  }


  public GoogleCloudRecaptchaenterpriseV1Event headers(List<String> headers) {
    this.headers = headers;
    return this;
  }

  public GoogleCloudRecaptchaenterpriseV1Event addHeadersItem(String headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

  /**
   * Optional. HTTP header information about the request.
   * @return headers
   */
  @javax.annotation.Nullable
  public List<String> getHeaders() {
    return headers;
  }

  public void setHeaders(List<String> headers) {
    this.headers = headers;
  }


  public GoogleCloudRecaptchaenterpriseV1Event ja3(String ja3) {
    this.ja3 = ja3;
    return this;
  }

  /**
   * Optional. Optional JA3 fingerprint for SSL clients.
   * @return ja3
   */
  @javax.annotation.Nullable
  public String getJa3() {
    return ja3;
  }

  public void setJa3(String ja3) {
    this.ja3 = ja3;
  }


  public GoogleCloudRecaptchaenterpriseV1Event requestedUri(String requestedUri) {
    this.requestedUri = requestedUri;
    return this;
  }

  /**
   * Optional. The URI resource the user requested that triggered an assessment.
   * @return requestedUri
   */
  @javax.annotation.Nullable
  public String getRequestedUri() {
    return requestedUri;
  }

  public void setRequestedUri(String requestedUri) {
    this.requestedUri = requestedUri;
  }


  public GoogleCloudRecaptchaenterpriseV1Event siteKey(String siteKey) {
    this.siteKey = siteKey;
    return this;
  }

  /**
   * Optional. The site key that was used to invoke reCAPTCHA Enterprise on your site and generate the token.
   * @return siteKey
   */
  @javax.annotation.Nullable
  public String getSiteKey() {
    return siteKey;
  }

  public void setSiteKey(String siteKey) {
    this.siteKey = siteKey;
  }


  public GoogleCloudRecaptchaenterpriseV1Event token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Optional. The user response token provided by the reCAPTCHA Enterprise client-side integration on your site.
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public GoogleCloudRecaptchaenterpriseV1Event transactionData(GoogleCloudRecaptchaenterpriseV1TransactionData transactionData) {
    this.transactionData = transactionData;
    return this;
  }

  /**
   * Get transactionData
   * @return transactionData
   */
  @javax.annotation.Nullable
  public GoogleCloudRecaptchaenterpriseV1TransactionData getTransactionData() {
    return transactionData;
  }

  public void setTransactionData(GoogleCloudRecaptchaenterpriseV1TransactionData transactionData) {
    this.transactionData = transactionData;
  }


  public GoogleCloudRecaptchaenterpriseV1Event userAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Optional. The user agent present in the request from the user&#39;s device related to this event.
   * @return userAgent
   */
  @javax.annotation.Nullable
  public String getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }


  public GoogleCloudRecaptchaenterpriseV1Event userIpAddress(String userIpAddress) {
    this.userIpAddress = userIpAddress;
    return this;
  }

  /**
   * Optional. The IP address in the request from the user&#39;s device related to this event.
   * @return userIpAddress
   */
  @javax.annotation.Nullable
  public String getUserIpAddress() {
    return userIpAddress;
  }

  public void setUserIpAddress(String userIpAddress) {
    this.userIpAddress = userIpAddress;
  }


  public GoogleCloudRecaptchaenterpriseV1Event wafTokenAssessment(Boolean wafTokenAssessment) {
    this.wafTokenAssessment = wafTokenAssessment;
    return this;
  }

  /**
   * Optional. Flag for running WAF token assessment. If enabled, the token must be specified, and have been created by a WAF-enabled key.
   * @return wafTokenAssessment
   */
  @javax.annotation.Nullable
  public Boolean getWafTokenAssessment() {
    return wafTokenAssessment;
  }

  public void setWafTokenAssessment(Boolean wafTokenAssessment) {
    this.wafTokenAssessment = wafTokenAssessment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRecaptchaenterpriseV1Event googleCloudRecaptchaenterpriseV1Event = (GoogleCloudRecaptchaenterpriseV1Event) o;
    return Objects.equals(this.expectedAction, googleCloudRecaptchaenterpriseV1Event.expectedAction) &&
        Objects.equals(this.express, googleCloudRecaptchaenterpriseV1Event.express) &&
        Objects.equals(this.firewallPolicyEvaluation, googleCloudRecaptchaenterpriseV1Event.firewallPolicyEvaluation) &&
        Arrays.equals(this.hashedAccountId, googleCloudRecaptchaenterpriseV1Event.hashedAccountId) &&
        Objects.equals(this.headers, googleCloudRecaptchaenterpriseV1Event.headers) &&
        Objects.equals(this.ja3, googleCloudRecaptchaenterpriseV1Event.ja3) &&
        Objects.equals(this.requestedUri, googleCloudRecaptchaenterpriseV1Event.requestedUri) &&
        Objects.equals(this.siteKey, googleCloudRecaptchaenterpriseV1Event.siteKey) &&
        Objects.equals(this.token, googleCloudRecaptchaenterpriseV1Event.token) &&
        Objects.equals(this.transactionData, googleCloudRecaptchaenterpriseV1Event.transactionData) &&
        Objects.equals(this.userAgent, googleCloudRecaptchaenterpriseV1Event.userAgent) &&
        Objects.equals(this.userIpAddress, googleCloudRecaptchaenterpriseV1Event.userIpAddress) &&
        Objects.equals(this.wafTokenAssessment, googleCloudRecaptchaenterpriseV1Event.wafTokenAssessment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expectedAction, express, firewallPolicyEvaluation, Arrays.hashCode(hashedAccountId), headers, ja3, requestedUri, siteKey, token, transactionData, userAgent, userIpAddress, wafTokenAssessment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRecaptchaenterpriseV1Event {\n");
    sb.append("    expectedAction: ").append(toIndentedString(expectedAction)).append("\n");
    sb.append("    express: ").append(toIndentedString(express)).append("\n");
    sb.append("    firewallPolicyEvaluation: ").append(toIndentedString(firewallPolicyEvaluation)).append("\n");
    sb.append("    hashedAccountId: ").append(toIndentedString(hashedAccountId)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    ja3: ").append(toIndentedString(ja3)).append("\n");
    sb.append("    requestedUri: ").append(toIndentedString(requestedUri)).append("\n");
    sb.append("    siteKey: ").append(toIndentedString(siteKey)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    transactionData: ").append(toIndentedString(transactionData)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    userIpAddress: ").append(toIndentedString(userIpAddress)).append("\n");
    sb.append("    wafTokenAssessment: ").append(toIndentedString(wafTokenAssessment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expectedAction");
    openapiFields.add("express");
    openapiFields.add("firewallPolicyEvaluation");
    openapiFields.add("hashedAccountId");
    openapiFields.add("headers");
    openapiFields.add("ja3");
    openapiFields.add("requestedUri");
    openapiFields.add("siteKey");
    openapiFields.add("token");
    openapiFields.add("transactionData");
    openapiFields.add("userAgent");
    openapiFields.add("userIpAddress");
    openapiFields.add("wafTokenAssessment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRecaptchaenterpriseV1Event
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRecaptchaenterpriseV1Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRecaptchaenterpriseV1Event is not found in the empty JSON string", GoogleCloudRecaptchaenterpriseV1Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRecaptchaenterpriseV1Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRecaptchaenterpriseV1Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expectedAction") != null && !jsonObj.get("expectedAction").isJsonNull()) && !jsonObj.get("expectedAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expectedAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expectedAction").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("headers") != null && !jsonObj.get("headers").isJsonNull() && !jsonObj.get("headers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `headers` to be an array in the JSON string but got `%s`", jsonObj.get("headers").toString()));
      }
      if ((jsonObj.get("ja3") != null && !jsonObj.get("ja3").isJsonNull()) && !jsonObj.get("ja3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ja3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ja3").toString()));
      }
      if ((jsonObj.get("requestedUri") != null && !jsonObj.get("requestedUri").isJsonNull()) && !jsonObj.get("requestedUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedUri").toString()));
      }
      if ((jsonObj.get("siteKey") != null && !jsonObj.get("siteKey").isJsonNull()) && !jsonObj.get("siteKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteKey").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      // validate the optional field `transactionData`
      if (jsonObj.get("transactionData") != null && !jsonObj.get("transactionData").isJsonNull()) {
        GoogleCloudRecaptchaenterpriseV1TransactionData.validateJsonElement(jsonObj.get("transactionData"));
      }
      if ((jsonObj.get("userAgent") != null && !jsonObj.get("userAgent").isJsonNull()) && !jsonObj.get("userAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAgent").toString()));
      }
      if ((jsonObj.get("userIpAddress") != null && !jsonObj.get("userIpAddress").isJsonNull()) && !jsonObj.get("userIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userIpAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRecaptchaenterpriseV1Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRecaptchaenterpriseV1Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRecaptchaenterpriseV1Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRecaptchaenterpriseV1Event.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRecaptchaenterpriseV1Event>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRecaptchaenterpriseV1Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRecaptchaenterpriseV1Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRecaptchaenterpriseV1Event given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRecaptchaenterpriseV1Event
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRecaptchaenterpriseV1Event
   */
  public static GoogleCloudRecaptchaenterpriseV1Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRecaptchaenterpriseV1Event.class);
  }

  /**
   * Convert an instance of GoogleCloudRecaptchaenterpriseV1Event to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

