/*
 * reCAPTCHA Enterprise API
 * Help protect your website from fraudulent activity, spam, and abuse without creating friction.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRecaptchaenterpriseV1ChallengeMetrics;
import org.openapitools.client.model.GoogleCloudRecaptchaenterpriseV1ScoreMetrics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metrics for a single Key.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:04:37.006704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRecaptchaenterpriseV1Metrics {
  public static final String SERIALIZED_NAME_CHALLENGE_METRICS = "challengeMetrics";
  @SerializedName(SERIALIZED_NAME_CHALLENGE_METRICS)
  private List<GoogleCloudRecaptchaenterpriseV1ChallengeMetrics> challengeMetrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCORE_METRICS = "scoreMetrics";
  @SerializedName(SERIALIZED_NAME_SCORE_METRICS)
  private List<GoogleCloudRecaptchaenterpriseV1ScoreMetrics> scoreMetrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public GoogleCloudRecaptchaenterpriseV1Metrics() {
  }

  public GoogleCloudRecaptchaenterpriseV1Metrics(
     String name
  ) {
    this();
    this.name = name;
  }

  public GoogleCloudRecaptchaenterpriseV1Metrics challengeMetrics(List<GoogleCloudRecaptchaenterpriseV1ChallengeMetrics> challengeMetrics) {
    this.challengeMetrics = challengeMetrics;
    return this;
  }

  public GoogleCloudRecaptchaenterpriseV1Metrics addChallengeMetricsItem(GoogleCloudRecaptchaenterpriseV1ChallengeMetrics challengeMetricsItem) {
    if (this.challengeMetrics == null) {
      this.challengeMetrics = new ArrayList<>();
    }
    this.challengeMetrics.add(challengeMetricsItem);
    return this;
  }

  /**
   * Metrics will be continuous and in order by dates, and in the granularity of day. Only challenge-based keys (CHECKBOX, INVISIBLE), will have challenge-based data.
   * @return challengeMetrics
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRecaptchaenterpriseV1ChallengeMetrics> getChallengeMetrics() {
    return challengeMetrics;
  }

  public void setChallengeMetrics(List<GoogleCloudRecaptchaenterpriseV1ChallengeMetrics> challengeMetrics) {
    this.challengeMetrics = challengeMetrics;
  }


  /**
   * Output only. The name of the metrics, in the format \&quot;projects/{project}/keys/{key}/metrics\&quot;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public GoogleCloudRecaptchaenterpriseV1Metrics scoreMetrics(List<GoogleCloudRecaptchaenterpriseV1ScoreMetrics> scoreMetrics) {
    this.scoreMetrics = scoreMetrics;
    return this;
  }

  public GoogleCloudRecaptchaenterpriseV1Metrics addScoreMetricsItem(GoogleCloudRecaptchaenterpriseV1ScoreMetrics scoreMetricsItem) {
    if (this.scoreMetrics == null) {
      this.scoreMetrics = new ArrayList<>();
    }
    this.scoreMetrics.add(scoreMetricsItem);
    return this;
  }

  /**
   * Metrics will be continuous and in order by dates, and in the granularity of day. All Key types should have score-based data.
   * @return scoreMetrics
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRecaptchaenterpriseV1ScoreMetrics> getScoreMetrics() {
    return scoreMetrics;
  }

  public void setScoreMetrics(List<GoogleCloudRecaptchaenterpriseV1ScoreMetrics> scoreMetrics) {
    this.scoreMetrics = scoreMetrics;
  }


  public GoogleCloudRecaptchaenterpriseV1Metrics startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Inclusive start time aligned to a day (UTC).
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRecaptchaenterpriseV1Metrics googleCloudRecaptchaenterpriseV1Metrics = (GoogleCloudRecaptchaenterpriseV1Metrics) o;
    return Objects.equals(this.challengeMetrics, googleCloudRecaptchaenterpriseV1Metrics.challengeMetrics) &&
        Objects.equals(this.name, googleCloudRecaptchaenterpriseV1Metrics.name) &&
        Objects.equals(this.scoreMetrics, googleCloudRecaptchaenterpriseV1Metrics.scoreMetrics) &&
        Objects.equals(this.startTime, googleCloudRecaptchaenterpriseV1Metrics.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(challengeMetrics, name, scoreMetrics, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRecaptchaenterpriseV1Metrics {\n");
    sb.append("    challengeMetrics: ").append(toIndentedString(challengeMetrics)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    scoreMetrics: ").append(toIndentedString(scoreMetrics)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("challengeMetrics");
    openapiFields.add("name");
    openapiFields.add("scoreMetrics");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRecaptchaenterpriseV1Metrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRecaptchaenterpriseV1Metrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRecaptchaenterpriseV1Metrics is not found in the empty JSON string", GoogleCloudRecaptchaenterpriseV1Metrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRecaptchaenterpriseV1Metrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRecaptchaenterpriseV1Metrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("challengeMetrics") != null && !jsonObj.get("challengeMetrics").isJsonNull()) {
        JsonArray jsonArraychallengeMetrics = jsonObj.getAsJsonArray("challengeMetrics");
        if (jsonArraychallengeMetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("challengeMetrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `challengeMetrics` to be an array in the JSON string but got `%s`", jsonObj.get("challengeMetrics").toString()));
          }

          // validate the optional field `challengeMetrics` (array)
          for (int i = 0; i < jsonArraychallengeMetrics.size(); i++) {
            GoogleCloudRecaptchaenterpriseV1ChallengeMetrics.validateJsonElement(jsonArraychallengeMetrics.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("scoreMetrics") != null && !jsonObj.get("scoreMetrics").isJsonNull()) {
        JsonArray jsonArrayscoreMetrics = jsonObj.getAsJsonArray("scoreMetrics");
        if (jsonArrayscoreMetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("scoreMetrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `scoreMetrics` to be an array in the JSON string but got `%s`", jsonObj.get("scoreMetrics").toString()));
          }

          // validate the optional field `scoreMetrics` (array)
          for (int i = 0; i < jsonArrayscoreMetrics.size(); i++) {
            GoogleCloudRecaptchaenterpriseV1ScoreMetrics.validateJsonElement(jsonArrayscoreMetrics.get(i));
          };
        }
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRecaptchaenterpriseV1Metrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRecaptchaenterpriseV1Metrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRecaptchaenterpriseV1Metrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRecaptchaenterpriseV1Metrics.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRecaptchaenterpriseV1Metrics>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRecaptchaenterpriseV1Metrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRecaptchaenterpriseV1Metrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRecaptchaenterpriseV1Metrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRecaptchaenterpriseV1Metrics
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRecaptchaenterpriseV1Metrics
   */
  public static GoogleCloudRecaptchaenterpriseV1Metrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRecaptchaenterpriseV1Metrics.class);
  }

  /**
   * Convert an instance of GoogleCloudRecaptchaenterpriseV1Metrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

