/*
 * reCAPTCHA Enterprise API
 * Help protect your website from fraudulent activity, spam, and abuse without creating friction.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about account verification, used for identity verification.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:56:54.758298-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo {
  public static final String SERIALIZED_NAME_ENDPOINTS = "endpoints";
  @SerializedName(SERIALIZED_NAME_ENDPOINTS)
  private List<GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo> endpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  /**
   * Output only. Result of the latest account verification challenge.
   */
  @JsonAdapter(LatestVerificationResultEnum.Adapter.class)
  public enum LatestVerificationResultEnum {
    RESULT_UNSPECIFIED("RESULT_UNSPECIFIED"),
    
    SUCCESS_USER_VERIFIED("SUCCESS_USER_VERIFIED"),
    
    ERROR_USER_NOT_VERIFIED("ERROR_USER_NOT_VERIFIED"),
    
    ERROR_SITE_ONBOARDING_INCOMPLETE("ERROR_SITE_ONBOARDING_INCOMPLETE"),
    
    ERROR_RECIPIENT_NOT_ALLOWED("ERROR_RECIPIENT_NOT_ALLOWED"),
    
    ERROR_RECIPIENT_ABUSE_LIMIT_EXHAUSTED("ERROR_RECIPIENT_ABUSE_LIMIT_EXHAUSTED"),
    
    ERROR_CRITICAL_INTERNAL("ERROR_CRITICAL_INTERNAL"),
    
    ERROR_CUSTOMER_QUOTA_EXHAUSTED("ERROR_CUSTOMER_QUOTA_EXHAUSTED"),
    
    ERROR_VERIFICATION_BYPASSED("ERROR_VERIFICATION_BYPASSED"),
    
    ERROR_VERDICT_MISMATCH("ERROR_VERDICT_MISMATCH");

    private String value;

    LatestVerificationResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LatestVerificationResultEnum fromValue(String value) {
      for (LatestVerificationResultEnum b : LatestVerificationResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LatestVerificationResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LatestVerificationResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LatestVerificationResultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LatestVerificationResultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LatestVerificationResultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LATEST_VERIFICATION_RESULT = "latestVerificationResult";
  @SerializedName(SERIALIZED_NAME_LATEST_VERIFICATION_RESULT)
  private LatestVerificationResultEnum latestVerificationResult;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo() {
  }

  public GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo(
     LatestVerificationResultEnum latestVerificationResult
  ) {
    this();
    this.latestVerificationResult = latestVerificationResult;
  }

  public GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo endpoints(List<GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo> endpoints) {
    this.endpoints = endpoints;
    return this;
  }

  public GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo addEndpointsItem(GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo endpointsItem) {
    if (this.endpoints == null) {
      this.endpoints = new ArrayList<>();
    }
    this.endpoints.add(endpointsItem);
    return this;
  }

  /**
   * Endpoints that can be used for identity verification.
   * @return endpoints
   */
  @javax.annotation.Nullable
  public List<GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo> getEndpoints() {
    return endpoints;
  }

  public void setEndpoints(List<GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo> endpoints) {
    this.endpoints = endpoints;
  }


  public GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Language code preference for the verification message, set as a IETF BCP 47 language code.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  /**
   * Output only. Result of the latest account verification challenge.
   * @return latestVerificationResult
   */
  @javax.annotation.Nullable
  public LatestVerificationResultEnum getLatestVerificationResult() {
    return latestVerificationResult;
  }



  public GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Username of the account that is being verified. Deprecated. Customers should now provide the hashed account ID field in Event.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo googleCloudRecaptchaenterpriseV1AccountVerificationInfo = (GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo) o;
    return Objects.equals(this.endpoints, googleCloudRecaptchaenterpriseV1AccountVerificationInfo.endpoints) &&
        Objects.equals(this.languageCode, googleCloudRecaptchaenterpriseV1AccountVerificationInfo.languageCode) &&
        Objects.equals(this.latestVerificationResult, googleCloudRecaptchaenterpriseV1AccountVerificationInfo.latestVerificationResult) &&
        Objects.equals(this.username, googleCloudRecaptchaenterpriseV1AccountVerificationInfo.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpoints, languageCode, latestVerificationResult, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo {\n");
    sb.append("    endpoints: ").append(toIndentedString(endpoints)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    latestVerificationResult: ").append(toIndentedString(latestVerificationResult)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endpoints");
    openapiFields.add("languageCode");
    openapiFields.add("latestVerificationResult");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo is not found in the empty JSON string", GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("endpoints") != null && !jsonObj.get("endpoints").isJsonNull()) {
        JsonArray jsonArrayendpoints = jsonObj.getAsJsonArray("endpoints");
        if (jsonArrayendpoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("endpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `endpoints` to be an array in the JSON string but got `%s`", jsonObj.get("endpoints").toString()));
          }

          // validate the optional field `endpoints` (array)
          for (int i = 0; i < jsonArrayendpoints.size(); i++) {
            GoogleCloudRecaptchaenterpriseV1EndpointVerificationInfo.validateJsonElement(jsonArrayendpoints.get(i));
          };
        }
      }
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if ((jsonObj.get("latestVerificationResult") != null && !jsonObj.get("latestVerificationResult").isJsonNull()) && !jsonObj.get("latestVerificationResult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latestVerificationResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latestVerificationResult").toString()));
      }
      // validate the optional field `latestVerificationResult`
      if (jsonObj.get("latestVerificationResult") != null && !jsonObj.get("latestVerificationResult").isJsonNull()) {
        LatestVerificationResultEnum.validateJsonElement(jsonObj.get("latestVerificationResult"));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo
   */
  public static GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo.class);
  }

  /**
   * Convert an instance of GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

