# coding: utf-8

"""
    Gateway

    Gateway is the hub that routes/orchestrates the interaction between consent managers and API bridges. There are 5 categories of APIs; discovery, link, consent flow, data flow and  monitoring. To reflect the consumers of APIs, the above apis are also categorized under cm facing, hiu facing and hip facing  

    The version of the OpenAPI document: 0.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.consent_artefact_response_consent_consent_detail_care_contexts_inner import ConsentArtefactResponseConsentConsentDetailCareContextsInner
from openapi_client.models.consent_artefact_response_consent_consent_detail_consent_manager import ConsentArtefactResponseConsentConsentDetailConsentManager
from openapi_client.models.consent_artefact_response_consent_consent_detail_hip import ConsentArtefactResponseConsentConsentDetailHip
from openapi_client.models.consent_artefact_response_consent_consent_detail_hiu import ConsentArtefactResponseConsentConsentDetailHiu
from openapi_client.models.consent_manager_patient_id import ConsentManagerPatientID
from openapi_client.models.hi_type_enum import HITypeEnum
from openapi_client.models.permission import Permission
from openapi_client.models.requester import Requester
from openapi_client.models.use_purpose import UsePurpose
from typing import Optional, Set
from typing_extensions import Self

class ConsentArtefactResponseConsentConsentDetail(BaseModel):
    """
    ConsentArtefactResponseConsentConsentDetail
    """ # noqa: E501
    care_contexts: List[ConsentArtefactResponseConsentConsentDetailCareContextsInner] = Field(alias="careContexts")
    consent_id: StrictStr = Field(alias="consentId")
    consent_manager: ConsentArtefactResponseConsentConsentDetailConsentManager = Field(alias="consentManager")
    created_at: datetime = Field(alias="createdAt")
    hi_types: List[HITypeEnum] = Field(alias="hiTypes")
    hip: ConsentArtefactResponseConsentConsentDetailHip
    hiu: ConsentArtefactResponseConsentConsentDetailHiu
    patient: ConsentManagerPatientID
    permission: Permission
    purpose: UsePurpose
    requester: Optional[Requester] = None
    schema_version: Optional[StrictStr] = Field(default=None, alias="schemaVersion")
    __properties: ClassVar[List[str]] = ["careContexts", "consentId", "consentManager", "createdAt", "hiTypes", "hip", "hiu", "patient", "permission", "purpose", "requester", "schemaVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConsentArtefactResponseConsentConsentDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in care_contexts (list)
        _items = []
        if self.care_contexts:
            for _item_care_contexts in self.care_contexts:
                if _item_care_contexts:
                    _items.append(_item_care_contexts.to_dict())
            _dict['careContexts'] = _items
        # override the default output from pydantic by calling `to_dict()` of consent_manager
        if self.consent_manager:
            _dict['consentManager'] = self.consent_manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hip
        if self.hip:
            _dict['hip'] = self.hip.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hiu
        if self.hiu:
            _dict['hiu'] = self.hiu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of patient
        if self.patient:
            _dict['patient'] = self.patient.to_dict()
        # override the default output from pydantic by calling `to_dict()` of permission
        if self.permission:
            _dict['permission'] = self.permission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of purpose
        if self.purpose:
            _dict['purpose'] = self.purpose.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requester
        if self.requester:
            _dict['requester'] = self.requester.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConsentArtefactResponseConsentConsentDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "careContexts": [ConsentArtefactResponseConsentConsentDetailCareContextsInner.from_dict(_item) for _item in obj["careContexts"]] if obj.get("careContexts") is not None else None,
            "consentId": obj.get("consentId"),
            "consentManager": ConsentArtefactResponseConsentConsentDetailConsentManager.from_dict(obj["consentManager"]) if obj.get("consentManager") is not None else None,
            "createdAt": obj.get("createdAt"),
            "hiTypes": obj.get("hiTypes"),
            "hip": ConsentArtefactResponseConsentConsentDetailHip.from_dict(obj["hip"]) if obj.get("hip") is not None else None,
            "hiu": ConsentArtefactResponseConsentConsentDetailHiu.from_dict(obj["hiu"]) if obj.get("hiu") is not None else None,
            "patient": ConsentManagerPatientID.from_dict(obj["patient"]) if obj.get("patient") is not None else None,
            "permission": Permission.from_dict(obj["permission"]) if obj.get("permission") is not None else None,
            "purpose": UsePurpose.from_dict(obj["purpose"]) if obj.get("purpose") is not None else None,
            "requester": Requester.from_dict(obj["requester"]) if obj.get("requester") is not None else None,
            "schemaVersion": obj.get("schemaVersion")
        })
        return _obj


