/*
 * Amazon ElastiCache
 * <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
 *
 * The version of the OpenAPI document: 2015-02-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UserGroupPendingChanges;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:56:16.135451-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserGroup {
  public static final String SERIALIZED_NAME_USER_GROUP_ID = "UserGroupId";
  @SerializedName(SERIALIZED_NAME_USER_GROUP_ID)
  private String userGroupId;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_ENGINE = "Engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_USER_IDS = "UserIds";
  @SerializedName(SERIALIZED_NAME_USER_IDS)
  private List userIds;

  public static final String SERIALIZED_NAME_MINIMUM_ENGINE_VERSION = "MinimumEngineVersion";
  @SerializedName(SERIALIZED_NAME_MINIMUM_ENGINE_VERSION)
  private String minimumEngineVersion;

  public static final String SERIALIZED_NAME_PENDING_CHANGES = "PendingChanges";
  @SerializedName(SERIALIZED_NAME_PENDING_CHANGES)
  private UserGroupPendingChanges pendingChanges;

  public static final String SERIALIZED_NAME_REPLICATION_GROUPS = "ReplicationGroups";
  @SerializedName(SERIALIZED_NAME_REPLICATION_GROUPS)
  private List replicationGroups;

  public static final String SERIALIZED_NAME_A_R_N = "ARN";
  @SerializedName(SERIALIZED_NAME_A_R_N)
  private String ARN;

  public UserGroup() {
  }

  public UserGroup userGroupId(String userGroupId) {
    this.userGroupId = userGroupId;
    return this;
  }

  /**
   * Get userGroupId
   * @return userGroupId
   */
  @javax.annotation.Nullable
  public String getUserGroupId() {
    return userGroupId;
  }

  public void setUserGroupId(String userGroupId) {
    this.userGroupId = userGroupId;
  }


  public UserGroup status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public UserGroup engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public UserGroup userIds(List userIds) {
    this.userIds = userIds;
    return this;
  }

  /**
   * Get userIds
   * @return userIds
   */
  @javax.annotation.Nullable
  public List getUserIds() {
    return userIds;
  }

  public void setUserIds(List userIds) {
    this.userIds = userIds;
  }


  public UserGroup minimumEngineVersion(String minimumEngineVersion) {
    this.minimumEngineVersion = minimumEngineVersion;
    return this;
  }

  /**
   * Get minimumEngineVersion
   * @return minimumEngineVersion
   */
  @javax.annotation.Nullable
  public String getMinimumEngineVersion() {
    return minimumEngineVersion;
  }

  public void setMinimumEngineVersion(String minimumEngineVersion) {
    this.minimumEngineVersion = minimumEngineVersion;
  }


  public UserGroup pendingChanges(UserGroupPendingChanges pendingChanges) {
    this.pendingChanges = pendingChanges;
    return this;
  }

  /**
   * Get pendingChanges
   * @return pendingChanges
   */
  @javax.annotation.Nullable
  public UserGroupPendingChanges getPendingChanges() {
    return pendingChanges;
  }

  public void setPendingChanges(UserGroupPendingChanges pendingChanges) {
    this.pendingChanges = pendingChanges;
  }


  public UserGroup replicationGroups(List replicationGroups) {
    this.replicationGroups = replicationGroups;
    return this;
  }

  /**
   * Get replicationGroups
   * @return replicationGroups
   */
  @javax.annotation.Nullable
  public List getReplicationGroups() {
    return replicationGroups;
  }

  public void setReplicationGroups(List replicationGroups) {
    this.replicationGroups = replicationGroups;
  }


  public UserGroup ARN(String ARN) {
    this.ARN = ARN;
    return this;
  }

  /**
   * Get ARN
   * @return ARN
   */
  @javax.annotation.Nullable
  public String getARN() {
    return ARN;
  }

  public void setARN(String ARN) {
    this.ARN = ARN;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserGroup userGroup = (UserGroup) o;
    return Objects.equals(this.userGroupId, userGroup.userGroupId) &&
        Objects.equals(this.status, userGroup.status) &&
        Objects.equals(this.engine, userGroup.engine) &&
        Objects.equals(this.userIds, userGroup.userIds) &&
        Objects.equals(this.minimumEngineVersion, userGroup.minimumEngineVersion) &&
        Objects.equals(this.pendingChanges, userGroup.pendingChanges) &&
        Objects.equals(this.replicationGroups, userGroup.replicationGroups) &&
        Objects.equals(this.ARN, userGroup.ARN);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userGroupId, status, engine, userIds, minimumEngineVersion, pendingChanges, replicationGroups, ARN);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserGroup {\n");
    sb.append("    userGroupId: ").append(toIndentedString(userGroupId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    userIds: ").append(toIndentedString(userIds)).append("\n");
    sb.append("    minimumEngineVersion: ").append(toIndentedString(minimumEngineVersion)).append("\n");
    sb.append("    pendingChanges: ").append(toIndentedString(pendingChanges)).append("\n");
    sb.append("    replicationGroups: ").append(toIndentedString(replicationGroups)).append("\n");
    sb.append("    ARN: ").append(toIndentedString(ARN)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("UserGroupId");
    openapiFields.add("Status");
    openapiFields.add("Engine");
    openapiFields.add("UserIds");
    openapiFields.add("MinimumEngineVersion");
    openapiFields.add("PendingChanges");
    openapiFields.add("ReplicationGroups");
    openapiFields.add("ARN");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserGroup is not found in the empty JSON string", UserGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `UserGroupId`
      if (jsonObj.get("UserGroupId") != null && !jsonObj.get("UserGroupId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UserGroupId"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Engine`
      if (jsonObj.get("Engine") != null && !jsonObj.get("Engine").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Engine"));
      }
      // validate the optional field `UserIds`
      if (jsonObj.get("UserIds") != null && !jsonObj.get("UserIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("UserIds"));
      }
      // validate the optional field `MinimumEngineVersion`
      if (jsonObj.get("MinimumEngineVersion") != null && !jsonObj.get("MinimumEngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MinimumEngineVersion"));
      }
      // validate the optional field `PendingChanges`
      if (jsonObj.get("PendingChanges") != null && !jsonObj.get("PendingChanges").isJsonNull()) {
        UserGroupPendingChanges.validateJsonElement(jsonObj.get("PendingChanges"));
      }
      // validate the optional field `ReplicationGroups`
      if (jsonObj.get("ReplicationGroups") != null && !jsonObj.get("ReplicationGroups").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ReplicationGroups"));
      }
      // validate the optional field `ARN`
      if (jsonObj.get("ARN") != null && !jsonObj.get("ARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ARN"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<UserGroup>() {
           @Override
           public void write(JsonWriter out, UserGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserGroup
   * @throws IOException if the JSON string is invalid with respect to UserGroup
   */
  public static UserGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserGroup.class);
  }

  /**
   * Convert an instance of UserGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

