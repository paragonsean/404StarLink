/*
 * Amazon ElastiCache
 * <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
 *
 * The version of the OpenAPI document: 2015-02-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddTagsToResourceMessage;
import org.openapitools.client.model.AllowedNodeTypeModificationsMessage;
import org.openapitools.client.model.AuthorizeCacheSecurityGroupIngressMessage;
import org.openapitools.client.model.AuthorizeCacheSecurityGroupIngressResult;
import org.openapitools.client.model.BatchApplyUpdateActionMessage;
import org.openapitools.client.model.BatchStopUpdateActionMessage;
import org.openapitools.client.model.CacheClusterMessage;
import org.openapitools.client.model.CacheEngineVersionMessage;
import org.openapitools.client.model.CacheParameterGroupDetails;
import org.openapitools.client.model.CacheParameterGroupNameMessage;
import org.openapitools.client.model.CacheParameterGroupsMessage;
import org.openapitools.client.model.CacheSecurityGroupMessage;
import org.openapitools.client.model.CacheSubnetGroupMessage;
import org.openapitools.client.model.CompleteMigrationMessage;
import org.openapitools.client.model.CompleteMigrationResponse;
import org.openapitools.client.model.CopySnapshotMessage;
import org.openapitools.client.model.CopySnapshotResult;
import org.openapitools.client.model.CreateCacheClusterMessage;
import org.openapitools.client.model.CreateCacheClusterResult;
import org.openapitools.client.model.CreateCacheParameterGroupMessage;
import org.openapitools.client.model.CreateCacheParameterGroupResult;
import org.openapitools.client.model.CreateCacheSecurityGroupMessage;
import org.openapitools.client.model.CreateCacheSecurityGroupResult;
import org.openapitools.client.model.CreateCacheSubnetGroupMessage;
import org.openapitools.client.model.CreateCacheSubnetGroupResult;
import org.openapitools.client.model.CreateGlobalReplicationGroupMessage;
import org.openapitools.client.model.CreateGlobalReplicationGroupResult;
import org.openapitools.client.model.CreateReplicationGroupMessage;
import org.openapitools.client.model.CreateReplicationGroupResult;
import org.openapitools.client.model.CreateSnapshotMessage;
import org.openapitools.client.model.CreateSnapshotResult;
import org.openapitools.client.model.CreateUserGroupMessage;
import org.openapitools.client.model.CreateUserMessage;
import org.openapitools.client.model.CustomerNodeEndpoint;
import org.openapitools.client.model.DecreaseNodeGroupsInGlobalReplicationGroupMessage;
import org.openapitools.client.model.DecreaseNodeGroupsInGlobalReplicationGroupResult;
import org.openapitools.client.model.DecreaseReplicaCountMessage;
import org.openapitools.client.model.DecreaseReplicaCountResult;
import org.openapitools.client.model.DeleteCacheClusterMessage;
import org.openapitools.client.model.DeleteCacheClusterResult;
import org.openapitools.client.model.DeleteCacheParameterGroupMessage;
import org.openapitools.client.model.DeleteCacheSecurityGroupMessage;
import org.openapitools.client.model.DeleteCacheSubnetGroupMessage;
import org.openapitools.client.model.DeleteGlobalReplicationGroupMessage;
import org.openapitools.client.model.DeleteGlobalReplicationGroupResult;
import org.openapitools.client.model.DeleteReplicationGroupMessage;
import org.openapitools.client.model.DeleteReplicationGroupResult;
import org.openapitools.client.model.DeleteSnapshotMessage;
import org.openapitools.client.model.DeleteSnapshotResult;
import org.openapitools.client.model.DeleteUserGroupMessage;
import org.openapitools.client.model.DeleteUserMessage;
import org.openapitools.client.model.DescribeCacheClustersMessage;
import org.openapitools.client.model.DescribeCacheEngineVersionsMessage;
import org.openapitools.client.model.DescribeCacheParameterGroupsMessage;
import org.openapitools.client.model.DescribeCacheParametersMessage;
import org.openapitools.client.model.DescribeCacheSecurityGroupsMessage;
import org.openapitools.client.model.DescribeCacheSubnetGroupsMessage;
import org.openapitools.client.model.DescribeEngineDefaultParametersMessage;
import org.openapitools.client.model.DescribeEngineDefaultParametersResult;
import org.openapitools.client.model.DescribeEventsMessage;
import org.openapitools.client.model.DescribeGlobalReplicationGroupsMessage;
import org.openapitools.client.model.DescribeGlobalReplicationGroupsResult;
import org.openapitools.client.model.DescribeReplicationGroupsMessage;
import org.openapitools.client.model.DescribeReservedCacheNodesMessage;
import org.openapitools.client.model.DescribeReservedCacheNodesOfferingsMessage;
import org.openapitools.client.model.DescribeServiceUpdatesMessage;
import org.openapitools.client.model.DescribeSnapshotsListMessage;
import org.openapitools.client.model.DescribeSnapshotsMessage;
import org.openapitools.client.model.DescribeUpdateActionsMessage;
import org.openapitools.client.model.DescribeUserGroupsMessage;
import org.openapitools.client.model.DescribeUserGroupsResult;
import org.openapitools.client.model.DescribeUsersMessage;
import org.openapitools.client.model.DescribeUsersResult;
import org.openapitools.client.model.DisassociateGlobalReplicationGroupMessage;
import org.openapitools.client.model.DisassociateGlobalReplicationGroupResult;
import org.openapitools.client.model.EventsMessage;
import org.openapitools.client.model.FailoverGlobalReplicationGroupMessage;
import org.openapitools.client.model.FailoverGlobalReplicationGroupResult;
import org.openapitools.client.model.Filter;
import org.openapitools.client.model.GETAddTagsToResourceTagsParameterInner;
import org.openapitools.client.model.GETCreateCacheClusterLogDeliveryConfigurationsParameterInner;
import org.openapitools.client.model.GETCreateReplicationGroupNodeGroupConfigurationParameterInner;
import org.openapitools.client.model.GETCreateUserAuthenticationModeParameter;
import org.openapitools.client.model.GETDecreaseReplicaCountReplicaConfigurationParameterInner;
import org.openapitools.client.model.GETDescribeUpdateActionsServiceUpdateTimeRangeParameter;
import org.openapitools.client.model.GETIncreaseNodeGroupsInGlobalReplicationGroupRegionalConfigurationsParameterInner;
import org.openapitools.client.model.GETModifyCacheParameterGroupParameterNameValuesParameterInner;
import org.openapitools.client.model.GETModifyReplicationGroupShardConfigurationReshardingConfigurationParameterInner;
import org.openapitools.client.model.IncreaseNodeGroupsInGlobalReplicationGroupMessage;
import org.openapitools.client.model.IncreaseNodeGroupsInGlobalReplicationGroupResult;
import org.openapitools.client.model.IncreaseReplicaCountMessage;
import org.openapitools.client.model.IncreaseReplicaCountResult;
import org.openapitools.client.model.ListAllowedNodeTypeModificationsMessage;
import org.openapitools.client.model.ListTagsForResourceMessage;
import org.openapitools.client.model.ModifyCacheClusterMessage;
import org.openapitools.client.model.ModifyCacheClusterResult;
import org.openapitools.client.model.ModifyCacheParameterGroupMessage;
import org.openapitools.client.model.ModifyCacheSubnetGroupMessage;
import org.openapitools.client.model.ModifyCacheSubnetGroupResult;
import org.openapitools.client.model.ModifyGlobalReplicationGroupMessage;
import org.openapitools.client.model.ModifyGlobalReplicationGroupResult;
import org.openapitools.client.model.ModifyReplicationGroupMessage;
import org.openapitools.client.model.ModifyReplicationGroupResult;
import org.openapitools.client.model.ModifyReplicationGroupShardConfigurationMessage;
import org.openapitools.client.model.ModifyReplicationGroupShardConfigurationResult;
import org.openapitools.client.model.ModifyUserGroupMessage;
import org.openapitools.client.model.ModifyUserMessage;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PurchaseReservedCacheNodesOfferingMessage;
import org.openapitools.client.model.PurchaseReservedCacheNodesOfferingResult;
import org.openapitools.client.model.RebalanceSlotsInGlobalReplicationGroupMessage;
import org.openapitools.client.model.RebalanceSlotsInGlobalReplicationGroupResult;
import org.openapitools.client.model.RebootCacheClusterMessage;
import org.openapitools.client.model.RebootCacheClusterResult;
import org.openapitools.client.model.RemoveTagsFromResourceMessage;
import org.openapitools.client.model.ReplicationGroupMessage;
import org.openapitools.client.model.ReservedCacheNodeMessage;
import org.openapitools.client.model.ReservedCacheNodesOfferingMessage;
import org.openapitools.client.model.ResetCacheParameterGroupMessage;
import org.openapitools.client.model.RevokeCacheSecurityGroupIngressMessage;
import org.openapitools.client.model.RevokeCacheSecurityGroupIngressResult;
import org.openapitools.client.model.ServiceUpdateStatus;
import org.openapitools.client.model.ServiceUpdatesMessage;
import org.openapitools.client.model.StartMigrationMessage;
import org.openapitools.client.model.StartMigrationResponse;
import org.openapitools.client.model.TagListMessage;
import org.openapitools.client.model.TestFailoverMessage;
import org.openapitools.client.model.TestFailoverResult;
import org.openapitools.client.model.UpdateActionResultsMessage;
import org.openapitools.client.model.UpdateActionStatus;
import org.openapitools.client.model.UpdateActionsMessage;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserGroup;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; For example, you can use cost-allocation tags to your ElastiCache resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html\&quot;&gt;Using Cost Allocation Tags in Amazon ElastiCache&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAddTagsToResourceTest() throws ApiException {
        String resourceName = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TagListMessage response = api.gETAddTagsToResource(resourceName, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAuthorizeCacheSecurityGroupIngressTest() throws ApiException {
        String cacheSecurityGroupName = null;
        String ec2SecurityGroupName = null;
        String ec2SecurityGroupOwnerId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AuthorizeCacheSecurityGroupIngressResult response = api.gETAuthorizeCacheSecurityGroupIngress(cacheSecurityGroupName, ec2SecurityGroupName, ec2SecurityGroupOwnerId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Apply the service update. For more information on service updates and applying them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html\&quot;&gt;Applying Service Updates&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETBatchApplyUpdateActionTest() throws ApiException {
        String serviceUpdateName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> replicationGroupIds = null;
        List<String> cacheClusterIds = null;
        UpdateActionResultsMessage response = api.gETBatchApplyUpdateAction(serviceUpdateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupIds, cacheClusterIds);
        // TODO: test validations
    }

    /**
     * Stop the service update. For more information on service updates and stopping them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html\&quot;&gt;Stopping Service Updates&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETBatchStopUpdateActionTest() throws ApiException {
        String serviceUpdateName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> replicationGroupIds = null;
        List<String> cacheClusterIds = null;
        UpdateActionResultsMessage response = api.gETBatchStopUpdateAction(serviceUpdateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupIds, cacheClusterIds);
        // TODO: test validations
    }

    /**
     * Complete the migration of data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCompleteMigrationTest() throws ApiException {
        String replicationGroupId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean force = null;
        CompleteMigrationResponse response = api.gETCompleteMigration(replicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, force);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Makes a copy of an existing snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;Users or groups that have permissions to use the &lt;code&gt;CopySnapshot&lt;/code&gt; operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the &lt;code&gt;CopySnapshot&lt;/code&gt; operation. For more information about using IAM to control the use of ElastiCache operations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html\&quot;&gt;Exporting Snapshots&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html\&quot;&gt;Authentication &amp;amp; Access Control&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;You could receive the following error messages.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Error Messages&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s is outside of the region.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s does not exist.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s is not owned by the authenticated user.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The authenticated user does not have sufficient permissions to perform the desired activity.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Contact your system administrator to get the needed permissions.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s already contains an object with key %s.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Give the &lt;code&gt;TargetSnapshotName&lt;/code&gt; a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for &lt;code&gt;TargetSnapshotName&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted READ permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add List and Read permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add Upload/Delete permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add View Permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCopySnapshotTest() throws ApiException {
        String sourceSnapshotName = null;
        String targetSnapshotName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String targetBucket = null;
        String kmsKeyId = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CopySnapshotResult response = api.gETCopySnapshot(sourceSnapshotName, targetSnapshotName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, targetBucket, kmsKeyId, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.&lt;/p&gt; &lt;p&gt;This operation is not supported for Redis (cluster mode enabled) clusters.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateCacheClusterTest() throws ApiException {
        String cacheClusterId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String replicationGroupId = null;
        String azMode = null;
        String preferredAvailabilityZone = null;
        List<String> preferredAvailabilityZones = null;
        Integer numCacheNodes = null;
        String cacheNodeType = null;
        String engine = null;
        String engineVersion = null;
        String cacheParameterGroupName = null;
        String cacheSubnetGroupName = null;
        List<String> cacheSecurityGroupNames = null;
        List<String> securityGroupIds = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        List<String> snapshotArns = null;
        String snapshotName = null;
        String preferredMaintenanceWindow = null;
        Integer port = null;
        String notificationTopicArn = null;
        Boolean autoMinorVersionUpgrade = null;
        Integer snapshotRetentionLimit = null;
        String snapshotWindow = null;
        String authToken = null;
        String outpostMode = null;
        String preferredOutpostArn = null;
        List<String> preferredOutpostArns = null;
        List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations = null;
        Boolean transitEncryptionEnabled = null;
        String networkType = null;
        String ipDiscovery = null;
        CreateCacheClusterResult response = api.gETCreateCacheCluster(cacheClusterId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, azMode, preferredAvailabilityZone, preferredAvailabilityZones, numCacheNodes, cacheNodeType, engine, engineVersion, cacheParameterGroupName, cacheSubnetGroupName, cacheSecurityGroupNames, securityGroupIds, tags, snapshotArns, snapshotName, preferredMaintenanceWindow, port, notificationTopicArn, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, authToken, outpostMode, preferredOutpostArn, preferredOutpostArns, logDeliveryConfigurations, transitEncryptionEnabled, networkType, ipDiscovery);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.&lt;/p&gt; &lt;p&gt;A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html\&quot;&gt;ModifyCacheParameterGroup&lt;/a&gt; in the ElastiCache API Reference.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html\&quot;&gt;Parameters and Parameter Groups&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateCacheParameterGroupTest() throws ApiException {
        String cacheParameterGroupName = null;
        String cacheParameterGroupFamily = null;
        String description = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CreateCacheParameterGroupResult response = api.gETCreateCacheParameterGroup(cacheParameterGroupName, cacheParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new cache security group. Use a cache security group to control access to one or more clusters.&lt;/p&gt; &lt;p&gt;Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html\&quot;&gt;CreateCacheSubnetGroup&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateCacheSecurityGroupTest() throws ApiException {
        String cacheSecurityGroupName = null;
        String description = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CreateCacheSecurityGroupResult response = api.gETCreateCacheSecurityGroup(cacheSecurityGroupName, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new cache subnet group.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateCacheSubnetGroupTest() throws ApiException {
        String cacheSubnetGroupName = null;
        String cacheSubnetGroupDescription = null;
        List<String> subnetIds = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CreateCacheSubnetGroupResult response = api.gETCreateCacheSubnetGroup(cacheSubnetGroupName, cacheSubnetGroupDescription, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Global Datastore for Redis offers fully managed, fast, reliable and secure cross-region replication. Using Global Datastore for Redis, you can create cross-region read replica clusters for ElastiCache for Redis to enable low-latency reads and disaster recovery across regions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastore.html\&quot;&gt;Replication Across Regions Using Global Datastore&lt;/a&gt;. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;b&gt;GlobalReplicationGroupIdSuffix&lt;/b&gt; is the name of the Global datastore.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;b&gt;PrimaryReplicationGroupId&lt;/b&gt; represents the name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateGlobalReplicationGroupTest() throws ApiException {
        String globalReplicationGroupIdSuffix = null;
        String primaryReplicationGroupId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String globalReplicationGroupDescription = null;
        CreateGlobalReplicationGroupResult response = api.gETCreateGlobalReplicationGroup(globalReplicationGroupIdSuffix, primaryReplicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalReplicationGroupDescription);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.&lt;/p&gt; &lt;p&gt;This API can be used to create a standalone regional replication group or a secondary replication group associated with a Global datastore.&lt;/p&gt; &lt;p&gt;A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.&lt;/p&gt; &lt;p&gt;A Redis cluster-mode enabled cluster is comprised of from 1 to 90 shards (API/CLI: node groups). Each shard has a primary node and up to 5 read-only replica nodes. The configuration can range from 90 shards and 0 replicas to 15 shards and 5 replicas, which is the maximum number or replicas allowed. &lt;/p&gt; &lt;p&gt;The node or shard limit can be increased to a maximum of 500 per cluster if the Redis engine version is 5.0.6 or higher. For example, you can choose to configure a 500 node cluster that ranges between 83 shards (one primary and 5 replicas per shard) and 500 shards (single primary and no replicas). Make sure there are enough available IP addresses to accommodate the increase. Common pitfalls include the subnets in the subnet group have too small a CIDR range or the subnets are shared and heavily used by other clusters. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.Creating.html\&quot;&gt;Creating a Subnet Group&lt;/a&gt;. For versions below 5.0.6, the limit is 250 per cluster.&lt;/p&gt; &lt;p&gt;To request a limit increase, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\&quot;&gt;Amazon Service Limits&lt;/a&gt; and choose the limit type &lt;b&gt;Nodes per cluster per instance type&lt;/b&gt;. &lt;/p&gt; &lt;p&gt;When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. If you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis&#39; scaling. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Scaling.html\&quot;&gt;Scaling ElastiCache for Redis Clusters&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateReplicationGroupTest() throws ApiException {
        String replicationGroupId = null;
        String replicationGroupDescription = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String globalReplicationGroupId = null;
        String primaryClusterId = null;
        Boolean automaticFailoverEnabled = null;
        Boolean multiAZEnabled = null;
        Integer numCacheClusters = null;
        List<String> preferredCacheClusterAZs = null;
        Integer numNodeGroups = null;
        Integer replicasPerNodeGroup = null;
        List<GETCreateReplicationGroupNodeGroupConfigurationParameterInner> nodeGroupConfiguration = null;
        String cacheNodeType = null;
        String engine = null;
        String engineVersion = null;
        String cacheParameterGroupName = null;
        String cacheSubnetGroupName = null;
        List<String> cacheSecurityGroupNames = null;
        List<String> securityGroupIds = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        List<String> snapshotArns = null;
        String snapshotName = null;
        String preferredMaintenanceWindow = null;
        Integer port = null;
        String notificationTopicArn = null;
        Boolean autoMinorVersionUpgrade = null;
        Integer snapshotRetentionLimit = null;
        String snapshotWindow = null;
        String authToken = null;
        Boolean transitEncryptionEnabled = null;
        Boolean atRestEncryptionEnabled = null;
        String kmsKeyId = null;
        List<String> userGroupIds = null;
        List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations = null;
        Boolean dataTieringEnabled = null;
        String networkType = null;
        String ipDiscovery = null;
        String transitEncryptionMode = null;
        CreateReplicationGroupResult response = api.gETCreateReplicationGroup(replicationGroupId, replicationGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalReplicationGroupId, primaryClusterId, automaticFailoverEnabled, multiAZEnabled, numCacheClusters, preferredCacheClusterAZs, numNodeGroups, replicasPerNodeGroup, nodeGroupConfiguration, cacheNodeType, engine, engineVersion, cacheParameterGroupName, cacheSubnetGroupName, cacheSecurityGroupNames, securityGroupIds, tags, snapshotArns, snapshotName, preferredMaintenanceWindow, port, notificationTopicArn, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, authToken, transitEncryptionEnabled, atRestEncryptionEnabled, kmsKeyId, userGroupIds, logDeliveryConfigurations, dataTieringEnabled, networkType, ipDiscovery, transitEncryptionMode);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a copy of an entire cluster or replication group at a specific moment in time.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateSnapshotTest() throws ApiException {
        String snapshotName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String replicationGroupId = null;
        String cacheClusterId = null;
        String kmsKeyId = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        CreateSnapshotResult response = api.gETCreateSnapshot(snapshotName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, cacheClusterId, kmsKeyId, tags);
        // TODO: test validations
    }

    /**
     * For Redis engine version 6.0 onwards: Creates a Redis user. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateUserTest() throws ApiException {
        String userId = null;
        String userName = null;
        String engine = null;
        String accessString = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> passwords = null;
        Boolean noPasswordRequired = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        GETCreateUserAuthenticationModeParameter authenticationMode = null;
        User response = api.gETCreateUser(userId, userName, engine, accessString, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, passwords, noPasswordRequired, tags, authenticationMode);
        // TODO: test validations
    }

    /**
     * For Redis engine version 6.0 onwards: Creates a Redis user group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateUserGroupTest() throws ApiException {
        String userGroupId = null;
        String engine = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> userIds = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        UserGroup response = api.gETCreateUserGroup(userGroupId, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userIds, tags);
        // TODO: test validations
    }

    /**
     * Decreases the number of node groups in a Global datastore
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDecreaseNodeGroupsInGlobalReplicationGroupTest() throws ApiException {
        String globalReplicationGroupId = null;
        Integer nodeGroupCount = null;
        Boolean applyImmediately = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> globalNodeGroupsToRemove = null;
        List<String> globalNodeGroupsToRetain = null;
        DecreaseNodeGroupsInGlobalReplicationGroupResult response = api.gETDecreaseNodeGroupsInGlobalReplicationGroup(globalReplicationGroupId, nodeGroupCount, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalNodeGroupsToRemove, globalNodeGroupsToRetain);
        // TODO: test validations
    }

    /**
     * Dynamically decreases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDecreaseReplicaCountTest() throws ApiException {
        String replicationGroupId = null;
        Boolean applyImmediately = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer newReplicaCount = null;
        List<GETDecreaseReplicaCountReplicaConfigurationParameterInner> replicaConfiguration = null;
        List<String> replicasToRemove = null;
        DecreaseReplicaCountResult response = api.gETDecreaseReplicaCount(replicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newReplicaCount, replicaConfiguration, replicasToRemove);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a previously provisioned cluster. &lt;code&gt;DeleteCacheCluster&lt;/code&gt; deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.&lt;/p&gt; &lt;p&gt;This operation is not valid for:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode enabled) clusters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode disabled) clusters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is the last read replica of a replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is the primary node of a replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A node group (shard) that has Multi-AZ mode enabled&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster from a Redis (cluster mode enabled) replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is not in the &lt;code&gt;available&lt;/code&gt; state&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteCacheClusterTest() throws ApiException {
        String cacheClusterId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String finalSnapshotIdentifier = null;
        DeleteCacheClusterResult response = api.gETDeleteCacheCluster(cacheClusterId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, finalSnapshotIdentifier);
        // TODO: test validations
    }

    /**
     * Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters. You cannot delete the default cache parameter groups in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteCacheParameterGroupTest() throws ApiException {
        String cacheParameterGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteCacheParameterGroup(cacheParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a cache security group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a cache security group if it is associated with any clusters.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteCacheSecurityGroupTest() throws ApiException {
        String cacheSecurityGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteCacheSecurityGroup(cacheSecurityGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a cache subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a default cache subnet group or one that is associated with any clusters.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteCacheSubnetGroupTest() throws ApiException {
        String cacheSubnetGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteCacheSubnetGroup(cacheSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deleting a Global datastore is a two-step process: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;First, you must &lt;a&gt;DisassociateGlobalReplicationGroup&lt;/a&gt; to remove the secondary clusters in the Global datastore.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Once the Global datastore contains only the primary cluster, you can use the &lt;code&gt;DeleteGlobalReplicationGroup&lt;/code&gt; API to delete the Global datastore while retainining the primary cluster using &lt;code&gt;RetainPrimaryReplicationGroup&#x3D;true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Since the Global Datastore has only a primary cluster, you can delete the Global Datastore while retaining the primary by setting &lt;code&gt;RetainPrimaryReplicationGroup&#x3D;true&lt;/code&gt;. The primary cluster is never deleted when deleting a Global Datastore. It can only be deleted when it no longer is associated with any Global Datastore.&lt;/p&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteGlobalReplicationGroupTest() throws ApiException {
        String globalReplicationGroupId = null;
        Boolean retainPrimaryReplicationGroup = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteGlobalReplicationGroupResult response = api.gETDeleteGlobalReplicationGroup(globalReplicationGroupId, retainPrimaryReplicationGroup, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting &lt;code&gt;RetainPrimaryCluster&#x3D;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteReplicationGroupTest() throws ApiException {
        String replicationGroupId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean retainPrimaryCluster = null;
        String finalSnapshotIdentifier = null;
        DeleteReplicationGroupResult response = api.gETDeleteReplicationGroup(replicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, retainPrimaryCluster, finalSnapshotIdentifier);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteSnapshotTest() throws ApiException {
        String snapshotName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteSnapshotResult response = api.gETDeleteSnapshot(snapshotName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * For Redis engine version 6.0 onwards: Deletes a user. The user will be removed from all user groups and in turn removed from all replication groups. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteUserTest() throws ApiException {
        String userId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        User response = api.gETDeleteUser(userId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * For Redis engine version 6.0 onwards: Deletes a user group. The user group must first be disassociated from the replication group before it can be deleted. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteUserGroupTest() throws ApiException {
        String userGroupId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UserGroup response = api.gETDeleteUserGroup(userGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.&lt;/p&gt; &lt;p&gt;By default, abbreviated information about the clusters is returned. You can use the optional &lt;i&gt;ShowCacheNodeInfo&lt;/i&gt; flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.&lt;/p&gt; &lt;p&gt;If the cluster is in the &lt;i&gt;creating&lt;/i&gt; state, only cluster-level information is displayed until all of the nodes are successfully provisioned.&lt;/p&gt; &lt;p&gt;If the cluster is in the &lt;i&gt;deleting&lt;/i&gt; state, only cluster-level information is displayed.&lt;/p&gt; &lt;p&gt;If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is &lt;i&gt;available&lt;/i&gt;, the cluster is ready for use.&lt;/p&gt; &lt;p&gt;If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeCacheClustersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String cacheClusterId = null;
        Integer maxRecords = null;
        String marker = null;
        Boolean showCacheNodeInfo = null;
        Boolean showCacheClustersNotInReplicationGroups = null;
        CacheClusterMessage response = api.gETDescribeCacheClusters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheClusterId, maxRecords, marker, showCacheNodeInfo, showCacheClustersNotInReplicationGroups);
        // TODO: test validations
    }

    /**
     * Returns a list of the available cache engines and their versions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeCacheEngineVersionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String engine = null;
        String engineVersion = null;
        String cacheParameterGroupFamily = null;
        Integer maxRecords = null;
        String marker = null;
        Boolean defaultOnly = null;
        CacheEngineVersionMessage response = api.gETDescribeCacheEngineVersions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, engineVersion, cacheParameterGroupFamily, maxRecords, marker, defaultOnly);
        // TODO: test validations
    }

    /**
     * Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeCacheParameterGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String cacheParameterGroupName = null;
        Integer maxRecords = null;
        String marker = null;
        CacheParameterGroupsMessage response = api.gETDescribeCacheParameterGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheParameterGroupName, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns the detailed parameter list for a particular cache parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeCacheParametersTest() throws ApiException {
        String cacheParameterGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String source = null;
        Integer maxRecords = null;
        String marker = null;
        CacheParameterGroupDetails response = api.gETDescribeCacheParameters(cacheParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeCacheSecurityGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String cacheSecurityGroupName = null;
        Integer maxRecords = null;
        String marker = null;
        CacheSecurityGroupMessage response = api.gETDescribeCacheSecurityGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheSecurityGroupName, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeCacheSubnetGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String cacheSubnetGroupName = null;
        Integer maxRecords = null;
        String marker = null;
        CacheSubnetGroupMessage response = api.gETDescribeCacheSubnetGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheSubnetGroupName, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns the default engine and system parameter information for the specified cache engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeEngineDefaultParametersTest() throws ApiException {
        String cacheParameterGroupFamily = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxRecords = null;
        String marker = null;
        DescribeEngineDefaultParametersResult response = api.gETDescribeEngineDefaultParameters(cacheParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.&lt;/p&gt; &lt;p&gt;By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days&#39; worth of events if necessary.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeEventsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sourceIdentifier = null;
        String sourceType = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Integer duration = null;
        Integer maxRecords = null;
        String marker = null;
        EventsMessage response = api.gETDescribeEvents(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceIdentifier, sourceType, startTime, endTime, duration, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns information about a particular global replication group. If no identifier is specified, returns information about all Global datastores. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeGlobalReplicationGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String globalReplicationGroupId = null;
        Integer maxRecords = null;
        String marker = null;
        Boolean showMemberInfo = null;
        DescribeGlobalReplicationGroupsResult response = api.gETDescribeGlobalReplicationGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalReplicationGroupId, maxRecords, marker, showMemberInfo);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about a particular replication group. If no identifier is specified, &lt;code&gt;DescribeReplicationGroups&lt;/code&gt; returns information about all replication groups.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeReplicationGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String replicationGroupId = null;
        Integer maxRecords = null;
        String marker = null;
        ReplicationGroupMessage response = api.gETDescribeReplicationGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeReservedCacheNodesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String reservedCacheNodeId = null;
        String reservedCacheNodesOfferingId = null;
        String cacheNodeType = null;
        String duration = null;
        String productDescription = null;
        String offeringType = null;
        Integer maxRecords = null;
        String marker = null;
        ReservedCacheNodeMessage response = api.gETDescribeReservedCacheNodes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservedCacheNodeId, reservedCacheNodesOfferingId, cacheNodeType, duration, productDescription, offeringType, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Lists available reserved cache node offerings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeReservedCacheNodesOfferingsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String reservedCacheNodesOfferingId = null;
        String cacheNodeType = null;
        String duration = null;
        String productDescription = null;
        String offeringType = null;
        Integer maxRecords = null;
        String marker = null;
        ReservedCacheNodesOfferingMessage response = api.gETDescribeReservedCacheNodesOfferings(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservedCacheNodesOfferingId, cacheNodeType, duration, productDescription, offeringType, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns details of the service updates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeServiceUpdatesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String serviceUpdateName = null;
        List<ServiceUpdateStatus> serviceUpdateStatus = null;
        Integer maxRecords = null;
        String marker = null;
        ServiceUpdatesMessage response = api.gETDescribeServiceUpdates(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, serviceUpdateName, serviceUpdateStatus, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about cluster or replication group snapshots. By default, &lt;code&gt;DescribeSnapshots&lt;/code&gt; lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeSnapshotsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String replicationGroupId = null;
        String cacheClusterId = null;
        String snapshotName = null;
        String snapshotSource = null;
        String marker = null;
        Integer maxRecords = null;
        Boolean showNodeGroupConfig = null;
        DescribeSnapshotsListMessage response = api.gETDescribeSnapshots(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, cacheClusterId, snapshotName, snapshotSource, marker, maxRecords, showNodeGroupConfig);
        // TODO: test validations
    }

    /**
     * Returns details of the update actions 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeUpdateActionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String serviceUpdateName = null;
        List<String> replicationGroupIds = null;
        List<String> cacheClusterIds = null;
        String engine = null;
        List<ServiceUpdateStatus> serviceUpdateStatus = null;
        GETDescribeUpdateActionsServiceUpdateTimeRangeParameter serviceUpdateTimeRange = null;
        List<UpdateActionStatus> updateActionStatus = null;
        Boolean showNodeLevelUpdateStatus = null;
        Integer maxRecords = null;
        String marker = null;
        UpdateActionsMessage response = api.gETDescribeUpdateActions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, serviceUpdateName, replicationGroupIds, cacheClusterIds, engine, serviceUpdateStatus, serviceUpdateTimeRange, updateActionStatus, showNodeLevelUpdateStatus, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns a list of user groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeUserGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String userGroupId = null;
        Integer maxRecords = null;
        String marker = null;
        DescribeUserGroupsResult response = api.gETDescribeUserGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userGroupId, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns a list of users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeUsersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String engine = null;
        String userId = null;
        List<Filter> filters = null;
        Integer maxRecords = null;
        String marker = null;
        DescribeUsersResult response = api.gETDescribeUsers(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, userId, filters, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Remove a secondary cluster from the Global datastore using the Global datastore name. The secondary cluster will no longer receive updates from the primary cluster, but will remain as a standalone cluster in that Amazon region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDisassociateGlobalReplicationGroupTest() throws ApiException {
        String globalReplicationGroupId = null;
        String replicationGroupId = null;
        String replicationGroupRegion = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisassociateGlobalReplicationGroupResult response = api.gETDisassociateGlobalReplicationGroup(globalReplicationGroupId, replicationGroupId, replicationGroupRegion, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Used to failover the primary region to a secondary region. The secondary region will become primary, and all other clusters will become secondary.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETFailoverGlobalReplicationGroupTest() throws ApiException {
        String globalReplicationGroupId = null;
        String primaryRegion = null;
        String primaryReplicationGroupId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        FailoverGlobalReplicationGroupResult response = api.gETFailoverGlobalReplicationGroup(globalReplicationGroupId, primaryRegion, primaryReplicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Increase the number of node groups in the Global datastore
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETIncreaseNodeGroupsInGlobalReplicationGroupTest() throws ApiException {
        String globalReplicationGroupId = null;
        Integer nodeGroupCount = null;
        Boolean applyImmediately = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETIncreaseNodeGroupsInGlobalReplicationGroupRegionalConfigurationsParameterInner> regionalConfigurations = null;
        IncreaseNodeGroupsInGlobalReplicationGroupResult response = api.gETIncreaseNodeGroupsInGlobalReplicationGroup(globalReplicationGroupId, nodeGroupCount, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, regionalConfigurations);
        // TODO: test validations
    }

    /**
     * Dynamically increases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETIncreaseReplicaCountTest() throws ApiException {
        String replicationGroupId = null;
        Boolean applyImmediately = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer newReplicaCount = null;
        List<GETDecreaseReplicaCountReplicaConfigurationParameterInner> replicaConfiguration = null;
        IncreaseReplicaCountResult response = api.gETIncreaseReplicaCount(replicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newReplicaCount, replicaConfiguration);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists all available node types that you can scale your Redis cluster&#39;s or replication group&#39;s current node type.&lt;/p&gt; &lt;p&gt;When you use the &lt;code&gt;ModifyCacheCluster&lt;/code&gt; or &lt;code&gt;ModifyReplicationGroup&lt;/code&gt; operations to scale your cluster or replication group, the value of the &lt;code&gt;CacheNodeType&lt;/code&gt; parameter must be one of the node types returned by this operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETListAllowedNodeTypeModificationsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String cacheClusterId = null;
        String replicationGroupId = null;
        AllowedNodeTypeModificationsMessage response = api.gETListAllowedNodeTypeModifications(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheClusterId, replicationGroupId);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists all tags currently on a named resource.&lt;/p&gt; &lt;p&gt; A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the cluster is not in the &lt;i&gt;available&lt;/i&gt; state, &lt;code&gt;ListTagsForResource&lt;/code&gt; returns an error.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETListTagsForResourceTest() throws ApiException {
        String resourceName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TagListMessage response = api.gETListTagsForResource(resourceName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyCacheClusterTest() throws ApiException {
        String cacheClusterId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer numCacheNodes = null;
        List<String> cacheNodeIdsToRemove = null;
        String azMode = null;
        List<String> newAvailabilityZones = null;
        List<String> cacheSecurityGroupNames = null;
        List<String> securityGroupIds = null;
        String preferredMaintenanceWindow = null;
        String notificationTopicArn = null;
        String cacheParameterGroupName = null;
        String notificationTopicStatus = null;
        Boolean applyImmediately = null;
        String engineVersion = null;
        Boolean autoMinorVersionUpgrade = null;
        Integer snapshotRetentionLimit = null;
        String snapshotWindow = null;
        String cacheNodeType = null;
        String authToken = null;
        String authTokenUpdateStrategy = null;
        List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations = null;
        String ipDiscovery = null;
        ModifyCacheClusterResult response = api.gETModifyCacheCluster(cacheClusterId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, numCacheNodes, cacheNodeIdsToRemove, azMode, newAvailabilityZones, cacheSecurityGroupNames, securityGroupIds, preferredMaintenanceWindow, notificationTopicArn, cacheParameterGroupName, notificationTopicStatus, applyImmediately, engineVersion, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, cacheNodeType, authToken, authTokenUpdateStrategy, logDeliveryConfigurations, ipDiscovery);
        // TODO: test validations
    }

    /**
     * Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyCacheParameterGroupTest() throws ApiException {
        String cacheParameterGroupName = null;
        List<GETModifyCacheParameterGroupParameterNameValuesParameterInner> parameterNameValues = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CacheParameterGroupNameMessage response = api.gETModifyCacheParameterGroup(cacheParameterGroupName, parameterNameValues, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies an existing cache subnet group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyCacheSubnetGroupTest() throws ApiException {
        String cacheSubnetGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String cacheSubnetGroupDescription = null;
        List<String> subnetIds = null;
        ModifyCacheSubnetGroupResult response = api.gETModifyCacheSubnetGroup(cacheSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheSubnetGroupDescription, subnetIds);
        // TODO: test validations
    }

    /**
     * Modifies the settings for a Global datastore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyGlobalReplicationGroupTest() throws ApiException {
        String globalReplicationGroupId = null;
        Boolean applyImmediately = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String cacheNodeType = null;
        String engineVersion = null;
        String cacheParameterGroupName = null;
        String globalReplicationGroupDescription = null;
        Boolean automaticFailoverEnabled = null;
        ModifyGlobalReplicationGroupResult response = api.gETModifyGlobalReplicationGroup(globalReplicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheNodeType, engineVersion, cacheParameterGroupName, globalReplicationGroupDescription, automaticFailoverEnabled);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies the settings for a replication group.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html\&quot;&gt;Scaling for Amazon ElastiCache for Redis (cluster mode enabled)&lt;/a&gt; in the ElastiCache User Guide&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html\&quot;&gt;ModifyReplicationGroupShardConfiguration&lt;/a&gt; in the ElastiCache API Reference&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyReplicationGroupTest() throws ApiException {
        String replicationGroupId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String replicationGroupDescription = null;
        String primaryClusterId = null;
        String snapshottingClusterId = null;
        Boolean automaticFailoverEnabled = null;
        Boolean multiAZEnabled = null;
        String nodeGroupId = null;
        List<String> cacheSecurityGroupNames = null;
        List<String> securityGroupIds = null;
        String preferredMaintenanceWindow = null;
        String notificationTopicArn = null;
        String cacheParameterGroupName = null;
        String notificationTopicStatus = null;
        Boolean applyImmediately = null;
        String engineVersion = null;
        Boolean autoMinorVersionUpgrade = null;
        Integer snapshotRetentionLimit = null;
        String snapshotWindow = null;
        String cacheNodeType = null;
        String authToken = null;
        String authTokenUpdateStrategy = null;
        List<String> userGroupIdsToAdd = null;
        List<String> userGroupIdsToRemove = null;
        Boolean removeUserGroups = null;
        List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations = null;
        String ipDiscovery = null;
        Boolean transitEncryptionEnabled = null;
        String transitEncryptionMode = null;
        ModifyReplicationGroupResult response = api.gETModifyReplicationGroup(replicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupDescription, primaryClusterId, snapshottingClusterId, automaticFailoverEnabled, multiAZEnabled, nodeGroupId, cacheSecurityGroupNames, securityGroupIds, preferredMaintenanceWindow, notificationTopicArn, cacheParameterGroupName, notificationTopicStatus, applyImmediately, engineVersion, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, cacheNodeType, authToken, authTokenUpdateStrategy, userGroupIdsToAdd, userGroupIdsToRemove, removeUserGroups, logDeliveryConfigurations, ipDiscovery, transitEncryptionEnabled, transitEncryptionMode);
        // TODO: test validations
    }

    /**
     * Modifies a replication group&#39;s shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among existing shards.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyReplicationGroupShardConfigurationTest() throws ApiException {
        String replicationGroupId = null;
        Integer nodeGroupCount = null;
        Boolean applyImmediately = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETModifyReplicationGroupShardConfigurationReshardingConfigurationParameterInner> reshardingConfiguration = null;
        List<String> nodeGroupsToRemove = null;
        List<String> nodeGroupsToRetain = null;
        ModifyReplicationGroupShardConfigurationResult response = api.gETModifyReplicationGroupShardConfiguration(replicationGroupId, nodeGroupCount, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reshardingConfiguration, nodeGroupsToRemove, nodeGroupsToRetain);
        // TODO: test validations
    }

    /**
     * Changes user password(s) and/or access string.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyUserTest() throws ApiException {
        String userId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String accessString = null;
        String appendAccessString = null;
        List<String> passwords = null;
        Boolean noPasswordRequired = null;
        GETCreateUserAuthenticationModeParameter authenticationMode = null;
        User response = api.gETModifyUser(userId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accessString, appendAccessString, passwords, noPasswordRequired, authenticationMode);
        // TODO: test validations
    }

    /**
     * Changes the list of users that belong to the user group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyUserGroupTest() throws ApiException {
        String userGroupId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> userIdsToAdd = null;
        List<String> userIdsToRemove = null;
        UserGroup response = api.gETModifyUserGroup(userGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userIdsToAdd, userIdsToRemove);
        // TODO: test validations
    }

    /**
     * Allows you to purchase a reserved cache node offering. Reserved nodes are not eligible for cancellation and are non-refundable. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/reserved-nodes.html\&quot;&gt;Managing Costs with Reserved Nodes&lt;/a&gt; for Redis or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/reserved-nodes.html\&quot;&gt;Managing Costs with Reserved Nodes&lt;/a&gt; for Memcached.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETPurchaseReservedCacheNodesOfferingTest() throws ApiException {
        String reservedCacheNodesOfferingId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String reservedCacheNodeId = null;
        Integer cacheNodeCount = null;
        List<GETAddTagsToResourceTagsParameterInner> tags = null;
        PurchaseReservedCacheNodesOfferingResult response = api.gETPurchaseReservedCacheNodesOffering(reservedCacheNodesOfferingId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservedCacheNodeId, cacheNodeCount, tags);
        // TODO: test validations
    }

    /**
     * Redistribute slots to ensure uniform distribution across existing shards in the cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRebalanceSlotsInGlobalReplicationGroupTest() throws ApiException {
        String globalReplicationGroupId = null;
        Boolean applyImmediately = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RebalanceSlotsInGlobalReplicationGroupResult response = api.gETRebalanceSlotsInGlobalReplicationGroup(globalReplicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.&lt;/p&gt; &lt;p&gt;The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.&lt;/p&gt; &lt;p&gt;When the reboot is complete, a cluster event is created.&lt;/p&gt; &lt;p&gt;Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.&lt;/p&gt; &lt;p&gt;If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes.rebooting.html\&quot;&gt;Rebooting a Cluster&lt;/a&gt; for an alternate process.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRebootCacheClusterTest() throws ApiException {
        String cacheClusterId = null;
        List<String> cacheNodeIdsToReboot = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RebootCacheClusterResult response = api.gETRebootCacheCluster(cacheClusterId, cacheNodeIdsToReboot, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the tags identified by the &lt;code&gt;TagKeys&lt;/code&gt; list from the named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRemoveTagsFromResourceTest() throws ApiException {
        String resourceName = null;
        List<String> tagKeys = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TagListMessage response = api.gETRemoveTagsFromResource(resourceName, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the &lt;code&gt;ResetAllParameters&lt;/code&gt; and &lt;code&gt;CacheParameterGroupName&lt;/code&gt; parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETResetCacheParameterGroupTest() throws ApiException {
        String cacheParameterGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean resetAllParameters = null;
        List<GETModifyCacheParameterGroupParameterNameValuesParameterInner> parameterNameValues = null;
        CacheParameterGroupNameMessage response = api.gETResetCacheParameterGroup(cacheParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameterNameValues);
        // TODO: test validations
    }

    /**
     * Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRevokeCacheSecurityGroupIngressTest() throws ApiException {
        String cacheSecurityGroupName = null;
        String ec2SecurityGroupName = null;
        String ec2SecurityGroupOwnerId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RevokeCacheSecurityGroupIngressResult response = api.gETRevokeCacheSecurityGroupIngress(cacheSecurityGroupName, ec2SecurityGroupName, ec2SecurityGroupOwnerId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Start the migration of data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETStartMigrationTest() throws ApiException {
        String replicationGroupId = null;
        List<CustomerNodeEndpoint> customerNodeEndpointList = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartMigrationResponse response = api.gETStartMigration(replicationGroupId, customerNodeEndpointList, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Represents the input of a &lt;code&gt;TestFailover&lt;/code&gt; operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).&lt;/p&gt; &lt;p&gt;This API is designed for testing the behavior of your application in case of ElastiCache failover. It is not designed to be an operational tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large-scale operational events, Amazon may block this API. &lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Note the following&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and Amazon CLI) in any rolling 24-hour period.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.&lt;/p&gt; &lt;p&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the Amazon CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Replication group message: &lt;code&gt;Test Failover API called for node group &amp;lt;node-group-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Failover from primary node &amp;lt;primary-node-id&amp;gt; to replica node &amp;lt;node-id&amp;gt; completed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Replication group message: &lt;code&gt;Failover from primary node &amp;lt;primary-node-id&amp;gt; to replica node &amp;lt;node-id&amp;gt; completed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Recovering cache nodes &amp;lt;node-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Finished recovery for cache nodes &amp;lt;node-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html\&quot;&gt;Viewing ElastiCache Events&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html\&quot;&gt;DescribeEvents&lt;/a&gt; in the ElastiCache API Reference&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Also see, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test\&quot;&gt;Testing Multi-AZ &lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETTestFailoverTest() throws ApiException {
        String replicationGroupId = null;
        String nodeGroupId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TestFailoverResult response = api.gETTestFailover(replicationGroupId, nodeGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; For example, you can use cost-allocation tags to your ElastiCache resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html\&quot;&gt;Using Cost Allocation Tags in Amazon ElastiCache&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAddTagsToResourceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddTagsToResourceMessage addTagsToResourceMessage = null;
        TagListMessage response = api.pOSTAddTagsToResource(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsToResourceMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAuthorizeCacheSecurityGroupIngressTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AuthorizeCacheSecurityGroupIngressMessage authorizeCacheSecurityGroupIngressMessage = null;
        AuthorizeCacheSecurityGroupIngressResult response = api.pOSTAuthorizeCacheSecurityGroupIngress(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, authorizeCacheSecurityGroupIngressMessage);
        // TODO: test validations
    }

    /**
     * Apply the service update. For more information on service updates and applying them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html\&quot;&gt;Applying Service Updates&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTBatchApplyUpdateActionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchApplyUpdateActionMessage batchApplyUpdateActionMessage = null;
        UpdateActionResultsMessage response = api.pOSTBatchApplyUpdateAction(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchApplyUpdateActionMessage);
        // TODO: test validations
    }

    /**
     * Stop the service update. For more information on service updates and stopping them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html\&quot;&gt;Stopping Service Updates&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTBatchStopUpdateActionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchStopUpdateActionMessage batchStopUpdateActionMessage = null;
        UpdateActionResultsMessage response = api.pOSTBatchStopUpdateAction(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchStopUpdateActionMessage);
        // TODO: test validations
    }

    /**
     * Complete the migration of data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCompleteMigrationTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CompleteMigrationMessage completeMigrationMessage = null;
        CompleteMigrationResponse response = api.pOSTCompleteMigration(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, completeMigrationMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Makes a copy of an existing snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;Users or groups that have permissions to use the &lt;code&gt;CopySnapshot&lt;/code&gt; operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the &lt;code&gt;CopySnapshot&lt;/code&gt; operation. For more information about using IAM to control the use of ElastiCache operations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html\&quot;&gt;Exporting Snapshots&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html\&quot;&gt;Authentication &amp;amp; Access Control&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;You could receive the following error messages.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Error Messages&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s is outside of the region.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s does not exist.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s is not owned by the authenticated user.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The authenticated user does not have sufficient permissions to perform the desired activity.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Contact your system administrator to get the needed permissions.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s already contains an object with key %s.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Give the &lt;code&gt;TargetSnapshotName&lt;/code&gt; a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for &lt;code&gt;TargetSnapshotName&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted READ permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add List and Read permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add Upload/Delete permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add View Permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCopySnapshotTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CopySnapshotMessage copySnapshotMessage = null;
        CopySnapshotResult response = api.pOSTCopySnapshot(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copySnapshotMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.&lt;/p&gt; &lt;p&gt;This operation is not supported for Redis (cluster mode enabled) clusters.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateCacheClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCacheClusterMessage createCacheClusterMessage = null;
        CreateCacheClusterResult response = api.pOSTCreateCacheCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheClusterMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.&lt;/p&gt; &lt;p&gt;A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html\&quot;&gt;ModifyCacheParameterGroup&lt;/a&gt; in the ElastiCache API Reference.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html\&quot;&gt;Parameters and Parameter Groups&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateCacheParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCacheParameterGroupMessage createCacheParameterGroupMessage = null;
        CreateCacheParameterGroupResult response = api.pOSTCreateCacheParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new cache security group. Use a cache security group to control access to one or more clusters.&lt;/p&gt; &lt;p&gt;Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html\&quot;&gt;CreateCacheSubnetGroup&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateCacheSecurityGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCacheSecurityGroupMessage createCacheSecurityGroupMessage = null;
        CreateCacheSecurityGroupResult response = api.pOSTCreateCacheSecurityGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheSecurityGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new cache subnet group.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateCacheSubnetGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCacheSubnetGroupMessage createCacheSubnetGroupMessage = null;
        CreateCacheSubnetGroupResult response = api.pOSTCreateCacheSubnetGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheSubnetGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Global Datastore for Redis offers fully managed, fast, reliable and secure cross-region replication. Using Global Datastore for Redis, you can create cross-region read replica clusters for ElastiCache for Redis to enable low-latency reads and disaster recovery across regions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastore.html\&quot;&gt;Replication Across Regions Using Global Datastore&lt;/a&gt;. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;b&gt;GlobalReplicationGroupIdSuffix&lt;/b&gt; is the name of the Global datastore.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;b&gt;PrimaryReplicationGroupId&lt;/b&gt; represents the name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateGlobalReplicationGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateGlobalReplicationGroupMessage createGlobalReplicationGroupMessage = null;
        CreateGlobalReplicationGroupResult response = api.pOSTCreateGlobalReplicationGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createGlobalReplicationGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.&lt;/p&gt; &lt;p&gt;This API can be used to create a standalone regional replication group or a secondary replication group associated with a Global datastore.&lt;/p&gt; &lt;p&gt;A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.&lt;/p&gt; &lt;p&gt;A Redis cluster-mode enabled cluster is comprised of from 1 to 90 shards (API/CLI: node groups). Each shard has a primary node and up to 5 read-only replica nodes. The configuration can range from 90 shards and 0 replicas to 15 shards and 5 replicas, which is the maximum number or replicas allowed. &lt;/p&gt; &lt;p&gt;The node or shard limit can be increased to a maximum of 500 per cluster if the Redis engine version is 5.0.6 or higher. For example, you can choose to configure a 500 node cluster that ranges between 83 shards (one primary and 5 replicas per shard) and 500 shards (single primary and no replicas). Make sure there are enough available IP addresses to accommodate the increase. Common pitfalls include the subnets in the subnet group have too small a CIDR range or the subnets are shared and heavily used by other clusters. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.Creating.html\&quot;&gt;Creating a Subnet Group&lt;/a&gt;. For versions below 5.0.6, the limit is 250 per cluster.&lt;/p&gt; &lt;p&gt;To request a limit increase, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\&quot;&gt;Amazon Service Limits&lt;/a&gt; and choose the limit type &lt;b&gt;Nodes per cluster per instance type&lt;/b&gt;. &lt;/p&gt; &lt;p&gt;When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. If you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis&#39; scaling. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Scaling.html\&quot;&gt;Scaling ElastiCache for Redis Clusters&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateReplicationGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateReplicationGroupMessage createReplicationGroupMessage = null;
        CreateReplicationGroupResult response = api.pOSTCreateReplicationGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createReplicationGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a copy of an entire cluster or replication group at a specific moment in time.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateSnapshotTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSnapshotMessage createSnapshotMessage = null;
        CreateSnapshotResult response = api.pOSTCreateSnapshot(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createSnapshotMessage);
        // TODO: test validations
    }

    /**
     * For Redis engine version 6.0 onwards: Creates a Redis user. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateUserTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUserMessage createUserMessage = null;
        User response = api.pOSTCreateUser(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createUserMessage);
        // TODO: test validations
    }

    /**
     * For Redis engine version 6.0 onwards: Creates a Redis user group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateUserGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUserGroupMessage createUserGroupMessage = null;
        UserGroup response = api.pOSTCreateUserGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createUserGroupMessage);
        // TODO: test validations
    }

    /**
     * Decreases the number of node groups in a Global datastore
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDecreaseNodeGroupsInGlobalReplicationGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DecreaseNodeGroupsInGlobalReplicationGroupMessage decreaseNodeGroupsInGlobalReplicationGroupMessage = null;
        DecreaseNodeGroupsInGlobalReplicationGroupResult response = api.pOSTDecreaseNodeGroupsInGlobalReplicationGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, decreaseNodeGroupsInGlobalReplicationGroupMessage);
        // TODO: test validations
    }

    /**
     * Dynamically decreases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDecreaseReplicaCountTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DecreaseReplicaCountMessage decreaseReplicaCountMessage = null;
        DecreaseReplicaCountResult response = api.pOSTDecreaseReplicaCount(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, decreaseReplicaCountMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a previously provisioned cluster. &lt;code&gt;DeleteCacheCluster&lt;/code&gt; deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.&lt;/p&gt; &lt;p&gt;This operation is not valid for:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode enabled) clusters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode disabled) clusters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is the last read replica of a replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is the primary node of a replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A node group (shard) that has Multi-AZ mode enabled&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster from a Redis (cluster mode enabled) replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is not in the &lt;code&gt;available&lt;/code&gt; state&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteCacheClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteCacheClusterMessage deleteCacheClusterMessage = null;
        DeleteCacheClusterResult response = api.pOSTDeleteCacheCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheClusterMessage);
        // TODO: test validations
    }

    /**
     * Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters. You cannot delete the default cache parameter groups in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteCacheParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteCacheParameterGroupMessage deleteCacheParameterGroupMessage = null;
        api.pOSTDeleteCacheParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a cache security group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a cache security group if it is associated with any clusters.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteCacheSecurityGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteCacheSecurityGroupMessage deleteCacheSecurityGroupMessage = null;
        api.pOSTDeleteCacheSecurityGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheSecurityGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a cache subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a default cache subnet group or one that is associated with any clusters.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteCacheSubnetGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteCacheSubnetGroupMessage deleteCacheSubnetGroupMessage = null;
        api.pOSTDeleteCacheSubnetGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheSubnetGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deleting a Global datastore is a two-step process: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;First, you must &lt;a&gt;DisassociateGlobalReplicationGroup&lt;/a&gt; to remove the secondary clusters in the Global datastore.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Once the Global datastore contains only the primary cluster, you can use the &lt;code&gt;DeleteGlobalReplicationGroup&lt;/code&gt; API to delete the Global datastore while retainining the primary cluster using &lt;code&gt;RetainPrimaryReplicationGroup&#x3D;true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Since the Global Datastore has only a primary cluster, you can delete the Global Datastore while retaining the primary by setting &lt;code&gt;RetainPrimaryReplicationGroup&#x3D;true&lt;/code&gt;. The primary cluster is never deleted when deleting a Global Datastore. It can only be deleted when it no longer is associated with any Global Datastore.&lt;/p&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteGlobalReplicationGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteGlobalReplicationGroupMessage deleteGlobalReplicationGroupMessage = null;
        DeleteGlobalReplicationGroupResult response = api.pOSTDeleteGlobalReplicationGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteGlobalReplicationGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting &lt;code&gt;RetainPrimaryCluster&#x3D;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteReplicationGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteReplicationGroupMessage deleteReplicationGroupMessage = null;
        DeleteReplicationGroupResult response = api.pOSTDeleteReplicationGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteReplicationGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteSnapshotTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteSnapshotMessage deleteSnapshotMessage = null;
        DeleteSnapshotResult response = api.pOSTDeleteSnapshot(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteSnapshotMessage);
        // TODO: test validations
    }

    /**
     * For Redis engine version 6.0 onwards: Deletes a user. The user will be removed from all user groups and in turn removed from all replication groups. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteUserTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteUserMessage deleteUserMessage = null;
        User response = api.pOSTDeleteUser(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteUserMessage);
        // TODO: test validations
    }

    /**
     * For Redis engine version 6.0 onwards: Deletes a user group. The user group must first be disassociated from the replication group before it can be deleted. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteUserGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteUserGroupMessage deleteUserGroupMessage = null;
        UserGroup response = api.pOSTDeleteUserGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteUserGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.&lt;/p&gt; &lt;p&gt;By default, abbreviated information about the clusters is returned. You can use the optional &lt;i&gt;ShowCacheNodeInfo&lt;/i&gt; flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.&lt;/p&gt; &lt;p&gt;If the cluster is in the &lt;i&gt;creating&lt;/i&gt; state, only cluster-level information is displayed until all of the nodes are successfully provisioned.&lt;/p&gt; &lt;p&gt;If the cluster is in the &lt;i&gt;deleting&lt;/i&gt; state, only cluster-level information is displayed.&lt;/p&gt; &lt;p&gt;If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is &lt;i&gt;available&lt;/i&gt;, the cluster is ready for use.&lt;/p&gt; &lt;p&gt;If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeCacheClustersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeCacheClustersMessage describeCacheClustersMessage = null;
        CacheClusterMessage response = api.pOSTDescribeCacheClusters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheClustersMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of the available cache engines and their versions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeCacheEngineVersionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeCacheEngineVersionsMessage describeCacheEngineVersionsMessage = null;
        CacheEngineVersionMessage response = api.pOSTDescribeCacheEngineVersions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheEngineVersionsMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeCacheParameterGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeCacheParameterGroupsMessage describeCacheParameterGroupsMessage = null;
        CacheParameterGroupsMessage response = api.pOSTDescribeCacheParameterGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheParameterGroupsMessage);
        // TODO: test validations
    }

    /**
     * Returns the detailed parameter list for a particular cache parameter group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeCacheParametersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeCacheParametersMessage describeCacheParametersMessage = null;
        CacheParameterGroupDetails response = api.pOSTDescribeCacheParameters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheParametersMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeCacheSecurityGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeCacheSecurityGroupsMessage describeCacheSecurityGroupsMessage = null;
        CacheSecurityGroupMessage response = api.pOSTDescribeCacheSecurityGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheSecurityGroupsMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeCacheSubnetGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeCacheSubnetGroupsMessage describeCacheSubnetGroupsMessage = null;
        CacheSubnetGroupMessage response = api.pOSTDescribeCacheSubnetGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheSubnetGroupsMessage);
        // TODO: test validations
    }

    /**
     * Returns the default engine and system parameter information for the specified cache engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeEngineDefaultParametersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeEngineDefaultParametersMessage describeEngineDefaultParametersMessage = null;
        DescribeEngineDefaultParametersResult response = api.pOSTDescribeEngineDefaultParameters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEngineDefaultParametersMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.&lt;/p&gt; &lt;p&gt;By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days&#39; worth of events if necessary.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeEventsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeEventsMessage describeEventsMessage = null;
        EventsMessage response = api.pOSTDescribeEvents(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventsMessage);
        // TODO: test validations
    }

    /**
     * Returns information about a particular global replication group. If no identifier is specified, returns information about all Global datastores. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeGlobalReplicationGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeGlobalReplicationGroupsMessage describeGlobalReplicationGroupsMessage = null;
        DescribeGlobalReplicationGroupsResult response = api.pOSTDescribeGlobalReplicationGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeGlobalReplicationGroupsMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about a particular replication group. If no identifier is specified, &lt;code&gt;DescribeReplicationGroups&lt;/code&gt; returns information about all replication groups.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeReplicationGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeReplicationGroupsMessage describeReplicationGroupsMessage = null;
        ReplicationGroupMessage response = api.pOSTDescribeReplicationGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeReplicationGroupsMessage);
        // TODO: test validations
    }

    /**
     * Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeReservedCacheNodesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeReservedCacheNodesMessage describeReservedCacheNodesMessage = null;
        ReservedCacheNodeMessage response = api.pOSTDescribeReservedCacheNodes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeReservedCacheNodesMessage);
        // TODO: test validations
    }

    /**
     * Lists available reserved cache node offerings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeReservedCacheNodesOfferingsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeReservedCacheNodesOfferingsMessage describeReservedCacheNodesOfferingsMessage = null;
        ReservedCacheNodesOfferingMessage response = api.pOSTDescribeReservedCacheNodesOfferings(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeReservedCacheNodesOfferingsMessage);
        // TODO: test validations
    }

    /**
     * Returns details of the service updates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeServiceUpdatesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeServiceUpdatesMessage describeServiceUpdatesMessage = null;
        ServiceUpdatesMessage response = api.pOSTDescribeServiceUpdates(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeServiceUpdatesMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about cluster or replication group snapshots. By default, &lt;code&gt;DescribeSnapshots&lt;/code&gt; lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeSnapshotsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeSnapshotsMessage describeSnapshotsMessage = null;
        DescribeSnapshotsListMessage response = api.pOSTDescribeSnapshots(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeSnapshotsMessage);
        // TODO: test validations
    }

    /**
     * Returns details of the update actions 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeUpdateActionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeUpdateActionsMessage describeUpdateActionsMessage = null;
        UpdateActionsMessage response = api.pOSTDescribeUpdateActions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeUpdateActionsMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of user groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeUserGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeUserGroupsMessage describeUserGroupsMessage = null;
        DescribeUserGroupsResult response = api.pOSTDescribeUserGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeUserGroupsMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeUsersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeUsersMessage describeUsersMessage = null;
        DescribeUsersResult response = api.pOSTDescribeUsers(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeUsersMessage);
        // TODO: test validations
    }

    /**
     * Remove a secondary cluster from the Global datastore using the Global datastore name. The secondary cluster will no longer receive updates from the primary cluster, but will remain as a standalone cluster in that Amazon region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDisassociateGlobalReplicationGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisassociateGlobalReplicationGroupMessage disassociateGlobalReplicationGroupMessage = null;
        DisassociateGlobalReplicationGroupResult response = api.pOSTDisassociateGlobalReplicationGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disassociateGlobalReplicationGroupMessage);
        // TODO: test validations
    }

    /**
     * Used to failover the primary region to a secondary region. The secondary region will become primary, and all other clusters will become secondary.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTFailoverGlobalReplicationGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        FailoverGlobalReplicationGroupMessage failoverGlobalReplicationGroupMessage = null;
        FailoverGlobalReplicationGroupResult response = api.pOSTFailoverGlobalReplicationGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverGlobalReplicationGroupMessage);
        // TODO: test validations
    }

    /**
     * Increase the number of node groups in the Global datastore
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTIncreaseNodeGroupsInGlobalReplicationGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        IncreaseNodeGroupsInGlobalReplicationGroupMessage increaseNodeGroupsInGlobalReplicationGroupMessage = null;
        IncreaseNodeGroupsInGlobalReplicationGroupResult response = api.pOSTIncreaseNodeGroupsInGlobalReplicationGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, increaseNodeGroupsInGlobalReplicationGroupMessage);
        // TODO: test validations
    }

    /**
     * Dynamically increases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTIncreaseReplicaCountTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        IncreaseReplicaCountMessage increaseReplicaCountMessage = null;
        IncreaseReplicaCountResult response = api.pOSTIncreaseReplicaCount(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, increaseReplicaCountMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists all available node types that you can scale your Redis cluster&#39;s or replication group&#39;s current node type.&lt;/p&gt; &lt;p&gt;When you use the &lt;code&gt;ModifyCacheCluster&lt;/code&gt; or &lt;code&gt;ModifyReplicationGroup&lt;/code&gt; operations to scale your cluster or replication group, the value of the &lt;code&gt;CacheNodeType&lt;/code&gt; parameter must be one of the node types returned by this operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTListAllowedNodeTypeModificationsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListAllowedNodeTypeModificationsMessage listAllowedNodeTypeModificationsMessage = null;
        AllowedNodeTypeModificationsMessage response = api.pOSTListAllowedNodeTypeModifications(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listAllowedNodeTypeModificationsMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists all tags currently on a named resource.&lt;/p&gt; &lt;p&gt; A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the cluster is not in the &lt;i&gt;available&lt;/i&gt; state, &lt;code&gt;ListTagsForResource&lt;/code&gt; returns an error.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTListTagsForResourceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceMessage listTagsForResourceMessage = null;
        TagListMessage response = api.pOSTListTagsForResource(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage);
        // TODO: test validations
    }

    /**
     * Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyCacheClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyCacheClusterMessage modifyCacheClusterMessage = null;
        ModifyCacheClusterResult response = api.pOSTModifyCacheCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyCacheClusterMessage);
        // TODO: test validations
    }

    /**
     * Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyCacheParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyCacheParameterGroupMessage modifyCacheParameterGroupMessage = null;
        CacheParameterGroupNameMessage response = api.pOSTModifyCacheParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyCacheParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * Modifies an existing cache subnet group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyCacheSubnetGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyCacheSubnetGroupMessage modifyCacheSubnetGroupMessage = null;
        ModifyCacheSubnetGroupResult response = api.pOSTModifyCacheSubnetGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyCacheSubnetGroupMessage);
        // TODO: test validations
    }

    /**
     * Modifies the settings for a Global datastore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyGlobalReplicationGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyGlobalReplicationGroupMessage modifyGlobalReplicationGroupMessage = null;
        ModifyGlobalReplicationGroupResult response = api.pOSTModifyGlobalReplicationGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyGlobalReplicationGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies the settings for a replication group.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html\&quot;&gt;Scaling for Amazon ElastiCache for Redis (cluster mode enabled)&lt;/a&gt; in the ElastiCache User Guide&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html\&quot;&gt;ModifyReplicationGroupShardConfiguration&lt;/a&gt; in the ElastiCache API Reference&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyReplicationGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyReplicationGroupMessage modifyReplicationGroupMessage = null;
        ModifyReplicationGroupResult response = api.pOSTModifyReplicationGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyReplicationGroupMessage);
        // TODO: test validations
    }

    /**
     * Modifies a replication group&#39;s shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among existing shards.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyReplicationGroupShardConfigurationTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyReplicationGroupShardConfigurationMessage modifyReplicationGroupShardConfigurationMessage = null;
        ModifyReplicationGroupShardConfigurationResult response = api.pOSTModifyReplicationGroupShardConfiguration(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyReplicationGroupShardConfigurationMessage);
        // TODO: test validations
    }

    /**
     * Changes user password(s) and/or access string.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyUserTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyUserMessage modifyUserMessage = null;
        User response = api.pOSTModifyUser(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyUserMessage);
        // TODO: test validations
    }

    /**
     * Changes the list of users that belong to the user group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyUserGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyUserGroupMessage modifyUserGroupMessage = null;
        UserGroup response = api.pOSTModifyUserGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyUserGroupMessage);
        // TODO: test validations
    }

    /**
     * Allows you to purchase a reserved cache node offering. Reserved nodes are not eligible for cancellation and are non-refundable. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/reserved-nodes.html\&quot;&gt;Managing Costs with Reserved Nodes&lt;/a&gt; for Redis or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/reserved-nodes.html\&quot;&gt;Managing Costs with Reserved Nodes&lt;/a&gt; for Memcached.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTPurchaseReservedCacheNodesOfferingTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PurchaseReservedCacheNodesOfferingMessage purchaseReservedCacheNodesOfferingMessage = null;
        PurchaseReservedCacheNodesOfferingResult response = api.pOSTPurchaseReservedCacheNodesOffering(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, purchaseReservedCacheNodesOfferingMessage);
        // TODO: test validations
    }

    /**
     * Redistribute slots to ensure uniform distribution across existing shards in the cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRebalanceSlotsInGlobalReplicationGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RebalanceSlotsInGlobalReplicationGroupMessage rebalanceSlotsInGlobalReplicationGroupMessage = null;
        RebalanceSlotsInGlobalReplicationGroupResult response = api.pOSTRebalanceSlotsInGlobalReplicationGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebalanceSlotsInGlobalReplicationGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.&lt;/p&gt; &lt;p&gt;The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.&lt;/p&gt; &lt;p&gt;When the reboot is complete, a cluster event is created.&lt;/p&gt; &lt;p&gt;Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.&lt;/p&gt; &lt;p&gt;If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes.rebooting.html\&quot;&gt;Rebooting a Cluster&lt;/a&gt; for an alternate process.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRebootCacheClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RebootCacheClusterMessage rebootCacheClusterMessage = null;
        RebootCacheClusterResult response = api.pOSTRebootCacheCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebootCacheClusterMessage);
        // TODO: test validations
    }

    /**
     * Removes the tags identified by the &lt;code&gt;TagKeys&lt;/code&gt; list from the named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRemoveTagsFromResourceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveTagsFromResourceMessage removeTagsFromResourceMessage = null;
        TagListMessage response = api.pOSTRemoveTagsFromResource(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsFromResourceMessage);
        // TODO: test validations
    }

    /**
     * Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the &lt;code&gt;ResetAllParameters&lt;/code&gt; and &lt;code&gt;CacheParameterGroupName&lt;/code&gt; parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTResetCacheParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResetCacheParameterGroupMessage resetCacheParameterGroupMessage = null;
        CacheParameterGroupNameMessage response = api.pOSTResetCacheParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetCacheParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRevokeCacheSecurityGroupIngressTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RevokeCacheSecurityGroupIngressMessage revokeCacheSecurityGroupIngressMessage = null;
        RevokeCacheSecurityGroupIngressResult response = api.pOSTRevokeCacheSecurityGroupIngress(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, revokeCacheSecurityGroupIngressMessage);
        // TODO: test validations
    }

    /**
     * Start the migration of data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTStartMigrationTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartMigrationMessage startMigrationMessage = null;
        StartMigrationResponse response = api.pOSTStartMigration(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startMigrationMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Represents the input of a &lt;code&gt;TestFailover&lt;/code&gt; operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).&lt;/p&gt; &lt;p&gt;This API is designed for testing the behavior of your application in case of ElastiCache failover. It is not designed to be an operational tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large-scale operational events, Amazon may block this API. &lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Note the following&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and Amazon CLI) in any rolling 24-hour period.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.&lt;/p&gt; &lt;p&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the Amazon CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Replication group message: &lt;code&gt;Test Failover API called for node group &amp;lt;node-group-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Failover from primary node &amp;lt;primary-node-id&amp;gt; to replica node &amp;lt;node-id&amp;gt; completed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Replication group message: &lt;code&gt;Failover from primary node &amp;lt;primary-node-id&amp;gt; to replica node &amp;lt;node-id&amp;gt; completed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Recovering cache nodes &amp;lt;node-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Finished recovery for cache nodes &amp;lt;node-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html\&quot;&gt;Viewing ElastiCache Events&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html\&quot;&gt;DescribeEvents&lt;/a&gt; in the ElastiCache API Reference&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Also see, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test\&quot;&gt;Testing Multi-AZ &lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTTestFailoverTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TestFailoverMessage testFailoverMessage = null;
        TestFailoverResult response = api.pOSTTestFailover(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, testFailoverMessage);
        // TODO: test validations
    }

}
