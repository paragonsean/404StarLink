/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CacheSettingsForwardedCookies;
import org.openapitools.client.model.CacheSettingsForwardedHeaders;
import org.openapitools.client.model.CacheSettingsForwardedQueryStrings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDistributionRequestCacheBehaviorSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:08:38.220643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDistributionRequestCacheBehaviorSettings {
  public static final String SERIALIZED_NAME_DEFAULT_T_T_L = "defaultTTL";
  @SerializedName(SERIALIZED_NAME_DEFAULT_T_T_L)
  private Integer defaultTTL;

  public static final String SERIALIZED_NAME_MINIMUM_T_T_L = "minimumTTL";
  @SerializedName(SERIALIZED_NAME_MINIMUM_T_T_L)
  private Integer minimumTTL;

  public static final String SERIALIZED_NAME_MAXIMUM_T_T_L = "maximumTTL";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_T_T_L)
  private Integer maximumTTL;

  public static final String SERIALIZED_NAME_ALLOWED_H_T_T_P_METHODS = "allowedHTTPMethods";
  @SerializedName(SERIALIZED_NAME_ALLOWED_H_T_T_P_METHODS)
  private String allowedHTTPMethods;

  public static final String SERIALIZED_NAME_CACHED_H_T_T_P_METHODS = "cachedHTTPMethods";
  @SerializedName(SERIALIZED_NAME_CACHED_H_T_T_P_METHODS)
  private String cachedHTTPMethods;

  public static final String SERIALIZED_NAME_FORWARDED_COOKIES = "forwardedCookies";
  @SerializedName(SERIALIZED_NAME_FORWARDED_COOKIES)
  private CacheSettingsForwardedCookies forwardedCookies;

  public static final String SERIALIZED_NAME_FORWARDED_HEADERS = "forwardedHeaders";
  @SerializedName(SERIALIZED_NAME_FORWARDED_HEADERS)
  private CacheSettingsForwardedHeaders forwardedHeaders;

  public static final String SERIALIZED_NAME_FORWARDED_QUERY_STRINGS = "forwardedQueryStrings";
  @SerializedName(SERIALIZED_NAME_FORWARDED_QUERY_STRINGS)
  private CacheSettingsForwardedQueryStrings forwardedQueryStrings;

  public CreateDistributionRequestCacheBehaviorSettings() {
  }

  public CreateDistributionRequestCacheBehaviorSettings defaultTTL(Integer defaultTTL) {
    this.defaultTTL = defaultTTL;
    return this;
  }

  /**
   * Get defaultTTL
   * @return defaultTTL
   */
  @javax.annotation.Nullable
  public Integer getDefaultTTL() {
    return defaultTTL;
  }

  public void setDefaultTTL(Integer defaultTTL) {
    this.defaultTTL = defaultTTL;
  }


  public CreateDistributionRequestCacheBehaviorSettings minimumTTL(Integer minimumTTL) {
    this.minimumTTL = minimumTTL;
    return this;
  }

  /**
   * Get minimumTTL
   * @return minimumTTL
   */
  @javax.annotation.Nullable
  public Integer getMinimumTTL() {
    return minimumTTL;
  }

  public void setMinimumTTL(Integer minimumTTL) {
    this.minimumTTL = minimumTTL;
  }


  public CreateDistributionRequestCacheBehaviorSettings maximumTTL(Integer maximumTTL) {
    this.maximumTTL = maximumTTL;
    return this;
  }

  /**
   * Get maximumTTL
   * @return maximumTTL
   */
  @javax.annotation.Nullable
  public Integer getMaximumTTL() {
    return maximumTTL;
  }

  public void setMaximumTTL(Integer maximumTTL) {
    this.maximumTTL = maximumTTL;
  }


  public CreateDistributionRequestCacheBehaviorSettings allowedHTTPMethods(String allowedHTTPMethods) {
    this.allowedHTTPMethods = allowedHTTPMethods;
    return this;
  }

  /**
   * Get allowedHTTPMethods
   * @return allowedHTTPMethods
   */
  @javax.annotation.Nullable
  public String getAllowedHTTPMethods() {
    return allowedHTTPMethods;
  }

  public void setAllowedHTTPMethods(String allowedHTTPMethods) {
    this.allowedHTTPMethods = allowedHTTPMethods;
  }


  public CreateDistributionRequestCacheBehaviorSettings cachedHTTPMethods(String cachedHTTPMethods) {
    this.cachedHTTPMethods = cachedHTTPMethods;
    return this;
  }

  /**
   * Get cachedHTTPMethods
   * @return cachedHTTPMethods
   */
  @javax.annotation.Nullable
  public String getCachedHTTPMethods() {
    return cachedHTTPMethods;
  }

  public void setCachedHTTPMethods(String cachedHTTPMethods) {
    this.cachedHTTPMethods = cachedHTTPMethods;
  }


  public CreateDistributionRequestCacheBehaviorSettings forwardedCookies(CacheSettingsForwardedCookies forwardedCookies) {
    this.forwardedCookies = forwardedCookies;
    return this;
  }

  /**
   * Get forwardedCookies
   * @return forwardedCookies
   */
  @javax.annotation.Nullable
  public CacheSettingsForwardedCookies getForwardedCookies() {
    return forwardedCookies;
  }

  public void setForwardedCookies(CacheSettingsForwardedCookies forwardedCookies) {
    this.forwardedCookies = forwardedCookies;
  }


  public CreateDistributionRequestCacheBehaviorSettings forwardedHeaders(CacheSettingsForwardedHeaders forwardedHeaders) {
    this.forwardedHeaders = forwardedHeaders;
    return this;
  }

  /**
   * Get forwardedHeaders
   * @return forwardedHeaders
   */
  @javax.annotation.Nullable
  public CacheSettingsForwardedHeaders getForwardedHeaders() {
    return forwardedHeaders;
  }

  public void setForwardedHeaders(CacheSettingsForwardedHeaders forwardedHeaders) {
    this.forwardedHeaders = forwardedHeaders;
  }


  public CreateDistributionRequestCacheBehaviorSettings forwardedQueryStrings(CacheSettingsForwardedQueryStrings forwardedQueryStrings) {
    this.forwardedQueryStrings = forwardedQueryStrings;
    return this;
  }

  /**
   * Get forwardedQueryStrings
   * @return forwardedQueryStrings
   */
  @javax.annotation.Nullable
  public CacheSettingsForwardedQueryStrings getForwardedQueryStrings() {
    return forwardedQueryStrings;
  }

  public void setForwardedQueryStrings(CacheSettingsForwardedQueryStrings forwardedQueryStrings) {
    this.forwardedQueryStrings = forwardedQueryStrings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDistributionRequestCacheBehaviorSettings createDistributionRequestCacheBehaviorSettings = (CreateDistributionRequestCacheBehaviorSettings) o;
    return Objects.equals(this.defaultTTL, createDistributionRequestCacheBehaviorSettings.defaultTTL) &&
        Objects.equals(this.minimumTTL, createDistributionRequestCacheBehaviorSettings.minimumTTL) &&
        Objects.equals(this.maximumTTL, createDistributionRequestCacheBehaviorSettings.maximumTTL) &&
        Objects.equals(this.allowedHTTPMethods, createDistributionRequestCacheBehaviorSettings.allowedHTTPMethods) &&
        Objects.equals(this.cachedHTTPMethods, createDistributionRequestCacheBehaviorSettings.cachedHTTPMethods) &&
        Objects.equals(this.forwardedCookies, createDistributionRequestCacheBehaviorSettings.forwardedCookies) &&
        Objects.equals(this.forwardedHeaders, createDistributionRequestCacheBehaviorSettings.forwardedHeaders) &&
        Objects.equals(this.forwardedQueryStrings, createDistributionRequestCacheBehaviorSettings.forwardedQueryStrings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultTTL, minimumTTL, maximumTTL, allowedHTTPMethods, cachedHTTPMethods, forwardedCookies, forwardedHeaders, forwardedQueryStrings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDistributionRequestCacheBehaviorSettings {\n");
    sb.append("    defaultTTL: ").append(toIndentedString(defaultTTL)).append("\n");
    sb.append("    minimumTTL: ").append(toIndentedString(minimumTTL)).append("\n");
    sb.append("    maximumTTL: ").append(toIndentedString(maximumTTL)).append("\n");
    sb.append("    allowedHTTPMethods: ").append(toIndentedString(allowedHTTPMethods)).append("\n");
    sb.append("    cachedHTTPMethods: ").append(toIndentedString(cachedHTTPMethods)).append("\n");
    sb.append("    forwardedCookies: ").append(toIndentedString(forwardedCookies)).append("\n");
    sb.append("    forwardedHeaders: ").append(toIndentedString(forwardedHeaders)).append("\n");
    sb.append("    forwardedQueryStrings: ").append(toIndentedString(forwardedQueryStrings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultTTL");
    openapiFields.add("minimumTTL");
    openapiFields.add("maximumTTL");
    openapiFields.add("allowedHTTPMethods");
    openapiFields.add("cachedHTTPMethods");
    openapiFields.add("forwardedCookies");
    openapiFields.add("forwardedHeaders");
    openapiFields.add("forwardedQueryStrings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDistributionRequestCacheBehaviorSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDistributionRequestCacheBehaviorSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDistributionRequestCacheBehaviorSettings is not found in the empty JSON string", CreateDistributionRequestCacheBehaviorSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDistributionRequestCacheBehaviorSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDistributionRequestCacheBehaviorSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `defaultTTL`
      if (jsonObj.get("defaultTTL") != null && !jsonObj.get("defaultTTL").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("defaultTTL"));
      }
      // validate the optional field `minimumTTL`
      if (jsonObj.get("minimumTTL") != null && !jsonObj.get("minimumTTL").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("minimumTTL"));
      }
      // validate the optional field `maximumTTL`
      if (jsonObj.get("maximumTTL") != null && !jsonObj.get("maximumTTL").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maximumTTL"));
      }
      // validate the optional field `allowedHTTPMethods`
      if (jsonObj.get("allowedHTTPMethods") != null && !jsonObj.get("allowedHTTPMethods").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("allowedHTTPMethods"));
      }
      // validate the optional field `cachedHTTPMethods`
      if (jsonObj.get("cachedHTTPMethods") != null && !jsonObj.get("cachedHTTPMethods").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("cachedHTTPMethods"));
      }
      // validate the optional field `forwardedCookies`
      if (jsonObj.get("forwardedCookies") != null && !jsonObj.get("forwardedCookies").isJsonNull()) {
        CacheSettingsForwardedCookies.validateJsonElement(jsonObj.get("forwardedCookies"));
      }
      // validate the optional field `forwardedHeaders`
      if (jsonObj.get("forwardedHeaders") != null && !jsonObj.get("forwardedHeaders").isJsonNull()) {
        CacheSettingsForwardedHeaders.validateJsonElement(jsonObj.get("forwardedHeaders"));
      }
      // validate the optional field `forwardedQueryStrings`
      if (jsonObj.get("forwardedQueryStrings") != null && !jsonObj.get("forwardedQueryStrings").isJsonNull()) {
        CacheSettingsForwardedQueryStrings.validateJsonElement(jsonObj.get("forwardedQueryStrings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDistributionRequestCacheBehaviorSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDistributionRequestCacheBehaviorSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDistributionRequestCacheBehaviorSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDistributionRequestCacheBehaviorSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDistributionRequestCacheBehaviorSettings>() {
           @Override
           public void write(JsonWriter out, CreateDistributionRequestCacheBehaviorSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDistributionRequestCacheBehaviorSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDistributionRequestCacheBehaviorSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDistributionRequestCacheBehaviorSettings
   * @throws IOException if the JSON string is invalid with respect to CreateDistributionRequestCacheBehaviorSettings
   */
  public static CreateDistributionRequestCacheBehaviorSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDistributionRequestCacheBehaviorSettings.class);
  }

  /**
   * Convert an instance of CreateDistributionRequestCacheBehaviorSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

