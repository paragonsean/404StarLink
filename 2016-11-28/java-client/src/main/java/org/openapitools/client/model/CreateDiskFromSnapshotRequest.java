/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDiskFromSnapshotRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:08:38.220643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDiskFromSnapshotRequest {
  public static final String SERIALIZED_NAME_DISK_NAME = "diskName";
  @SerializedName(SERIALIZED_NAME_DISK_NAME)
  private String diskName;

  public static final String SERIALIZED_NAME_DISK_SNAPSHOT_NAME = "diskSnapshotName";
  @SerializedName(SERIALIZED_NAME_DISK_SNAPSHOT_NAME)
  private String diskSnapshotName;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "availabilityZone";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
  private String availabilityZone;

  public static final String SERIALIZED_NAME_SIZE_IN_GB = "sizeInGb";
  @SerializedName(SERIALIZED_NAME_SIZE_IN_GB)
  private Integer sizeInGb;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_ADD_ONS = "addOns";
  @SerializedName(SERIALIZED_NAME_ADD_ONS)
  private List addOns;

  public static final String SERIALIZED_NAME_SOURCE_DISK_NAME = "sourceDiskName";
  @SerializedName(SERIALIZED_NAME_SOURCE_DISK_NAME)
  private String sourceDiskName;

  public static final String SERIALIZED_NAME_RESTORE_DATE = "restoreDate";
  @SerializedName(SERIALIZED_NAME_RESTORE_DATE)
  private String restoreDate;

  public static final String SERIALIZED_NAME_USE_LATEST_RESTORABLE_AUTO_SNAPSHOT = "useLatestRestorableAutoSnapshot";
  @SerializedName(SERIALIZED_NAME_USE_LATEST_RESTORABLE_AUTO_SNAPSHOT)
  private Boolean useLatestRestorableAutoSnapshot;

  public CreateDiskFromSnapshotRequest() {
  }

  public CreateDiskFromSnapshotRequest diskName(String diskName) {
    this.diskName = diskName;
    return this;
  }

  /**
   * Get diskName
   * @return diskName
   */
  @javax.annotation.Nonnull
  public String getDiskName() {
    return diskName;
  }

  public void setDiskName(String diskName) {
    this.diskName = diskName;
  }


  public CreateDiskFromSnapshotRequest diskSnapshotName(String diskSnapshotName) {
    this.diskSnapshotName = diskSnapshotName;
    return this;
  }

  /**
   * Get diskSnapshotName
   * @return diskSnapshotName
   */
  @javax.annotation.Nullable
  public String getDiskSnapshotName() {
    return diskSnapshotName;
  }

  public void setDiskSnapshotName(String diskSnapshotName) {
    this.diskSnapshotName = diskSnapshotName;
  }


  public CreateDiskFromSnapshotRequest availabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
    return this;
  }

  /**
   * Get availabilityZone
   * @return availabilityZone
   */
  @javax.annotation.Nonnull
  public String getAvailabilityZone() {
    return availabilityZone;
  }

  public void setAvailabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
  }


  public CreateDiskFromSnapshotRequest sizeInGb(Integer sizeInGb) {
    this.sizeInGb = sizeInGb;
    return this;
  }

  /**
   * Get sizeInGb
   * @return sizeInGb
   */
  @javax.annotation.Nonnull
  public Integer getSizeInGb() {
    return sizeInGb;
  }

  public void setSizeInGb(Integer sizeInGb) {
    this.sizeInGb = sizeInGb;
  }


  public CreateDiskFromSnapshotRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public CreateDiskFromSnapshotRequest addOns(List addOns) {
    this.addOns = addOns;
    return this;
  }

  /**
   * Get addOns
   * @return addOns
   */
  @javax.annotation.Nullable
  public List getAddOns() {
    return addOns;
  }

  public void setAddOns(List addOns) {
    this.addOns = addOns;
  }


  public CreateDiskFromSnapshotRequest sourceDiskName(String sourceDiskName) {
    this.sourceDiskName = sourceDiskName;
    return this;
  }

  /**
   * Get sourceDiskName
   * @return sourceDiskName
   */
  @javax.annotation.Nullable
  public String getSourceDiskName() {
    return sourceDiskName;
  }

  public void setSourceDiskName(String sourceDiskName) {
    this.sourceDiskName = sourceDiskName;
  }


  public CreateDiskFromSnapshotRequest restoreDate(String restoreDate) {
    this.restoreDate = restoreDate;
    return this;
  }

  /**
   * Get restoreDate
   * @return restoreDate
   */
  @javax.annotation.Nullable
  public String getRestoreDate() {
    return restoreDate;
  }

  public void setRestoreDate(String restoreDate) {
    this.restoreDate = restoreDate;
  }


  public CreateDiskFromSnapshotRequest useLatestRestorableAutoSnapshot(Boolean useLatestRestorableAutoSnapshot) {
    this.useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot;
    return this;
  }

  /**
   * Get useLatestRestorableAutoSnapshot
   * @return useLatestRestorableAutoSnapshot
   */
  @javax.annotation.Nullable
  public Boolean getUseLatestRestorableAutoSnapshot() {
    return useLatestRestorableAutoSnapshot;
  }

  public void setUseLatestRestorableAutoSnapshot(Boolean useLatestRestorableAutoSnapshot) {
    this.useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDiskFromSnapshotRequest createDiskFromSnapshotRequest = (CreateDiskFromSnapshotRequest) o;
    return Objects.equals(this.diskName, createDiskFromSnapshotRequest.diskName) &&
        Objects.equals(this.diskSnapshotName, createDiskFromSnapshotRequest.diskSnapshotName) &&
        Objects.equals(this.availabilityZone, createDiskFromSnapshotRequest.availabilityZone) &&
        Objects.equals(this.sizeInGb, createDiskFromSnapshotRequest.sizeInGb) &&
        Objects.equals(this.tags, createDiskFromSnapshotRequest.tags) &&
        Objects.equals(this.addOns, createDiskFromSnapshotRequest.addOns) &&
        Objects.equals(this.sourceDiskName, createDiskFromSnapshotRequest.sourceDiskName) &&
        Objects.equals(this.restoreDate, createDiskFromSnapshotRequest.restoreDate) &&
        Objects.equals(this.useLatestRestorableAutoSnapshot, createDiskFromSnapshotRequest.useLatestRestorableAutoSnapshot);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diskName, diskSnapshotName, availabilityZone, sizeInGb, tags, addOns, sourceDiskName, restoreDate, useLatestRestorableAutoSnapshot);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDiskFromSnapshotRequest {\n");
    sb.append("    diskName: ").append(toIndentedString(diskName)).append("\n");
    sb.append("    diskSnapshotName: ").append(toIndentedString(diskSnapshotName)).append("\n");
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("    sizeInGb: ").append(toIndentedString(sizeInGb)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    addOns: ").append(toIndentedString(addOns)).append("\n");
    sb.append("    sourceDiskName: ").append(toIndentedString(sourceDiskName)).append("\n");
    sb.append("    restoreDate: ").append(toIndentedString(restoreDate)).append("\n");
    sb.append("    useLatestRestorableAutoSnapshot: ").append(toIndentedString(useLatestRestorableAutoSnapshot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("diskName");
    openapiFields.add("diskSnapshotName");
    openapiFields.add("availabilityZone");
    openapiFields.add("sizeInGb");
    openapiFields.add("tags");
    openapiFields.add("addOns");
    openapiFields.add("sourceDiskName");
    openapiFields.add("restoreDate");
    openapiFields.add("useLatestRestorableAutoSnapshot");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("diskName");
    openapiRequiredFields.add("availabilityZone");
    openapiRequiredFields.add("sizeInGb");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDiskFromSnapshotRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDiskFromSnapshotRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDiskFromSnapshotRequest is not found in the empty JSON string", CreateDiskFromSnapshotRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDiskFromSnapshotRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDiskFromSnapshotRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDiskFromSnapshotRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `diskName`
      String.validateJsonElement(jsonObj.get("diskName"));
      // validate the optional field `diskSnapshotName`
      if (jsonObj.get("diskSnapshotName") != null && !jsonObj.get("diskSnapshotName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("diskSnapshotName"));
      }
      // validate the required field `availabilityZone`
      String.validateJsonElement(jsonObj.get("availabilityZone"));
      // validate the required field `sizeInGb`
      Integer.validateJsonElement(jsonObj.get("sizeInGb"));
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `addOns`
      if (jsonObj.get("addOns") != null && !jsonObj.get("addOns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("addOns"));
      }
      // validate the optional field `sourceDiskName`
      if (jsonObj.get("sourceDiskName") != null && !jsonObj.get("sourceDiskName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceDiskName"));
      }
      // validate the optional field `restoreDate`
      if (jsonObj.get("restoreDate") != null && !jsonObj.get("restoreDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("restoreDate"));
      }
      // validate the optional field `useLatestRestorableAutoSnapshot`
      if (jsonObj.get("useLatestRestorableAutoSnapshot") != null && !jsonObj.get("useLatestRestorableAutoSnapshot").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("useLatestRestorableAutoSnapshot"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDiskFromSnapshotRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDiskFromSnapshotRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDiskFromSnapshotRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDiskFromSnapshotRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDiskFromSnapshotRequest>() {
           @Override
           public void write(JsonWriter out, CreateDiskFromSnapshotRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDiskFromSnapshotRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDiskFromSnapshotRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDiskFromSnapshotRequest
   * @throws IOException if the JSON string is invalid with respect to CreateDiskFromSnapshotRequest
   */
  public static CreateDiskFromSnapshotRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDiskFromSnapshotRequest.class);
  }

  /**
   * Convert an instance of CreateDiskFromSnapshotRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

