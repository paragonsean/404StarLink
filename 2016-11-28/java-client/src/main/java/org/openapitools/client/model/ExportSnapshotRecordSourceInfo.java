/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ExportSnapshotRecordSourceInfoDiskSnapshotInfo;
import org.openapitools.client.model.ExportSnapshotRecordSourceInfoInstanceSnapshotInfo;
import org.openapitools.client.model.ExportSnapshotRecordSourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExportSnapshotRecordSourceInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:08:38.220643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportSnapshotRecordSourceInfo {
  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private ExportSnapshotRecordSourceType resourceType;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_FROM_RESOURCE_NAME = "fromResourceName";
  @SerializedName(SERIALIZED_NAME_FROM_RESOURCE_NAME)
  private String fromResourceName;

  public static final String SERIALIZED_NAME_FROM_RESOURCE_ARN = "fromResourceArn";
  @SerializedName(SERIALIZED_NAME_FROM_RESOURCE_ARN)
  private String fromResourceArn;

  public static final String SERIALIZED_NAME_INSTANCE_SNAPSHOT_INFO = "instanceSnapshotInfo";
  @SerializedName(SERIALIZED_NAME_INSTANCE_SNAPSHOT_INFO)
  private ExportSnapshotRecordSourceInfoInstanceSnapshotInfo instanceSnapshotInfo;

  public static final String SERIALIZED_NAME_DISK_SNAPSHOT_INFO = "diskSnapshotInfo";
  @SerializedName(SERIALIZED_NAME_DISK_SNAPSHOT_INFO)
  private ExportSnapshotRecordSourceInfoDiskSnapshotInfo diskSnapshotInfo;

  public ExportSnapshotRecordSourceInfo() {
  }

  public ExportSnapshotRecordSourceInfo resourceType(ExportSnapshotRecordSourceType resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public ExportSnapshotRecordSourceType getResourceType() {
    return resourceType;
  }

  public void setResourceType(ExportSnapshotRecordSourceType resourceType) {
    this.resourceType = resourceType;
  }


  public ExportSnapshotRecordSourceInfo createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ExportSnapshotRecordSourceInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ExportSnapshotRecordSourceInfo arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public ExportSnapshotRecordSourceInfo fromResourceName(String fromResourceName) {
    this.fromResourceName = fromResourceName;
    return this;
  }

  /**
   * Get fromResourceName
   * @return fromResourceName
   */
  @javax.annotation.Nullable
  public String getFromResourceName() {
    return fromResourceName;
  }

  public void setFromResourceName(String fromResourceName) {
    this.fromResourceName = fromResourceName;
  }


  public ExportSnapshotRecordSourceInfo fromResourceArn(String fromResourceArn) {
    this.fromResourceArn = fromResourceArn;
    return this;
  }

  /**
   * Get fromResourceArn
   * @return fromResourceArn
   */
  @javax.annotation.Nullable
  public String getFromResourceArn() {
    return fromResourceArn;
  }

  public void setFromResourceArn(String fromResourceArn) {
    this.fromResourceArn = fromResourceArn;
  }


  public ExportSnapshotRecordSourceInfo instanceSnapshotInfo(ExportSnapshotRecordSourceInfoInstanceSnapshotInfo instanceSnapshotInfo) {
    this.instanceSnapshotInfo = instanceSnapshotInfo;
    return this;
  }

  /**
   * Get instanceSnapshotInfo
   * @return instanceSnapshotInfo
   */
  @javax.annotation.Nullable
  public ExportSnapshotRecordSourceInfoInstanceSnapshotInfo getInstanceSnapshotInfo() {
    return instanceSnapshotInfo;
  }

  public void setInstanceSnapshotInfo(ExportSnapshotRecordSourceInfoInstanceSnapshotInfo instanceSnapshotInfo) {
    this.instanceSnapshotInfo = instanceSnapshotInfo;
  }


  public ExportSnapshotRecordSourceInfo diskSnapshotInfo(ExportSnapshotRecordSourceInfoDiskSnapshotInfo diskSnapshotInfo) {
    this.diskSnapshotInfo = diskSnapshotInfo;
    return this;
  }

  /**
   * Get diskSnapshotInfo
   * @return diskSnapshotInfo
   */
  @javax.annotation.Nullable
  public ExportSnapshotRecordSourceInfoDiskSnapshotInfo getDiskSnapshotInfo() {
    return diskSnapshotInfo;
  }

  public void setDiskSnapshotInfo(ExportSnapshotRecordSourceInfoDiskSnapshotInfo diskSnapshotInfo) {
    this.diskSnapshotInfo = diskSnapshotInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportSnapshotRecordSourceInfo exportSnapshotRecordSourceInfo = (ExportSnapshotRecordSourceInfo) o;
    return Objects.equals(this.resourceType, exportSnapshotRecordSourceInfo.resourceType) &&
        Objects.equals(this.createdAt, exportSnapshotRecordSourceInfo.createdAt) &&
        Objects.equals(this.name, exportSnapshotRecordSourceInfo.name) &&
        Objects.equals(this.arn, exportSnapshotRecordSourceInfo.arn) &&
        Objects.equals(this.fromResourceName, exportSnapshotRecordSourceInfo.fromResourceName) &&
        Objects.equals(this.fromResourceArn, exportSnapshotRecordSourceInfo.fromResourceArn) &&
        Objects.equals(this.instanceSnapshotInfo, exportSnapshotRecordSourceInfo.instanceSnapshotInfo) &&
        Objects.equals(this.diskSnapshotInfo, exportSnapshotRecordSourceInfo.diskSnapshotInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceType, createdAt, name, arn, fromResourceName, fromResourceArn, instanceSnapshotInfo, diskSnapshotInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportSnapshotRecordSourceInfo {\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    fromResourceName: ").append(toIndentedString(fromResourceName)).append("\n");
    sb.append("    fromResourceArn: ").append(toIndentedString(fromResourceArn)).append("\n");
    sb.append("    instanceSnapshotInfo: ").append(toIndentedString(instanceSnapshotInfo)).append("\n");
    sb.append("    diskSnapshotInfo: ").append(toIndentedString(diskSnapshotInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resourceType");
    openapiFields.add("createdAt");
    openapiFields.add("name");
    openapiFields.add("arn");
    openapiFields.add("fromResourceName");
    openapiFields.add("fromResourceArn");
    openapiFields.add("instanceSnapshotInfo");
    openapiFields.add("diskSnapshotInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportSnapshotRecordSourceInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportSnapshotRecordSourceInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportSnapshotRecordSourceInfo is not found in the empty JSON string", ExportSnapshotRecordSourceInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportSnapshotRecordSourceInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportSnapshotRecordSourceInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `resourceType`
      if (jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) {
        ExportSnapshotRecordSourceType.validateJsonElement(jsonObj.get("resourceType"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `fromResourceName`
      if (jsonObj.get("fromResourceName") != null && !jsonObj.get("fromResourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("fromResourceName"));
      }
      // validate the optional field `fromResourceArn`
      if (jsonObj.get("fromResourceArn") != null && !jsonObj.get("fromResourceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("fromResourceArn"));
      }
      // validate the optional field `instanceSnapshotInfo`
      if (jsonObj.get("instanceSnapshotInfo") != null && !jsonObj.get("instanceSnapshotInfo").isJsonNull()) {
        ExportSnapshotRecordSourceInfoInstanceSnapshotInfo.validateJsonElement(jsonObj.get("instanceSnapshotInfo"));
      }
      // validate the optional field `diskSnapshotInfo`
      if (jsonObj.get("diskSnapshotInfo") != null && !jsonObj.get("diskSnapshotInfo").isJsonNull()) {
        ExportSnapshotRecordSourceInfoDiskSnapshotInfo.validateJsonElement(jsonObj.get("diskSnapshotInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportSnapshotRecordSourceInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportSnapshotRecordSourceInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportSnapshotRecordSourceInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportSnapshotRecordSourceInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportSnapshotRecordSourceInfo>() {
           @Override
           public void write(JsonWriter out, ExportSnapshotRecordSourceInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportSnapshotRecordSourceInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportSnapshotRecordSourceInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportSnapshotRecordSourceInfo
   * @throws IOException if the JSON string is invalid with respect to ExportSnapshotRecordSourceInfo
   */
  public static ExportSnapshotRecordSourceInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportSnapshotRecordSourceInfo.class);
  }

  /**
   * Convert an instance of ExportSnapshotRecordSourceInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

