/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RelationalDatabaseHardware;
import org.openapitools.client.model.RelationalDatabaseLocation;
import org.openapitools.client.model.RelationalDatabaseMasterEndpoint;
import org.openapitools.client.model.RelationalDatabasePendingModifiedValues;
import org.openapitools.client.model.ResourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetRelationalDatabaseResultRelationalDatabase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:59:29.318232-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetRelationalDatabaseResultRelationalDatabase {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_SUPPORT_CODE = "supportCode";
  @SerializedName(SERIALIZED_NAME_SUPPORT_CODE)
  private String supportCode;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private RelationalDatabaseLocation location;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private ResourceType resourceType;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_RELATIONAL_DATABASE_BLUEPRINT_ID = "relationalDatabaseBlueprintId";
  @SerializedName(SERIALIZED_NAME_RELATIONAL_DATABASE_BLUEPRINT_ID)
  private String relationalDatabaseBlueprintId;

  public static final String SERIALIZED_NAME_RELATIONAL_DATABASE_BUNDLE_ID = "relationalDatabaseBundleId";
  @SerializedName(SERIALIZED_NAME_RELATIONAL_DATABASE_BUNDLE_ID)
  private String relationalDatabaseBundleId;

  public static final String SERIALIZED_NAME_MASTER_DATABASE_NAME = "masterDatabaseName";
  @SerializedName(SERIALIZED_NAME_MASTER_DATABASE_NAME)
  private String masterDatabaseName;

  public static final String SERIALIZED_NAME_HARDWARE = "hardware";
  @SerializedName(SERIALIZED_NAME_HARDWARE)
  private RelationalDatabaseHardware hardware;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SECONDARY_AVAILABILITY_ZONE = "secondaryAvailabilityZone";
  @SerializedName(SERIALIZED_NAME_SECONDARY_AVAILABILITY_ZONE)
  private String secondaryAvailabilityZone;

  public static final String SERIALIZED_NAME_BACKUP_RETENTION_ENABLED = "backupRetentionEnabled";
  @SerializedName(SERIALIZED_NAME_BACKUP_RETENTION_ENABLED)
  private Boolean backupRetentionEnabled;

  public static final String SERIALIZED_NAME_PENDING_MODIFIED_VALUES = "pendingModifiedValues";
  @SerializedName(SERIALIZED_NAME_PENDING_MODIFIED_VALUES)
  private RelationalDatabasePendingModifiedValues pendingModifiedValues;

  public static final String SERIALIZED_NAME_ENGINE = "engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "engineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_LATEST_RESTORABLE_TIME = "latestRestorableTime";
  @SerializedName(SERIALIZED_NAME_LATEST_RESTORABLE_TIME)
  private OffsetDateTime latestRestorableTime;

  public static final String SERIALIZED_NAME_MASTER_USERNAME = "masterUsername";
  @SerializedName(SERIALIZED_NAME_MASTER_USERNAME)
  private String masterUsername;

  public static final String SERIALIZED_NAME_PARAMETER_APPLY_STATUS = "parameterApplyStatus";
  @SerializedName(SERIALIZED_NAME_PARAMETER_APPLY_STATUS)
  private String parameterApplyStatus;

  public static final String SERIALIZED_NAME_PREFERRED_BACKUP_WINDOW = "preferredBackupWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_BACKUP_WINDOW)
  private String preferredBackupWindow;

  public static final String SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW = "preferredMaintenanceWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW)
  private String preferredMaintenanceWindow;

  public static final String SERIALIZED_NAME_PUBLICLY_ACCESSIBLE = "publiclyAccessible";
  @SerializedName(SERIALIZED_NAME_PUBLICLY_ACCESSIBLE)
  private Boolean publiclyAccessible;

  public static final String SERIALIZED_NAME_MASTER_ENDPOINT = "masterEndpoint";
  @SerializedName(SERIALIZED_NAME_MASTER_ENDPOINT)
  private RelationalDatabaseMasterEndpoint masterEndpoint;

  public static final String SERIALIZED_NAME_PENDING_MAINTENANCE_ACTIONS = "pendingMaintenanceActions";
  @SerializedName(SERIALIZED_NAME_PENDING_MAINTENANCE_ACTIONS)
  private List pendingMaintenanceActions;

  public static final String SERIALIZED_NAME_CA_CERTIFICATE_IDENTIFIER = "caCertificateIdentifier";
  @SerializedName(SERIALIZED_NAME_CA_CERTIFICATE_IDENTIFIER)
  private String caCertificateIdentifier;

  public GetRelationalDatabaseResultRelationalDatabase() {
  }

  public GetRelationalDatabaseResultRelationalDatabase name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetRelationalDatabaseResultRelationalDatabase arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public GetRelationalDatabaseResultRelationalDatabase supportCode(String supportCode) {
    this.supportCode = supportCode;
    return this;
  }

  /**
   * Get supportCode
   * @return supportCode
   */
  @javax.annotation.Nullable
  public String getSupportCode() {
    return supportCode;
  }

  public void setSupportCode(String supportCode) {
    this.supportCode = supportCode;
  }


  public GetRelationalDatabaseResultRelationalDatabase createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public GetRelationalDatabaseResultRelationalDatabase location(RelationalDatabaseLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public RelationalDatabaseLocation getLocation() {
    return location;
  }

  public void setLocation(RelationalDatabaseLocation location) {
    this.location = location;
  }


  public GetRelationalDatabaseResultRelationalDatabase resourceType(ResourceType resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public ResourceType getResourceType() {
    return resourceType;
  }

  public void setResourceType(ResourceType resourceType) {
    this.resourceType = resourceType;
  }


  public GetRelationalDatabaseResultRelationalDatabase tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public GetRelationalDatabaseResultRelationalDatabase relationalDatabaseBlueprintId(String relationalDatabaseBlueprintId) {
    this.relationalDatabaseBlueprintId = relationalDatabaseBlueprintId;
    return this;
  }

  /**
   * Get relationalDatabaseBlueprintId
   * @return relationalDatabaseBlueprintId
   */
  @javax.annotation.Nullable
  public String getRelationalDatabaseBlueprintId() {
    return relationalDatabaseBlueprintId;
  }

  public void setRelationalDatabaseBlueprintId(String relationalDatabaseBlueprintId) {
    this.relationalDatabaseBlueprintId = relationalDatabaseBlueprintId;
  }


  public GetRelationalDatabaseResultRelationalDatabase relationalDatabaseBundleId(String relationalDatabaseBundleId) {
    this.relationalDatabaseBundleId = relationalDatabaseBundleId;
    return this;
  }

  /**
   * Get relationalDatabaseBundleId
   * @return relationalDatabaseBundleId
   */
  @javax.annotation.Nullable
  public String getRelationalDatabaseBundleId() {
    return relationalDatabaseBundleId;
  }

  public void setRelationalDatabaseBundleId(String relationalDatabaseBundleId) {
    this.relationalDatabaseBundleId = relationalDatabaseBundleId;
  }


  public GetRelationalDatabaseResultRelationalDatabase masterDatabaseName(String masterDatabaseName) {
    this.masterDatabaseName = masterDatabaseName;
    return this;
  }

  /**
   * Get masterDatabaseName
   * @return masterDatabaseName
   */
  @javax.annotation.Nullable
  public String getMasterDatabaseName() {
    return masterDatabaseName;
  }

  public void setMasterDatabaseName(String masterDatabaseName) {
    this.masterDatabaseName = masterDatabaseName;
  }


  public GetRelationalDatabaseResultRelationalDatabase hardware(RelationalDatabaseHardware hardware) {
    this.hardware = hardware;
    return this;
  }

  /**
   * Get hardware
   * @return hardware
   */
  @javax.annotation.Nullable
  public RelationalDatabaseHardware getHardware() {
    return hardware;
  }

  public void setHardware(RelationalDatabaseHardware hardware) {
    this.hardware = hardware;
  }


  public GetRelationalDatabaseResultRelationalDatabase state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public GetRelationalDatabaseResultRelationalDatabase secondaryAvailabilityZone(String secondaryAvailabilityZone) {
    this.secondaryAvailabilityZone = secondaryAvailabilityZone;
    return this;
  }

  /**
   * Get secondaryAvailabilityZone
   * @return secondaryAvailabilityZone
   */
  @javax.annotation.Nullable
  public String getSecondaryAvailabilityZone() {
    return secondaryAvailabilityZone;
  }

  public void setSecondaryAvailabilityZone(String secondaryAvailabilityZone) {
    this.secondaryAvailabilityZone = secondaryAvailabilityZone;
  }


  public GetRelationalDatabaseResultRelationalDatabase backupRetentionEnabled(Boolean backupRetentionEnabled) {
    this.backupRetentionEnabled = backupRetentionEnabled;
    return this;
  }

  /**
   * Get backupRetentionEnabled
   * @return backupRetentionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getBackupRetentionEnabled() {
    return backupRetentionEnabled;
  }

  public void setBackupRetentionEnabled(Boolean backupRetentionEnabled) {
    this.backupRetentionEnabled = backupRetentionEnabled;
  }


  public GetRelationalDatabaseResultRelationalDatabase pendingModifiedValues(RelationalDatabasePendingModifiedValues pendingModifiedValues) {
    this.pendingModifiedValues = pendingModifiedValues;
    return this;
  }

  /**
   * Get pendingModifiedValues
   * @return pendingModifiedValues
   */
  @javax.annotation.Nullable
  public RelationalDatabasePendingModifiedValues getPendingModifiedValues() {
    return pendingModifiedValues;
  }

  public void setPendingModifiedValues(RelationalDatabasePendingModifiedValues pendingModifiedValues) {
    this.pendingModifiedValues = pendingModifiedValues;
  }


  public GetRelationalDatabaseResultRelationalDatabase engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public GetRelationalDatabaseResultRelationalDatabase engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public GetRelationalDatabaseResultRelationalDatabase latestRestorableTime(OffsetDateTime latestRestorableTime) {
    this.latestRestorableTime = latestRestorableTime;
    return this;
  }

  /**
   * Get latestRestorableTime
   * @return latestRestorableTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLatestRestorableTime() {
    return latestRestorableTime;
  }

  public void setLatestRestorableTime(OffsetDateTime latestRestorableTime) {
    this.latestRestorableTime = latestRestorableTime;
  }


  public GetRelationalDatabaseResultRelationalDatabase masterUsername(String masterUsername) {
    this.masterUsername = masterUsername;
    return this;
  }

  /**
   * Get masterUsername
   * @return masterUsername
   */
  @javax.annotation.Nullable
  public String getMasterUsername() {
    return masterUsername;
  }

  public void setMasterUsername(String masterUsername) {
    this.masterUsername = masterUsername;
  }


  public GetRelationalDatabaseResultRelationalDatabase parameterApplyStatus(String parameterApplyStatus) {
    this.parameterApplyStatus = parameterApplyStatus;
    return this;
  }

  /**
   * Get parameterApplyStatus
   * @return parameterApplyStatus
   */
  @javax.annotation.Nullable
  public String getParameterApplyStatus() {
    return parameterApplyStatus;
  }

  public void setParameterApplyStatus(String parameterApplyStatus) {
    this.parameterApplyStatus = parameterApplyStatus;
  }


  public GetRelationalDatabaseResultRelationalDatabase preferredBackupWindow(String preferredBackupWindow) {
    this.preferredBackupWindow = preferredBackupWindow;
    return this;
  }

  /**
   * Get preferredBackupWindow
   * @return preferredBackupWindow
   */
  @javax.annotation.Nullable
  public String getPreferredBackupWindow() {
    return preferredBackupWindow;
  }

  public void setPreferredBackupWindow(String preferredBackupWindow) {
    this.preferredBackupWindow = preferredBackupWindow;
  }


  public GetRelationalDatabaseResultRelationalDatabase preferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
    return this;
  }

  /**
   * Get preferredMaintenanceWindow
   * @return preferredMaintenanceWindow
   */
  @javax.annotation.Nullable
  public String getPreferredMaintenanceWindow() {
    return preferredMaintenanceWindow;
  }

  public void setPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
  }


  public GetRelationalDatabaseResultRelationalDatabase publiclyAccessible(Boolean publiclyAccessible) {
    this.publiclyAccessible = publiclyAccessible;
    return this;
  }

  /**
   * Get publiclyAccessible
   * @return publiclyAccessible
   */
  @javax.annotation.Nullable
  public Boolean getPubliclyAccessible() {
    return publiclyAccessible;
  }

  public void setPubliclyAccessible(Boolean publiclyAccessible) {
    this.publiclyAccessible = publiclyAccessible;
  }


  public GetRelationalDatabaseResultRelationalDatabase masterEndpoint(RelationalDatabaseMasterEndpoint masterEndpoint) {
    this.masterEndpoint = masterEndpoint;
    return this;
  }

  /**
   * Get masterEndpoint
   * @return masterEndpoint
   */
  @javax.annotation.Nullable
  public RelationalDatabaseMasterEndpoint getMasterEndpoint() {
    return masterEndpoint;
  }

  public void setMasterEndpoint(RelationalDatabaseMasterEndpoint masterEndpoint) {
    this.masterEndpoint = masterEndpoint;
  }


  public GetRelationalDatabaseResultRelationalDatabase pendingMaintenanceActions(List pendingMaintenanceActions) {
    this.pendingMaintenanceActions = pendingMaintenanceActions;
    return this;
  }

  /**
   * Get pendingMaintenanceActions
   * @return pendingMaintenanceActions
   */
  @javax.annotation.Nullable
  public List getPendingMaintenanceActions() {
    return pendingMaintenanceActions;
  }

  public void setPendingMaintenanceActions(List pendingMaintenanceActions) {
    this.pendingMaintenanceActions = pendingMaintenanceActions;
  }


  public GetRelationalDatabaseResultRelationalDatabase caCertificateIdentifier(String caCertificateIdentifier) {
    this.caCertificateIdentifier = caCertificateIdentifier;
    return this;
  }

  /**
   * Get caCertificateIdentifier
   * @return caCertificateIdentifier
   */
  @javax.annotation.Nullable
  public String getCaCertificateIdentifier() {
    return caCertificateIdentifier;
  }

  public void setCaCertificateIdentifier(String caCertificateIdentifier) {
    this.caCertificateIdentifier = caCertificateIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRelationalDatabaseResultRelationalDatabase getRelationalDatabaseResultRelationalDatabase = (GetRelationalDatabaseResultRelationalDatabase) o;
    return Objects.equals(this.name, getRelationalDatabaseResultRelationalDatabase.name) &&
        Objects.equals(this.arn, getRelationalDatabaseResultRelationalDatabase.arn) &&
        Objects.equals(this.supportCode, getRelationalDatabaseResultRelationalDatabase.supportCode) &&
        Objects.equals(this.createdAt, getRelationalDatabaseResultRelationalDatabase.createdAt) &&
        Objects.equals(this.location, getRelationalDatabaseResultRelationalDatabase.location) &&
        Objects.equals(this.resourceType, getRelationalDatabaseResultRelationalDatabase.resourceType) &&
        Objects.equals(this.tags, getRelationalDatabaseResultRelationalDatabase.tags) &&
        Objects.equals(this.relationalDatabaseBlueprintId, getRelationalDatabaseResultRelationalDatabase.relationalDatabaseBlueprintId) &&
        Objects.equals(this.relationalDatabaseBundleId, getRelationalDatabaseResultRelationalDatabase.relationalDatabaseBundleId) &&
        Objects.equals(this.masterDatabaseName, getRelationalDatabaseResultRelationalDatabase.masterDatabaseName) &&
        Objects.equals(this.hardware, getRelationalDatabaseResultRelationalDatabase.hardware) &&
        Objects.equals(this.state, getRelationalDatabaseResultRelationalDatabase.state) &&
        Objects.equals(this.secondaryAvailabilityZone, getRelationalDatabaseResultRelationalDatabase.secondaryAvailabilityZone) &&
        Objects.equals(this.backupRetentionEnabled, getRelationalDatabaseResultRelationalDatabase.backupRetentionEnabled) &&
        Objects.equals(this.pendingModifiedValues, getRelationalDatabaseResultRelationalDatabase.pendingModifiedValues) &&
        Objects.equals(this.engine, getRelationalDatabaseResultRelationalDatabase.engine) &&
        Objects.equals(this.engineVersion, getRelationalDatabaseResultRelationalDatabase.engineVersion) &&
        Objects.equals(this.latestRestorableTime, getRelationalDatabaseResultRelationalDatabase.latestRestorableTime) &&
        Objects.equals(this.masterUsername, getRelationalDatabaseResultRelationalDatabase.masterUsername) &&
        Objects.equals(this.parameterApplyStatus, getRelationalDatabaseResultRelationalDatabase.parameterApplyStatus) &&
        Objects.equals(this.preferredBackupWindow, getRelationalDatabaseResultRelationalDatabase.preferredBackupWindow) &&
        Objects.equals(this.preferredMaintenanceWindow, getRelationalDatabaseResultRelationalDatabase.preferredMaintenanceWindow) &&
        Objects.equals(this.publiclyAccessible, getRelationalDatabaseResultRelationalDatabase.publiclyAccessible) &&
        Objects.equals(this.masterEndpoint, getRelationalDatabaseResultRelationalDatabase.masterEndpoint) &&
        Objects.equals(this.pendingMaintenanceActions, getRelationalDatabaseResultRelationalDatabase.pendingMaintenanceActions) &&
        Objects.equals(this.caCertificateIdentifier, getRelationalDatabaseResultRelationalDatabase.caCertificateIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, arn, supportCode, createdAt, location, resourceType, tags, relationalDatabaseBlueprintId, relationalDatabaseBundleId, masterDatabaseName, hardware, state, secondaryAvailabilityZone, backupRetentionEnabled, pendingModifiedValues, engine, engineVersion, latestRestorableTime, masterUsername, parameterApplyStatus, preferredBackupWindow, preferredMaintenanceWindow, publiclyAccessible, masterEndpoint, pendingMaintenanceActions, caCertificateIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRelationalDatabaseResultRelationalDatabase {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    supportCode: ").append(toIndentedString(supportCode)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    relationalDatabaseBlueprintId: ").append(toIndentedString(relationalDatabaseBlueprintId)).append("\n");
    sb.append("    relationalDatabaseBundleId: ").append(toIndentedString(relationalDatabaseBundleId)).append("\n");
    sb.append("    masterDatabaseName: ").append(toIndentedString(masterDatabaseName)).append("\n");
    sb.append("    hardware: ").append(toIndentedString(hardware)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    secondaryAvailabilityZone: ").append(toIndentedString(secondaryAvailabilityZone)).append("\n");
    sb.append("    backupRetentionEnabled: ").append(toIndentedString(backupRetentionEnabled)).append("\n");
    sb.append("    pendingModifiedValues: ").append(toIndentedString(pendingModifiedValues)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    latestRestorableTime: ").append(toIndentedString(latestRestorableTime)).append("\n");
    sb.append("    masterUsername: ").append(toIndentedString(masterUsername)).append("\n");
    sb.append("    parameterApplyStatus: ").append(toIndentedString(parameterApplyStatus)).append("\n");
    sb.append("    preferredBackupWindow: ").append(toIndentedString(preferredBackupWindow)).append("\n");
    sb.append("    preferredMaintenanceWindow: ").append(toIndentedString(preferredMaintenanceWindow)).append("\n");
    sb.append("    publiclyAccessible: ").append(toIndentedString(publiclyAccessible)).append("\n");
    sb.append("    masterEndpoint: ").append(toIndentedString(masterEndpoint)).append("\n");
    sb.append("    pendingMaintenanceActions: ").append(toIndentedString(pendingMaintenanceActions)).append("\n");
    sb.append("    caCertificateIdentifier: ").append(toIndentedString(caCertificateIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("arn");
    openapiFields.add("supportCode");
    openapiFields.add("createdAt");
    openapiFields.add("location");
    openapiFields.add("resourceType");
    openapiFields.add("tags");
    openapiFields.add("relationalDatabaseBlueprintId");
    openapiFields.add("relationalDatabaseBundleId");
    openapiFields.add("masterDatabaseName");
    openapiFields.add("hardware");
    openapiFields.add("state");
    openapiFields.add("secondaryAvailabilityZone");
    openapiFields.add("backupRetentionEnabled");
    openapiFields.add("pendingModifiedValues");
    openapiFields.add("engine");
    openapiFields.add("engineVersion");
    openapiFields.add("latestRestorableTime");
    openapiFields.add("masterUsername");
    openapiFields.add("parameterApplyStatus");
    openapiFields.add("preferredBackupWindow");
    openapiFields.add("preferredMaintenanceWindow");
    openapiFields.add("publiclyAccessible");
    openapiFields.add("masterEndpoint");
    openapiFields.add("pendingMaintenanceActions");
    openapiFields.add("caCertificateIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetRelationalDatabaseResultRelationalDatabase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetRelationalDatabaseResultRelationalDatabase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetRelationalDatabaseResultRelationalDatabase is not found in the empty JSON string", GetRelationalDatabaseResultRelationalDatabase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetRelationalDatabaseResultRelationalDatabase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetRelationalDatabaseResultRelationalDatabase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `supportCode`
      if (jsonObj.get("supportCode") != null && !jsonObj.get("supportCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("supportCode"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        RelationalDatabaseLocation.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `resourceType`
      if (jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) {
        ResourceType.validateJsonElement(jsonObj.get("resourceType"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `relationalDatabaseBlueprintId`
      if (jsonObj.get("relationalDatabaseBlueprintId") != null && !jsonObj.get("relationalDatabaseBlueprintId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("relationalDatabaseBlueprintId"));
      }
      // validate the optional field `relationalDatabaseBundleId`
      if (jsonObj.get("relationalDatabaseBundleId") != null && !jsonObj.get("relationalDatabaseBundleId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("relationalDatabaseBundleId"));
      }
      // validate the optional field `masterDatabaseName`
      if (jsonObj.get("masterDatabaseName") != null && !jsonObj.get("masterDatabaseName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("masterDatabaseName"));
      }
      // validate the optional field `hardware`
      if (jsonObj.get("hardware") != null && !jsonObj.get("hardware").isJsonNull()) {
        RelationalDatabaseHardware.validateJsonElement(jsonObj.get("hardware"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `secondaryAvailabilityZone`
      if (jsonObj.get("secondaryAvailabilityZone") != null && !jsonObj.get("secondaryAvailabilityZone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("secondaryAvailabilityZone"));
      }
      // validate the optional field `backupRetentionEnabled`
      if (jsonObj.get("backupRetentionEnabled") != null && !jsonObj.get("backupRetentionEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("backupRetentionEnabled"));
      }
      // validate the optional field `pendingModifiedValues`
      if (jsonObj.get("pendingModifiedValues") != null && !jsonObj.get("pendingModifiedValues").isJsonNull()) {
        RelationalDatabasePendingModifiedValues.validateJsonElement(jsonObj.get("pendingModifiedValues"));
      }
      // validate the optional field `engine`
      if (jsonObj.get("engine") != null && !jsonObj.get("engine").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("engine"));
      }
      // validate the optional field `engineVersion`
      if (jsonObj.get("engineVersion") != null && !jsonObj.get("engineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("engineVersion"));
      }
      // validate the optional field `latestRestorableTime`
      if (jsonObj.get("latestRestorableTime") != null && !jsonObj.get("latestRestorableTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("latestRestorableTime"));
      }
      // validate the optional field `masterUsername`
      if (jsonObj.get("masterUsername") != null && !jsonObj.get("masterUsername").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("masterUsername"));
      }
      // validate the optional field `parameterApplyStatus`
      if (jsonObj.get("parameterApplyStatus") != null && !jsonObj.get("parameterApplyStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("parameterApplyStatus"));
      }
      // validate the optional field `preferredBackupWindow`
      if (jsonObj.get("preferredBackupWindow") != null && !jsonObj.get("preferredBackupWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("preferredBackupWindow"));
      }
      // validate the optional field `preferredMaintenanceWindow`
      if (jsonObj.get("preferredMaintenanceWindow") != null && !jsonObj.get("preferredMaintenanceWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("preferredMaintenanceWindow"));
      }
      // validate the optional field `publiclyAccessible`
      if (jsonObj.get("publiclyAccessible") != null && !jsonObj.get("publiclyAccessible").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("publiclyAccessible"));
      }
      // validate the optional field `masterEndpoint`
      if (jsonObj.get("masterEndpoint") != null && !jsonObj.get("masterEndpoint").isJsonNull()) {
        RelationalDatabaseMasterEndpoint.validateJsonElement(jsonObj.get("masterEndpoint"));
      }
      // validate the optional field `pendingMaintenanceActions`
      if (jsonObj.get("pendingMaintenanceActions") != null && !jsonObj.get("pendingMaintenanceActions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("pendingMaintenanceActions"));
      }
      // validate the optional field `caCertificateIdentifier`
      if (jsonObj.get("caCertificateIdentifier") != null && !jsonObj.get("caCertificateIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("caCertificateIdentifier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetRelationalDatabaseResultRelationalDatabase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetRelationalDatabaseResultRelationalDatabase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetRelationalDatabaseResultRelationalDatabase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetRelationalDatabaseResultRelationalDatabase.class));

       return (TypeAdapter<T>) new TypeAdapter<GetRelationalDatabaseResultRelationalDatabase>() {
           @Override
           public void write(JsonWriter out, GetRelationalDatabaseResultRelationalDatabase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetRelationalDatabaseResultRelationalDatabase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetRelationalDatabaseResultRelationalDatabase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetRelationalDatabaseResultRelationalDatabase
   * @throws IOException if the JSON string is invalid with respect to GetRelationalDatabaseResultRelationalDatabase
   */
  public static GetRelationalDatabaseResultRelationalDatabase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetRelationalDatabaseResultRelationalDatabase.class);
  }

  /**
   * Convert an instance of GetRelationalDatabaseResultRelationalDatabase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

