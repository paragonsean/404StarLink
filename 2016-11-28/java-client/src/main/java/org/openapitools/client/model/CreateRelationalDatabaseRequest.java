/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateRelationalDatabaseRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:08:38.220643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRelationalDatabaseRequest {
  public static final String SERIALIZED_NAME_RELATIONAL_DATABASE_NAME = "relationalDatabaseName";
  @SerializedName(SERIALIZED_NAME_RELATIONAL_DATABASE_NAME)
  private String relationalDatabaseName;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "availabilityZone";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
  private String availabilityZone;

  public static final String SERIALIZED_NAME_RELATIONAL_DATABASE_BLUEPRINT_ID = "relationalDatabaseBlueprintId";
  @SerializedName(SERIALIZED_NAME_RELATIONAL_DATABASE_BLUEPRINT_ID)
  private String relationalDatabaseBlueprintId;

  public static final String SERIALIZED_NAME_RELATIONAL_DATABASE_BUNDLE_ID = "relationalDatabaseBundleId";
  @SerializedName(SERIALIZED_NAME_RELATIONAL_DATABASE_BUNDLE_ID)
  private String relationalDatabaseBundleId;

  public static final String SERIALIZED_NAME_MASTER_DATABASE_NAME = "masterDatabaseName";
  @SerializedName(SERIALIZED_NAME_MASTER_DATABASE_NAME)
  private String masterDatabaseName;

  public static final String SERIALIZED_NAME_MASTER_USERNAME = "masterUsername";
  @SerializedName(SERIALIZED_NAME_MASTER_USERNAME)
  private String masterUsername;

  public static final String SERIALIZED_NAME_MASTER_USER_PASSWORD = "masterUserPassword";
  @SerializedName(SERIALIZED_NAME_MASTER_USER_PASSWORD)
  private String masterUserPassword;

  public static final String SERIALIZED_NAME_PREFERRED_BACKUP_WINDOW = "preferredBackupWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_BACKUP_WINDOW)
  private String preferredBackupWindow;

  public static final String SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW = "preferredMaintenanceWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW)
  private String preferredMaintenanceWindow;

  public static final String SERIALIZED_NAME_PUBLICLY_ACCESSIBLE = "publiclyAccessible";
  @SerializedName(SERIALIZED_NAME_PUBLICLY_ACCESSIBLE)
  private Boolean publiclyAccessible;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public CreateRelationalDatabaseRequest() {
  }

  public CreateRelationalDatabaseRequest relationalDatabaseName(String relationalDatabaseName) {
    this.relationalDatabaseName = relationalDatabaseName;
    return this;
  }

  /**
   * Get relationalDatabaseName
   * @return relationalDatabaseName
   */
  @javax.annotation.Nonnull
  public String getRelationalDatabaseName() {
    return relationalDatabaseName;
  }

  public void setRelationalDatabaseName(String relationalDatabaseName) {
    this.relationalDatabaseName = relationalDatabaseName;
  }


  public CreateRelationalDatabaseRequest availabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
    return this;
  }

  /**
   * Get availabilityZone
   * @return availabilityZone
   */
  @javax.annotation.Nullable
  public String getAvailabilityZone() {
    return availabilityZone;
  }

  public void setAvailabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
  }


  public CreateRelationalDatabaseRequest relationalDatabaseBlueprintId(String relationalDatabaseBlueprintId) {
    this.relationalDatabaseBlueprintId = relationalDatabaseBlueprintId;
    return this;
  }

  /**
   * Get relationalDatabaseBlueprintId
   * @return relationalDatabaseBlueprintId
   */
  @javax.annotation.Nonnull
  public String getRelationalDatabaseBlueprintId() {
    return relationalDatabaseBlueprintId;
  }

  public void setRelationalDatabaseBlueprintId(String relationalDatabaseBlueprintId) {
    this.relationalDatabaseBlueprintId = relationalDatabaseBlueprintId;
  }


  public CreateRelationalDatabaseRequest relationalDatabaseBundleId(String relationalDatabaseBundleId) {
    this.relationalDatabaseBundleId = relationalDatabaseBundleId;
    return this;
  }

  /**
   * Get relationalDatabaseBundleId
   * @return relationalDatabaseBundleId
   */
  @javax.annotation.Nonnull
  public String getRelationalDatabaseBundleId() {
    return relationalDatabaseBundleId;
  }

  public void setRelationalDatabaseBundleId(String relationalDatabaseBundleId) {
    this.relationalDatabaseBundleId = relationalDatabaseBundleId;
  }


  public CreateRelationalDatabaseRequest masterDatabaseName(String masterDatabaseName) {
    this.masterDatabaseName = masterDatabaseName;
    return this;
  }

  /**
   * Get masterDatabaseName
   * @return masterDatabaseName
   */
  @javax.annotation.Nonnull
  public String getMasterDatabaseName() {
    return masterDatabaseName;
  }

  public void setMasterDatabaseName(String masterDatabaseName) {
    this.masterDatabaseName = masterDatabaseName;
  }


  public CreateRelationalDatabaseRequest masterUsername(String masterUsername) {
    this.masterUsername = masterUsername;
    return this;
  }

  /**
   * Get masterUsername
   * @return masterUsername
   */
  @javax.annotation.Nonnull
  public String getMasterUsername() {
    return masterUsername;
  }

  public void setMasterUsername(String masterUsername) {
    this.masterUsername = masterUsername;
  }


  public CreateRelationalDatabaseRequest masterUserPassword(String masterUserPassword) {
    this.masterUserPassword = masterUserPassword;
    return this;
  }

  /**
   * Get masterUserPassword
   * @return masterUserPassword
   */
  @javax.annotation.Nullable
  public String getMasterUserPassword() {
    return masterUserPassword;
  }

  public void setMasterUserPassword(String masterUserPassword) {
    this.masterUserPassword = masterUserPassword;
  }


  public CreateRelationalDatabaseRequest preferredBackupWindow(String preferredBackupWindow) {
    this.preferredBackupWindow = preferredBackupWindow;
    return this;
  }

  /**
   * Get preferredBackupWindow
   * @return preferredBackupWindow
   */
  @javax.annotation.Nullable
  public String getPreferredBackupWindow() {
    return preferredBackupWindow;
  }

  public void setPreferredBackupWindow(String preferredBackupWindow) {
    this.preferredBackupWindow = preferredBackupWindow;
  }


  public CreateRelationalDatabaseRequest preferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
    return this;
  }

  /**
   * Get preferredMaintenanceWindow
   * @return preferredMaintenanceWindow
   */
  @javax.annotation.Nullable
  public String getPreferredMaintenanceWindow() {
    return preferredMaintenanceWindow;
  }

  public void setPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
  }


  public CreateRelationalDatabaseRequest publiclyAccessible(Boolean publiclyAccessible) {
    this.publiclyAccessible = publiclyAccessible;
    return this;
  }

  /**
   * Get publiclyAccessible
   * @return publiclyAccessible
   */
  @javax.annotation.Nullable
  public Boolean getPubliclyAccessible() {
    return publiclyAccessible;
  }

  public void setPubliclyAccessible(Boolean publiclyAccessible) {
    this.publiclyAccessible = publiclyAccessible;
  }


  public CreateRelationalDatabaseRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRelationalDatabaseRequest createRelationalDatabaseRequest = (CreateRelationalDatabaseRequest) o;
    return Objects.equals(this.relationalDatabaseName, createRelationalDatabaseRequest.relationalDatabaseName) &&
        Objects.equals(this.availabilityZone, createRelationalDatabaseRequest.availabilityZone) &&
        Objects.equals(this.relationalDatabaseBlueprintId, createRelationalDatabaseRequest.relationalDatabaseBlueprintId) &&
        Objects.equals(this.relationalDatabaseBundleId, createRelationalDatabaseRequest.relationalDatabaseBundleId) &&
        Objects.equals(this.masterDatabaseName, createRelationalDatabaseRequest.masterDatabaseName) &&
        Objects.equals(this.masterUsername, createRelationalDatabaseRequest.masterUsername) &&
        Objects.equals(this.masterUserPassword, createRelationalDatabaseRequest.masterUserPassword) &&
        Objects.equals(this.preferredBackupWindow, createRelationalDatabaseRequest.preferredBackupWindow) &&
        Objects.equals(this.preferredMaintenanceWindow, createRelationalDatabaseRequest.preferredMaintenanceWindow) &&
        Objects.equals(this.publiclyAccessible, createRelationalDatabaseRequest.publiclyAccessible) &&
        Objects.equals(this.tags, createRelationalDatabaseRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(relationalDatabaseName, availabilityZone, relationalDatabaseBlueprintId, relationalDatabaseBundleId, masterDatabaseName, masterUsername, masterUserPassword, preferredBackupWindow, preferredMaintenanceWindow, publiclyAccessible, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRelationalDatabaseRequest {\n");
    sb.append("    relationalDatabaseName: ").append(toIndentedString(relationalDatabaseName)).append("\n");
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("    relationalDatabaseBlueprintId: ").append(toIndentedString(relationalDatabaseBlueprintId)).append("\n");
    sb.append("    relationalDatabaseBundleId: ").append(toIndentedString(relationalDatabaseBundleId)).append("\n");
    sb.append("    masterDatabaseName: ").append(toIndentedString(masterDatabaseName)).append("\n");
    sb.append("    masterUsername: ").append(toIndentedString(masterUsername)).append("\n");
    sb.append("    masterUserPassword: ").append(toIndentedString(masterUserPassword)).append("\n");
    sb.append("    preferredBackupWindow: ").append(toIndentedString(preferredBackupWindow)).append("\n");
    sb.append("    preferredMaintenanceWindow: ").append(toIndentedString(preferredMaintenanceWindow)).append("\n");
    sb.append("    publiclyAccessible: ").append(toIndentedString(publiclyAccessible)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("relationalDatabaseName");
    openapiFields.add("availabilityZone");
    openapiFields.add("relationalDatabaseBlueprintId");
    openapiFields.add("relationalDatabaseBundleId");
    openapiFields.add("masterDatabaseName");
    openapiFields.add("masterUsername");
    openapiFields.add("masterUserPassword");
    openapiFields.add("preferredBackupWindow");
    openapiFields.add("preferredMaintenanceWindow");
    openapiFields.add("publiclyAccessible");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("relationalDatabaseName");
    openapiRequiredFields.add("relationalDatabaseBlueprintId");
    openapiRequiredFields.add("relationalDatabaseBundleId");
    openapiRequiredFields.add("masterDatabaseName");
    openapiRequiredFields.add("masterUsername");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRelationalDatabaseRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRelationalDatabaseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRelationalDatabaseRequest is not found in the empty JSON string", CreateRelationalDatabaseRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRelationalDatabaseRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRelationalDatabaseRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRelationalDatabaseRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `relationalDatabaseName`
      String.validateJsonElement(jsonObj.get("relationalDatabaseName"));
      // validate the optional field `availabilityZone`
      if (jsonObj.get("availabilityZone") != null && !jsonObj.get("availabilityZone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("availabilityZone"));
      }
      // validate the required field `relationalDatabaseBlueprintId`
      String.validateJsonElement(jsonObj.get("relationalDatabaseBlueprintId"));
      // validate the required field `relationalDatabaseBundleId`
      String.validateJsonElement(jsonObj.get("relationalDatabaseBundleId"));
      // validate the required field `masterDatabaseName`
      String.validateJsonElement(jsonObj.get("masterDatabaseName"));
      // validate the required field `masterUsername`
      String.validateJsonElement(jsonObj.get("masterUsername"));
      // validate the optional field `masterUserPassword`
      if (jsonObj.get("masterUserPassword") != null && !jsonObj.get("masterUserPassword").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("masterUserPassword"));
      }
      // validate the optional field `preferredBackupWindow`
      if (jsonObj.get("preferredBackupWindow") != null && !jsonObj.get("preferredBackupWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("preferredBackupWindow"));
      }
      // validate the optional field `preferredMaintenanceWindow`
      if (jsonObj.get("preferredMaintenanceWindow") != null && !jsonObj.get("preferredMaintenanceWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("preferredMaintenanceWindow"));
      }
      // validate the optional field `publiclyAccessible`
      if (jsonObj.get("publiclyAccessible") != null && !jsonObj.get("publiclyAccessible").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("publiclyAccessible"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRelationalDatabaseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRelationalDatabaseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRelationalDatabaseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRelationalDatabaseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRelationalDatabaseRequest>() {
           @Override
           public void write(JsonWriter out, CreateRelationalDatabaseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRelationalDatabaseRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRelationalDatabaseRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRelationalDatabaseRequest
   * @throws IOException if the JSON string is invalid with respect to CreateRelationalDatabaseRequest
   */
  public static CreateRelationalDatabaseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRelationalDatabaseRequest.class);
  }

  /**
   * Convert an instance of CreateRelationalDatabaseRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

