/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Describes a request to enable or modify the automatic snapshot add-on for an Amazon Lightsail instance or disk.&lt;/p&gt; &lt;p&gt;When you modify the automatic snapshot time for a resource, it is typically effective immediately except under the following conditions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If an automatic snapshot has been created for the current day, and you change the snapshot time to a later time of day, then the new snapshot time will be effective the following day. This ensures that two snapshots are not created for the current day.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If an automatic snapshot has not yet been created for the current day, and you change the snapshot time to an earlier time of day, then the new snapshot time will be effective the following day and a snapshot is automatically created at the previously set time for the current day. This ensures that a snapshot is created for the current day.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If an automatic snapshot has not yet been created for the current day, and you change the snapshot time to a time that is within 30 minutes from your current time, then the new snapshot time will be effective the following day and a snapshot is automatically created at the previously set time for the current day. This ensures that a snapshot is created for the current day, because 30 minutes is required between your current time and the new snapshot time that you specify.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If an automatic snapshot is scheduled to be created within 30 minutes from your current time and you change the snapshot time, then the new snapshot time will be effective the following day and a snapshot is automatically created at the previously set time for the current day. This ensures that a snapshot is created for the current day, because 30 minutes is required between your current time and the new snapshot time that you specify.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:08:38.220643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutoSnapshotAddOnRequest {
  public static final String SERIALIZED_NAME_SNAPSHOT_TIME_OF_DAY = "snapshotTimeOfDay";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_TIME_OF_DAY)
  private String snapshotTimeOfDay;

  public AutoSnapshotAddOnRequest() {
  }

  public AutoSnapshotAddOnRequest snapshotTimeOfDay(String snapshotTimeOfDay) {
    this.snapshotTimeOfDay = snapshotTimeOfDay;
    return this;
  }

  /**
   * Get snapshotTimeOfDay
   * @return snapshotTimeOfDay
   */
  @javax.annotation.Nullable
  public String getSnapshotTimeOfDay() {
    return snapshotTimeOfDay;
  }

  public void setSnapshotTimeOfDay(String snapshotTimeOfDay) {
    this.snapshotTimeOfDay = snapshotTimeOfDay;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoSnapshotAddOnRequest autoSnapshotAddOnRequest = (AutoSnapshotAddOnRequest) o;
    return Objects.equals(this.snapshotTimeOfDay, autoSnapshotAddOnRequest.snapshotTimeOfDay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(snapshotTimeOfDay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoSnapshotAddOnRequest {\n");
    sb.append("    snapshotTimeOfDay: ").append(toIndentedString(snapshotTimeOfDay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("snapshotTimeOfDay");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutoSnapshotAddOnRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutoSnapshotAddOnRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoSnapshotAddOnRequest is not found in the empty JSON string", AutoSnapshotAddOnRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutoSnapshotAddOnRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoSnapshotAddOnRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `snapshotTimeOfDay`
      if (jsonObj.get("snapshotTimeOfDay") != null && !jsonObj.get("snapshotTimeOfDay").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("snapshotTimeOfDay"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoSnapshotAddOnRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoSnapshotAddOnRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoSnapshotAddOnRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoSnapshotAddOnRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoSnapshotAddOnRequest>() {
           @Override
           public void write(JsonWriter out, AutoSnapshotAddOnRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoSnapshotAddOnRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutoSnapshotAddOnRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutoSnapshotAddOnRequest
   * @throws IOException if the JSON string is invalid with respect to AutoSnapshotAddOnRequest
   */
  public static AutoSnapshotAddOnRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoSnapshotAddOnRequest.class);
  }

  /**
   * Convert an instance of AutoSnapshotAddOnRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

