/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpAddressType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateInstancesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:08:38.220643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateInstancesRequest {
  public static final String SERIALIZED_NAME_INSTANCE_NAMES = "instanceNames";
  @SerializedName(SERIALIZED_NAME_INSTANCE_NAMES)
  private List instanceNames;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "availabilityZone";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
  private String availabilityZone;

  public static final String SERIALIZED_NAME_CUSTOM_IMAGE_NAME = "customImageName";
  @SerializedName(SERIALIZED_NAME_CUSTOM_IMAGE_NAME)
  private String customImageName;

  public static final String SERIALIZED_NAME_BLUEPRINT_ID = "blueprintId";
  @SerializedName(SERIALIZED_NAME_BLUEPRINT_ID)
  private String blueprintId;

  public static final String SERIALIZED_NAME_BUNDLE_ID = "bundleId";
  @SerializedName(SERIALIZED_NAME_BUNDLE_ID)
  private String bundleId;

  public static final String SERIALIZED_NAME_USER_DATA = "userData";
  @SerializedName(SERIALIZED_NAME_USER_DATA)
  private String userData;

  public static final String SERIALIZED_NAME_KEY_PAIR_NAME = "keyPairName";
  @SerializedName(SERIALIZED_NAME_KEY_PAIR_NAME)
  private String keyPairName;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_ADD_ONS = "addOns";
  @SerializedName(SERIALIZED_NAME_ADD_ONS)
  private List addOns;

  public static final String SERIALIZED_NAME_IP_ADDRESS_TYPE = "ipAddressType";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS_TYPE)
  private IpAddressType ipAddressType;

  public CreateInstancesRequest() {
  }

  public CreateInstancesRequest instanceNames(List instanceNames) {
    this.instanceNames = instanceNames;
    return this;
  }

  /**
   * Get instanceNames
   * @return instanceNames
   */
  @javax.annotation.Nonnull
  public List getInstanceNames() {
    return instanceNames;
  }

  public void setInstanceNames(List instanceNames) {
    this.instanceNames = instanceNames;
  }


  public CreateInstancesRequest availabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
    return this;
  }

  /**
   * Get availabilityZone
   * @return availabilityZone
   */
  @javax.annotation.Nonnull
  public String getAvailabilityZone() {
    return availabilityZone;
  }

  public void setAvailabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
  }


  public CreateInstancesRequest customImageName(String customImageName) {
    this.customImageName = customImageName;
    return this;
  }

  /**
   * Get customImageName
   * @return customImageName
   */
  @javax.annotation.Nullable
  public String getCustomImageName() {
    return customImageName;
  }

  public void setCustomImageName(String customImageName) {
    this.customImageName = customImageName;
  }


  public CreateInstancesRequest blueprintId(String blueprintId) {
    this.blueprintId = blueprintId;
    return this;
  }

  /**
   * Get blueprintId
   * @return blueprintId
   */
  @javax.annotation.Nonnull
  public String getBlueprintId() {
    return blueprintId;
  }

  public void setBlueprintId(String blueprintId) {
    this.blueprintId = blueprintId;
  }


  public CreateInstancesRequest bundleId(String bundleId) {
    this.bundleId = bundleId;
    return this;
  }

  /**
   * Get bundleId
   * @return bundleId
   */
  @javax.annotation.Nonnull
  public String getBundleId() {
    return bundleId;
  }

  public void setBundleId(String bundleId) {
    this.bundleId = bundleId;
  }


  public CreateInstancesRequest userData(String userData) {
    this.userData = userData;
    return this;
  }

  /**
   * Get userData
   * @return userData
   */
  @javax.annotation.Nullable
  public String getUserData() {
    return userData;
  }

  public void setUserData(String userData) {
    this.userData = userData;
  }


  public CreateInstancesRequest keyPairName(String keyPairName) {
    this.keyPairName = keyPairName;
    return this;
  }

  /**
   * Get keyPairName
   * @return keyPairName
   */
  @javax.annotation.Nullable
  public String getKeyPairName() {
    return keyPairName;
  }

  public void setKeyPairName(String keyPairName) {
    this.keyPairName = keyPairName;
  }


  public CreateInstancesRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public CreateInstancesRequest addOns(List addOns) {
    this.addOns = addOns;
    return this;
  }

  /**
   * Get addOns
   * @return addOns
   */
  @javax.annotation.Nullable
  public List getAddOns() {
    return addOns;
  }

  public void setAddOns(List addOns) {
    this.addOns = addOns;
  }


  public CreateInstancesRequest ipAddressType(IpAddressType ipAddressType) {
    this.ipAddressType = ipAddressType;
    return this;
  }

  /**
   * Get ipAddressType
   * @return ipAddressType
   */
  @javax.annotation.Nullable
  public IpAddressType getIpAddressType() {
    return ipAddressType;
  }

  public void setIpAddressType(IpAddressType ipAddressType) {
    this.ipAddressType = ipAddressType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateInstancesRequest createInstancesRequest = (CreateInstancesRequest) o;
    return Objects.equals(this.instanceNames, createInstancesRequest.instanceNames) &&
        Objects.equals(this.availabilityZone, createInstancesRequest.availabilityZone) &&
        Objects.equals(this.customImageName, createInstancesRequest.customImageName) &&
        Objects.equals(this.blueprintId, createInstancesRequest.blueprintId) &&
        Objects.equals(this.bundleId, createInstancesRequest.bundleId) &&
        Objects.equals(this.userData, createInstancesRequest.userData) &&
        Objects.equals(this.keyPairName, createInstancesRequest.keyPairName) &&
        Objects.equals(this.tags, createInstancesRequest.tags) &&
        Objects.equals(this.addOns, createInstancesRequest.addOns) &&
        Objects.equals(this.ipAddressType, createInstancesRequest.ipAddressType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceNames, availabilityZone, customImageName, blueprintId, bundleId, userData, keyPairName, tags, addOns, ipAddressType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateInstancesRequest {\n");
    sb.append("    instanceNames: ").append(toIndentedString(instanceNames)).append("\n");
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("    customImageName: ").append(toIndentedString(customImageName)).append("\n");
    sb.append("    blueprintId: ").append(toIndentedString(blueprintId)).append("\n");
    sb.append("    bundleId: ").append(toIndentedString(bundleId)).append("\n");
    sb.append("    userData: ").append(toIndentedString(userData)).append("\n");
    sb.append("    keyPairName: ").append(toIndentedString(keyPairName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    addOns: ").append(toIndentedString(addOns)).append("\n");
    sb.append("    ipAddressType: ").append(toIndentedString(ipAddressType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instanceNames");
    openapiFields.add("availabilityZone");
    openapiFields.add("customImageName");
    openapiFields.add("blueprintId");
    openapiFields.add("bundleId");
    openapiFields.add("userData");
    openapiFields.add("keyPairName");
    openapiFields.add("tags");
    openapiFields.add("addOns");
    openapiFields.add("ipAddressType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instanceNames");
    openapiRequiredFields.add("availabilityZone");
    openapiRequiredFields.add("blueprintId");
    openapiRequiredFields.add("bundleId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateInstancesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateInstancesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateInstancesRequest is not found in the empty JSON string", CreateInstancesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateInstancesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateInstancesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateInstancesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `instanceNames`
      List.validateJsonElement(jsonObj.get("instanceNames"));
      // validate the required field `availabilityZone`
      String.validateJsonElement(jsonObj.get("availabilityZone"));
      // validate the optional field `customImageName`
      if (jsonObj.get("customImageName") != null && !jsonObj.get("customImageName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("customImageName"));
      }
      // validate the required field `blueprintId`
      String.validateJsonElement(jsonObj.get("blueprintId"));
      // validate the required field `bundleId`
      String.validateJsonElement(jsonObj.get("bundleId"));
      // validate the optional field `userData`
      if (jsonObj.get("userData") != null && !jsonObj.get("userData").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("userData"));
      }
      // validate the optional field `keyPairName`
      if (jsonObj.get("keyPairName") != null && !jsonObj.get("keyPairName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("keyPairName"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `addOns`
      if (jsonObj.get("addOns") != null && !jsonObj.get("addOns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("addOns"));
      }
      // validate the optional field `ipAddressType`
      if (jsonObj.get("ipAddressType") != null && !jsonObj.get("ipAddressType").isJsonNull()) {
        IpAddressType.validateJsonElement(jsonObj.get("ipAddressType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateInstancesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateInstancesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateInstancesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateInstancesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateInstancesRequest>() {
           @Override
           public void write(JsonWriter out, CreateInstancesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateInstancesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateInstancesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateInstancesRequest
   * @throws IOException if the JSON string is invalid with respect to CreateInstancesRequest
   */
  public static CreateInstancesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateInstancesRequest.class);
  }

  /**
   * Convert an instance of CreateInstancesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

