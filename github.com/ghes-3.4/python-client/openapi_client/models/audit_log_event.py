# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.audit_log_event_actor_location import AuditLogEventActorLocation
from typing import Optional, Set
from typing_extensions import Self

class AuditLogEvent(BaseModel):
    """
    AuditLogEvent
    """ # noqa: E501
    timestamp: Optional[StrictInt] = Field(default=None, description="The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).", alias="@timestamp")
    document_id: Optional[StrictStr] = Field(default=None, description="A unique identifier for an audit event.", alias="_document_id")
    action: Optional[StrictStr] = Field(default=None, description="The name of the action that was performed, for example `user.login` or `repo.create`.")
    active: Optional[StrictBool] = None
    active_was: Optional[StrictBool] = None
    actor: Optional[StrictStr] = Field(default=None, description="The actor who performed the action.")
    actor_id: Optional[StrictInt] = Field(default=None, description="The id of the actor who performed the action.")
    actor_location: Optional[AuditLogEventActorLocation] = None
    blocked_user: Optional[StrictStr] = Field(default=None, description="The username of the account being blocked.")
    business: Optional[StrictStr] = None
    business_id: Optional[StrictInt] = None
    config: Optional[List[Dict[str, Any]]] = None
    config_was: Optional[List[Dict[str, Any]]] = None
    content_type: Optional[StrictStr] = None
    created_at: Optional[StrictInt] = Field(default=None, description="The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).")
    data: Optional[Dict[str, Any]] = None
    deploy_key_fingerprint: Optional[StrictStr] = None
    emoji: Optional[StrictStr] = None
    events: Optional[List[Dict[str, Any]]] = None
    events_were: Optional[List[Dict[str, Any]]] = None
    explanation: Optional[StrictStr] = None
    fingerprint: Optional[StrictStr] = None
    hook_id: Optional[StrictInt] = None
    limited_availability: Optional[StrictBool] = None
    message: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    old_user: Optional[StrictStr] = None
    openssh_public_key: Optional[StrictStr] = None
    operation_type: Optional[StrictStr] = None
    org: Optional[StrictStr] = None
    org_id: Optional[StrictInt] = None
    previous_visibility: Optional[StrictStr] = None
    read_only: Optional[StrictBool] = None
    repo: Optional[StrictStr] = Field(default=None, description="The name of the repository.")
    repository: Optional[StrictStr] = Field(default=None, description="The name of the repository.")
    repository_public: Optional[StrictBool] = None
    target_login: Optional[StrictStr] = None
    team: Optional[StrictStr] = None
    transport_protocol: Optional[StrictInt] = Field(default=None, description="The type of protocol (for example, HTTP or SSH) used to transfer Git data.")
    transport_protocol_name: Optional[StrictStr] = Field(default=None, description="A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.")
    user: Optional[StrictStr] = Field(default=None, description="The user that was affected by the action performed (if available).")
    user_id: Optional[StrictInt] = None
    visibility: Optional[StrictStr] = Field(default=None, description="The repository visibility, for example `public` or `private`.")
    __properties: ClassVar[List[str]] = ["@timestamp", "_document_id", "action", "active", "active_was", "actor", "actor_id", "actor_location", "blocked_user", "business", "business_id", "config", "config_was", "content_type", "created_at", "data", "deploy_key_fingerprint", "emoji", "events", "events_were", "explanation", "fingerprint", "hook_id", "limited_availability", "message", "name", "old_user", "openssh_public_key", "operation_type", "org", "org_id", "previous_visibility", "read_only", "repo", "repository", "repository_public", "target_login", "team", "transport_protocol", "transport_protocol_name", "user", "user_id", "visibility"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuditLogEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of actor_location
        if self.actor_location:
            _dict['actor_location'] = self.actor_location.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuditLogEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@timestamp": obj.get("@timestamp"),
            "_document_id": obj.get("_document_id"),
            "action": obj.get("action"),
            "active": obj.get("active"),
            "active_was": obj.get("active_was"),
            "actor": obj.get("actor"),
            "actor_id": obj.get("actor_id"),
            "actor_location": AuditLogEventActorLocation.from_dict(obj["actor_location"]) if obj.get("actor_location") is not None else None,
            "blocked_user": obj.get("blocked_user"),
            "business": obj.get("business"),
            "business_id": obj.get("business_id"),
            "config": obj.get("config"),
            "config_was": obj.get("config_was"),
            "content_type": obj.get("content_type"),
            "created_at": obj.get("created_at"),
            "data": obj.get("data"),
            "deploy_key_fingerprint": obj.get("deploy_key_fingerprint"),
            "emoji": obj.get("emoji"),
            "events": obj.get("events"),
            "events_were": obj.get("events_were"),
            "explanation": obj.get("explanation"),
            "fingerprint": obj.get("fingerprint"),
            "hook_id": obj.get("hook_id"),
            "limited_availability": obj.get("limited_availability"),
            "message": obj.get("message"),
            "name": obj.get("name"),
            "old_user": obj.get("old_user"),
            "openssh_public_key": obj.get("openssh_public_key"),
            "operation_type": obj.get("operation_type"),
            "org": obj.get("org"),
            "org_id": obj.get("org_id"),
            "previous_visibility": obj.get("previous_visibility"),
            "read_only": obj.get("read_only"),
            "repo": obj.get("repo"),
            "repository": obj.get("repository"),
            "repository_public": obj.get("repository_public"),
            "target_login": obj.get("target_login"),
            "team": obj.get("team"),
            "transport_protocol": obj.get("transport_protocol"),
            "transport_protocol_name": obj.get("transport_protocol_name"),
            "user": obj.get("user"),
            "user_id": obj.get("user_id"),
            "visibility": obj.get("visibility")
        })
        return _obj


