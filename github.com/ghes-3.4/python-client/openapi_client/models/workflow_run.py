# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.minimal_repository import MinimalRepository
from openapi_client.models.nullable_simple_commit import NullableSimpleCommit
from openapi_client.models.pull_request_minimal import PullRequestMinimal
from typing import Optional, Set
from typing_extensions import Self

class WorkflowRun(BaseModel):
    """
    An invocation of a workflow
    """ # noqa: E501
    artifacts_url: StrictStr = Field(description="The URL to the artifacts for the workflow run.")
    cancel_url: StrictStr = Field(description="The URL to cancel the workflow run.")
    check_suite_id: Optional[StrictInt] = Field(default=None, description="The ID of the associated check suite.")
    check_suite_node_id: Optional[StrictStr] = Field(default=None, description="The node ID of the associated check suite.")
    check_suite_url: StrictStr = Field(description="The URL to the associated check suite.")
    conclusion: Optional[StrictStr]
    created_at: datetime
    event: StrictStr
    head_branch: Optional[StrictStr]
    head_commit: Optional[NullableSimpleCommit]
    head_repository: MinimalRepository
    head_repository_id: Optional[StrictInt] = None
    head_sha: StrictStr = Field(description="The SHA of the head commit that points to the version of the workflow being run.")
    html_url: StrictStr
    id: StrictInt = Field(description="The ID of the workflow run.")
    jobs_url: StrictStr = Field(description="The URL to the jobs for the workflow run.")
    logs_url: StrictStr = Field(description="The URL to download the logs for the workflow run.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the workflow run.")
    node_id: StrictStr
    pull_requests: Optional[List[PullRequestMinimal]]
    repository: MinimalRepository
    rerun_url: StrictStr = Field(description="The URL to rerun the workflow run.")
    run_number: StrictInt = Field(description="The auto incrementing run number for the workflow run.")
    status: Optional[StrictStr]
    updated_at: datetime
    url: StrictStr = Field(description="The URL to the workflow run.")
    workflow_id: StrictInt = Field(description="The ID of the parent workflow.")
    workflow_url: StrictStr = Field(description="The URL to the workflow.")
    __properties: ClassVar[List[str]] = ["artifacts_url", "cancel_url", "check_suite_id", "check_suite_node_id", "check_suite_url", "conclusion", "created_at", "event", "head_branch", "head_commit", "head_repository", "head_repository_id", "head_sha", "html_url", "id", "jobs_url", "logs_url", "name", "node_id", "pull_requests", "repository", "rerun_url", "run_number", "status", "updated_at", "url", "workflow_id", "workflow_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of head_commit
        if self.head_commit:
            _dict['head_commit'] = self.head_commit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of head_repository
        if self.head_repository:
            _dict['head_repository'] = self.head_repository.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pull_requests (list)
        _items = []
        if self.pull_requests:
            for _item_pull_requests in self.pull_requests:
                if _item_pull_requests:
                    _items.append(_item_pull_requests.to_dict())
            _dict['pull_requests'] = _items
        # override the default output from pydantic by calling `to_dict()` of repository
        if self.repository:
            _dict['repository'] = self.repository.to_dict()
        # set to None if conclusion (nullable) is None
        # and model_fields_set contains the field
        if self.conclusion is None and "conclusion" in self.model_fields_set:
            _dict['conclusion'] = None

        # set to None if head_branch (nullable) is None
        # and model_fields_set contains the field
        if self.head_branch is None and "head_branch" in self.model_fields_set:
            _dict['head_branch'] = None

        # set to None if head_commit (nullable) is None
        # and model_fields_set contains the field
        if self.head_commit is None and "head_commit" in self.model_fields_set:
            _dict['head_commit'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if pull_requests (nullable) is None
        # and model_fields_set contains the field
        if self.pull_requests is None and "pull_requests" in self.model_fields_set:
            _dict['pull_requests'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifacts_url": obj.get("artifacts_url"),
            "cancel_url": obj.get("cancel_url"),
            "check_suite_id": obj.get("check_suite_id"),
            "check_suite_node_id": obj.get("check_suite_node_id"),
            "check_suite_url": obj.get("check_suite_url"),
            "conclusion": obj.get("conclusion"),
            "created_at": obj.get("created_at"),
            "event": obj.get("event"),
            "head_branch": obj.get("head_branch"),
            "head_commit": NullableSimpleCommit.from_dict(obj["head_commit"]) if obj.get("head_commit") is not None else None,
            "head_repository": MinimalRepository.from_dict(obj["head_repository"]) if obj.get("head_repository") is not None else None,
            "head_repository_id": obj.get("head_repository_id"),
            "head_sha": obj.get("head_sha"),
            "html_url": obj.get("html_url"),
            "id": obj.get("id"),
            "jobs_url": obj.get("jobs_url"),
            "logs_url": obj.get("logs_url"),
            "name": obj.get("name"),
            "node_id": obj.get("node_id"),
            "pull_requests": [PullRequestMinimal.from_dict(_item) for _item in obj["pull_requests"]] if obj.get("pull_requests") is not None else None,
            "repository": MinimalRepository.from_dict(obj["repository"]) if obj.get("repository") is not None else None,
            "rerun_url": obj.get("rerun_url"),
            "run_number": obj.get("run_number"),
            "status": obj.get("status"),
            "updated_at": obj.get("updated_at"),
            "url": obj.get("url"),
            "workflow_id": obj.get("workflow_id"),
            "workflow_url": obj.get("workflow_url")
        })
        return _obj


