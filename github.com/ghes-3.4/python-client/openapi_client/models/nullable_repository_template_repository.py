# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.branch_restriction_policy_users_inner import BranchRestrictionPolicyUsersInner
from openapi_client.models.minimal_repository_permissions import MinimalRepositoryPermissions
from typing import Optional, Set
from typing_extensions import Self

class NullableRepositoryTemplateRepository(BaseModel):
    """
    NullableRepositoryTemplateRepository
    """ # noqa: E501
    allow_auto_merge: Optional[StrictBool] = None
    allow_merge_commit: Optional[StrictBool] = None
    allow_rebase_merge: Optional[StrictBool] = None
    allow_squash_merge: Optional[StrictBool] = None
    allow_update_branch: Optional[StrictBool] = None
    archive_url: Optional[StrictStr] = None
    archived: Optional[StrictBool] = None
    assignees_url: Optional[StrictStr] = None
    blobs_url: Optional[StrictStr] = None
    branches_url: Optional[StrictStr] = None
    clone_url: Optional[StrictStr] = None
    collaborators_url: Optional[StrictStr] = None
    comments_url: Optional[StrictStr] = None
    commits_url: Optional[StrictStr] = None
    compare_url: Optional[StrictStr] = None
    contents_url: Optional[StrictStr] = None
    contributors_url: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    default_branch: Optional[StrictStr] = None
    delete_branch_on_merge: Optional[StrictBool] = None
    deployments_url: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    disabled: Optional[StrictBool] = None
    downloads_url: Optional[StrictStr] = None
    events_url: Optional[StrictStr] = None
    fork: Optional[StrictBool] = None
    forks_count: Optional[StrictInt] = None
    forks_url: Optional[StrictStr] = None
    full_name: Optional[StrictStr] = None
    git_commits_url: Optional[StrictStr] = None
    git_refs_url: Optional[StrictStr] = None
    git_tags_url: Optional[StrictStr] = None
    git_url: Optional[StrictStr] = None
    has_downloads: Optional[StrictBool] = None
    has_issues: Optional[StrictBool] = None
    has_pages: Optional[StrictBool] = None
    has_projects: Optional[StrictBool] = None
    has_wiki: Optional[StrictBool] = None
    homepage: Optional[StrictStr] = None
    hooks_url: Optional[StrictStr] = None
    html_url: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    is_template: Optional[StrictBool] = None
    issue_comment_url: Optional[StrictStr] = None
    issue_events_url: Optional[StrictStr] = None
    issues_url: Optional[StrictStr] = None
    keys_url: Optional[StrictStr] = None
    labels_url: Optional[StrictStr] = None
    language: Optional[StrictStr] = None
    languages_url: Optional[StrictStr] = None
    merges_url: Optional[StrictStr] = None
    milestones_url: Optional[StrictStr] = None
    mirror_url: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    network_count: Optional[StrictInt] = None
    node_id: Optional[StrictStr] = None
    notifications_url: Optional[StrictStr] = None
    open_issues_count: Optional[StrictInt] = None
    owner: Optional[BranchRestrictionPolicyUsersInner] = None
    permissions: Optional[MinimalRepositoryPermissions] = None
    private: Optional[StrictBool] = None
    pulls_url: Optional[StrictStr] = None
    pushed_at: Optional[StrictStr] = None
    releases_url: Optional[StrictStr] = None
    size: Optional[StrictInt] = None
    ssh_url: Optional[StrictStr] = None
    stargazers_count: Optional[StrictInt] = None
    stargazers_url: Optional[StrictStr] = None
    statuses_url: Optional[StrictStr] = None
    subscribers_count: Optional[StrictInt] = None
    subscribers_url: Optional[StrictStr] = None
    subscription_url: Optional[StrictStr] = None
    svn_url: Optional[StrictStr] = None
    tags_url: Optional[StrictStr] = None
    teams_url: Optional[StrictStr] = None
    temp_clone_token: Optional[StrictStr] = None
    topics: Optional[List[StrictStr]] = None
    trees_url: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    visibility: Optional[StrictStr] = None
    watchers_count: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["allow_auto_merge", "allow_merge_commit", "allow_rebase_merge", "allow_squash_merge", "allow_update_branch", "archive_url", "archived", "assignees_url", "blobs_url", "branches_url", "clone_url", "collaborators_url", "comments_url", "commits_url", "compare_url", "contents_url", "contributors_url", "created_at", "default_branch", "delete_branch_on_merge", "deployments_url", "description", "disabled", "downloads_url", "events_url", "fork", "forks_count", "forks_url", "full_name", "git_commits_url", "git_refs_url", "git_tags_url", "git_url", "has_downloads", "has_issues", "has_pages", "has_projects", "has_wiki", "homepage", "hooks_url", "html_url", "id", "is_template", "issue_comment_url", "issue_events_url", "issues_url", "keys_url", "labels_url", "language", "languages_url", "merges_url", "milestones_url", "mirror_url", "name", "network_count", "node_id", "notifications_url", "open_issues_count", "owner", "permissions", "private", "pulls_url", "pushed_at", "releases_url", "size", "ssh_url", "stargazers_count", "stargazers_url", "statuses_url", "subscribers_count", "subscribers_url", "subscription_url", "svn_url", "tags_url", "teams_url", "temp_clone_token", "topics", "trees_url", "updated_at", "url", "visibility", "watchers_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NullableRepositoryTemplateRepository from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of permissions
        if self.permissions:
            _dict['permissions'] = self.permissions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NullableRepositoryTemplateRepository from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow_auto_merge": obj.get("allow_auto_merge"),
            "allow_merge_commit": obj.get("allow_merge_commit"),
            "allow_rebase_merge": obj.get("allow_rebase_merge"),
            "allow_squash_merge": obj.get("allow_squash_merge"),
            "allow_update_branch": obj.get("allow_update_branch"),
            "archive_url": obj.get("archive_url"),
            "archived": obj.get("archived"),
            "assignees_url": obj.get("assignees_url"),
            "blobs_url": obj.get("blobs_url"),
            "branches_url": obj.get("branches_url"),
            "clone_url": obj.get("clone_url"),
            "collaborators_url": obj.get("collaborators_url"),
            "comments_url": obj.get("comments_url"),
            "commits_url": obj.get("commits_url"),
            "compare_url": obj.get("compare_url"),
            "contents_url": obj.get("contents_url"),
            "contributors_url": obj.get("contributors_url"),
            "created_at": obj.get("created_at"),
            "default_branch": obj.get("default_branch"),
            "delete_branch_on_merge": obj.get("delete_branch_on_merge"),
            "deployments_url": obj.get("deployments_url"),
            "description": obj.get("description"),
            "disabled": obj.get("disabled"),
            "downloads_url": obj.get("downloads_url"),
            "events_url": obj.get("events_url"),
            "fork": obj.get("fork"),
            "forks_count": obj.get("forks_count"),
            "forks_url": obj.get("forks_url"),
            "full_name": obj.get("full_name"),
            "git_commits_url": obj.get("git_commits_url"),
            "git_refs_url": obj.get("git_refs_url"),
            "git_tags_url": obj.get("git_tags_url"),
            "git_url": obj.get("git_url"),
            "has_downloads": obj.get("has_downloads"),
            "has_issues": obj.get("has_issues"),
            "has_pages": obj.get("has_pages"),
            "has_projects": obj.get("has_projects"),
            "has_wiki": obj.get("has_wiki"),
            "homepage": obj.get("homepage"),
            "hooks_url": obj.get("hooks_url"),
            "html_url": obj.get("html_url"),
            "id": obj.get("id"),
            "is_template": obj.get("is_template"),
            "issue_comment_url": obj.get("issue_comment_url"),
            "issue_events_url": obj.get("issue_events_url"),
            "issues_url": obj.get("issues_url"),
            "keys_url": obj.get("keys_url"),
            "labels_url": obj.get("labels_url"),
            "language": obj.get("language"),
            "languages_url": obj.get("languages_url"),
            "merges_url": obj.get("merges_url"),
            "milestones_url": obj.get("milestones_url"),
            "mirror_url": obj.get("mirror_url"),
            "name": obj.get("name"),
            "network_count": obj.get("network_count"),
            "node_id": obj.get("node_id"),
            "notifications_url": obj.get("notifications_url"),
            "open_issues_count": obj.get("open_issues_count"),
            "owner": BranchRestrictionPolicyUsersInner.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "permissions": MinimalRepositoryPermissions.from_dict(obj["permissions"]) if obj.get("permissions") is not None else None,
            "private": obj.get("private"),
            "pulls_url": obj.get("pulls_url"),
            "pushed_at": obj.get("pushed_at"),
            "releases_url": obj.get("releases_url"),
            "size": obj.get("size"),
            "ssh_url": obj.get("ssh_url"),
            "stargazers_count": obj.get("stargazers_count"),
            "stargazers_url": obj.get("stargazers_url"),
            "statuses_url": obj.get("statuses_url"),
            "subscribers_count": obj.get("subscribers_count"),
            "subscribers_url": obj.get("subscribers_url"),
            "subscription_url": obj.get("subscription_url"),
            "svn_url": obj.get("svn_url"),
            "tags_url": obj.get("tags_url"),
            "teams_url": obj.get("teams_url"),
            "temp_clone_token": obj.get("temp_clone_token"),
            "topics": obj.get("topics"),
            "trees_url": obj.get("trees_url"),
            "updated_at": obj.get("updated_at"),
            "url": obj.get("url"),
            "visibility": obj.get("visibility"),
            "watchers_count": obj.get("watchers_count")
        })
        return _obj


