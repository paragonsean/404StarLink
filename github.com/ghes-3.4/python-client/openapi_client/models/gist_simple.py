# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.gist import Gist
from openapi_client.models.gist_history import GistHistory
from openapi_client.models.gist_simple_files_value import GistSimpleFilesValue
from openapi_client.models.gist_simple_forks_inner import GistSimpleForksInner
from openapi_client.models.simple_user import SimpleUser
from typing import Optional, Set
from typing_extensions import Self

class GistSimple(BaseModel):
    """
    Gist Simple
    """ # noqa: E501
    comments: Optional[StrictInt] = None
    comments_url: Optional[StrictStr] = None
    commits_url: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    files: Optional[Dict[str, Optional[GistSimpleFilesValue]]] = None
    fork_of: Optional[Gist] = None
    forks: Optional[List[GistSimpleForksInner]] = None
    forks_url: Optional[StrictStr] = None
    git_pull_url: Optional[StrictStr] = None
    git_push_url: Optional[StrictStr] = None
    history: Optional[List[GistHistory]] = None
    html_url: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    node_id: Optional[StrictStr] = None
    owner: Optional[SimpleUser] = None
    public: Optional[StrictBool] = None
    truncated: Optional[StrictBool] = None
    updated_at: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    user: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["comments", "comments_url", "commits_url", "created_at", "description", "files", "fork_of", "forks", "forks_url", "git_pull_url", "git_push_url", "history", "html_url", "id", "node_id", "owner", "public", "truncated", "updated_at", "url", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GistSimple from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in files (dict)
        _field_dict = {}
        if self.files:
            for _key_files in self.files:
                if self.files[_key_files]:
                    _field_dict[_key_files] = self.files[_key_files].to_dict()
            _dict['files'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of fork_of
        if self.fork_of:
            _dict['fork_of'] = self.fork_of.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in forks (list)
        _items = []
        if self.forks:
            for _item_forks in self.forks:
                if _item_forks:
                    _items.append(_item_forks.to_dict())
            _dict['forks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in history (list)
        _items = []
        if self.history:
            for _item_history in self.history:
                if _item_history:
                    _items.append(_item_history.to_dict())
            _dict['history'] = _items
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if fork_of (nullable) is None
        # and model_fields_set contains the field
        if self.fork_of is None and "fork_of" in self.model_fields_set:
            _dict['fork_of'] = None

        # set to None if forks (nullable) is None
        # and model_fields_set contains the field
        if self.forks is None and "forks" in self.model_fields_set:
            _dict['forks'] = None

        # set to None if history (nullable) is None
        # and model_fields_set contains the field
        if self.history is None and "history" in self.model_fields_set:
            _dict['history'] = None

        # set to None if user (nullable) is None
        # and model_fields_set contains the field
        if self.user is None and "user" in self.model_fields_set:
            _dict['user'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GistSimple from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comments": obj.get("comments"),
            "comments_url": obj.get("comments_url"),
            "commits_url": obj.get("commits_url"),
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "files": dict(
                (_k, GistSimpleFilesValue.from_dict(_v))
                for _k, _v in obj["files"].items()
            )
            if obj.get("files") is not None
            else None,
            "fork_of": Gist.from_dict(obj["fork_of"]) if obj.get("fork_of") is not None else None,
            "forks": [GistSimpleForksInner.from_dict(_item) for _item in obj["forks"]] if obj.get("forks") is not None else None,
            "forks_url": obj.get("forks_url"),
            "git_pull_url": obj.get("git_pull_url"),
            "git_push_url": obj.get("git_push_url"),
            "history": [GistHistory.from_dict(_item) for _item in obj["history"]] if obj.get("history") is not None else None,
            "html_url": obj.get("html_url"),
            "id": obj.get("id"),
            "node_id": obj.get("node_id"),
            "owner": SimpleUser.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "public": obj.get("public"),
            "truncated": obj.get("truncated"),
            "updated_at": obj.get("updated_at"),
            "url": obj.get("url"),
            "user": obj.get("user")
        })
        return _obj


