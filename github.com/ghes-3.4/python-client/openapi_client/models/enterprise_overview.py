# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_comment_overview import EnterpriseCommentOverview
from openapi_client.models.enterprise_gist_overview import EnterpriseGistOverview
from openapi_client.models.enterprise_hook_overview import EnterpriseHookOverview
from openapi_client.models.enterprise_issue_overview import EnterpriseIssueOverview
from openapi_client.models.enterprise_milestone_overview import EnterpriseMilestoneOverview
from openapi_client.models.enterprise_organization_overview import EnterpriseOrganizationOverview
from openapi_client.models.enterprise_page_overview import EnterprisePageOverview
from openapi_client.models.enterprise_pull_request_overview import EnterprisePullRequestOverview
from openapi_client.models.enterprise_repository_overview import EnterpriseRepositoryOverview
from openapi_client.models.enterprise_user_overview import EnterpriseUserOverview
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseOverview(BaseModel):
    """
    EnterpriseOverview
    """ # noqa: E501
    comments: Optional[EnterpriseCommentOverview] = None
    gists: Optional[EnterpriseGistOverview] = None
    hooks: Optional[EnterpriseHookOverview] = None
    issues: Optional[EnterpriseIssueOverview] = None
    milestones: Optional[EnterpriseMilestoneOverview] = None
    orgs: Optional[EnterpriseOrganizationOverview] = None
    pages: Optional[EnterprisePageOverview] = None
    pulls: Optional[EnterprisePullRequestOverview] = None
    repos: Optional[EnterpriseRepositoryOverview] = None
    users: Optional[EnterpriseUserOverview] = None
    __properties: ClassVar[List[str]] = ["comments", "gists", "hooks", "issues", "milestones", "orgs", "pages", "pulls", "repos", "users"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseOverview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of comments
        if self.comments:
            _dict['comments'] = self.comments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gists
        if self.gists:
            _dict['gists'] = self.gists.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hooks
        if self.hooks:
            _dict['hooks'] = self.hooks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issues
        if self.issues:
            _dict['issues'] = self.issues.to_dict()
        # override the default output from pydantic by calling `to_dict()` of milestones
        if self.milestones:
            _dict['milestones'] = self.milestones.to_dict()
        # override the default output from pydantic by calling `to_dict()` of orgs
        if self.orgs:
            _dict['orgs'] = self.orgs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pages
        if self.pages:
            _dict['pages'] = self.pages.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pulls
        if self.pulls:
            _dict['pulls'] = self.pulls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repos
        if self.repos:
            _dict['repos'] = self.repos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of users
        if self.users:
            _dict['users'] = self.users.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseOverview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comments": EnterpriseCommentOverview.from_dict(obj["comments"]) if obj.get("comments") is not None else None,
            "gists": EnterpriseGistOverview.from_dict(obj["gists"]) if obj.get("gists") is not None else None,
            "hooks": EnterpriseHookOverview.from_dict(obj["hooks"]) if obj.get("hooks") is not None else None,
            "issues": EnterpriseIssueOverview.from_dict(obj["issues"]) if obj.get("issues") is not None else None,
            "milestones": EnterpriseMilestoneOverview.from_dict(obj["milestones"]) if obj.get("milestones") is not None else None,
            "orgs": EnterpriseOrganizationOverview.from_dict(obj["orgs"]) if obj.get("orgs") is not None else None,
            "pages": EnterprisePageOverview.from_dict(obj["pages"]) if obj.get("pages") is not None else None,
            "pulls": EnterprisePullRequestOverview.from_dict(obj["pulls"]) if obj.get("pulls") is not None else None,
            "repos": EnterpriseRepositoryOverview.from_dict(obj["repos"]) if obj.get("repos") is not None else None,
            "users": EnterpriseUserOverview.from_dict(obj["users"]) if obj.get("users") is not None else None
        })
        return _obj


