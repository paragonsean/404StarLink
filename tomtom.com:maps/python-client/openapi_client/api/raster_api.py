# coding: utf-8

"""
    Maps

    The Maps API web services suite offers the following APIs:   - Raster   The Maps Raster API renders map data that is divided into gridded sections called tiles. Tiles are square images (png or jpg format) in various sizes which are available at 19 different zoom levels, ranging from 0 to 20. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 20, the world is divided into 2<sup>40</sup> tiles.   - Vector   Similar to Maps Raster API, the Maps Vector API serves data on different zoom level ranging from 0 to 22. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 22, the world is divided into 2<sup>44</sup> tiles.   The Maps Vector Service delivers geographic map data packaged in a vector representation of squared sections called vector tiles. Each tile includes pre-defined collections of map features (points, lines, road shapes, water polygons, building footprints, ect.) delivered in one of the specified vector formats. Format of the tile is formally described using protobuf schema.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class RasterApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def map_version_number_staticimage_get(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1.")],
        layer: Annotated[Optional[StrictStr], Field(description="Layer of image to be rendered. <em>Hybrid</em> and <em>labels</em> are intended for layering with other data and are only available in <em>png</em> format.")] = None,
        style: Annotated[Optional[StrictStr], Field(description="Map style to be returned")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Image format to be returned")] = None,
        zoom: Annotated[Optional[StrictInt], Field(description="Zoom level of map image to be returned.")] = None,
        center: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Coordinates for the center point of the image. Must be used with the <strong>width</strong> and <strong>height</strong> parameters; cannot be used with <strong>bbox</strong>. Uses EPSG:3857 projection (functionally equivalent to EPSG:900910).")] = None,
        width: Annotated[Optional[Annotated[int, Field(le=8192, strict=True, ge=1)]], Field(description="Width of the resulting image in pixels. Width must be a positive integer between 1 and 8192.")] = None,
        height: Annotated[Optional[Annotated[int, Field(le=8192, strict=True, ge=1)]], Field(description="Height of the resulting image in pixels. Height must be a positive integer between 1 and 8192.")] = None,
        bbox: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Bounding box for the image, using EPSG:3857 projection (functionally equivalent to EPSG:900910). Values <strong>must</strong> be in the order of minLon, minLat, maxLon, maxLat. MaxLat must be greater than minLat. Longitude values can be on both sides of the 180th meridian. Cannot be used with <strong>center</strong>, <strong>width</strong>, or <strong>height</strong> parameters.")] = None,
        view: Annotated[Optional[StrictStr], Field(description="Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-api/maps-api-documentation-raster/raster-tile\">documentation</a> for an explanation of how this works in live services.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Static Image

        The Static Image service renders a rectangular raster image in the style, size, and zoom level specified. The image can be requested using either a center point plus width and height or a bounding box.

        :param version_number: Version of the service to call. The current version is 1. (required)
        :type version_number: int
        :param layer: Layer of image to be rendered. <em>Hybrid</em> and <em>labels</em> are intended for layering with other data and are only available in <em>png</em> format.
        :type layer: str
        :param style: Map style to be returned
        :type style: str
        :param format: Image format to be returned
        :type format: str
        :param zoom: Zoom level of map image to be returned.
        :type zoom: int
        :param center: Coordinates for the center point of the image. Must be used with the <strong>width</strong> and <strong>height</strong> parameters; cannot be used with <strong>bbox</strong>. Uses EPSG:3857 projection (functionally equivalent to EPSG:900910).
        :type center: str
        :param width: Width of the resulting image in pixels. Width must be a positive integer between 1 and 8192.
        :type width: int
        :param height: Height of the resulting image in pixels. Height must be a positive integer between 1 and 8192.
        :type height: int
        :param bbox: Bounding box for the image, using EPSG:3857 projection (functionally equivalent to EPSG:900910). Values <strong>must</strong> be in the order of minLon, minLat, maxLon, maxLat. MaxLat must be greater than minLat. Longitude values can be on both sides of the 180th meridian. Cannot be used with <strong>center</strong>, <strong>width</strong>, or <strong>height</strong> parameters.
        :type bbox: str
        :param view: Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-api/maps-api-documentation-raster/raster-tile\">documentation</a> for an explanation of how this works in live services.
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_staticimage_get_serialize(
            version_number=version_number,
            layer=layer,
            style=style,
            format=format,
            zoom=zoom,
            center=center,
            width=width,
            height=height,
            bbox=bbox,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '403': None,
            '500': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def map_version_number_staticimage_get_with_http_info(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1.")],
        layer: Annotated[Optional[StrictStr], Field(description="Layer of image to be rendered. <em>Hybrid</em> and <em>labels</em> are intended for layering with other data and are only available in <em>png</em> format.")] = None,
        style: Annotated[Optional[StrictStr], Field(description="Map style to be returned")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Image format to be returned")] = None,
        zoom: Annotated[Optional[StrictInt], Field(description="Zoom level of map image to be returned.")] = None,
        center: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Coordinates for the center point of the image. Must be used with the <strong>width</strong> and <strong>height</strong> parameters; cannot be used with <strong>bbox</strong>. Uses EPSG:3857 projection (functionally equivalent to EPSG:900910).")] = None,
        width: Annotated[Optional[Annotated[int, Field(le=8192, strict=True, ge=1)]], Field(description="Width of the resulting image in pixels. Width must be a positive integer between 1 and 8192.")] = None,
        height: Annotated[Optional[Annotated[int, Field(le=8192, strict=True, ge=1)]], Field(description="Height of the resulting image in pixels. Height must be a positive integer between 1 and 8192.")] = None,
        bbox: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Bounding box for the image, using EPSG:3857 projection (functionally equivalent to EPSG:900910). Values <strong>must</strong> be in the order of minLon, minLat, maxLon, maxLat. MaxLat must be greater than minLat. Longitude values can be on both sides of the 180th meridian. Cannot be used with <strong>center</strong>, <strong>width</strong>, or <strong>height</strong> parameters.")] = None,
        view: Annotated[Optional[StrictStr], Field(description="Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-api/maps-api-documentation-raster/raster-tile\">documentation</a> for an explanation of how this works in live services.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Static Image

        The Static Image service renders a rectangular raster image in the style, size, and zoom level specified. The image can be requested using either a center point plus width and height or a bounding box.

        :param version_number: Version of the service to call. The current version is 1. (required)
        :type version_number: int
        :param layer: Layer of image to be rendered. <em>Hybrid</em> and <em>labels</em> are intended for layering with other data and are only available in <em>png</em> format.
        :type layer: str
        :param style: Map style to be returned
        :type style: str
        :param format: Image format to be returned
        :type format: str
        :param zoom: Zoom level of map image to be returned.
        :type zoom: int
        :param center: Coordinates for the center point of the image. Must be used with the <strong>width</strong> and <strong>height</strong> parameters; cannot be used with <strong>bbox</strong>. Uses EPSG:3857 projection (functionally equivalent to EPSG:900910).
        :type center: str
        :param width: Width of the resulting image in pixels. Width must be a positive integer between 1 and 8192.
        :type width: int
        :param height: Height of the resulting image in pixels. Height must be a positive integer between 1 and 8192.
        :type height: int
        :param bbox: Bounding box for the image, using EPSG:3857 projection (functionally equivalent to EPSG:900910). Values <strong>must</strong> be in the order of minLon, minLat, maxLon, maxLat. MaxLat must be greater than minLat. Longitude values can be on both sides of the 180th meridian. Cannot be used with <strong>center</strong>, <strong>width</strong>, or <strong>height</strong> parameters.
        :type bbox: str
        :param view: Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-api/maps-api-documentation-raster/raster-tile\">documentation</a> for an explanation of how this works in live services.
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_staticimage_get_serialize(
            version_number=version_number,
            layer=layer,
            style=style,
            format=format,
            zoom=zoom,
            center=center,
            width=width,
            height=height,
            bbox=bbox,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '403': None,
            '500': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def map_version_number_staticimage_get_without_preload_content(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1.")],
        layer: Annotated[Optional[StrictStr], Field(description="Layer of image to be rendered. <em>Hybrid</em> and <em>labels</em> are intended for layering with other data and are only available in <em>png</em> format.")] = None,
        style: Annotated[Optional[StrictStr], Field(description="Map style to be returned")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Image format to be returned")] = None,
        zoom: Annotated[Optional[StrictInt], Field(description="Zoom level of map image to be returned.")] = None,
        center: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Coordinates for the center point of the image. Must be used with the <strong>width</strong> and <strong>height</strong> parameters; cannot be used with <strong>bbox</strong>. Uses EPSG:3857 projection (functionally equivalent to EPSG:900910).")] = None,
        width: Annotated[Optional[Annotated[int, Field(le=8192, strict=True, ge=1)]], Field(description="Width of the resulting image in pixels. Width must be a positive integer between 1 and 8192.")] = None,
        height: Annotated[Optional[Annotated[int, Field(le=8192, strict=True, ge=1)]], Field(description="Height of the resulting image in pixels. Height must be a positive integer between 1 and 8192.")] = None,
        bbox: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Bounding box for the image, using EPSG:3857 projection (functionally equivalent to EPSG:900910). Values <strong>must</strong> be in the order of minLon, minLat, maxLon, maxLat. MaxLat must be greater than minLat. Longitude values can be on both sides of the 180th meridian. Cannot be used with <strong>center</strong>, <strong>width</strong>, or <strong>height</strong> parameters.")] = None,
        view: Annotated[Optional[StrictStr], Field(description="Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-api/maps-api-documentation-raster/raster-tile\">documentation</a> for an explanation of how this works in live services.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Static Image

        The Static Image service renders a rectangular raster image in the style, size, and zoom level specified. The image can be requested using either a center point plus width and height or a bounding box.

        :param version_number: Version of the service to call. The current version is 1. (required)
        :type version_number: int
        :param layer: Layer of image to be rendered. <em>Hybrid</em> and <em>labels</em> are intended for layering with other data and are only available in <em>png</em> format.
        :type layer: str
        :param style: Map style to be returned
        :type style: str
        :param format: Image format to be returned
        :type format: str
        :param zoom: Zoom level of map image to be returned.
        :type zoom: int
        :param center: Coordinates for the center point of the image. Must be used with the <strong>width</strong> and <strong>height</strong> parameters; cannot be used with <strong>bbox</strong>. Uses EPSG:3857 projection (functionally equivalent to EPSG:900910).
        :type center: str
        :param width: Width of the resulting image in pixels. Width must be a positive integer between 1 and 8192.
        :type width: int
        :param height: Height of the resulting image in pixels. Height must be a positive integer between 1 and 8192.
        :type height: int
        :param bbox: Bounding box for the image, using EPSG:3857 projection (functionally equivalent to EPSG:900910). Values <strong>must</strong> be in the order of minLon, minLat, maxLon, maxLat. MaxLat must be greater than minLat. Longitude values can be on both sides of the 180th meridian. Cannot be used with <strong>center</strong>, <strong>width</strong>, or <strong>height</strong> parameters.
        :type bbox: str
        :param view: Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-api/maps-api-documentation-raster/raster-tile\">documentation</a> for an explanation of how this works in live services.
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_staticimage_get_serialize(
            version_number=version_number,
            layer=layer,
            style=style,
            format=format,
            zoom=zoom,
            center=center,
            width=width,
            height=height,
            bbox=bbox,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '403': None,
            '500': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _map_version_number_staticimage_get_serialize(
        self,
        version_number,
        layer,
        style,
        format,
        zoom,
        center,
        width,
        height,
        bbox,
        view,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if version_number is not None:
            _path_params['versionNumber'] = version_number
        # process the query parameters
        if layer is not None:
            
            _query_params.append(('layer', layer))
            
        if style is not None:
            
            _query_params.append(('style', style))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if zoom is not None:
            
            _query_params.append(('zoom', zoom))
            
        if center is not None:
            
            _query_params.append(('center', center))
            
        if width is not None:
            
            _query_params.append(('width', width))
            
        if height is not None:
            
            _query_params.append(('height', height))
            
        if bbox is not None:
            
            _query_params.append(('bbox', bbox))
            
        if view is not None:
            
            _query_params.append(('view', view))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/map/{versionNumber}/staticimage',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def map_version_number_tile_layer_style_zoom_xy_format_get(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1.")],
        layer: Annotated[StrictStr, Field(description="Layer of tile to be rendered. <em>Hybrid</em> and <em>labels</em> are intended for layering with other data and are only available in <em>png</em> format.")],
        style: Annotated[StrictStr, Field(description="Style of tile to be rendered")],
        zoom: Annotated[StrictInt, Field(description="Zoom level of tile to be rendered")],
        x: Annotated[StrictInt, Field(description="x coordinate of tile on zoom grid")],
        y: Annotated[StrictInt, Field(description="y coordinate of tile on zoom grid")],
        format: Annotated[StrictStr, Field(description="Format of the response.")],
        tile_size: Annotated[Optional[StrictInt], Field(description="Tile dimensions in pixels. <em>512</em> is only available for the <em>main</em> style and <em>basic</em> or <em>labels</em> layers.")] = None,
        view: Annotated[Optional[StrictStr], Field(description="Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-sdk-web/functional-examples#geopolitical-views\">documentation</a> for an explanation of how this works in live services.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Tile

        The Maps API Raster Service delivers raster tiles, which are representations of square sections of map data.

        :param version_number: Version of the service to call. The current version is 1. (required)
        :type version_number: int
        :param layer: Layer of tile to be rendered. <em>Hybrid</em> and <em>labels</em> are intended for layering with other data and are only available in <em>png</em> format. (required)
        :type layer: str
        :param style: Style of tile to be rendered (required)
        :type style: str
        :param zoom: Zoom level of tile to be rendered (required)
        :type zoom: int
        :param x: x coordinate of tile on zoom grid (required)
        :type x: int
        :param y: y coordinate of tile on zoom grid (required)
        :type y: int
        :param format: Format of the response. (required)
        :type format: str
        :param tile_size: Tile dimensions in pixels. <em>512</em> is only available for the <em>main</em> style and <em>basic</em> or <em>labels</em> layers.
        :type tile_size: int
        :param view: Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-sdk-web/functional-examples#geopolitical-views\">documentation</a> for an explanation of how this works in live services.
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_tile_layer_style_zoom_xy_format_get_serialize(
            version_number=version_number,
            layer=layer,
            style=style,
            zoom=zoom,
            x=x,
            y=y,
            format=format,
            tile_size=tile_size,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '302': None,
            '400': None,
            '403': None,
            '410': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def map_version_number_tile_layer_style_zoom_xy_format_get_with_http_info(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1.")],
        layer: Annotated[StrictStr, Field(description="Layer of tile to be rendered. <em>Hybrid</em> and <em>labels</em> are intended for layering with other data and are only available in <em>png</em> format.")],
        style: Annotated[StrictStr, Field(description="Style of tile to be rendered")],
        zoom: Annotated[StrictInt, Field(description="Zoom level of tile to be rendered")],
        x: Annotated[StrictInt, Field(description="x coordinate of tile on zoom grid")],
        y: Annotated[StrictInt, Field(description="y coordinate of tile on zoom grid")],
        format: Annotated[StrictStr, Field(description="Format of the response.")],
        tile_size: Annotated[Optional[StrictInt], Field(description="Tile dimensions in pixels. <em>512</em> is only available for the <em>main</em> style and <em>basic</em> or <em>labels</em> layers.")] = None,
        view: Annotated[Optional[StrictStr], Field(description="Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-sdk-web/functional-examples#geopolitical-views\">documentation</a> for an explanation of how this works in live services.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Tile

        The Maps API Raster Service delivers raster tiles, which are representations of square sections of map data.

        :param version_number: Version of the service to call. The current version is 1. (required)
        :type version_number: int
        :param layer: Layer of tile to be rendered. <em>Hybrid</em> and <em>labels</em> are intended for layering with other data and are only available in <em>png</em> format. (required)
        :type layer: str
        :param style: Style of tile to be rendered (required)
        :type style: str
        :param zoom: Zoom level of tile to be rendered (required)
        :type zoom: int
        :param x: x coordinate of tile on zoom grid (required)
        :type x: int
        :param y: y coordinate of tile on zoom grid (required)
        :type y: int
        :param format: Format of the response. (required)
        :type format: str
        :param tile_size: Tile dimensions in pixels. <em>512</em> is only available for the <em>main</em> style and <em>basic</em> or <em>labels</em> layers.
        :type tile_size: int
        :param view: Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-sdk-web/functional-examples#geopolitical-views\">documentation</a> for an explanation of how this works in live services.
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_tile_layer_style_zoom_xy_format_get_serialize(
            version_number=version_number,
            layer=layer,
            style=style,
            zoom=zoom,
            x=x,
            y=y,
            format=format,
            tile_size=tile_size,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '302': None,
            '400': None,
            '403': None,
            '410': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def map_version_number_tile_layer_style_zoom_xy_format_get_without_preload_content(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1.")],
        layer: Annotated[StrictStr, Field(description="Layer of tile to be rendered. <em>Hybrid</em> and <em>labels</em> are intended for layering with other data and are only available in <em>png</em> format.")],
        style: Annotated[StrictStr, Field(description="Style of tile to be rendered")],
        zoom: Annotated[StrictInt, Field(description="Zoom level of tile to be rendered")],
        x: Annotated[StrictInt, Field(description="x coordinate of tile on zoom grid")],
        y: Annotated[StrictInt, Field(description="y coordinate of tile on zoom grid")],
        format: Annotated[StrictStr, Field(description="Format of the response.")],
        tile_size: Annotated[Optional[StrictInt], Field(description="Tile dimensions in pixels. <em>512</em> is only available for the <em>main</em> style and <em>basic</em> or <em>labels</em> layers.")] = None,
        view: Annotated[Optional[StrictStr], Field(description="Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-sdk-web/functional-examples#geopolitical-views\">documentation</a> for an explanation of how this works in live services.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Tile

        The Maps API Raster Service delivers raster tiles, which are representations of square sections of map data.

        :param version_number: Version of the service to call. The current version is 1. (required)
        :type version_number: int
        :param layer: Layer of tile to be rendered. <em>Hybrid</em> and <em>labels</em> are intended for layering with other data and are only available in <em>png</em> format. (required)
        :type layer: str
        :param style: Style of tile to be rendered (required)
        :type style: str
        :param zoom: Zoom level of tile to be rendered (required)
        :type zoom: int
        :param x: x coordinate of tile on zoom grid (required)
        :type x: int
        :param y: y coordinate of tile on zoom grid (required)
        :type y: int
        :param format: Format of the response. (required)
        :type format: str
        :param tile_size: Tile dimensions in pixels. <em>512</em> is only available for the <em>main</em> style and <em>basic</em> or <em>labels</em> layers.
        :type tile_size: int
        :param view: Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-sdk-web/functional-examples#geopolitical-views\">documentation</a> for an explanation of how this works in live services.
        :type view: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_tile_layer_style_zoom_xy_format_get_serialize(
            version_number=version_number,
            layer=layer,
            style=style,
            zoom=zoom,
            x=x,
            y=y,
            format=format,
            tile_size=tile_size,
            view=view,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '302': None,
            '400': None,
            '403': None,
            '410': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _map_version_number_tile_layer_style_zoom_xy_format_get_serialize(
        self,
        version_number,
        layer,
        style,
        zoom,
        x,
        y,
        format,
        tile_size,
        view,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if version_number is not None:
            _path_params['versionNumber'] = version_number
        if layer is not None:
            _path_params['layer'] = layer
        if style is not None:
            _path_params['style'] = style
        if zoom is not None:
            _path_params['zoom'] = zoom
        if x is not None:
            _path_params['X'] = x
        if y is not None:
            _path_params['Y'] = y
        if format is not None:
            _path_params['format'] = format
        # process the query parameters
        if tile_size is not None:
            
            _query_params.append(('tileSize', tile_size))
            
        if view is not None:
            
            _query_params.append(('view', view))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/map/{versionNumber}/tile/{layer}/{style}/{zoom}/{X}/{Y}.{format}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


