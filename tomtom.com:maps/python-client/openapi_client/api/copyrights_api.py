# coding: utf-8

"""
    Maps

    The Maps API web services suite offers the following APIs:   - Raster   The Maps Raster API renders map data that is divided into gridded sections called tiles. Tiles are square images (png or jpg format) in various sizes which are available at 19 different zoom levels, ranging from 0 to 20. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 20, the world is divided into 2<sup>40</sup> tiles.   - Vector   Similar to Maps Raster API, the Maps Vector API serves data on different zoom level ranging from 0 to 22. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 22, the world is divided into 2<sup>44</sup> tiles.   The Maps Vector Service delivers geographic map data packaged in a vector representation of squared sections called vector tiles. Each tile includes pre-defined collections of map features (points, lines, road shapes, water polygons, building footprints, ect.) delivered in one of the specified vector formats. Format of the tile is formally described using protobuf schema.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class CopyrightsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def map_version_number_copyrights_caption_format_get(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1.")],
        format: Annotated[StrictStr, Field(description="Format of the response")],
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method. Only used when format is jsonp")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Captions

        This API returns copyright captions for the map service.

        :param version_number: Version of the service to call. The current version is 1. (required)
        :type version_number: int
        :param format: Format of the response (required)
        :type format: str
        :param param_callback: Specifies the jsonp callback method. Only used when format is jsonp
        :type param_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_copyrights_caption_format_get_serialize(
            version_number=version_number,
            format=format,
            param_callback=param_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '304': None,
            '400': None,
            '403': None,
            '410': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def map_version_number_copyrights_caption_format_get_with_http_info(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1.")],
        format: Annotated[StrictStr, Field(description="Format of the response")],
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method. Only used when format is jsonp")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Captions

        This API returns copyright captions for the map service.

        :param version_number: Version of the service to call. The current version is 1. (required)
        :type version_number: int
        :param format: Format of the response (required)
        :type format: str
        :param param_callback: Specifies the jsonp callback method. Only used when format is jsonp
        :type param_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_copyrights_caption_format_get_serialize(
            version_number=version_number,
            format=format,
            param_callback=param_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '304': None,
            '400': None,
            '403': None,
            '410': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def map_version_number_copyrights_caption_format_get_without_preload_content(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1.")],
        format: Annotated[StrictStr, Field(description="Format of the response")],
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method. Only used when format is jsonp")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Captions

        This API returns copyright captions for the map service.

        :param version_number: Version of the service to call. The current version is 1. (required)
        :type version_number: int
        :param format: Format of the response (required)
        :type format: str
        :param param_callback: Specifies the jsonp callback method. Only used when format is jsonp
        :type param_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_copyrights_caption_format_get_serialize(
            version_number=version_number,
            format=format,
            param_callback=param_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '304': None,
            '400': None,
            '403': None,
            '410': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _map_version_number_copyrights_caption_format_get_serialize(
        self,
        version_number,
        format,
        param_callback,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if version_number is not None:
            _path_params['versionNumber'] = version_number
        if format is not None:
            _path_params['format'] = format
        # process the query parameters
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/map/{versionNumber}/copyrights/caption.{format}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def map_version_number_copyrights_format_get(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1")],
        format: Annotated[StrictStr, Field(description="Format of the response")],
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method. Only used when format is jsonp")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Copyrights whole world

        The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for the whole world.

        :param version_number: Version of the service to call. The current version is 1 (required)
        :type version_number: int
        :param format: Format of the response (required)
        :type format: str
        :param param_callback: Specifies the jsonp callback method. Only used when format is jsonp
        :type param_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_copyrights_format_get_serialize(
            version_number=version_number,
            format=format,
            param_callback=param_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '304': None,
            '400': None,
            '403': None,
            '410': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def map_version_number_copyrights_format_get_with_http_info(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1")],
        format: Annotated[StrictStr, Field(description="Format of the response")],
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method. Only used when format is jsonp")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Copyrights whole world

        The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for the whole world.

        :param version_number: Version of the service to call. The current version is 1 (required)
        :type version_number: int
        :param format: Format of the response (required)
        :type format: str
        :param param_callback: Specifies the jsonp callback method. Only used when format is jsonp
        :type param_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_copyrights_format_get_serialize(
            version_number=version_number,
            format=format,
            param_callback=param_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '304': None,
            '400': None,
            '403': None,
            '410': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def map_version_number_copyrights_format_get_without_preload_content(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1")],
        format: Annotated[StrictStr, Field(description="Format of the response")],
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method. Only used when format is jsonp")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Copyrights whole world

        The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for the whole world.

        :param version_number: Version of the service to call. The current version is 1 (required)
        :type version_number: int
        :param format: Format of the response (required)
        :type format: str
        :param param_callback: Specifies the jsonp callback method. Only used when format is jsonp
        :type param_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_copyrights_format_get_serialize(
            version_number=version_number,
            format=format,
            param_callback=param_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '304': None,
            '400': None,
            '403': None,
            '410': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _map_version_number_copyrights_format_get_serialize(
        self,
        version_number,
        format,
        param_callback,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if version_number is not None:
            _path_params['versionNumber'] = version_number
        if format is not None:
            _path_params['format'] = format
        # process the query parameters
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/map/{versionNumber}/copyrights.{format}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def map_version_number_copyrights_min_lon_min_lat_max_lon_max_lat_format_get(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1")],
        format: Annotated[StrictStr, Field(description="Format of the response")],
        min_lon: Annotated[Union[StrictFloat, StrictInt], Field(description="Minimum longitude coordinate of bounding box defined in terms of latitude/longitude.")],
        min_lat: Annotated[Union[StrictFloat, StrictInt], Field(description="Minimum latitude coordinate of bounding box defined in terms of latitude/longitude.")],
        max_lon: Annotated[Union[StrictFloat, StrictInt], Field(description="Maximum longitude coordinate of bounding box defined in terms of latitude/longitude.")],
        max_lat: Annotated[Union[StrictFloat, StrictInt], Field(description="Maximum latitude coordinate of bounding box defined in terms of latitude/longitude.")],
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method. Only used when format is jsonp.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Copyrights bounding box

        The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for a specific bounding box.

        :param version_number: Version of the service to call. The current version is 1 (required)
        :type version_number: int
        :param format: Format of the response (required)
        :type format: str
        :param min_lon: Minimum longitude coordinate of bounding box defined in terms of latitude/longitude. (required)
        :type min_lon: float
        :param min_lat: Minimum latitude coordinate of bounding box defined in terms of latitude/longitude. (required)
        :type min_lat: float
        :param max_lon: Maximum longitude coordinate of bounding box defined in terms of latitude/longitude. (required)
        :type max_lon: float
        :param max_lat: Maximum latitude coordinate of bounding box defined in terms of latitude/longitude. (required)
        :type max_lat: float
        :param param_callback: Specifies the jsonp callback method. Only used when format is jsonp.
        :type param_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_copyrights_min_lon_min_lat_max_lon_max_lat_format_get_serialize(
            version_number=version_number,
            format=format,
            min_lon=min_lon,
            min_lat=min_lat,
            max_lon=max_lon,
            max_lat=max_lat,
            param_callback=param_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '304': None,
            '400': None,
            '401': None,
            '403': None,
            '410': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def map_version_number_copyrights_min_lon_min_lat_max_lon_max_lat_format_get_with_http_info(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1")],
        format: Annotated[StrictStr, Field(description="Format of the response")],
        min_lon: Annotated[Union[StrictFloat, StrictInt], Field(description="Minimum longitude coordinate of bounding box defined in terms of latitude/longitude.")],
        min_lat: Annotated[Union[StrictFloat, StrictInt], Field(description="Minimum latitude coordinate of bounding box defined in terms of latitude/longitude.")],
        max_lon: Annotated[Union[StrictFloat, StrictInt], Field(description="Maximum longitude coordinate of bounding box defined in terms of latitude/longitude.")],
        max_lat: Annotated[Union[StrictFloat, StrictInt], Field(description="Maximum latitude coordinate of bounding box defined in terms of latitude/longitude.")],
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method. Only used when format is jsonp.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Copyrights bounding box

        The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for a specific bounding box.

        :param version_number: Version of the service to call. The current version is 1 (required)
        :type version_number: int
        :param format: Format of the response (required)
        :type format: str
        :param min_lon: Minimum longitude coordinate of bounding box defined in terms of latitude/longitude. (required)
        :type min_lon: float
        :param min_lat: Minimum latitude coordinate of bounding box defined in terms of latitude/longitude. (required)
        :type min_lat: float
        :param max_lon: Maximum longitude coordinate of bounding box defined in terms of latitude/longitude. (required)
        :type max_lon: float
        :param max_lat: Maximum latitude coordinate of bounding box defined in terms of latitude/longitude. (required)
        :type max_lat: float
        :param param_callback: Specifies the jsonp callback method. Only used when format is jsonp.
        :type param_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_copyrights_min_lon_min_lat_max_lon_max_lat_format_get_serialize(
            version_number=version_number,
            format=format,
            min_lon=min_lon,
            min_lat=min_lat,
            max_lon=max_lon,
            max_lat=max_lat,
            param_callback=param_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '304': None,
            '400': None,
            '401': None,
            '403': None,
            '410': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def map_version_number_copyrights_min_lon_min_lat_max_lon_max_lat_format_get_without_preload_content(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1")],
        format: Annotated[StrictStr, Field(description="Format of the response")],
        min_lon: Annotated[Union[StrictFloat, StrictInt], Field(description="Minimum longitude coordinate of bounding box defined in terms of latitude/longitude.")],
        min_lat: Annotated[Union[StrictFloat, StrictInt], Field(description="Minimum latitude coordinate of bounding box defined in terms of latitude/longitude.")],
        max_lon: Annotated[Union[StrictFloat, StrictInt], Field(description="Maximum longitude coordinate of bounding box defined in terms of latitude/longitude.")],
        max_lat: Annotated[Union[StrictFloat, StrictInt], Field(description="Maximum latitude coordinate of bounding box defined in terms of latitude/longitude.")],
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method. Only used when format is jsonp.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Copyrights bounding box

        The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for a specific bounding box.

        :param version_number: Version of the service to call. The current version is 1 (required)
        :type version_number: int
        :param format: Format of the response (required)
        :type format: str
        :param min_lon: Minimum longitude coordinate of bounding box defined in terms of latitude/longitude. (required)
        :type min_lon: float
        :param min_lat: Minimum latitude coordinate of bounding box defined in terms of latitude/longitude. (required)
        :type min_lat: float
        :param max_lon: Maximum longitude coordinate of bounding box defined in terms of latitude/longitude. (required)
        :type max_lon: float
        :param max_lat: Maximum latitude coordinate of bounding box defined in terms of latitude/longitude. (required)
        :type max_lat: float
        :param param_callback: Specifies the jsonp callback method. Only used when format is jsonp.
        :type param_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_copyrights_min_lon_min_lat_max_lon_max_lat_format_get_serialize(
            version_number=version_number,
            format=format,
            min_lon=min_lon,
            min_lat=min_lat,
            max_lon=max_lon,
            max_lat=max_lat,
            param_callback=param_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '304': None,
            '400': None,
            '401': None,
            '403': None,
            '410': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _map_version_number_copyrights_min_lon_min_lat_max_lon_max_lat_format_get_serialize(
        self,
        version_number,
        format,
        min_lon,
        min_lat,
        max_lon,
        max_lat,
        param_callback,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if version_number is not None:
            _path_params['versionNumber'] = version_number
        if format is not None:
            _path_params['format'] = format
        if min_lon is not None:
            _path_params['minLon'] = min_lon
        if min_lat is not None:
            _path_params['minLat'] = min_lat
        if max_lon is not None:
            _path_params['maxLon'] = max_lon
        if max_lat is not None:
            _path_params['maxLat'] = max_lat
        # process the query parameters
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/map/{versionNumber}/copyrights/{minLon}/{minLat}/{maxLon}/{maxLat}.{format}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def map_version_number_copyrights_zoom_xy_format_get(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1")],
        format: Annotated[StrictStr, Field(description="Format of the response")],
        zoom: Annotated[StrictInt, Field(description="Zoom level of tile to be rendered. Only used for tile-level copyright calls.")],
        x: Annotated[StrictInt, Field(description="X coordinate of the tile on zoom grid. Only used for tile-level copyright calls.")],
        y: Annotated[StrictInt, Field(description="Y coordinate of the tile on zoom grid. Only used for tile-level copyright calls.")],
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method. Only used when format is jsonp.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Copyrights tile

        The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for the a specific map tile.

        :param version_number: Version of the service to call. The current version is 1 (required)
        :type version_number: int
        :param format: Format of the response (required)
        :type format: str
        :param zoom: Zoom level of tile to be rendered. Only used for tile-level copyright calls. (required)
        :type zoom: int
        :param x: X coordinate of the tile on zoom grid. Only used for tile-level copyright calls. (required)
        :type x: int
        :param y: Y coordinate of the tile on zoom grid. Only used for tile-level copyright calls. (required)
        :type y: int
        :param param_callback: Specifies the jsonp callback method. Only used when format is jsonp.
        :type param_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_copyrights_zoom_xy_format_get_serialize(
            version_number=version_number,
            format=format,
            zoom=zoom,
            x=x,
            y=y,
            param_callback=param_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '304': None,
            '400': None,
            '401': None,
            '403': None,
            '410': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def map_version_number_copyrights_zoom_xy_format_get_with_http_info(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1")],
        format: Annotated[StrictStr, Field(description="Format of the response")],
        zoom: Annotated[StrictInt, Field(description="Zoom level of tile to be rendered. Only used for tile-level copyright calls.")],
        x: Annotated[StrictInt, Field(description="X coordinate of the tile on zoom grid. Only used for tile-level copyright calls.")],
        y: Annotated[StrictInt, Field(description="Y coordinate of the tile on zoom grid. Only used for tile-level copyright calls.")],
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method. Only used when format is jsonp.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Copyrights tile

        The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for the a specific map tile.

        :param version_number: Version of the service to call. The current version is 1 (required)
        :type version_number: int
        :param format: Format of the response (required)
        :type format: str
        :param zoom: Zoom level of tile to be rendered. Only used for tile-level copyright calls. (required)
        :type zoom: int
        :param x: X coordinate of the tile on zoom grid. Only used for tile-level copyright calls. (required)
        :type x: int
        :param y: Y coordinate of the tile on zoom grid. Only used for tile-level copyright calls. (required)
        :type y: int
        :param param_callback: Specifies the jsonp callback method. Only used when format is jsonp.
        :type param_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_copyrights_zoom_xy_format_get_serialize(
            version_number=version_number,
            format=format,
            zoom=zoom,
            x=x,
            y=y,
            param_callback=param_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '304': None,
            '400': None,
            '401': None,
            '403': None,
            '410': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def map_version_number_copyrights_zoom_xy_format_get_without_preload_content(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1")],
        format: Annotated[StrictStr, Field(description="Format of the response")],
        zoom: Annotated[StrictInt, Field(description="Zoom level of tile to be rendered. Only used for tile-level copyright calls.")],
        x: Annotated[StrictInt, Field(description="X coordinate of the tile on zoom grid. Only used for tile-level copyright calls.")],
        y: Annotated[StrictInt, Field(description="Y coordinate of the tile on zoom grid. Only used for tile-level copyright calls.")],
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method. Only used when format is jsonp.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Copyrights tile

        The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for the a specific map tile.

        :param version_number: Version of the service to call. The current version is 1 (required)
        :type version_number: int
        :param format: Format of the response (required)
        :type format: str
        :param zoom: Zoom level of tile to be rendered. Only used for tile-level copyright calls. (required)
        :type zoom: int
        :param x: X coordinate of the tile on zoom grid. Only used for tile-level copyright calls. (required)
        :type x: int
        :param y: Y coordinate of the tile on zoom grid. Only used for tile-level copyright calls. (required)
        :type y: int
        :param param_callback: Specifies the jsonp callback method. Only used when format is jsonp.
        :type param_callback: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_copyrights_zoom_xy_format_get_serialize(
            version_number=version_number,
            format=format,
            zoom=zoom,
            x=x,
            y=y,
            param_callback=param_callback,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '304': None,
            '400': None,
            '401': None,
            '403': None,
            '410': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _map_version_number_copyrights_zoom_xy_format_get_serialize(
        self,
        version_number,
        format,
        zoom,
        x,
        y,
        param_callback,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if version_number is not None:
            _path_params['versionNumber'] = version_number
        if format is not None:
            _path_params['format'] = format
        if zoom is not None:
            _path_params['zoom'] = zoom
        if x is not None:
            _path_params['X'] = x
        if y is not None:
            _path_params['Y'] = y
        # process the query parameters
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/map/{versionNumber}/copyrights/{zoom}/{X}/{Y}.{format}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


